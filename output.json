{
  "team_id": "aline123",
  "items": [
    {
      "title": "It's OK to postpone your interviews if you're not ready",
      "content": "At interviewing.io, we’ve seen hundreds of thousands of engineers go through job searches, and the biggest mistakes we see people make are all variations on the same theme: not postponing their interview when they aren’t ready.\n\nBoth of these situations are extremely common, but they’re both preventable. You can just ask to postpone. There are a few edge cases where that’s not a good idea, but in most situations, it’s the right thing to do.\n\nIf you’re applying to a large company with a centralized process (in other words, a process where you interview first and get matched with a team later), postponing is almost always OK. These companies are perpetually hiring, and their open roles are evergreen.1\n\nThe only time when postponing isn’t a good idea is when you’re applying to a very small company that has just one open headcount. In that scenario, it is possible that postponing will cost you the opportunity because they’ll choose another candidate. However, you can ask how likely that is to happen, up front.\n\nEvery recruiter, in every job search, will tell you that time is of the essence because of all the other candidates in the pipeline. Most of the time, that is irrelevant and just something they say to create an artificial sense of urgency. There are always other candidates in the pipeline because the roles are evergreen. But they have nothing to do with your prospects.\n\nYou can use this text verbatim when postponing your interviews, and, with some small edits, you can even use it several times (e.g., before the phone screen and then again before the onsite).\n\nI’ve seen many candidates ask for 2 weeks because that feels like a reasonable thing to ask for, only to have it blow up in their face when they realize they need to ask for another extension (which is still worth doing but harder because the company may think you’re taking them for a ride). If you need two months, ask for two months.\n\nThis section is extra credit, but once you get comfortable with postponing your interviews when you’re not prepared, you can use the same skills to batch your interviews and ultimately control the timing of your job search.\n\nWhat does it mean to control the timing of your job search? Ideally, you want all of your offers to come in at the same time, both because it maximizes optionality (one company that arbitrarily offers first doesn’t rush you into making a decision) and maximizes leverage (you can negotiate from a position of power).\n\nThe big insight here is that, except for the edge cases we discussed above, a recruiting process can be paused at any point.\n\nIn other words, you can do a bunch of outreach to companies, then do a bunch of enthusiastic recruiter calls, and THEN pause all the processes until you’re prepared to do technical phone screens.\n\nThe onsite, on the other hand, isn’t just meant to cut poor performers. It’s at once a deeper dive into your technical ability and a way to gauge fit. If you’ll be interviewing with your future team (typical at companies with a decentralized process), it’s also meant to assess your ability to work together, collaborate on hard things, complement the team's existing skillset, and so on. It usually has some coding (to verify that your technical phone screen wasn’t a fluke), but the focus is usually on system design and behavioral interviews2, which are also the interviews commonly used for leveling decisions.\n\nSome companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.↩\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/its-ok-to-postpone-your-interviews-if-youre-not-ready",
      "author": "Aline Lerner",
      "user_id": ""
    },
    {
      "title": "Why resume writing is snake oil",
      "content": "I just asked ChatGPT to size the global resume writing industry. Here’s what it had to say:\n\nI don’t know if these numbers are exactly true, and I don't know what portion of that is resume writing for engineers specifically, but it doesn’t really matter. I am certain that they are directionally correct. As the market has gotten worse, I’ve heard more and more job seekers ask for resume reviews and rewrites, and I’ve seen many companies in the interview prep space start offering resume reviews.\n\nA few days ago, I sawthis post on Reddit. It was a leaked internal set of hiring requirements (sometimes called a “hiring spec”) that looked like this:\n\nYes, it’s real. As someone who’s been in hiring for over a decade, I’m certain of it. And not only is it real, but it’s routine. It’s business as usual.\n\nI’ve been a head of talent at top startups, and I used to run my own recruiting agency where I hired for a bunch of companies who have since become household names. When I worked as an agency recruiter 10 years ago, companies regularly shared documents like this one with me. The only difference between then and now is the idea of a “diversity bonus.” Everything else hasn’t changed in a decade.\n\nDocuments like this are why I quit recruiting to start interviewing.io.\n\nAnd documents like this are the reason that the entirety of the resume writing profession is a snake oil pit.\n\nIn 2024, we ran astudywhere we asked 76 recruiters to look at resumes and indicate which candidates they’d want to interview. Recruiters are most likely to contact you if:\n\nWhat's missing? Things like, for example, having a quantifiable impact or demonstrating teamwork. Essentially, everything recruiters look for is stuff that you either have or you don't.\n\nIn this same study, we also learned that when recruiters do look at resumes, they spend an average of 30 seconds reviewing them. That's not enough time to read every bullet. Instead, they are mainly skimming for recognizable companies and schools.\n\nHere is an excellent example,also from Reddit, that makes this difference very clear.\n\nThis resume certainly passes the skim-test: good companies, appropriate roles, and a good university too. It's only when you actually spend more than 30 seconds reading the resume that you learn that not only is this resume obviously fake, but it also celebrates accomplishments like \"Spread Herpes STD to 60% of intern team.” And yet, it got a 90% callback rate. Recruiters just aren't reading the details.\n\nIn other words, either you already have what recruiters are looking for (which often may be different than what’s explicitly listed in a job description… because they certainly aren’t sharing the real “hiring spec”) or you don’t. If you have it, then you don’t need a resume writer — though it’s always smart to make it easier for recruiters to find the things they’re looking for. If you don’t have what they’re looking for, no amount of agonizing over how you present yourself is going to move the needle.\n\nSo, if recruiters aren’t reading and are just skimming for brands, why do people agonize over their resumes and give money to resume writers?\n\nIn interviewing.io’s Discord server, I regularly see requests for resume reviews. I also see other interview prep companies charging money for resume reviews. Presumably they charge because the demand is there. But why are people willing to pay for something that is completely useless?\n\nI think it’s a mix of misinformation and the desire for control.\n\nThe other reason is control. Job searches are intimidating, and putting yourself out there is hard. It’s much easier to retreat to the comfort of polishing up your bullet points because it’s something you can control. You get into a routine, rewrite your bullets, and upload your resume to a bunch of places. Then when you don’t hear back, you retreat to familiar ground, grind on your bullets some more, and rinse and repeat. Because it’s easier to believe that if you can just get your bullets right, you’ll finally hear back. That narrative sure beats out the idea that no one is reading your resume no matter how much you fine-tune it.\n\nIf you’re fortunate enough to have top brands on your resume, cleaning it up can be a good use of your time. I still wouldn’t hire a resume writer because the details don’t matter very much. Just make sure that recruiters can easily spot the brands.\n\nHere’s an example. Take a look at the before and after screenshots of the resume below.\n\nThis resume belongs to one of our users who was kind enough to let us share it. He actually has two of the three things that recruiters look for: FAANG experience and a niche title (ML engineer). But both are buried! And the section that gets the most attention is wasted on undergraduate awards.\n\nAs you can see, he spent almost 3 years at Apple, but a recruiter skimming his resume might not notice that because it was a while ago. Instead, he showcases an undergrad award and some technologies/languages that he knows. Neither of those is nearly as useful to recruiters as FAANG experience.\n\nHis current title is also ML engineer, and one at the Principal level at that. But it wasn’t always: He went from back-end to SRE to a little bit of everything to ML, and because of that, it’s possible a recruiter would miss it as well.\n\nWe edited this candidate’s resume to put all the things recruiters look for at the very top of the resume and moved the buzzword soup to the bottom. This candidate is obviously well-positioned because he has FAANG experience, several top schools, and niche skills — but before, many recruiters didn’t spot them. After he made these changes, the number of interviews he got increased by 8X.\n\nNote that we didn’t really rewrite anything. We just moved stuff around. You can do this yourself without needing a professional writer.\n\nIf you’re like most people, you don’t have top brands on their resume, so no amount of rewriting is going to move the needle much. Instead of agonizing over it, stop applying and start doing outreach to hiring managers. It’s your best shot to get noticed and to get someone to look at you as a human being, instead of a collection of brands.Here’s how to do it. For a deeper dive into both resume writing and how to get in the door, you can readBeyond Cracking the Coding Interview(bothchapters are also available for free).\n\nWill side projects help you get a job? Good question and one that should be teased apart a bit. Getting a job has two components: getting in the door and doing well in interviews. In general, side projects are useless for getting in the door. Yes, every once in a while, a side project goes viral. Or if you build something really cool with your target company’s API, it can get some attention. But that’s pretty rare. Most side projects that adorn resumes go completely unnoticed.  When it comes to performing well in interviews, it depends. If the companies you’re interviewing at test you on practical skills, then they can be a great use of time. They can also be a great use of time to help you understand how APIs work, how the internet works, how clients and servers talk to each other, and so on. But if the companies you’re targeting primarily ask algorithmic questions, then side projects probably aren’t the best use of time. Finally, will side projects make you a better engineer? Absolutely. And that’s the best reason to do them. But that’s not quite the same as getting a job, is it? Once you're actively looking for a job, your time is better spent on interview prep and outreach.↩\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/why-resume-writing-is-snake-oil",
      "author": "Aline Lerner",
      "user_id": ""
    },
    {
      "title": "Stop trying to make recruiters think, or, why your resume is bad and how to fix it",
      "content": "If you don’t have top-tier brands, the best bang for your buck is to switch from online applications to hiring manager outreach.Here’s how to do it.\n\nWith that said, I know that no matter what I say, people will still grind on their resumes instead of doing outreach. Grinding on resumes is safe. Outreach is scary and opens you up to personal (rather than impersonal) rejection. So, look, if you’re going to dosomethingto your resume, let’s make sure that that something is low-effort and high-return. Unlike the endless resume tweaking that most candidates do, these changes directly address how recruiters actually read resumes.\n\n❌ Results-driven full-stack engineer with a passion for scalable systems and user-centric design✅ Senior engineer with 3 years at Amazon, promoted twice in 3 years (2X the company average)1\n\nThis is simple but effective: only include your GPA if it's 3.8 or higher2. A middling GPA doesn't help your case and might inadvertently signal academic mediocrity.\n\nIf you've worked at Google or Facebook, recruiters instantly get what kind of company you're coming from. But when you have \"TechStartup123\" on your resume, they have no idea what they're looking at or how impressive it might be.\n\nFor lesser-known companies, include a one-line description explaining what the company does, along with any impressive metrics or investors:\n\n❌ \"Software Engineer, DevTools Inc.\"✅ \"Software Engineer, DevTools Inc. ($50M Series B from Sequoia, 2M+ active users)\"\n\nThis simple addition provides crucial context that helps recruiters evaluate your experience properly. Without it, they might discount valuable experience simply because they don't recognize the company name.\n\nHere's a common mistake: listing each role at the same company as if they were separate jobs. This can make recruiters think you've job-hopped, which is often seen as a red flag.\n\nInstead, group different roles under the same company heading:\n\n❌ Listing separate entries for \"Junior Developer at XYZ\" and \"Senior Developer at XYZ\"✅ \"XYZ Company - Senior Developer (2021-Present) - Junior Developer (2019-2021)Promoted in 2 years vs. company average of 3.5 years\"\n\nThis one is particularly crucial if you have a foreign-sounding name and/or education outside the US. I've seen many qualified candidates get passed over because recruiters assumed they needed visa sponsorship when they actually didn't. Don't leave this to chance.\n\nMake your work status explicit in your header or summary section:\n\n❌ No mention of work authorization (leaving recruiters to guess)✅ \"US Citizen\" or \"Green Card Holder\" or \"Authorized to work in the US without visa sponsorship\"\n\nIf you've switched careers, your resume can look confusing without proper context. Recruiters might struggle to understand why someone with your background is applying for this role, or they might not recognize how your previous experience translates to your current trajectory.\n\n❌ Listing previous career experience with no explanation of your transition✅ \"Transitioned from marketing to software engineering in 2021 after completing a bootcamp\" or \"Former accountant who pivoted to data science through self-study and online courses while continuing full-time work\"\n\nThis context helps recruiters understand your timeline and puts your current title and achievements in perspective. Without it, you risk serious misinterpretation:\n\nBoth misinterpretations can be fatal to your application. By providing a clear timeline of your transition, you help recruiters accurately gauge your experience level and set appropriate expectations. This transparency also demonstrates valuable traits like adaptability and determination.\n\n❌ DON'T include mundane or irrelevant details from your previous career that add nothing to your current narrative. Your three years as a retail associate before becoming a developer probably won't strengthen your software engineering application.✅ DO highlight prestigious achievements from your previous career. If you were, say, a concert pianist, a lawyer who graduated from a top-tier law school, or a management consultant at McKinsey, absolutely include that. These signal that you're smart and high-achieving, regardless of domain.\n\nIf you do all these things, you may or may not see a return. After all, even the impact of these tweaks pales in comparison to having top brands on your resume. But, given that these will take you a few minutes to do, it doesn’t hurt. Here’s the TL;DR:\n\nI have no idea what the average promotion cadence is at Amazon, and this example is meant to be illustrative rather than accurate, though maybe my readers will tell me the cadence now.↩\n\nI realize this diverges from the advice inBeyond Cracking the Coding Interview, where Gayle recommends including it if it’s 3.0 or more. This is one of the cases where the authors had differing opinions. We’re (mostly) human.↩\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/stop-trying-to-make-recruiters-think-or-why-your-resume-is-bad-and-how-to-fix-it",
      "author": "Aline Lerner",
      "user_id": ""
    },
    {
      "title": "Read nine chapters of Beyond Cracking the Coding Interview for free",
      "content": "Along with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I wrote the official sequel toCracking the Coding Interview. It's fittingly calledBeyond Cracking the Coding Interview..\n\nNow, we're releasing9 chapters of the book for free! There are two PDFs in the linked folder:\n\nTake a look, and let me know what you think. You can reach me ataline@interviewing.io.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/nine-free-chapters-of-beyond-cracking-the-coding-interview",
      "author": "Aline Lerner",
      "user_id": ""
    },
    {
      "title": "We co-wrote the official sequel to Cracking the Coding Interview!",
      "content": "EDIT 2:Read 9 chapters of the book for free!These include:\n\nEDIT:Beyond Cracking the Coding Interviewis out now! Here's the table of contents:\n\nI have some exciting news. Along with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I’m writing the official sequel toCracking the Coding Interview(often called the bible of technical interview prep). It's fittingly calledBeyond Cracking the Coding Interview.\n\nTechnical interviews are much harder today than they used to be. Engineers study for months and routinely get down-leveled despite that.Beyond Cracking the Coding Interview, in addition to covering a bunch of new questions and topics, teaches you how to think instead of memorizing. Grinding and memorization isn’t the way in this market (though in fairness, it’s never really the way). With us, you’ll still have to do the work, of course, but we’ll teach you to work smarter.\n\nWe added at least thirteen new technical topics (I say “at least” because we’re still writing, and it might be more like twenty)—and over 150 new problems. Each problem includes step-by-step walkthroughs, and you can work each problem with our (actually good) AI Interviewer. And of course this book was written in partnership with interviewing.io. We’ve pulled in data from over 100k FAANG mock interviews on interviewing.io, and we include hundreds of curated interview replays from interviewing.io (shared with permission of course) – watch people make mistakes and learn so you’re not doomed to repeat them.\n\nI also spend some time on owning and sharing data on how flawed technical interviewing is and, most importantly,  how to manage your psychology so you can get past that. I see so many engineers opting out of this interview style, arguably for good reason. But you’re leaving a lot of good opportunities on the table, and it doesn’t have to be like that.\n\nPurchases ofBeyond Cracking the Coding Interviewget a $50 discount for interviewing.io. The book costs $45, so it’s not a bad deal. The book is  out in January of 2025, and you canget it on Amazon.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/we-co-wrote-the-official-sequel-to-cracking-the-coding-interview-introducing-beyond-ctci",
      "author": "Aline Lerner",
      "user_id": ""
    },
    {
      "title": "I love meritocracy, but all the recent anti-DEI rhetoric is bad",
      "content": "Today we’ve formalized an important hiring policy at Scale. We hire for MEI: merit, excellence, and intelligence.This is the email I’ve shared with our@scale_AIteam.———————————————————MERITOCRACY AT SCALEIn the wake of our fundraise, I’ve been getting a lot of questions…\n\nThe post got a resounding “Great!” from Elon Musk a half hour later, followed by a wall of accolades from the Twitterverse. Since then, a“meritocracy board”has sprung up as well.\n\nIf their process is indeed like everyone else’s, no matter what they say, they’re no more meritocratic than the companies who tout DEI hiring practices… and are just virtue signaling on Twitter.\n\nI’m delighted that “meritocracy” is no longer a dirty word. But, just saying it isn’t enough. We have to change our hiring practices.We need to stop using meritocracy as a shield to preserve the status quo.If we could instead put into practice the best part of DEI – openness to hiring candidates from non-traditional backgrounds while eliminating the toxic hyperfocus on race and gender and the insistence on equality of outcomes, then we could create a real meritocracy, which is what most reasonable people actually want.1\n\nOn its face, increasing diversity sounds great. Some groups are underrepresented in tech, likely because of inequality of opportunity. Talent is distributed uniformly, opportunity is not. Let’s fix it!\n\nAnd indeed, ostensibly, DEI is hard to argue against because it speaks to our innate desire for fairness and equal access to opportunity. Many DEI leaders honestly believe this. However, despite the good intentions, in practice, DEI tends to laser focus on race and genderoutcomes, and that is hard to arguefor.\n\nOver the years, I’ve seen claims that diverse teams perform better, as well as claims that one must have a diverse workforce if one has a diverse customer base. Though it’s often stated as fact, the former is inconclusive — there are studies with clear results for AND clear results against.2To the best of my knowledge, the latter point is unsubstantiated as well — isn’t the hallmark of a good designer that they be able to design for customers who are different than they are?3\n\nWhat does that mean?In practice, recruiting orgs usually define success by looking at some demographic and its representation in the general population.So, in the case of women in tech, women make up half the U.S. population, so 50% of engineers in an organization should be women. Similarly, 12% of the U.S. population is Black, so for hiring to be equitable, 12% of the engineers in an organization should be Black. Likewise, 19% of the U.S. population is Hispanic, so 19% of engineers should be Hispanic, and so on.\n\nWhat’s the problem with this approach? It does not account for inputs. The most basic input is:  How many female engineers are there in the US? And how many Black or Hispanic engineers are there in the US?\n\nThe answer: not enough. Only 20% of CS graduates in the US are women. And there are also not enough engineers of color to get to race parity either. Only 6% of CS graduates in the US are Black, and only 7% are Hispanic.4\n\nAnd then there’s this issue: What portion of those candidates are even applying to your company in the first place? And what portion of those applicants are actually qualified to do the work? The ONLY way to really take race and gender bias off the table is to do blind as much of the hiring process as possible and then to accept that you may not get the numbers you want but that your outcomes willactuallybe fair.\n\nI promised in the beginning of this post that I’d spill some juicy tidbits. Here goes.\n\nYears ago, we pitched Facebook’s university recruiting team on using us to hire for their intern class. The pitch was thatwe had thousands of college students from all over the U.S.who had done a bunch of mock interviews, and that we knew who the top performers were. Many of our students did NOT come from the handful of top-tier schools that Meta typically recruited from. If they were to recruit through us, they’d have to do way fewer interviews (we had already taken care of technical vetting), and they’d get a much more diverse slice of the population.\n\nOur only process request was that they conduct interviews with students anonymously, on our platform, so they wouldn’t be biased against top-performing students who didn’t go to top schools.\n\nWe didn’t get the gig. The main bit of pushback from Facebook was that anonymity violated guidelines set by the OFCCP.TheOFCCP(Office of Federal Contract Compliance Programs) is part of the U.S. Department of Labor and is “responsible for ensuring that employers doing business with the Federal government comply with the laws and regulations requiring nondiscrimination.” One of the many things that the OFCCP requires you to track, if you do business with the federal government, is the race and gender of your applicants. We couldn’t agree to this. While the requirement makes sense on the surface — as they say, you can’t fix what you can’t measure — in this case, it was a Kafkaesque roadblock to achieving the very thing that the OFCCP is fighting for: reducing discrimination.5\n\nMore broadly, you can’t take an outcomes-based approach unless your inputs are homogenous and the playing field is level. The biggest advocates of DEI will argue, correctly, that the playing field is not level. Given that it’s not level, focusing exclusively on outcomes creates all manners of perverse incentives — the dark side of diversity is the logical conclusion of an outcomes-based approach: incentivizing the selection of candidates based on race and gender and ultimately discriminating against non-URM candidates.\n\nWe’ve worked with companies of all sizes, from seed stage startups to FAANG, and at one point or another, we’ve worked with most FAANGs and FAANG-adjacent companies. We’ve seen it all. In 2022, at the height of diversity fever, one well-known FAANG-adjacent customer approached us with a specific request. Let’s call them AcmeCorp (name obviously changed; they’re a household name, but I don’t want to rake them over the coals publicly because they were a great partner to us until this thing happened).\n\nAcmeCorp’s recruiting team wanted us to do some pre-filtering on the candidates we introduced to them.\n\nWe already do some pre-filtering: location, years of experience, visa status, and obviously historical performance in mock interviews. Only the top few percent of our candidates get to talk to employers.\n\nBut on our platform, everything is candidate driven. We don’t have a searchable candidate database, and we don’t share candidate data with companies. Rather, we list the companies who hire through us, and our top-performing users can connect with them.\n\nOver our lifetime, plenty of companies have approached us asking if they could get access tojusttop-performing women and people of color on our platform. It makes sense. Recruiters are given marching orders to find more “diverse” candidates, and this is the result. And it’s a convenient way to pass on liability. Now, instead of their sourcers having to filter out candidates who aren’t “diverse”, we have to do it.\n\nOf course, we’ve always denied these requests. We’re not a “diversity” platform, and we can’t imagine a world where we’d block what jobs and employers our users could see based on their race and gender (information we don’t collect systematically in the first place).6\n\nHowever, AcmeCorp’s request was more egregious than the rest because it gave us visibility into how many companies were behaving internally when faced with diversity goals. It was common knowledge that many companies were doing diversity-specific sourcing, so we weren’t shocked when we were asked to help with that. What wasn’t common knowledge is that companies were blatantly rejecting qualified applicants who didn’t meet their diversity criteria.\n\nAcmeCorp had a fairly complex candidate filtering process in place, and they wanted us to run that same process on any of our top performers who expressed interest in working there.\n\nHere’s how their process worked. Note that AcmeCorp, like many companies, pays differently depending on where you live.\n\nIn other words, a white man from San Francisco would have no shot at getting an interview at this company — he would be auto-rejected and left to wonder what was wrong with his resume.\n\nWhy did this company take this approach? They were willing to pay top dollar for women and people of color but not for other types of engineers, and they hid behind geography to do it. Because of the geographical element, it’s not as blatant as outright rejecting people based on race and gender, but for all intents and purposes, it’s the same.\n\nOutside of this practice being questionably legal at best, it’s also unethical. You can argue that companies should be able to do outreach to any demographic groups that they want. It’s much harder to argue that it’s ok to reject applicants based on their race and gender.\n\nBut, back to what’s happening today. You don’t just get to say “meritocracy” and be done with it. In practice, meritocratic hiring doesn’t really exist, and what companies call meritocracy is anything but.\n\nFor most sane people, the concept of meritocracy is hard to argue against. Shouldn’t the most qualified person get the job?\n\nUnfortunately, because the definition of “qualified” is murky, meritocracy often becomes a justification for over-indexing on pedigree: where people went to school or where they worked previously.“We just hire the best” often means “we hire people from FAANG, MIT, and Stanford.” Unfortunately, those are proxies for ability, not actual measures of it. Our research has consistently shown that where people go to school isn’t very predictive of what they can do. Where they’ve worked issomewhatpredictive, but it’s not the most important thing.8\n\nDespite that, those are the main criteria that companies use when they decide whom to interview, and because that’s the first step in a hiring funnel, it’s the one that gets applied to the most candidates. Any attempts at making the process meritocratic after the resume review (e.g., training interviewers, doing anonymous interviews) are bound to be less impactful because they affect 10X-100X fewer candidates.\n\nOne of our users got rejected from a top-tier social network company three times… THREE TIMES… based on his resume before he got hired there through us, after doing very well in an anonymous interview. I’ve shared a few diversity horror stories, but the sad reality is that (faux) meritocracy horror stories like this one happen every day. I wish I had a real meritocracy horror story to share, but as far as I know, eng hiring has never been truly meritocratic. If you know otherwise, please do share.\n\nOur data also shows that pedigree has very little bearing on interview performance. Where people went to school has no bearing on their interview performance, and though where people have worked does carry some signal, it’s not nearly as important as other traits — in past research, we’ve found that not having typos/grammatical errors on your resume is a much stronger signal than whether they’ve worked at a top company, as is whether they’ve done a lot of autodidactic work.8\n\nThat’s why posts like the one from Scale AI get my hackles up. You don’t get to say that you’re meritocratic if you’re just scanning resumes for top brands. That’s not meritocracy. It’s co-opting a hot-button word for clout.\n\nSo how do you ensure that your hiring isactuallymeritocratic?\n\nIn arecent study, we looked at how recruiters read resumes and how good they are at finding talent. As you saw above, we learned that recruiters are barely better than a coin flip. Another thing we looked at in the same study was what made them pick certain resumes over others.\n\nThe two traits that were the most predictive of whether a recruiter would pick you? First, whether you had top brands on your resume, and second, whether you were Black or Hispanic. This is how recruiters work today. If you don’t intervene and make changes, today’s competing approaches willbothbe implemented by your team simultaneously, resulting in a farcical chimera of fake meritocracy and outcomes-based diversity goals.\n\nSo what can you actually do, if you, in good faith, want to run a meritocratic hiring process? (By the way, if you believe that talent is distributed uniformly, by definition, this approach will entail being open to talent from traditionally underrepresented backgrounds.)\n\nIf you accept both of these premises — expanding the definition of “underrepresented” and moving away from focusing on brands — the hard work begins.Companies have used resumes (and brands by extension) since time immemorial because they’re easy, and as you saw in our data above, they do carrysomesignal. But even though they carry a little signal, recruiters are not very good at extracting it.\n\nHere’s what you should do to pragmatically and realistically revamp your hiring process to be more meritocratic.I challenge Scale AI and all the leaders on the “meritocracy board” to publicly commit to at least two of these — or to name the specific, actionable approaches they plan to take.\n\nFirst, SLOW DOWN. Inthe study I mentioned above, we saw that recruiters take a median of 31 seconds to judge a resume, but spending just 15 extra seconds reading a resume could improve your accuracy by 34%.\n\nOur second piece of advice is this. More than 20 years ago, Freada Kapor Klein from Kapor Capital coined the term “distance traveled,” referring to what someone accomplished, in the context of where they started. For instance, Kapor Klein recommends that, in their admissions processes, universities should consider not just the number of AP tests a candidate has passed but the number of AP tests taken divided by the total number offered at their high school. For example, if an applicant took 5 AP tests and their school offered 27, that paints a very different picture from another applicant who also took 5 AP tests when that’s the total number offered at their school. Kapor Capital uses distance traveled as one of their metrics for determining which entrepreneurs to fund. One can easily apply this concept to hiring as well.\n\nHere’s what our application form looks like. Steal it if you want.\n\nTo be clear, this is NOT the setup we’re advocating. Here’s what we’d advise instead:\n\nIn fairness, the Scale AI post positioned them as symbiotic. I believe that as well.↩\n\nThere are many sources arguing for and against diversity leading to better-performing teams. Here are some examples:For:https://www.mckinsey.com/featured-insights/diversity-and-inclusion/diversity-wins-how-inclusion-mattersAgainst:https://medium.com/the-liberators/in-depth-the-double-edged-sword-of-diversity-in-teams-765ff72a55da(except for “age diversity”) andhttps://corpgov.law.harvard.edu/2021/05/25/diversity-and-performance-in-entrepreneurial-teams/↩\n\nGetting more women and people of color to study computer science is a worthy cause. Hell, getting anyone who’s historically been marginalized to study computer science is worthwhile. It’s great for our economy, and it’s currently one of the best levers for upward social mobility available. But, while we hope more companies do these things, it is not reasonable to expect that companies can be responsible for educational interventions that often need to start at the elementary school level. Of course, companies should do what they can. But expecting them to pull off mathematical impossibilities is irrational, and the DEI movement’s stalwart refusal to acknowledge the pipeline problem undermines the movement as a whole.↩\n\nI was actually able to get in touch with a former OFCCP higher-up who admitted that rejecting anonymity in hiring was against the spirit of OFCCP requirements. But they sadly wouldn’t go on the record.↩\n\nThe closest we’ve ever come to doing this is our Fellowship program, where we gave free practice to engineers from traditionally underrepresented backgrounds. It was a great program, but what made it great was that our interviewers were eager to help these candidates. We were able to do free practice because our interviewers graciously agreed not to charge. That said, if I were to run this program again, I’d probably focus more on socioeconomic status and non-traditional credentials rather than just race and gender.↩\n\nHere’s the email we ended the relationship with. I’m including it because it was hard to write and even harder to hit send on, but I think we did the right thing, and maybe someone else will need to write something like this in the future… in which case, please steal our copy.↩\n\nResearch that shows that having attended a top school isn’t very predictive and that, while experience at a top company is somewhat predictive, it’s not the most important thing:\n\nThere are other gaps that start way before someone gets to college. Enumerating the is out of scope of this piece, butthis writeup by the National Math and Science Initiativeis a good place to start.↩\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/i-love-meritocracy-but-all-the-recent-anti-dei-rhetoric-is-bad",
      "author": "Aline Lerner",
      "user_id": ""
    },
    {
      "title": "How well do LeetCode ratings predict interview performance? Here's the data.",
      "content": "Mike Mroczka, a former senior SWE (Google, Salesforce, GE), is the primary author ofBeyond Cracking the Coding Interview—the official sequel to Gayle McDowell's original CTCI. He works as a tech consultant and has a decade of experience helping engineers land their dream jobs. He’s a top-rated mentor (interviewing.io, Karat, Pathrise, Skilled.inc) and the author of viral technical content on system design and technical interview strategies featured on HackerNews, Business Insider, and Wired. He also sometimes writes technical content for interviewing.io (like this piece) and was one of the authors of interviewing.io’sA Senior Engineer's Guide to the System Design Interview.\n\nYou can find him online atmikemroczka.com,LinkedIn, andX.\n\nHave you ever wondered if you should spend more time on LeetCode, participate in those contests, or focus on solving harder problems? Apopular Reddit postsuggests you need 700+ questions and a LeetCode rating between 1800-2000 to pass FAANG interviews. Is this really what the data supports? To answer these questions and more, we looked at our users' LeetCode ranks and ratings and tied them back to interview performance on our platform and whether those users worked at FAANG.\n\ninterviewing.io is an interview practice platform and recruiting marketplace for engineers. Engineers use us for mock interviews. Companies use us to hire top performers. Hundreds of thousands of engineers have used our platform to prepare for interviews, and we have performance data for over 100k technical interviews (split between real interviews and mocks).\n\nWe surveyed almost 700 of our users and asked them to share their LeetCode and LinkedIn profiles. From those profiles, we pulled our users’ employment history, as well as their LeetCode data: number of problems worked, ratings, and, if they had it, contest performance. Finally, we cross-referenced all this data with their performance in mock and real interviews on interviewing.io.\n\nThis data set allowed us to start asking interesting questions. How much LeetCoding is useful? What kinds of problems are most useful to practice? How does LeetCode performance relate to performance in interviews with real people? Do LeetCode contest scores predict interview performance, and is a competitive coder likelier to work at a big tech company? Are hard questions worth solving or should we just stick with mediums? Let's find out!\n\nThe matrix below summarizes our findings. In addition to all LeetCode fields listed below, we also looked into global ratings and contest ratings. It was harder to find a large enough sample size to see any effect of those who did contests. Since the results were not large enough to be informative we have excluded them from the rest of this piece. All findings listed below are statistically significant, with lighter squares indicating stronger correlations.\n\nFor each profile, we looked at the following attributes:\n\nThis matrix summarizes the correlations between LeetCode attributes (y axis) with 1) whether people worked at a FAANG and 2) how well they performed in interviews on interviewing.io (x axis). The higher the number (and the darker the color), the stronger the relationship.\n\nFor instance, the number of questions a user solved correlates with working at a FAANG company and a user’s percentile ranking on interviewing.io. We see that it is a stronger predictor of interview performance than it is for working at a FAANG company (0.27 and 0.17, respectively).\n\nUnsurprisingly, the total number of questions a user has completed correlates with having FAANG on their resume and doing well in technical interviews.Those who work at FAANG companies appear to have completed more questions than those who do not.\n\nIn the zero-sum interviewing game, those who complete the most LeetCode questions generally get the highest interview scores and work at the most desirable tech companies, but completing ~500 questions will put you among the top talent in the current market.\n\nIt is common wisdom on the LeetCode discussion board and subreddits to \"do medium questions, not hard questions,\" with the argument that companies don't ask LeetCode hards. Does this advice stand up to scrutiny?Mostly no.\n\nThe data shows a clear bias towards those who solved more challenging problems, the exact point at which this matters is up for debate. At interviewing.io we find that before tackling difficult questions, you just need to first start doing problems.Getting started matters more than attempting to complete a particular question difficulty, so don't focus arbitrarily on medium/hard questions, just focus on practicing!\n\nTip 1: Start with anything. Getting started matters more than picking the perfect set of questions.For those just starting, you might think, \"I'm a straight-A student and a fast learner, so I should be able to manage hard questions.\" Don't make this mistake, or you'll burn out quickly. Instead, just focus on doing questions and getting into the habit of translating your thoughts into code efficiently.\n\nBefore tackling mediums and hards, we need to first get good at easy questions.Once we can tackle mediums, for each additional 50 questions you complete, you increase your score of passing your interviews by three percentage points.\n\nOn the other hand, a LeetCode hard carries overtwicethe benefits of a medium question. Completing 50 hard questions increases your interview score by seven percentage points!Our data shows that you'd need to complete close to 233 medium questions to get the same benefits that 100 hard questions would give. Consider these two people (fictitious but inspired by real examples in our data):\n\nThese two people are statistically likely to have similar interview scores, yet Kara completed half the number of questions Alex did. While it goes against standard advice, harder questions having a higher benefit make sense. A LeetCode medium tends to require you to do one thing (perform a DFS, scan an array, etc.) to get the correct answer. In contrast, hard questions require you to do multiple things (memoize results while performing a DFS, tally prefix sums while scanning an array, etc.).The compounding nature of multiple tasks in harder questions necessitates deeper learning in fewer questions.\n\nAdmittedly, there is a chicken-and-egg scenario going on here. Naively, one might think everyone should just do hard questions, but that doesn't work in practice. Jumping straight to hard questions is an infeasible leap for most people, and the reason many people can complete hard questions is preciselybecausethey have finished many medium questions first. Our advice is not to jump to hard questions immediately. Instead, you should be mindful and not stay at the medium difficulty level longer than necessary. It isn't that the advice to \"do medium questions\" is wrong—it is just overused. It is natural to want to be able to complete a question regularly in a short period of time. Still, if you find yourself completing LeetCode mediums quickly, it indicates that you have stagnated and would be better off moving on to hards. If you have solved 100 or more medium questions, you'll likely get more bang for your buck by transitioning to hard.\n\nTip 2: Don't ignore hard questions.Balance your medium questions with the hard ones. The compounding nature of multiple tasks in harder questions necessitates deeper learning in fewer questions.\n\nFinally, we must also acknowledge that not all hard questions are created equal. This tip is my gut feeling, and we don't have data to back it up, but intuitively, we've all done hard questions that seemimpossible, hard questions that seemed like they should have been ratedmedium, and even medium questions that seem like they should have beenhard. Question difficulty is somewhat subjective, so if you focus on hard questions, choose questions with a high acceptance rating and/or ones that are \"frequently asked.\" These questions tend to beachievable(they don't have a single impossible trick you need to just have known),realistic(they don't test nonsense algorithms no one knows like Manacher’s algorithm), andsolution-flexible(there is often more than one valid approach).\n\nTip 3: When choosing hard questions, pick popular questions.They are more likely to beachievable,realistic, andsolution-flexible, which will likely result in more learning per question.\n\nSurprisingly, we found no correlation between LeetCode ratings and their interviewing percentile. Those who were great at contests also didn't appear more likely to have FAANG on their resume.  Two confounding variables that might have caused these unexpected results are:\n\nIn the end, LeetCode questions are a reasonable proxy for predictors of interview performance. While ratings and contest scores don't seem to matter,1questions —and question difficulty—do. Focus on tackling increasingly difficult questions until you've hit that point of diminishing returns near ~500. Don't stagnate with medium questions; pick popular and frequently asked hard questions, too. And don't stress if your friend has a higher LeetCode score than you do; turns out it doesn't mean much!\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-well-do-leetcode-ratings-predict-interview-performance",
      "author": "Mike Mroczka",
      "user_id": ""
    },
    {
      "title": "How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.",
      "content": "Funnels are wide at the top and narrow at the bottom. That’s why they’re such an apt metaphor for the sales process — you do a lot of outreach, and you don’t get many responses. Of the responses you do get, relatively few will do the thing you want them to do. And even fewer will ultimately “close” (aka, buying — or, in this case, hiring).\n\nIn your engineering career, you’ve intellectually mastered many abstract concepts that are much more complex than a funnel. Despite its simplicity, however, the funnel is one of the hardest concepts to internalize emotionally, especially for people who are used to having control over outcomes. When you write code fornhours, you can expect that you will buildmfeatures.\n\nIn sales though, you do a lot of work, very little of it will pan out, and when it does pan out, it can feel almost random; an impersonal, mediocre email gets a response while your beautifully targeted email is met with deafening silence.\n\nAnd then there’s rejection. When you apply to jobs online and don’t hear back, it stings, but the sting is softened by the possibility that a human never even saw your application. You’re not reaching out to people when you apply online; you’re dealing with a bureaucratic machine.\n\nThe good news is that, after a while, the pain lessens, and you build up some useful emotional calluses and acquire the thousand-yard stare of someone who’s been rejected a million times for a million reasons, ranging from soul-crushingly legitimate to incontrovertibly random.Sadly, there’s no shortcut. You’ve got to do the reps, you’ve got to get the rejections, and you’ve got to pick yourself up again. You get used to it, and then it doesn’t hurt as much, because experience has taught you that if you keep going, you will eventually get to a yes.\n\nOnce you have your list of companies, use LinkedIn Sales Navigator to find hiring managers at those companies (or founders or directors or VPs, as above). Below is an example query where we look for Google hiring managers.\n\nYou might think that Google is so big that sifting through all their various hiring managers will be intractable. Fortunately, you can whittle down the list to a pretty manageable size by applying some filters.\n\nOnce you have your list of LinkedIn URLs, use a tool like RocketReach to look up their emails.\n\nWhy not reach out on LinkedIn? While recruiters live on LinkedIn, managers generally do not. Possibly, they don't even like or check LinkedIn much. They live in their emails, so that's where you want to target them.\n\nRocketReach is a nice tool for email discovery because 1) it takes LinkedIn URLs as inputs and 2) its email database is generally up-to-date and correct.1\n\nIf RocketReach fails or you don't wish to pay for it, you might just be able to guess their email address, as email addresses tend to follow common forms:aline@interviewing.io(my actual email address),alerner@interviewing.io, oraline.lerner@interviewing.io.\n\nWhere possible, contact managers via their work email address.2In some cases, you won’t be able to find their work email, in which case it’s acceptable to fall back to their personal email.\n\nNext, compose a fairly personalized, yet short, email.All too often, candidates write a long, generic cover letter that’s obviously been sent to a ton of people. I get many emails that look like this:\n\nEmails like the above are impersonal, but worst of all, they have a poor signal-to-noise ratio — I want to find a reason to say yes and to invest my valuable time into this person. But they’re not giving me one, and they’re making me work for it in the process.\n\nMore broadly, if you want someone to go out on a limb for you, make it dead simple for them to justify expending their social/political capital on you. Hiring managers, as a rule, want to help. Make it a no-brainer for them.\n\nBut every cold email you write should have (2). It is your job to sell yourself quickly and succinctly. You want your target to feel like they’d be an idiot to pass up the chance to talk to you.\n\nThe email below is personal, succinct, and finds common ground. Not only that, but it conveniently finds common ground thatbenefits the candidate(a soft-spot for non-traditional candidates, like himself!).\n\nHere are some examples of great ways to build common ground:\n\nWe understand that you won't always be able to find common ground. But if you can, it'll help you a lot, especially if you’re light on social proof or accomplishments.\n\nSome people are fortunate enough to have both, but many will have just one. That’s okay. We’ll work with what you have!\n\nWhat have you done that most other people haven’t? What have you done that, if you were to tell it to a stranger, would cause them to pause and think you're special or interesting?\n\nAlso, don’t forget to link to your LinkedIn or personal website. Attaching a resume may feel too heavy-handed for a first conversation, as we discussed above.\n\nHere's an example of a prospective intern, leveraging both social proof and accomplishments, to write a compelling email. His email isn't super personalized, but he did make some effort to say that what we do at interviewing.io is important.\n\nA call to action is an invitation for the recipient to do something. You can go one of two ways with your call to action: ask for a job interview or start a conversation.Which you do should be a function of how much firepower you have in the way of social proof and accomplishments. It’s not fair, but if you can get your target’s attention with one or both of those, being bold and asking for a job interview makes sense. This approach can be effective, but it won’t work for most people… because most people don’t have enough social proof or accomplishments to justify this type of request.\n\nIf you can’t leverage social proof or accomplishments, you’re going to have to work harder and bank entirely on building common ground, which will likely take some time and effort and involve a live conversation before they’re convinced to expend their social capital on you.\n\nIf you’re asking for an interview, just come right out and say it. You can use the intern candidate’s email from earlier as a guide. However, this isn’t our preferred way to do it, and we really recommend starting a conversation instead.\n\nWith these emails, you’re asking for a conversation, not a job interview… because the conversation is what will hopefully prove to the hiring manager that you’re worth interviewing.Then, once you have a conversation, the hiring manager will walk away with the impression that you’re a competent, thoughtful human being who’s interested in this sort of work. From there, getting a job interview will feel like an afterthought.\n\nThis approach is much more effective than asking for an interview out of the gate!You’re not going to land a job from one email, so, as with any seemingly insurmountable goal, it’s important to think of your outreach as a series of steps where you put one foot in front of the other. Like in sales, all you need is to get to a conversation.\n\nIf your call to action is to set up a time to talk (which it probably should be because it’s specific), we recommend providing them with a time window. \"Would you want to meet up sometime?\" puts the burden on the recipient to pose a time, while \"Can we talk next Monday at 3pm?\" is problematic because, most likely, they aren't free then. Instead, try something like the candidate above did: \"Would you be available sometime within the next two weeks for a thirty-minute call? I'm free most weekdays between X and Y and can pretty much do any time on weekends if those are better for you.\"\n\nBelow are two templates you can use for cold outreach. The first one is ideal but requires more effort and can't always be used. The second one is weaker but more generic.You can choose what fits your needs best. We expect both of these templates to be far more effective than throwing your resume into the blackhole of online portals.\n\nThis template includes common ground, accomplishments/social proof, and a call to action. It will get you the highest response rates, possibly anywhere from 25-50%. However, it can be challenging to use because it requires you to 1) do a deep dive into their online presence and 2) tie what you find back to something you’re doing. Sometimes, that tie-in might be tenuous or non-existent (in which case, maybe skip it).\n\nWould you be up for a quick chat this week or next?\n\nWould you be up for a quick chat this week or next?\n\nKeep your note short. The intent here is to make your target believe you’re an entity worth paying attention to, rather than them doing the easy thing: deleting your email.\n\nRegardless of which template you use, just like you have to manage your psychology when you prepare for technical interviews, you have to manage your psychology when doing outreach like this. You have to:\n\nNow that you’ve girded your proverbial loins, it’s time to do the work. If you follow our advice, you’ll get 1-2 orders of magnitude more responses than from applying online, and with this approach, you’ll have at least a hiring manager at that company rooting for you!\n\nRocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we’ve found that it’s not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.↩\n\nRecruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.↩\n\nMany people think that for something to be worth mentioning, it has to have gone viral. That’s simply not correct — in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.↩\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-to-get-in-the-door-at-top-companies-cold-out-reach-to-hiring-managers-part-2",
      "author": "Aline Lerner",
      "user_id": ""
    },
    {
      "title": "How to get in the door at top companies: a data-driven, practical guide for software engineers. Part 1.",
      "content": "interviewing.io is an anonymous mock interview platform — we help engineers prepare for technical interviews by pairing them with senior FAANG and FAANG-adjacent engineers for mock interviews and feedback. In this market, many of our users are struggling with getting in the door at companies, so we ran a survey to see what’s worked well for our users and what hasn’t, in today’s difficult climate.\n\nIn our survey, we gave people the following channels for getting into companies and asked them which were the most and least effective:\n\nWe also asked them which types of companies they got responses from:\n\nWe got ~500 responses. Among survey respondents, which channels were most effective was largely consistent, regardless of company type, but there were some twists depending on who the candidates were. More on that in a bit.\n\nBelow are the channels, ranked by effectiveness.1When more people found a channel effective than ineffective, it ended up in the first list. When more people found a channel to be ineffective than effective, it ended up on the second list.\n\nRecruiting channels that our users found to be effective (ranked from most to least effective):\n\nRecruiting channels that our users found to be ineffective (ranked from least to most ineffective):\n\nThis data came primarily from surveying experienced engineers (4+ years), rather than juniors (we don’t have that many juniors on our platform; average years of experience is 8). If you’re a junior engineer in this market, you already know you’re in for a tough time, and we’d advise you to take your destiny into your own hands as much as possible by reaching out directly to hiring managers (the same advice we give many of our more experienced users). More on that later in the post.\n\nInterestingly, these results were quite consistent between company types. In other words, channels that worked well for FAANGs tended to work well for startups and vice versa.\n\nWarm referrals (i.e., referrals from people you know), on the other hand, are very useful and are abitmore in your control, but they still depend on the quality of your network.\n\nBelow is a diagram comparing the utility of all the channels to how much control you have over them.\n\nYou might wonder why we speculatively singled out cold outreach to hiring managers as something that can be done right, versus the other channels. In our experience, that channel is both misused and underutilized and is the best bet for many candidates, provided they do it correctly. In our next post, we’ll tell you exactly what to do and what to say when you reach out to hiring managers — especially if you come from a non-traditional background and aren’t getting a lot of recruiter outreach/don’t have the network to get warm referrals, reaching out to hiring managers is your absolute best bet.\nNow let’s look at each channel in detail.\n\nThis channel is one of the two where you have the least amount of control (the other is agency recruiters contacting you, though that one is way less useful).\n\nSo, how much control do you have over this channel? One bit of analysis we did on our survey data was to try to find patterns in the background of people who find in-house recruiters particularly useful. Not too surprisingly, some patterns did emerge.\n\nIn-house recruiters are most likely to contact you if:\n\nThese results aren’t unique to just this survey. Werecently did a studywhere we asked a bunch of recruiters to look at resumes and tell us which candidates they’d want to interview. While the intent of the study was to see if recruiters are good at identifying talent (spoiler: they were barely better than a coin flip), we learned some other interesting things, including what recruiters actually look for when they read a resume.\n\nThe two most sought-after resume traits were: 1) experience at a top-tier tech company (FAANG or FAANG-adjacent) and 2) URM (underrepresented minority) status (in tech, this means being Black or Hispanic).\n\nThis mirrored what we saw in our user survey when we looked at commonalities among candidates who got value from in-house recruiters.\n\nSo how do you use this information to your advantage? You obviously can’t magic FAANG/FAANG-adjacent experience or URM status out of thin air2, but if you do have either, our pragmatic advice is to highlight it and make it really easy for recruiters to spot. Of course, whether youwantto lead with URM status is a personal decision. We’ve heard differing opinions on this and are not here to judge. All we can do is share the data — do with it what you will.\n\nSo, how do you make sure that, say, your FAANG experience stands out to recruiters? Take a look at the before and after screenshots of the resume below3. This resume belongs to one of our users who was kind enough to let us share it. He actually has two of the three things that recruiters look for: FAANG experience and a niche title (ML engineer). But both are buried! And the section that gets the most attention is wasted on undergraduate awards.\n\nAs you can see, he spent almost 3 years at Apple, but a recruiter skimming his resume might not notice that because it was a while ago. Instead, he showcases an undergrad award and some technologies/languages that he knows. Neither of those is nearly as useful to recruiters as FAANG experience.\n\nHis current title is also ML engineer, and one at the Principal level at that. But it wasn’t always: He went from back-end to SRE to a little bit of everything to ML, and because of that, it’s possible a recruiter would miss it as well.\n\nWe edited this candidate’s resume to put all the things recruiters look for at the very top of the resume and moved the buzzword soup to the bottom. This candidate is obviously well-positioned because he has FAANG experience, several top schools, and niche skills — but before, many recruiters didn’t spot them. After he made these changes, the number of interviews he got increased by 8X.\n\nIf you’ve ever applied to jobs online, then you know it’s kind of like screaming into a black hole. Though, according to our survey, some candidates (specifically people applying to FAANG/FAANG-adjacent companies and small startups) get some value out of this channel, it’s still a numbers game. And for large startups, it’s a losing proposition.\n\nAccording to recruiting tool Gem, applicants that come from recruiter outreach (called “outbound” in recruiter lingo) are6 - 10X more likely to get hiredthan applicants who apply online (called “inbound”).\n\nOur data… showed higher pass-through rates for candidates [we reached out to] at each stage of the interview process vs. applicants via the careers page. It’s not that we want to ignore applicants; it’s just that historically we don’t get what we’re looking for — and with speed — through that channel.\n\nHaving been a recruiter myself, I can confirm that many companies do indeed ignore their online careers page. Many years ago, when I first joined the recruiting team at a top-tier startup, I spent my first few days going through the resumes of people who had applied online. I found a treasure trove of candidates, including very experienced applicants from top-tier companies.4But no one had seen these applicants because no one had been monitoring inbound activity for months!\n\nSo why do people apply online, despite knowing in their gut that it’s not an effective strategy? Simply put, it’s predictable and easy. You get into a routine, you upload your resume, you connect your LinkedIn, and you can knock out hundreds of applications in a matter of hours.\n\nTL;DR Applying online doesn’t hurt… provided that you don’t take rejection personally. If you do, it’ll wear you down over time.\n\nWarm referrals are, of course, excellent. That is, assuming it's arealreferral — someone who can actually vouch for you, and ideally your work.\n\nPer capita, referrals are most companies’ best source of candidates, and they were a great channel for our users across all company types (they were the best channel for FAANGs/FAANG-adjacents, as well as large startups, and second best for small startups, behind in-house recruiters reaching out).\n\nIf you have the network, you should absolutely use it. Of course, it’s unlikely that you’ll have meaningful connections at every company you want to work at. What do you do then?\n\nShould you ask people you don't know to refer you? Our survey data says probably not. Cold referrals were net negative for both FAANG and small startups and neutral for large startups.\n\nYears ago, trying to collect cold referrals was a decent strategy. You could track down someone at the company and ask them to toss your proverbial hat into the ring\n\nEngineers were often happy to refer someone — even someone they didn't know — either to be kind, to avoid the awkwardness of declining, or to collect the potential referral bonus. They couldn't vouch for you, but the referral would ensure that a human looked at your resume.\n\nThis became so common that Blind actually spun out an entire referral marketplace calledRooftop Slushie(the link is to some press because the actual site is now defunct), where applicants would pay a small sum for a referral.\n\nThen, companies wised up and realized that these referrals weren't all that different from normal in-bound applicants. So why treat them differently?\nMany companies nowadays separate referrals into \"true referrals\" and \"leads.\" It’s great for maintaining the delicate dance of social dynamics, but it’s completely useless for getting hired — dropping someone’s resume into the “leads” pile is basically the same as throwing it into the inbound black hole.\n\nGiven that cold referrals aren’t zero effort, our advice is to expend that energy elsewhere. More on that shortly.\n\nAgency recruiters were the worst channel overall, according to our survey, and were net negative for all company types.\n\nFAANGs and FAANG-adjacent companies tend to rely less on agencies than startups, and when they do, it’s to fill some very specific need (rather than “Hey we need more SWEs”), so it’s not surprising that our users didn’t get much value from this channel when applying to FAANGs.\n\nWhile both large and small startups use agencies liberally, clearly the value to candidates is limited.5Out of all of our survey respondents, only a handful of our users said that agencies were useful to them, and of those who mentioned agencies, the majority said that they were the worst channel.\n\nWe won’t belabor the point, but it’s probably not in your best interest to spend much time on working with agency recruiters. It has opportunity cost and not much upside. And you canroutinely get screwed in salary negotiations when you work with an agency recruiter, if you even get that far.\n\nYou can see in our survey results that cold outreach to hiring managers was net positive for FAANG/FAANG-adjacent companies and neutral for the other company types. Cold outreach to recruiters, on the other hand, was net negative for both FAANG/FAANG-adjacents and small startups and neutral for large startups.\n\nIgnoring the quality of the outreach for a moment, which we expect is probably comparable for both types, why does this difference exist?\n\nHow does a recruiter keep their job?6Bybringing in the types of candidates that their manager tasked them with. How is that different from hiring? Hiring implies that you’re evaluated on whether the people you bring in actually get hired, but most in-house recruiters aren’t evaluated this way… because it takes too long.\n\nInstead, recruiters are sometimes evaluated on what portion of their candidates get offers or get to onsite. However, because of drop-off and latency (getting an offer can still take months), your organization has to be pretty good at tracking. Many are not.\n\nAs such, many recruiting orgs prefer simpler, faster metrics:\n\nSo, if you are typically just measuring the response rates of your reports, as a recruiting manager, you have to set some guardrails for the types of candidates that you want your team to reach out to. If you don’t, they’ll end up just reaching out to people who are likely to respond instead of people who are a good fit for the job.\n\nUnfortunately, you don’t know who is a good fit for the job. You can’t just say, “Go on LinkedIn, and find me good engineers.”\n\nThat doesn’t exist. So instead, you come up with some rules that look like this:\n\nThere may be a few other items on the list if the role requires specific skills (e.g., Android development), but by and large, that’s what recruiters are tasked with, and that’s what they’re focused on.\n\nIt seems counterintuitive, but if you’re either fairly junior (fewer than 4 years of experience) or you don’t have fancy brands and schools on your resume, recruiters are not incentivized to help you because you don’t meet their criteria, and they’re not incentivized to take risks on candidates because they’re not getting rewarded when the company makes hires (or punished when the company doesn’t).\n\nWhat does this mean for you? If you’re not the type of candidate that recruiters are reaching out to already (senior, well-pedigreed), they will not help you.\n\nWith that sad reality in mind, here’s the good news: thereissomeone who’s actually incentivized to make hires and is much more open-minded: the hiring manager7!\n\nAt this point, you might be skeptical. After all, according to the graph comparing all channels, hiring manager outreach is the worst of the best. Sure, it’s net positive for FAANG/FAANG-adjacent companies, but it lags behind in-house recruiters, warm referrals, and online applications with respect to effectiveness.\n\nHere’s the thing. Hiring manager outreach is the channel with the most untapped potential for effectiveness, while also being the one where you have the most control. Because companies often ignore them, online applications can’t come close to the same level of control, and warm referrals have a low ceiling. In-house recruiter outreach is largely out of your control (except for maybe making some limited profile tweaks, as we saw above).\n\nOutside of needing more people to build things, hiring managers are also incentivized to hire for their teams because the better they are at recruiting and filling headcount, the more likely they are to get promoted.\n\nAs such, in our minds, when people say that hiring manager outreach hasn’t worked for them, it’s because they’re not doing it right. So, how do you do it?\n\nFirst, here’s how we got to these rankings. We asked each engineer who took our survey to rank all the channels they used to get in the door, from best to worst. Then we tallied up the points (+1 for best two channels, -1 for worst two). We didn’t do a more granular point system (e.g., +2 and -2) because the difference between the top two channels wasn’t always 2X, and generally, from talking to our users, preferences were somewhat muddy. As such, these results are directionally correct, but we didn’t feel comfortable numerically comparing them to one another. Finally, we divided the total tally by the number of times that channel came up. As a result, we were able to rank channels from most effective to least effective.↩\n\nThis is why I generally view resume writers as selling snake oil. Either you have the things recruiters are looking for or you don’t. If you don’t, no amount of wordsmithing your bullet points or reorganizing the page is going to make a significant difference. Sure,check your resume for typos, and make sure that it reads decently well. Any more time invested in your resume after those basic things will have diminishing returns. Beware of anyone who tells you otherwise, and beware of any products or services who charge for resume review.↩\n\nOf course we don’t share the point of view that you can only be a good candidate if you have a brand-name company on your resume. However, many recruiters do, and they are still ignoring this channel.↩\n\nWe’d argue that the value to companies is limited as well. Though there are a handful of excellent agency recruiters out there, most are terrible. The hard thing is that, as an employer, you can’t immediately tell who’s terrible, and you end up wasting a bunch of time reviewing profiles of candidates who might look promising on the surface, but because of selection bias (these are the people who decided to work with bad agency recruiters, after all) are not a fit. That or they’re not interested in your company (and have possibly never even opted in to talk to you) or both.↩\n\nAt larger companies, recruiting is usually split into two functions: sourcing (these are the people who reach out to candidates) and recruiting (these are the people who manage candidates’ journey through the process and extend offers). In this post, for simplicity, we’re lumping them together because separating them out would change some of the details but wouldn’t change the key takeaways.↩\n\nNote that if you’re interested in smaller startups (Series A and below), you can substitute “founder” for “hiring manager” in the steps below. Founders are the most incentivized to get shit done and take risks, regardless of company size and stage, but at larger startups, they may be less likely to read cold emails because they get bombarded with all manners of requests and sales pitches. At a Series B or C company or at public companies with fewer than, say, 3000 employees, in addition to hiring managers, you should also target Directors and VPs — they have the power to get things done and aren’t so far removed from feeling the pain of not filling roles that making an extra hire or two is out of their purview. At large public companies, targeting Directors and above doesn’t make much sense — they ARE too far removed from doing the work to make individual hires. If you do contact them, the best outcome is that they’ll pass you on to one of their direct reports.↩\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-to-get-in-the-door-at-top-companies-part-1",
      "author": "Aline Lerner",
      "user_id": ""
    },
    {
      "title": "Why engineers don’t like take-homes – and how companies can fix them",
      "content": "Accordingly, here’s the relevant part of a great conversation between Vincent Woo of CoderPad and Patrick McKenzie (known to Hacker News folks as patio11) of Stripe, formerly ofStarfighter.\n\nVincent:What general sort of high level change do you think that recruiters at tech\ncompanies that are roughly Stripe’s size or bigger ought to make?\n\nPatrick:If I could wave a magic wand and sell the world on one concept, it would be selling the world on the desirability of work sample testing… where the way to tell if someone is good at something is to have them do the something.\n\nSpending five hours on their one-hour test for nothing leaves hard feelings. And if they ghost me after the test, I will happily tell every developer who asks what cheapskates they are.\n\nIf you aren’t maxing out on brand strength, there are two questions you should ask yourself:\n\nYou may think you don’t need to sell in this market. But just because employers have all the power right now, it doesn’t mean that will always be the case. And great senior engineers still have a lot of leverage.\n\nThe… challenge was for an internal tooling team that specialized in incident response tools; their challenge was to create a scaled down version of a tool already in use at the company. The focus was more on understanding the domain and customer than wiring up a bunch of complicated stuff, and it was a delight. It being a greenfield also gave you an opportunity to showcase some software design skills. I did not get this job, but enjoyed the experience and still feel connected to the team.\n\nIt was conceptually related to the sort of work the team was performing, but it was simplified and stand-alone enough to clearly not be unpaid labor for their product.\n\nJust be sure that when you come up with a practical problem that you strip out the annoying parts and focus only on the juicy kernel of the problem, the part that’s actually cool and lets the candidate be smart and creative. Don’t make them do grunt work or wrestle with their dev environment!\n\nThe best were short and brief, took no more than 2 hours and were directly related to what I would be doing on the job.\n\nBest are realistic and time bound, i.e., low time investment required.\n\nCompanies will say, ‘don’t spend more than X hours on it,’ but then it actually takes 5X that amount. It's just too much time. And most of the time they didn’t give feedback at all even though I spent so much time on it.\n\nBest was an interesting problem with a realistic time frame. They estimated 2 hours and it took me exactly that, which was refreshing and made the process seem fair.\n\nI've done a couple of exercises where they were truly respectful of my time. The tasks were small, clearly defined, and they gave me a realistic timeframe to complete them.\n\nIt’s okay if candidates want to put in extra time, but it should be made clear that that's not the expectation.\n\nThe scope was poorly defined, which made the assignment not only tedious, but also seemed like a waste of time.\n\nOne was a great learning experience because I had to solve a problem similar to what I would face in the job. It was concise and focused.\n\nIf a company calls me for a screening interview, it means they've read my resume and cover letter, and not immediately dismissed my application as inappropriate. It also means they're putting a person on a phone call with me for the duration of the screening interview. This is symmetric, my effort matches theirs.\n\nCompany needs to build an investment with the candidate first—they shouldn't ask for it before meeting the candidate at least once.\n\nThey compensated me for my time, which made the process feel very professional and respectful.\n\nFixed amounts: Just over half of respondents (52%) suggested specific and reasonable fixed amounts, ranging from $50 to $500.\n\nHourly rates: The other almost half (47%) favored an hourly rate, with suggestions ranging from $50 an hour and upward (average of $217 an hour). Some suggested that the rate should correspond to the salary of the position being applied for, or be comparable to what an employee at that level and company would earn. As one user put it:\n\nSymbolic compensation: This is probably not the best option, but a handful of survey respondents (1%) did mention that a minimal symbolic compensation would do. While 1% is small, we found this interesting to include because, when we interviewed people, two of them mentioned this.\n\nI think any compensation at all has symbolic value. A $100 Amazon card would impress me. A $50 Amazon card and a company t-shirt would at least not insult me. It’s kind of a consolation prize to say, ‘No hard feelings.’\n\nI feel like a couple meal vouchers would do it these days.\n\nOf these options, we’d recommend a reasonable fixed amount based on the task, and the actual time it’s supposed to take.And of course you know how long it takes because you had one of your engineers do it themselves, right? Right??\n\nGetting rejected without having a chance to discuss the code with anyone is a terrible experience.\n\nIt is really discouraging spending a large amount of time to find out you are rejected without explanations.\n\nThey provided no feedback after submission, which made the whole effort feel unappreciated and one-sided.\n\nIncidentally, the main reason companies don’t give feedback is fear of getting sued. As it turns out,literally ZERO companies (at least in the US) have ever been sued by an engineerwho received constructive post-interview feedback.\n\nThanks toDan Fennessyfor all the behind-the-scenes work on this post.\n\nYou might have to do this soon anyway, in all your interviews, toward off against AI-driven cheating.↩\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/why-engineers-dont-like-take-homes-and-how-companies-can-fix-them",
      "author": "Aline Lerner",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer’s Guide to Amazon's Interview Process and Questions",
      "content": "All human organizations operate as a metaphor. Amazon isn’t a sports team or a family; they’re a motley crew of Terminators. They’re a different breed with notoriously high standards. They reward aggression. And they want to take over the market (or the earth, depending on who you ask)...\n\nAmazon’s process is not centralized, and you can interview with multiple teams concurrently. To up your odds, interview with as many teams as you have the appetite for.\n\nAmazon really loves theirLeadership Principles (LPs). Amazon interviewers may sandwich LP questions anywhere and everywhere throughout your interview rounds: coding rounds, system design rounds, all rounds. In short, at an Amazon interview, be prepared for Leadership Principles questions anywhere, anytime.\n\nFinally, Amazon has one of the more-structured interviewing cultures. They’re the only FAANG where interviewers exist in a formal hierarchy, and Amazon openly encourages and rewards interviewers who reach the top rung in that hierarchy.\n\nIn this guide we’ve compiled a comprehensive Amazon job interview prep guide based on in-depth discussions with Amazon interviewers and interviewees. Our guide includes a detailed walkthrough of the interview process, common questions and solutions, interview tips, video replays of mock Amazon interviews, and more.\n\n## An overview of Amazon's interview process and questions\n\nAmazon’s interview process consists of the following steps:\n\n• Recruiter call OR online assessment\n\n• Technical phone screen (if you didn’t do the online assessment)\n\nWe walk through each of these steps in detail below.\n\n### Step 1: Online assessment or recruiter call\n\nWhether you start with an online assessment or an Amazon recruiter call depends on a few factors:\n\n• Are you a mid-to-senior engineer?\n\n• Have you previously interviewed at Amazon?\n\n• Have you previously worked at a FAANG?\n\nIf you answered yes to any of these questions, then you will likely not have to do an online assessment, and your first step will be a recruiter call. That said, we’ve gotten some conflicting reports from Amazonians, and it may be that Amazon has more recently started using online assessments to test the competencies of more senior engineers as well.\n\nIf you do the online assessment, here’s how it works. It’s a timed, asynchronous test consisting of several coding problems, conducted viaHackerRank. These are usually data structures and algorithm problems of easy to medium-level difficulty, as well as some multiple choice system design questions where you have to select the design option that’s ideal in a given situation. If you do well in the online assessment, you can skip the second step, which is the technical phone screen.\n\nIf you end up skipping the online assessment, the first step in your process will be a recruiter call. Please see the section above called“A note about recruiter calls.”\n\n### Step 2: Technical phone screen\n\nAmazon’s technical phone interview is a coding interview that tends to focus exclusively on data structures and algorithms. Despite the focus on speed,Amazon interview questionsmay require a lot of code, and the time allowed is usually 30-40 minutes, which means you’ll usually get one question, as opposed to Facebook, where you might get multiple questions.\n\nFor these screens, Amazon uses an internal tool called Livecode, which has syntax highlighting for popular languages but does NOT have the ability to run the code. In fact, no code is ever compiled or run in Amazon technical interviews.\n\nFinally, there’s a 50% chance that your interviewer will throw in 1 or 2 Leadership Principles questions into the phone screen. They’re not guaranteed, but they’ll definitely come up during the onsite.\n\n### Step 3: Onsite interviews\n\nThere’s some variance, but the typical Amazon onsite, or in-person interview, for technical roles, will consist of:\n\n• At least one behavioral round (this doesn’t include all the Leadership Principles questions peppered through the other interviews)\n\n• Three coding rounds\n\n• One system design round\n\n• One hiring manager round\n\nAmazon has a special type of interviewer that they include in onsite loops: the Bar Raiser. These are typically senior-level Amazon employees at the top of the formal interviewer hierarchy, and they’re the toughest and most-trained interviewers at Amazon. They serve as an independent and objective evaluator, asking follow-up questions, and ensuring that hiring decisions are not influenced solely by the candidate's immediate team or department.\n\n“Being a Bar Raiser makes an impact on your promotion packet. Every L5 nearing promotion at Amazon, is encouraged to do the Bar Raiser training. It’s a big input to get to L6 or L7. Part of the promotion packet is: how are you demonstrating some of the Leadership Principles. And “Hire and Develop the Best” is one of the LPs. There’s a lot of work to do in hiring to become a Bar Raiser: you have to do a lot of training and a ton of interviews. Being a Bar Raiser carries a lot of weight at Amazon if you want to get promoted.”\n\nAt Amazon, Bar Raisers and hiring managers are the only interviewers who have the formal authority to veto a hiring decision. You can recognize them because they are the only interviewer in your onsite loop who has nothing to do with the team you’re interviewing for. Bar Raiser rounds can be super intense, but don’t shrink when you feel a Bar Raiser throw flames your way; embrace the fire.\n\n## The three types of Amazon interview\n\nThere are three main types of interviews you’ll face as a software engineer interviewing at Amazon. These are coding, behavioral, and system design interviews.\n\n### 1. Coding interview\n\nYou will have to do coding interviews in the phone screen and in the onsite. Coding rounds at the onsite are very similar to technical phone screen rounds, except that in the technical phone screen youmightget Leadership Principles questions, whereas in the onsite coding portion, you definitelywill.\n\nAmazon asks mostly medium-difficulty LeetCode-style coding questions and avoids hard questions. The idea is to let candidates demonstrate how quickly they get to the optimal result, all in the service of hiring engineers who can churn out new features quickly.\n\nDespite the focus on speed, Amazon questions may be a complex problem that requires a lot of code, and the time allowed is usually 30-40 minutes, which means you’ll usually get one question, as opposed to Facebook, where you might get multiple questions.\n\nAmazon’s coding rounds test the following technical skills:\n\nAlthough your performance in technical interviews matters (if you fail the technical, you usually will not move forward), it’s not as important as the outcome of the behavioral interview, and coding interviews during the onsite at Amazon actually feature Leadership Principles questions.\n\n“Because no code is ever run on an editor, the approach, speed, and testing are most important. Code syntax, typos, variable naming, and edge cases are less important.”\n\nGraph questions are among the most popular types of questions asked at Amazon, as well as tree questions that require BFS or DFS. Classic questions like LRU cache, meeting rooms, word break, word search, word ladder, and so on may also come up.\n\nWe’ve heard from Amazon interviewers thatallof the data structures and algorithms questions in Amazon’s official question bank are actually onLeetCode. That said, Amazon interviewers are allowed to ask whatever they want in coding rounds, and some will deviate from the question bank to ask more practical questions such as, “Implement a function with some behavior with the help of these two APIs…””\n\nFinally, like Facebook, Amazon shies away from dynamic programming questions (though they’re not banned outright).\n\nFor everything you need to prepare for Amazon’s coding interview, check out the section called \"Amazon coding interview preparation resources\" below.\n\n### 2. Behavioral interview\n\nThe behavioral interview is one of, along with coding interviews at the onsite, the most important in terms of leading to an offer.\n\n“I’ve done over a hundred interviews at Amazon. The behavioral interview is most likely to get someone pushed over the line if they were borderline in their technical interviews. The opposite is not true: if they don’t meet the behavioral bar, we don’t care how they did in technicals, we aren’t hiring them.”\n\nBehavioral is an extremely important part of the Amazon interview process – Amazon is more likely to downlevel or reject you solely based on behavioral – and their behavioral round might be the most well-thought-out interview in all of big tech. It also might be the easiest to fail if you don’t specifically prepare for it. There’s no flavor like the flavor of an Amazonian behavioral interviewer; if you’ve never encountered it before and don’t expect it, it can be jarring.\n\nOne of the most common mistakes our users make is not taking this interview seriously because at most other companies, behavioral interviews tend to be more lip service than a meaningful part of the process. The bottom line is, if you want an Amazon job at a senior level or above, you have to seriously prepare for the behavioral interview questions.\n\nNot all Leadership Principles are created equal. Customer Obsession is the 👑one Leadership Principle to rule them all. When in doubt, demonstrate Customer Obsession. If you get a curveball, give an answer that shows you’re deeply committed to making things customers love.\n\n“If you have a bad LP round, or if LPs are problematic in the debrief, it’s almost always a ‘no hire.’ But if you have great LPs then there is a conversation where we try to see if the candidate can be hired even if the technical rounds weren't at the bar. But not the other way around. But if there’s anything ‘at the bar’ or ‘below the bar’ for LP, then you fail.”\n\n“If a candidate does not do that well on the technical round but they do well on LPs, there is always a possibility of recycling the candidate because they’re a good fit for Amazon but not good for the team. So sometimes we’ll help them interview with other teams, and they don’t have to do a full onsite: they just need to do 1-2 more rounds as a follow up. But if they’re below the bar for LPs, then they’re not a fit for Amazon so Amazon wouldn’t help set them up to other teams with shortened onsites.”\n\nIn this round, expect questions from all 5 of these categories:\n\nHonestly, the best place to find a detailed question list for Amazon’s behavioral interview, as well as a bunch of other interview preparation resources, is ourSenior Engineer's Guide to the Amazon Leadership Principles Interview.\n\n### 3. System design interview\n\nSystem design and coding aren’t the be-all and end-all at Amazon – of course, you still have to pass them, but if your performance is borderline, doing well on behavioral Leadership Principles questions will take you over the finish line. In fact, interviewers will likely ask you 1-2 Leadership Principles questions in your system design interviews. Try to be efficient when answering LP questions in system design rounds. LPs come first. Finish them early so that you have more time for the technical question.\n\n“In many debriefs, I hear the hiring manager say that we can extend the L5 offer with the understanding that system design is not their strength, but it's coachable. At the L6 level, the system design bar is comparable to Facebook or Google.”\n\nIf you’re in a system design round at Amazon, and you don’t know what to talk about, talk about performance. They want Amazon to be the number one customer of AWS. And they love to find engineers who understand and are passionate about fine tuning performance in the cloud.\n\nAmazon is more likely to ask you practical system design questions. For example, if you’re interviewing with a team who controls Amazon’s inventory management, they might ask you to design a piece of an inventory management system.\n\nOther common system design questions include:\n\n• Design autocomplete\n\n• Design file upload/download to the cloud\n\n• Design search\n\nThe design questions are most likely about designing well-known features, as opposed to a complete system from scratch like Design Facebook or Twitter.\n\nAmazon interviewers are allowed to ask whatever they want in system design, but a lot of interviewers fall back on reusing questions from Amazon’s question bank.\n\nFor tooling in system design interviews, candidates can usually choose any type of drawing tool.Excalidrawis most popular, followed byMiro.\n\n## How Amazon makes hiring decisions\n\nAmazon has one of the more well-structured decision-making processes in tech: teams typically do a pre-brief (live meeting before the onsite), submit asynchronous feedback, and also do a debrief (live meeting after the onsite). They rely heavily on live discussion to make decisions. Notably, though some interviewers might be able to tell an outlier story of a time a regular interviewer out-argued a Bar Raiser, most of the time the interviewers go along with what the Bar Raiser says.\n\nAmazon interviewer’s grade on a 5-point scale: Strongly Inclined, Inclined, Neutral, Not Inclined, Strongly Not Inclined.\n\nThe two most important interviewers at the onsite are the Bar Raiser and the hiring manager. At Amazon, all of the other team members involved in the interview could vote to hire, but if the Bar Raiserorthe hiring manager aren’t on board, that candidate is likely getting rejected.\n\nAt Amazon, identify the Bar Raiser (the only person whose work has nothing to do with the team for which you’re interviewing) and the hiring manager (if you don’t know who it is, ask the recruiter before the onsite or an interviewer if during the onsite). Most of your energy should go towards impressing these two people – since Amazon relies so heavily on live discussions to make hiring decisions, impression management is more impactful here.\n\n## Resources to prepare yourself for an Amazon coding interview\n\nWe’ve aggregated a bunch of useful Amazon content for you! We have replays of candidates doing mock interviews with Amazon interviewers, long-form solutions to common Amazon questions, and deep dives into technical topics that tend to come up in Amazon interviews.\n\n### Videos of mock interviews conducted by Amazon interviewers\n\nBelow are a series of mock interview replays, conducted by Amazon interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### 9 common Amazon interview questions and solutions\n\nBelow are common questions that interviewers from Amazon ask on our platform as well as sample answers. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics you're likely to encounter (+ questions and answers)\n\nTo figure out what technical topics will come up in your Amazon interviews, we did two things. First, we spoke to a bunch of Amazon interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data AND our own data-set of mock interviews in the style of Amazon. Based on all of the above, here are the technical topics you’re likely to encounter:\n\n## Other Amazon interview preparation resources\n\n### Behavioral\n\n• Amazon’s behavioral round is the hardest in FAANG, and there’s a lot of copycating other FAANGs do, so if you’re prepping for Amazon’s behavioral you’re also prepping behavioral for the rest of FAANG!\n\n• A Senior Engineer's Guide to the Amazon Leadership Principles Interview\n\n### System design\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• The AWS Well-Architectedframeworkis a good resource, especially the reliability and operational excellence pillars\n\n• Study up on performance and fine tuning performance in the cloud\n\n• Practice practical system design questions such as “Design a component of the service this team works on.” Practice making simple scaled-down versions of their service.",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/amazon#solutions-to-common-amazon-questions",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer’s Guide to Apple's Interview Process And Questions",
      "content": "## Apple's interview process and questions\n\nApple’s interview process consists of the following steps:\n\n• Recruiter call OR online assessment\n\n• Technical phone screen (if you didn’t do the online assessment)\n\n• Onsite interview\n\nBefore we get into the details of each of these steps, here are a few general notes about Apple’s hiring process, evaluation criteria, and interview experience.\n\nHumans in groups act out a chosen metaphor; Apple isn’t a sports team. They’re an army. Their army is made up of people obsessed with making great products. And they look to hire people who’ve embedded Apple products into their lives. Armies reward loyalty more than sports teams. Apple also has the longest tenured employees in FAANG (we're including Microsoft with FAANG for the purposes of this guide).\n\nApple is decentralized and lets candidates interview with different teams concurrently; if you want to maximize your odds interview with as many teams as you have the appetite for.\n\n“I interviewed with like 12 teams. I got 2 offers. Along the way, I told one of the Apple recruiter’s I was interviewing for another Apple team and they shrugged it off; they didn’t care.”\n\nApple’s interview process is more like what you might see at a startup than any other FAANG – from assigning which questions to ask to interviewer training to how hiring decisions get made. Significant inter-team variance is the norm, with each team essentially acting like a startup that’s coming up with its own way of conducting interviews.\n\nAt Apple, there’s no formal interviewer training. It’s very ad hoc. Every team is different. There is literally no process. What each of the teams does is rely on one of their very senior engineers or someone very experienced. Apple has a lot of people with long tenures, like 15 years. One of my colleagues had been there for 22 years. At Apple, the more senior you get the more the team trusts you to come up with your own questions. So what the interviewers at Apple typically do: you come up with a question that's not online, and you make sure it’s relevant to what your team is doing. Then you pitch it to your manager or tech lead. Then you run with it.\n\n“One thing not enough candidates know about is this: there’s no such thing as an Apple interview. You apply for a team. Not the company. When people ask me “How to prepare for an Apple interview?” I say ask the recruiter. Because they usually know what types of questions are asked. The recruiter spends 30 minutes or an hour per debrief where engineers are talking about the details about the code. So if the recruiter is paying attention or is at least a little bit technical, they should have a clue whether it’s LeetCode-style questions or embedded style questions. So ask your Apple recruiter a forced-choice question like, ‘Is this interview more X or more Y?’”\n\n“I was one of the people to come up with a take-home assignment for candidates. Which was my favorite part of the process at Apple. We were hiring people for full-stack but not just any full-stack – we wanted people who were coding in Python on the back-end and a particular framework on the front-end. We cooked up a take-home which was a scaled down version of what they’d be doing on the job: an internal tool built in those exact technologies. We gave them that take home and had them work on it for a week. Then we discussed it at the onsite where we’d live-debug it and talk about architecture. I really liked this ‘Try before you buy’ style process. Because Apple really wants you to be productive in week 2, if not at the end of week 1.”\n\nApple is the most likely to shock you; they’re more likely to ask you something you didn’t prepare for. Out of all the FAANGs, they’re the ones you can expect to do something unexpected, and some of their tactics can seem mercenary. Apple is the only FAANG which sometimes has a process to cut interviews short if the candidate clearly isn’t meeting the bar – if you don't perform above the bar for the first half of the interview, they’ll cancel the rest.\n\n“If by the fourth round, the hiring manager has gotten consistent feedback that doesn’t meet the bar, then they’d end the onsite early and reject the candidate.”\n\nApple is not results or process oriented. They’re motivation oriented. In other words, they care more about the “Why” than the “What” or the “How”, and as such, they value behavioral interviews more than coding.\n\nApple employees are obsessed with privacy. It’s not just marketing lip service. When asked if “privacy” is a buzzword at Apple, our interviewers said…\n\n“Privacy isn't just a buzzword. We are obsessed with it. To drive that part home. Because it’s so important. And as I mentioned, I was a part of a group focused on gathering user data - users here being Apple internal employees – to inform future products.\n\nEven at Apple, when we’re just getting data from internal employees, we anonymized the data. Just to practice what we preach. Privacy is huge. Another example to illustrate that is that people get fired for torrenting music.”\n\n“Unless you’re interviewing for a security role, very rarely. Technical people at Apple are hired to do what they do best. They have a whole army of compliance folks and lawyers to take care of that stuff. They also have an internal police force called “InfoSec”, which is the team which takes care of the secrecy stuff. Engineers are needed to do what they were hired to do: engineering.”\n\n### Step 1: Recruiter call\n\nPlease see the section above called“A note about recruiter calls”for what to expect. We do encourage you to ask your recruiter what to expect for the rest of the process because as you’ll see, there is a lot of variance from team to team.\n\n“Ask your Apple recruiter forced choice questions with two options, such as, ‘Is this coding round more of a typical LeetCode round, or more of a domain-specific open ended deep dive into a specific technology?’”\n\n### Step 2: Technical phone interview\n\nLike everything else at Apple, the format and technical questions presented in Apple phone screens can vary a ton. Verify this by asking your recruiter!\n\nTechnical phone screens are coding interviews that range from 30 minutes to an hour. This tech interview may be between you and a single interviewer or sometimes a panel of interviewers. It may even be a hiring manager screen with a mix of behavioral questions and coding.\n\nIn any case, the general format is a shared coding environment where the interviewer(s) can assess your ability to utilize basic data structures and algorithms concepts. Being able to provide a solution for coding questions and quickly analyze the runtime complexity of your solution are key skills to have going into this interview.\n\nThe tooling used in Apple’s technical interview rounds depends on the team you’re interviewing with, but we’ve heard that some teams use CoderPad.\n\n### (In some cases) Step 2.5: Take-home assignment\n\nSome teams give candidates a take-home assignment. They can give this around the same time they schedule a phone screen. The hiring manager is usually the person to decide whether or not candidates get one.\n\n### Step 3: Onsite\n\nThere will be roughly six to eight in-person rounds of interviews, each of which will be with your future teammates. Each round will have least one, or possibly two, interviewers.\n\nNote that an onsite loop with one team at Apple will look very different than an onsite loop with another.\n\n## Apple’s interview types in detail\n\nInterviewers can ask whatever behavioral, coding, or system design questions they want; there is no standardization for Apple interview questions. However, before an interview loop takes place, some teams will do a quick, informal assignment of what kinds of questions each interviewer is supposed to ask so that they don’t all end up asking the same things.\n\nMoreover, Apple interviewers are untrained, and as soon as a senior engineer is hired they can start conducting interviews.\n\nApple’s unpredictable nature makes it so some of their interview rounds can’t be categorized into behavioral, coding, or system design. Is a philosophical question about products a behavioral question? Not really. But they might ask one in a behavioral round. Are rapid fire infrastructure-focused open-ended trivia questions more system design or coding? It depends.\n\nFor example, here’s how one Apple interviewer describes the behind-the-scenes top-down directive before an upcoming onsite. “Go find a question that would be a good one to ask for our team.” That interviewer then ran it up the chain to an engineer above them. Then, that question immediately got asked in the next interview.\n\nAt Apple, each interview loop is specific to the needs of individual hiring managers – there is no canonical “Apple interview”, and everything is “made to order” for each specific team. That makes it difficult for candidates to prepare.\n\n### Coding\n\nSome teams at Apple prefer practical rounds. Sometimes, they’ll have you write a program on your own laptop and IDE. Other times, they’ll spend the whole round deep diving into a specific technology/use case that’s relevant for their team. For example, a team that wrote in Java and did a lot of work with concurrency had a whole round focused on concurrency in Java!\n\nOther teams do medium-ish LeetCode-style questions.\n\nAt the end of the day, these interviews vary so widely it’s hard to give a specific directive, other than: ask your recruiter. For senior and above candidates, it’s more about demonstrating competence rather than needing to ace the question.\n\nFor everything you need to prepare for Apple’s coding interview, check out the section called \"Apple coding interview preparation resources\" below.\n\n### System design\n\nApple interviewers tend to ask questions relevant to a specific team’s work. For instance, a team focused on building web services will tend to ask questions about that, while front-end teams may ask UI-related questions. It may be good to try to get a feel for the day-to-day work from the recruiter/hiring manager, as the job descriptions are not always the most helpful (remember: privacy!).\n\nIn system design rounds, Apple interviewers love to hear about reliability. If you don’t know what else to talk about, dig into reliability.\n\n### Behavioral\n\nApple’s most important round is usually behavioral or system design. Behavioral rounds are more important than coding rounds.\n\n“In behavioral, you gotta be a rockstar. You gotta be a leader. If you’re abrasive, or if you’re not a cultural fit, how are you going to lead the juniors? And system design is going to weigh a little more than behavioral. If you can’t code or if you’re a little rusty –if you’re good at system design and behavioral–we’ll forgive the subpar coding rounds.”\n\nAn interesting paradox at Apple is: they highly value behavioral rounds but they don’t have a standardized way to assess candidates in those interviews\n\n“Towards the end of my career at Apple, we had a huge need for mobile developers. People who were able to do iOS apps. I was part of an R&D team. We mainly built web products in the beginning, but towards the end of my career we started doing more mobile stuff. We didn't want to hire someone who could only do mobile. We wanted someone who would be half as good at mobile stuff and half as good at web stuff, so they could plug themselves in anywhere.\n\nIf the interview process was standardized across the whole company - you can imagine how hard that would be to test specifically for the niche skill set we needed. Within two days we cooked up a whole new homework assignment just for the ios candidates, we cooked up a whole new set of interview questions. We kept the behavioral part the same. But the technical part - we flipped it over just like that. And it was really good. We changed the way we graded, we were able to filter candidates based on the new set of questions. It was just fast. We didn't get any pushback from HR. We didn't have to work with compliance. We just did it. Really fast. Really nimble.”\n\nBecause Apple doesn’t standardize their interviews, they’re particularly prone to bias. Sometimes the top down guidance to Apple interviewers is something like: “In the behavioral round, just see if you like them. See if you’d like to get a beer with them.”\n\n“[Interviews are never standardized.] And i’ll tell you why. Apple is a very secretive company. Everything is on a need to know basis. Also, it's a hugely political place. It was good for me because I understood the game. I didn’t blame the players I played the game. For those who understand the intricacies of politics, and simply accept the fact that it will happen when you have all Type-A people being paid a tremendous amount of money to do shitty little things, it's bound to happen. You have to accept it or you’re not going to play the game. Everything at Apple is very siloed. Even when it comes down to the cost center. Everything is super independent of one another. That's actually one of the strengths and weaknesses of Apple. We double effort for sure. But that doesn't matter to Tim Cook. They have billions of dollars to afford this – not a problem. I also really liked how it was siloed because teams and their priorities change, leadership changes, a lot of things change. Being able to decouple from the greater company enabled them to become one of the biggest, if not the biggest tech company in the world.”\n\nEven if rounds aren’t standardized, you will definitely be asked “Why Apple?”, and your answer needs to be on point. Some interviewers reject candidates solely for not having a good answer to this question. “Why Apple?” isn’t always a single question; they can spread this out into multiple questions and drill down on this for a good portion of a behavioral round. You can also expect other motivation-based (or “why”) questions.\n\n“A common red flag is giving generic answers to the ‘Why Apple?’ questions. If I didn't feel their passion or if they’re just treating Apple as another job, that’s usually a red flag for me regardless of their technical competence. They really have to somehow convince me – and this is an emotional response they have to bring out of me – they really have to convince me they really want to work at Apple, they really want to roll up their sleeves, and they really believe in our values: delighting the customer, sweating the details. Making awesome products… We only care about that. We don't care about anything else. That emotional response has to be drawn from me and if they don’t then I’m likely to say, ‘They were good but meh.’”\n\n“I can tell you about a great answer one candidate had for ‘Why Apple?”. He said something like… His wife and him were university students dating across two continents. This person said they shared a recent feature – I think it was like when you facetime and you can watch video in sync – he shared how that changed his life. His wife and him went through the whole international relationship because of that. That significantly helped their relationship.”\n\nApple wants to hire candidates whose lives have integrated with the Apple products. And the reverse is true too. It's a fatal flaw to say, “I've never used an iPhone or a Macbook or an iPad” because those people clearly haven’t integrated Apple products deeply in their lives.\n\nApple knows what they like, and they like their products! That doesn’t mean all you have to do is gush about the products to pass the behavioral round. It means you have to tell a genuine story which connects you and Apple products or services. Ideally, a story they will remember.\n\nAnother behavioral factor debated among Apple interviewers is whether or not they agree with the idea that Apple is “cult-ish.”\n\n“Apple cares most about the ‘Why’. You see that rooted deeply in every apple person's DNA. ‘Why Apple?’ Right? I guess this is where people get this notion of Apple being a ‘cult-ish’ company. Much like Tesla, actually. They have a huge customer following, but you also see the same pattern with their employees. Actually, I totally subscribe to this ideology. Because you want a person you work with day in and day out to have that same passion. Sometimes you're going to have to work overtime. You're not going to get paid extra for that. Sometimes you're going to work weekends. Sometimes shit’s gonna hit the fan. You don't want to work with someone who whines about it.\n\nOur theory is that Apple is more likely to reward employees (and candidates) who act like the leader.If you listen to 1:00:36 - 1:02:05 in an interview with Steve Jobs, you’ll see some stark similarities to how Apple interviewers talk about the organization. In this clip, he says, “You know how many committees we have? None. We are organized like a startup.” He then describes the benefits of silos and dividing things up.\n\nPrivacy and politics are the natural consequence of a place intentionally designed to be siloed and divided up and kept separate. It’s a cost that Apple accepts because the gain is increased productivity. Put people in closed systems (teams and orgs that don’t talk to other teams and orgs) and watch them get more done. This system works like blinders on a racehorse: it keeps vision focused down the track, on the goal, minimizing peripheral distraction.  That’s all they need to see and they run/work faster because of it.\n\nOne final aspect of Apple’s behavioral rounds is that they will ask you specific questions about relevant skills. For example, if a team works with big data, they will ask specifically about a time you have worked with large-scale distributed systems in the context of your answer. If you don’t have direct experience with the field, they will try to get as close as possible, like asking you for what tradeoffs you’ve made when choosing a storage system. These behavioral interview questions serve two purposes: showing you have had relevant experience in the context of what the team is hiring for and trying to get you to talk about a particular behavioral skill (e.g., leadership, conflict resolution).\n\n## How Apple makes hiring decisions\n\nAs evidenced by the highest chaos score, Apple doesn’t do many things in hiring consistently, across the whole company. One trend is that Apple teams rely on post-interview live discussions to make hiring decisions. This varies from somewhat informal (compared to the rest of FAANG) to laughably informal.\n\n“Post-onsite feedback for my org was 100% live discussions. At Apple I never had to write feedback. Which made me do more interviews. We made the decision on the same day. Everyone had to make a decision at the end of the day. Do an onsite, then at 5pm, we gather in a single meeting room, we do on the count of three: thumbs up, down, or in the middle. Then we talk after seeing the thumbs. And try to convince the people on the other side. If there’s less than 5 thumbs-up, then that might be an instant rejection. If there’s 6 or 7 or more thumbs up, the ‘thumbs up’ people try to convince the other side. Or in that same situation, the 3 or 4 thumbs down will try to convince the other side.”\n\nBecause of the informal decision-making process and reliance on live discussion, managing the impressions of your interviewers is more important at Apple than at other FAANG. In these decision-making meetings, if there’s dissent, they strive for consensus. The people on one side try to convince the other side. This process can last 15-30 minutes on average; all FAANG companies say interviewers fight for candidates, but Apple tends to fight more than most of them.\n\nBecause of their patterns of live-discussions and striving for consensus, Apple interviewers are more likely to fight for or against you (if your performance was on the fence) than any other FAANG, exceptmaybeNetflix.\n\nUltimately, the hiring manager for that particular role has the most say, which means that that’s the person you should be working to impress the most.\n\n“My manager wanted to hire this person. But he failed my interview so badly. I didn't want to argue with my manager but at the same time I didn't want to work with this person. Because we are hiring people we’d work with on a daily basis. So arguments happen a lot. And in this case, I was the only ‘no’ on the board and the candidate got rejected.”\n\n## Apple coding interview preparation resources\n\nWe’ve aggregated a bunch of useful Apple content for you! We have replays of candidates doing mock interviews with Apple interviewers, long-form solutions to common Apple questions, and deep dives into technical topics that tend to come up in Apple interviews.\n\n### Apple interview replays\n\nBelow are a series of mock interview replays, conducted by Apple interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### Solutions to common Apple questions\n\nBelow are common questions that interviewers from Apple ask on our platform. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics\n\nTo figure out what technical topics will come up in your Apple interviews, we did two things. First, we spoke to a bunch of Apple interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data AND our own data-set of mock interviews in the style of Apple. Based on all of the above, here are the technical topics you’re likely to encounter:\n\n## Other Apple interview preparation resources\n\nFor more in-depth information on Apple and their hiring process, or to learn more about Apple’s company culture, be sure to check out the resources listed below. These documents will help you better prepare for software developer and software engineer interviews.\n\n### Behavioral\n\n• Khan Academy’s intro to impression management\n\n• his classic interview with Steve Jobs\n\n• If you really want to crush it, readSteve Jobs’ biography by Walter Isaacson. It’s long, but no other resource will give you such a deep understanding of Apple’s ethos. Once you get it, you can model it in behavioral rounds.\n\n### System design\n\n• A system design round with an Apple engineer\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• Spend extra time reading up on reliability\n\n• Study up on the service your team works on (and the tools/software they use) because Apple is more likely to have domain-focused rounds or practical rounds that map closely to what this team does on a day-to-day basis. It’s more important to deeply research the service this team works on and build toy projects or answers about their service.\n\n• Before the technical rounds, ask your recruiter forced-choice questions with two options to determine the focus of the rounds.\n\n### Coding\n\n• Before the technical rounds, ask your recruiter forced-choice questions with two options to determine the focus of the rounds.",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/apple",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer’s Guide to Amazon's Interview Process and Questions",
      "content": "All human organizations operate as a metaphor. Amazon isn’t a sports team or a family; they’re a motley crew of Terminators. They’re a different breed with notoriously high standards. They reward aggression. And they want to take over the market (or the earth, depending on who you ask)...\n\nAmazon’s process is not centralized, and you can interview with multiple teams concurrently. To up your odds, interview with as many teams as you have the appetite for.\n\nAmazon really loves theirLeadership Principles (LPs). Amazon interviewers may sandwich LP questions anywhere and everywhere throughout your interview rounds: coding rounds, system design rounds, all rounds. In short, at an Amazon interview, be prepared for Leadership Principles questions anywhere, anytime.\n\nFinally, Amazon has one of the more-structured interviewing cultures. They’re the only FAANG where interviewers exist in a formal hierarchy, and Amazon openly encourages and rewards interviewers who reach the top rung in that hierarchy.\n\nIn this guide we’ve compiled a comprehensive Amazon job interview prep guide based on in-depth discussions with Amazon interviewers and interviewees. Our guide includes a detailed walkthrough of the interview process, common questions and solutions, interview tips, video replays of mock Amazon interviews, and more.\n\n## An overview of Amazon's interview process and questions\n\nAmazon’s interview process consists of the following steps:\n\n• Recruiter call OR online assessment\n\n• Technical phone screen (if you didn’t do the online assessment)\n\nWe walk through each of these steps in detail below.\n\n### Step 1: Online assessment or recruiter call\n\nWhether you start with an online assessment or an Amazon recruiter call depends on a few factors:\n\n• Are you a mid-to-senior engineer?\n\n• Have you previously interviewed at Amazon?\n\n• Have you previously worked at a FAANG?\n\nIf you answered yes to any of these questions, then you will likely not have to do an online assessment, and your first step will be a recruiter call. That said, we’ve gotten some conflicting reports from Amazonians, and it may be that Amazon has more recently started using online assessments to test the competencies of more senior engineers as well.\n\nIf you do the online assessment, here’s how it works. It’s a timed, asynchronous test consisting of several coding problems, conducted viaHackerRank. These are usually data structures and algorithm problems of easy to medium-level difficulty, as well as some multiple choice system design questions where you have to select the design option that’s ideal in a given situation. If you do well in the online assessment, you can skip the second step, which is the technical phone screen.\n\nIf you end up skipping the online assessment, the first step in your process will be a recruiter call. Please see the section above called“A note about recruiter calls.”\n\n### Step 2: Technical phone screen\n\nAmazon’s technical phone interview is a coding interview that tends to focus exclusively on data structures and algorithms. Despite the focus on speed,Amazon interview questionsmay require a lot of code, and the time allowed is usually 30-40 minutes, which means you’ll usually get one question, as opposed to Facebook, where you might get multiple questions.\n\nFor these screens, Amazon uses an internal tool called Livecode, which has syntax highlighting for popular languages but does NOT have the ability to run the code. In fact, no code is ever compiled or run in Amazon technical interviews.\n\nFinally, there’s a 50% chance that your interviewer will throw in 1 or 2 Leadership Principles questions into the phone screen. They’re not guaranteed, but they’ll definitely come up during the onsite.\n\n### Step 3: Onsite interviews\n\nThere’s some variance, but the typical Amazon onsite, or in-person interview, for technical roles, will consist of:\n\n• At least one behavioral round (this doesn’t include all the Leadership Principles questions peppered through the other interviews)\n\n• Three coding rounds\n\n• One system design round\n\n• One hiring manager round\n\nAmazon has a special type of interviewer that they include in onsite loops: the Bar Raiser. These are typically senior-level Amazon employees at the top of the formal interviewer hierarchy, and they’re the toughest and most-trained interviewers at Amazon. They serve as an independent and objective evaluator, asking follow-up questions, and ensuring that hiring decisions are not influenced solely by the candidate's immediate team or department.\n\n“Being a Bar Raiser makes an impact on your promotion packet. Every L5 nearing promotion at Amazon, is encouraged to do the Bar Raiser training. It’s a big input to get to L6 or L7. Part of the promotion packet is: how are you demonstrating some of the Leadership Principles. And “Hire and Develop the Best” is one of the LPs. There’s a lot of work to do in hiring to become a Bar Raiser: you have to do a lot of training and a ton of interviews. Being a Bar Raiser carries a lot of weight at Amazon if you want to get promoted.”\n\nAt Amazon, Bar Raisers and hiring managers are the only interviewers who have the formal authority to veto a hiring decision. You can recognize them because they are the only interviewer in your onsite loop who has nothing to do with the team you’re interviewing for. Bar Raiser rounds can be super intense, but don’t shrink when you feel a Bar Raiser throw flames your way; embrace the fire.\n\n## The three types of Amazon interview\n\nThere are three main types of interviews you’ll face as a software engineer interviewing at Amazon. These are coding, behavioral, and system design interviews.\n\n### 1. Coding interview\n\nYou will have to do coding interviews in the phone screen and in the onsite. Coding rounds at the onsite are very similar to technical phone screen rounds, except that in the technical phone screen youmightget Leadership Principles questions, whereas in the onsite coding portion, you definitelywill.\n\nAmazon asks mostly medium-difficulty LeetCode-style coding questions and avoids hard questions. The idea is to let candidates demonstrate how quickly they get to the optimal result, all in the service of hiring engineers who can churn out new features quickly.\n\nDespite the focus on speed, Amazon questions may be a complex problem that requires a lot of code, and the time allowed is usually 30-40 minutes, which means you’ll usually get one question, as opposed to Facebook, where you might get multiple questions.\n\nAmazon’s coding rounds test the following technical skills:\n\nAlthough your performance in technical interviews matters (if you fail the technical, you usually will not move forward), it’s not as important as the outcome of the behavioral interview, and coding interviews during the onsite at Amazon actually feature Leadership Principles questions.\n\n“Because no code is ever run on an editor, the approach, speed, and testing are most important. Code syntax, typos, variable naming, and edge cases are less important.”\n\nGraph questions are among the most popular types of questions asked at Amazon, as well as tree questions that require BFS or DFS. Classic questions like LRU cache, meeting rooms, word break, word search, word ladder, and so on may also come up.\n\nWe’ve heard from Amazon interviewers thatallof the data structures and algorithms questions in Amazon’s official question bank are actually onLeetCode. That said, Amazon interviewers are allowed to ask whatever they want in coding rounds, and some will deviate from the question bank to ask more practical questions such as, “Implement a function with some behavior with the help of these two APIs…””\n\nFinally, like Facebook, Amazon shies away from dynamic programming questions (though they’re not banned outright).\n\nFor everything you need to prepare for Amazon’s coding interview, check out the section called \"Amazon coding interview preparation resources\" below.\n\n### 2. Behavioral interview\n\nThe behavioral interview is one of, along with coding interviews at the onsite, the most important in terms of leading to an offer.\n\n“I’ve done over a hundred interviews at Amazon. The behavioral interview is most likely to get someone pushed over the line if they were borderline in their technical interviews. The opposite is not true: if they don’t meet the behavioral bar, we don’t care how they did in technicals, we aren’t hiring them.”\n\nBehavioral is an extremely important part of the Amazon interview process – Amazon is more likely to downlevel or reject you solely based on behavioral – and their behavioral round might be the most well-thought-out interview in all of big tech. It also might be the easiest to fail if you don’t specifically prepare for it. There’s no flavor like the flavor of an Amazonian behavioral interviewer; if you’ve never encountered it before and don’t expect it, it can be jarring.\n\nOne of the most common mistakes our users make is not taking this interview seriously because at most other companies, behavioral interviews tend to be more lip service than a meaningful part of the process. The bottom line is, if you want an Amazon job at a senior level or above, you have to seriously prepare for the behavioral interview questions.\n\nNot all Leadership Principles are created equal. Customer Obsession is the 👑one Leadership Principle to rule them all. When in doubt, demonstrate Customer Obsession. If you get a curveball, give an answer that shows you’re deeply committed to making things customers love.\n\n“If you have a bad LP round, or if LPs are problematic in the debrief, it’s almost always a ‘no hire.’ But if you have great LPs then there is a conversation where we try to see if the candidate can be hired even if the technical rounds weren't at the bar. But not the other way around. But if there’s anything ‘at the bar’ or ‘below the bar’ for LP, then you fail.”\n\n“If a candidate does not do that well on the technical round but they do well on LPs, there is always a possibility of recycling the candidate because they’re a good fit for Amazon but not good for the team. So sometimes we’ll help them interview with other teams, and they don’t have to do a full onsite: they just need to do 1-2 more rounds as a follow up. But if they’re below the bar for LPs, then they’re not a fit for Amazon so Amazon wouldn’t help set them up to other teams with shortened onsites.”\n\nIn this round, expect questions from all 5 of these categories:\n\nHonestly, the best place to find a detailed question list for Amazon’s behavioral interview, as well as a bunch of other interview preparation resources, is ourSenior Engineer's Guide to the Amazon Leadership Principles Interview.\n\n### 3. System design interview\n\nSystem design and coding aren’t the be-all and end-all at Amazon – of course, you still have to pass them, but if your performance is borderline, doing well on behavioral Leadership Principles questions will take you over the finish line. In fact, interviewers will likely ask you 1-2 Leadership Principles questions in your system design interviews. Try to be efficient when answering LP questions in system design rounds. LPs come first. Finish them early so that you have more time for the technical question.\n\n“In many debriefs, I hear the hiring manager say that we can extend the L5 offer with the understanding that system design is not their strength, but it's coachable. At the L6 level, the system design bar is comparable to Facebook or Google.”\n\nIf you’re in a system design round at Amazon, and you don’t know what to talk about, talk about performance. They want Amazon to be the number one customer of AWS. And they love to find engineers who understand and are passionate about fine tuning performance in the cloud.\n\nAmazon is more likely to ask you practical system design questions. For example, if you’re interviewing with a team who controls Amazon’s inventory management, they might ask you to design a piece of an inventory management system.\n\nOther common system design questions include:\n\n• Design autocomplete\n\n• Design file upload/download to the cloud\n\n• Design search\n\nThe design questions are most likely about designing well-known features, as opposed to a complete system from scratch like Design Facebook or Twitter.\n\nAmazon interviewers are allowed to ask whatever they want in system design, but a lot of interviewers fall back on reusing questions from Amazon’s question bank.\n\nFor tooling in system design interviews, candidates can usually choose any type of drawing tool.Excalidrawis most popular, followed byMiro.\n\n## How Amazon makes hiring decisions\n\nAmazon has one of the more well-structured decision-making processes in tech: teams typically do a pre-brief (live meeting before the onsite), submit asynchronous feedback, and also do a debrief (live meeting after the onsite). They rely heavily on live discussion to make decisions. Notably, though some interviewers might be able to tell an outlier story of a time a regular interviewer out-argued a Bar Raiser, most of the time the interviewers go along with what the Bar Raiser says.\n\nAmazon interviewer’s grade on a 5-point scale: Strongly Inclined, Inclined, Neutral, Not Inclined, Strongly Not Inclined.\n\nThe two most important interviewers at the onsite are the Bar Raiser and the hiring manager. At Amazon, all of the other team members involved in the interview could vote to hire, but if the Bar Raiserorthe hiring manager aren’t on board, that candidate is likely getting rejected.\n\nAt Amazon, identify the Bar Raiser (the only person whose work has nothing to do with the team for which you’re interviewing) and the hiring manager (if you don’t know who it is, ask the recruiter before the onsite or an interviewer if during the onsite). Most of your energy should go towards impressing these two people – since Amazon relies so heavily on live discussions to make hiring decisions, impression management is more impactful here.\n\n## Resources to prepare yourself for an Amazon coding interview\n\nWe’ve aggregated a bunch of useful Amazon content for you! We have replays of candidates doing mock interviews with Amazon interviewers, long-form solutions to common Amazon questions, and deep dives into technical topics that tend to come up in Amazon interviews.\n\n### Videos of mock interviews conducted by Amazon interviewers\n\nBelow are a series of mock interview replays, conducted by Amazon interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### 9 common Amazon interview questions and solutions\n\nBelow are common questions that interviewers from Amazon ask on our platform as well as sample answers. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics you're likely to encounter (+ questions and answers)\n\nTo figure out what technical topics will come up in your Amazon interviews, we did two things. First, we spoke to a bunch of Amazon interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data AND our own data-set of mock interviews in the style of Amazon. Based on all of the above, here are the technical topics you’re likely to encounter:\n\n## Other Amazon interview preparation resources\n\n### Behavioral\n\n• Amazon’s behavioral round is the hardest in FAANG, and there’s a lot of copycating other FAANGs do, so if you’re prepping for Amazon’s behavioral you’re also prepping behavioral for the rest of FAANG!\n\n• A Senior Engineer's Guide to the Amazon Leadership Principles Interview\n\n### System design\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• The AWS Well-Architectedframeworkis a good resource, especially the reliability and operational excellence pillars\n\n• Study up on performance and fine tuning performance in the cloud\n\n• Practice practical system design questions such as “Design a component of the service this team works on.” Practice making simple scaled-down versions of their service.",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/amazon",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer’s Guide to Apple's Interview Process And Questions",
      "content": "## Apple's interview process and questions\n\nApple’s interview process consists of the following steps:\n\n• Recruiter call OR online assessment\n\n• Technical phone screen (if you didn’t do the online assessment)\n\n• Onsite interview\n\nBefore we get into the details of each of these steps, here are a few general notes about Apple’s hiring process, evaluation criteria, and interview experience.\n\nHumans in groups act out a chosen metaphor; Apple isn’t a sports team. They’re an army. Their army is made up of people obsessed with making great products. And they look to hire people who’ve embedded Apple products into their lives. Armies reward loyalty more than sports teams. Apple also has the longest tenured employees in FAANG (we're including Microsoft with FAANG for the purposes of this guide).\n\nApple is decentralized and lets candidates interview with different teams concurrently; if you want to maximize your odds interview with as many teams as you have the appetite for.\n\n“I interviewed with like 12 teams. I got 2 offers. Along the way, I told one of the Apple recruiter’s I was interviewing for another Apple team and they shrugged it off; they didn’t care.”\n\nApple’s interview process is more like what you might see at a startup than any other FAANG – from assigning which questions to ask to interviewer training to how hiring decisions get made. Significant inter-team variance is the norm, with each team essentially acting like a startup that’s coming up with its own way of conducting interviews.\n\nAt Apple, there’s no formal interviewer training. It’s very ad hoc. Every team is different. There is literally no process. What each of the teams does is rely on one of their very senior engineers or someone very experienced. Apple has a lot of people with long tenures, like 15 years. One of my colleagues had been there for 22 years. At Apple, the more senior you get the more the team trusts you to come up with your own questions. So what the interviewers at Apple typically do: you come up with a question that's not online, and you make sure it’s relevant to what your team is doing. Then you pitch it to your manager or tech lead. Then you run with it.\n\n“One thing not enough candidates know about is this: there’s no such thing as an Apple interview. You apply for a team. Not the company. When people ask me “How to prepare for an Apple interview?” I say ask the recruiter. Because they usually know what types of questions are asked. The recruiter spends 30 minutes or an hour per debrief where engineers are talking about the details about the code. So if the recruiter is paying attention or is at least a little bit technical, they should have a clue whether it’s LeetCode-style questions or embedded style questions. So ask your Apple recruiter a forced-choice question like, ‘Is this interview more X or more Y?’”\n\n“I was one of the people to come up with a take-home assignment for candidates. Which was my favorite part of the process at Apple. We were hiring people for full-stack but not just any full-stack – we wanted people who were coding in Python on the back-end and a particular framework on the front-end. We cooked up a take-home which was a scaled down version of what they’d be doing on the job: an internal tool built in those exact technologies. We gave them that take home and had them work on it for a week. Then we discussed it at the onsite where we’d live-debug it and talk about architecture. I really liked this ‘Try before you buy’ style process. Because Apple really wants you to be productive in week 2, if not at the end of week 1.”\n\nApple is the most likely to shock you; they’re more likely to ask you something you didn’t prepare for. Out of all the FAANGs, they’re the ones you can expect to do something unexpected, and some of their tactics can seem mercenary. Apple is the only FAANG which sometimes has a process to cut interviews short if the candidate clearly isn’t meeting the bar – if you don't perform above the bar for the first half of the interview, they’ll cancel the rest.\n\n“If by the fourth round, the hiring manager has gotten consistent feedback that doesn’t meet the bar, then they’d end the onsite early and reject the candidate.”\n\nApple is not results or process oriented. They’re motivation oriented. In other words, they care more about the “Why” than the “What” or the “How”, and as such, they value behavioral interviews more than coding.\n\nApple employees are obsessed with privacy. It’s not just marketing lip service. When asked if “privacy” is a buzzword at Apple, our interviewers said…\n\n“Privacy isn't just a buzzword. We are obsessed with it. To drive that part home. Because it’s so important. And as I mentioned, I was a part of a group focused on gathering user data - users here being Apple internal employees – to inform future products.\n\nEven at Apple, when we’re just getting data from internal employees, we anonymized the data. Just to practice what we preach. Privacy is huge. Another example to illustrate that is that people get fired for torrenting music.”\n\n“Unless you’re interviewing for a security role, very rarely. Technical people at Apple are hired to do what they do best. They have a whole army of compliance folks and lawyers to take care of that stuff. They also have an internal police force called “InfoSec”, which is the team which takes care of the secrecy stuff. Engineers are needed to do what they were hired to do: engineering.”\n\n### Step 1: Recruiter call\n\nPlease see the section above called“A note about recruiter calls”for what to expect. We do encourage you to ask your recruiter what to expect for the rest of the process because as you’ll see, there is a lot of variance from team to team.\n\n“Ask your Apple recruiter forced choice questions with two options, such as, ‘Is this coding round more of a typical LeetCode round, or more of a domain-specific open ended deep dive into a specific technology?’”\n\n### Step 2: Technical phone interview\n\nLike everything else at Apple, the format and technical questions presented in Apple phone screens can vary a ton. Verify this by asking your recruiter!\n\nTechnical phone screens are coding interviews that range from 30 minutes to an hour. This tech interview may be between you and a single interviewer or sometimes a panel of interviewers. It may even be a hiring manager screen with a mix of behavioral questions and coding.\n\nIn any case, the general format is a shared coding environment where the interviewer(s) can assess your ability to utilize basic data structures and algorithms concepts. Being able to provide a solution for coding questions and quickly analyze the runtime complexity of your solution are key skills to have going into this interview.\n\nThe tooling used in Apple’s technical interview rounds depends on the team you’re interviewing with, but we’ve heard that some teams use CoderPad.\n\n### (In some cases) Step 2.5: Take-home assignment\n\nSome teams give candidates a take-home assignment. They can give this around the same time they schedule a phone screen. The hiring manager is usually the person to decide whether or not candidates get one.\n\n### Step 3: Onsite\n\nThere will be roughly six to eight in-person rounds of interviews, each of which will be with your future teammates. Each round will have least one, or possibly two, interviewers.\n\nNote that an onsite loop with one team at Apple will look very different than an onsite loop with another.\n\n## Apple’s interview types in detail\n\nInterviewers can ask whatever behavioral, coding, or system design questions they want; there is no standardization for Apple interview questions. However, before an interview loop takes place, some teams will do a quick, informal assignment of what kinds of questions each interviewer is supposed to ask so that they don’t all end up asking the same things.\n\nMoreover, Apple interviewers are untrained, and as soon as a senior engineer is hired they can start conducting interviews.\n\nApple’s unpredictable nature makes it so some of their interview rounds can’t be categorized into behavioral, coding, or system design. Is a philosophical question about products a behavioral question? Not really. But they might ask one in a behavioral round. Are rapid fire infrastructure-focused open-ended trivia questions more system design or coding? It depends.\n\nFor example, here’s how one Apple interviewer describes the behind-the-scenes top-down directive before an upcoming onsite. “Go find a question that would be a good one to ask for our team.” That interviewer then ran it up the chain to an engineer above them. Then, that question immediately got asked in the next interview.\n\nAt Apple, each interview loop is specific to the needs of individual hiring managers – there is no canonical “Apple interview”, and everything is “made to order” for each specific team. That makes it difficult for candidates to prepare.\n\n### Coding\n\nSome teams at Apple prefer practical rounds. Sometimes, they’ll have you write a program on your own laptop and IDE. Other times, they’ll spend the whole round deep diving into a specific technology/use case that’s relevant for their team. For example, a team that wrote in Java and did a lot of work with concurrency had a whole round focused on concurrency in Java!\n\nOther teams do medium-ish LeetCode-style questions.\n\nAt the end of the day, these interviews vary so widely it’s hard to give a specific directive, other than: ask your recruiter. For senior and above candidates, it’s more about demonstrating competence rather than needing to ace the question.\n\nFor everything you need to prepare for Apple’s coding interview, check out the section called \"Apple coding interview preparation resources\" below.\n\n### System design\n\nApple interviewers tend to ask questions relevant to a specific team’s work. For instance, a team focused on building web services will tend to ask questions about that, while front-end teams may ask UI-related questions. It may be good to try to get a feel for the day-to-day work from the recruiter/hiring manager, as the job descriptions are not always the most helpful (remember: privacy!).\n\nIn system design rounds, Apple interviewers love to hear about reliability. If you don’t know what else to talk about, dig into reliability.\n\n### Behavioral\n\nApple’s most important round is usually behavioral or system design. Behavioral rounds are more important than coding rounds.\n\n“In behavioral, you gotta be a rockstar. You gotta be a leader. If you’re abrasive, or if you’re not a cultural fit, how are you going to lead the juniors? And system design is going to weigh a little more than behavioral. If you can’t code or if you’re a little rusty –if you’re good at system design and behavioral–we’ll forgive the subpar coding rounds.”\n\nAn interesting paradox at Apple is: they highly value behavioral rounds but they don’t have a standardized way to assess candidates in those interviews\n\n“Towards the end of my career at Apple, we had a huge need for mobile developers. People who were able to do iOS apps. I was part of an R&D team. We mainly built web products in the beginning, but towards the end of my career we started doing more mobile stuff. We didn't want to hire someone who could only do mobile. We wanted someone who would be half as good at mobile stuff and half as good at web stuff, so they could plug themselves in anywhere.\n\nIf the interview process was standardized across the whole company - you can imagine how hard that would be to test specifically for the niche skill set we needed. Within two days we cooked up a whole new homework assignment just for the ios candidates, we cooked up a whole new set of interview questions. We kept the behavioral part the same. But the technical part - we flipped it over just like that. And it was really good. We changed the way we graded, we were able to filter candidates based on the new set of questions. It was just fast. We didn't get any pushback from HR. We didn't have to work with compliance. We just did it. Really fast. Really nimble.”\n\nBecause Apple doesn’t standardize their interviews, they’re particularly prone to bias. Sometimes the top down guidance to Apple interviewers is something like: “In the behavioral round, just see if you like them. See if you’d like to get a beer with them.”\n\n“[Interviews are never standardized.] And i’ll tell you why. Apple is a very secretive company. Everything is on a need to know basis. Also, it's a hugely political place. It was good for me because I understood the game. I didn’t blame the players I played the game. For those who understand the intricacies of politics, and simply accept the fact that it will happen when you have all Type-A people being paid a tremendous amount of money to do shitty little things, it's bound to happen. You have to accept it or you’re not going to play the game. Everything at Apple is very siloed. Even when it comes down to the cost center. Everything is super independent of one another. That's actually one of the strengths and weaknesses of Apple. We double effort for sure. But that doesn't matter to Tim Cook. They have billions of dollars to afford this – not a problem. I also really liked how it was siloed because teams and their priorities change, leadership changes, a lot of things change. Being able to decouple from the greater company enabled them to become one of the biggest, if not the biggest tech company in the world.”\n\nEven if rounds aren’t standardized, you will definitely be asked “Why Apple?”, and your answer needs to be on point. Some interviewers reject candidates solely for not having a good answer to this question. “Why Apple?” isn’t always a single question; they can spread this out into multiple questions and drill down on this for a good portion of a behavioral round. You can also expect other motivation-based (or “why”) questions.\n\n“A common red flag is giving generic answers to the ‘Why Apple?’ questions. If I didn't feel their passion or if they’re just treating Apple as another job, that’s usually a red flag for me regardless of their technical competence. They really have to somehow convince me – and this is an emotional response they have to bring out of me – they really have to convince me they really want to work at Apple, they really want to roll up their sleeves, and they really believe in our values: delighting the customer, sweating the details. Making awesome products… We only care about that. We don't care about anything else. That emotional response has to be drawn from me and if they don’t then I’m likely to say, ‘They were good but meh.’”\n\n“I can tell you about a great answer one candidate had for ‘Why Apple?”. He said something like… His wife and him were university students dating across two continents. This person said they shared a recent feature – I think it was like when you facetime and you can watch video in sync – he shared how that changed his life. His wife and him went through the whole international relationship because of that. That significantly helped their relationship.”\n\nApple wants to hire candidates whose lives have integrated with the Apple products. And the reverse is true too. It's a fatal flaw to say, “I've never used an iPhone or a Macbook or an iPad” because those people clearly haven’t integrated Apple products deeply in their lives.\n\nApple knows what they like, and they like their products! That doesn’t mean all you have to do is gush about the products to pass the behavioral round. It means you have to tell a genuine story which connects you and Apple products or services. Ideally, a story they will remember.\n\nAnother behavioral factor debated among Apple interviewers is whether or not they agree with the idea that Apple is “cult-ish.”\n\n“Apple cares most about the ‘Why’. You see that rooted deeply in every apple person's DNA. ‘Why Apple?’ Right? I guess this is where people get this notion of Apple being a ‘cult-ish’ company. Much like Tesla, actually. They have a huge customer following, but you also see the same pattern with their employees. Actually, I totally subscribe to this ideology. Because you want a person you work with day in and day out to have that same passion. Sometimes you're going to have to work overtime. You're not going to get paid extra for that. Sometimes you're going to work weekends. Sometimes shit’s gonna hit the fan. You don't want to work with someone who whines about it.\n\nOur theory is that Apple is more likely to reward employees (and candidates) who act like the leader.If you listen to 1:00:36 - 1:02:05 in an interview with Steve Jobs, you’ll see some stark similarities to how Apple interviewers talk about the organization. In this clip, he says, “You know how many committees we have? None. We are organized like a startup.” He then describes the benefits of silos and dividing things up.\n\nPrivacy and politics are the natural consequence of a place intentionally designed to be siloed and divided up and kept separate. It’s a cost that Apple accepts because the gain is increased productivity. Put people in closed systems (teams and orgs that don’t talk to other teams and orgs) and watch them get more done. This system works like blinders on a racehorse: it keeps vision focused down the track, on the goal, minimizing peripheral distraction.  That’s all they need to see and they run/work faster because of it.\n\nOne final aspect of Apple’s behavioral rounds is that they will ask you specific questions about relevant skills. For example, if a team works with big data, they will ask specifically about a time you have worked with large-scale distributed systems in the context of your answer. If you don’t have direct experience with the field, they will try to get as close as possible, like asking you for what tradeoffs you’ve made when choosing a storage system. These behavioral interview questions serve two purposes: showing you have had relevant experience in the context of what the team is hiring for and trying to get you to talk about a particular behavioral skill (e.g., leadership, conflict resolution).\n\n## How Apple makes hiring decisions\n\nAs evidenced by the highest chaos score, Apple doesn’t do many things in hiring consistently, across the whole company. One trend is that Apple teams rely on post-interview live discussions to make hiring decisions. This varies from somewhat informal (compared to the rest of FAANG) to laughably informal.\n\n“Post-onsite feedback for my org was 100% live discussions. At Apple I never had to write feedback. Which made me do more interviews. We made the decision on the same day. Everyone had to make a decision at the end of the day. Do an onsite, then at 5pm, we gather in a single meeting room, we do on the count of three: thumbs up, down, or in the middle. Then we talk after seeing the thumbs. And try to convince the people on the other side. If there’s less than 5 thumbs-up, then that might be an instant rejection. If there’s 6 or 7 or more thumbs up, the ‘thumbs up’ people try to convince the other side. Or in that same situation, the 3 or 4 thumbs down will try to convince the other side.”\n\nBecause of the informal decision-making process and reliance on live discussion, managing the impressions of your interviewers is more important at Apple than at other FAANG. In these decision-making meetings, if there’s dissent, they strive for consensus. The people on one side try to convince the other side. This process can last 15-30 minutes on average; all FAANG companies say interviewers fight for candidates, but Apple tends to fight more than most of them.\n\nBecause of their patterns of live-discussions and striving for consensus, Apple interviewers are more likely to fight for or against you (if your performance was on the fence) than any other FAANG, exceptmaybeNetflix.\n\nUltimately, the hiring manager for that particular role has the most say, which means that that’s the person you should be working to impress the most.\n\n“My manager wanted to hire this person. But he failed my interview so badly. I didn't want to argue with my manager but at the same time I didn't want to work with this person. Because we are hiring people we’d work with on a daily basis. So arguments happen a lot. And in this case, I was the only ‘no’ on the board and the candidate got rejected.”\n\n## Apple coding interview preparation resources\n\nWe’ve aggregated a bunch of useful Apple content for you! We have replays of candidates doing mock interviews with Apple interviewers, long-form solutions to common Apple questions, and deep dives into technical topics that tend to come up in Apple interviews.\n\n### Apple interview replays\n\nBelow are a series of mock interview replays, conducted by Apple interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### Solutions to common Apple questions\n\nBelow are common questions that interviewers from Apple ask on our platform. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics\n\nTo figure out what technical topics will come up in your Apple interviews, we did two things. First, we spoke to a bunch of Apple interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data AND our own data-set of mock interviews in the style of Apple. Based on all of the above, here are the technical topics you’re likely to encounter:\n\n## Other Apple interview preparation resources\n\nFor more in-depth information on Apple and their hiring process, or to learn more about Apple’s company culture, be sure to check out the resources listed below. These documents will help you better prepare for software developer and software engineer interviews.\n\n### Behavioral\n\n• Khan Academy’s intro to impression management\n\n• his classic interview with Steve Jobs\n\n• If you really want to crush it, readSteve Jobs’ biography by Walter Isaacson. It’s long, but no other resource will give you such a deep understanding of Apple’s ethos. Once you get it, you can model it in behavioral rounds.\n\n### System design\n\n• A system design round with an Apple engineer\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• Spend extra time reading up on reliability\n\n• Study up on the service your team works on (and the tools/software they use) because Apple is more likely to have domain-focused rounds or practical rounds that map closely to what this team does on a day-to-day basis. It’s more important to deeply research the service this team works on and build toy projects or answers about their service.\n\n• Before the technical rounds, ask your recruiter forced-choice questions with two options to determine the focus of the rounds.\n\n### Coding\n\n• Before the technical rounds, ask your recruiter forced-choice questions with two options to determine the focus of the rounds.",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/apple#solutions-to-common-apple-questions",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer’s Guide to Meta's Interview Process and Questions",
      "content": "## Meta’s interview process and questions\n\nMeta’s interview process consists of the following steps:\n\n• Call with a Meta recruiter\n\n• Technical phone screen (and possibly a second technical phone screen)\n\n• Onsite interviews\n\nBefore we get into the details of each of these steps, here are a few general notes about Meta’s hiring process, evaluation criteria, and interviewers.\n\nMeta interviewers are guided by the company’s current motto: move fast. All human groups have a metaphor they operate from. Meta isn’t a family or an army. They’re a well-structured Formula 1 team; they spend a lot of effort to put safeguards in place, and then they go pedal to the metal. At Meta, speed wins.\n\nAt Meta, because the process is centralized, you cannot interview with multiple teams concurrently like you can at some other tech companies. You get one shot on goal every ~3 to 6 months, depending on performance.\n\n“If you pass Meta’s onsite, but don’t take the offer your status of ‘passed onsite’ is valid for a year. If you don’t take their offer and then choose to re-engage within that year, tell their recruiter ‘I already passed the onsite’ and push to get steps skipped because you usually can.”\n\nWhen interviewing at Meta, listen closely to the subtle clues and hints your interviewer gives you. Meta is the only FAANG where you can’t become an interviewer unless you give good hints.\n\n### Step 1: Recruiter call\n\nPlease see the previous section called“A note about recruiter calls”. Alsoread our guide to negotiating with Meta. It starts at the recruiter call.\n\n### Step 2: Technical phone screen\n\nMeta's technical phone screen is a 45-minute coding interview that focuses on data structures and algorithms.\n\nAt the beginning of the interview, your interviewer will ask you a question or two about your resume and recent work that you've done. This portion will take 5 minutes, and how you answer these questions doesn't meaningfully factor into the interview's outcome - they are just meant to break the ice and get you talking. The part that matters is the technical portion.\n\nAfter the intro portion, your interviewer will ask you two coding questions, and they expect you to get through both in 35 minutes. These questions will be LeetCode easy or medium difficulty.\n\nMeta’s technical phone screens are conducted inCoderPad. If you've never used it, you may want toplay around in their sandboxand get familiar with their environment before your real interview. One specific thing about Meta's way of using CoderPad is that during the interview, they'll have code execution turned off - if you've used it before and are accustomed to testing your code during the interview by running it, you'll need to practice not being able to.\n\n### Step 3: Onsite interviews\n\nThe typical Meta onsite will consist of the following:\n\n• At least two coding interviews\n\n• Two system design OR product design interviews\n\n• One behavioral interview\n\nThe process for E6 engineers, as outlined in the diagram above, is slightly different. There will be a Leadership Assessment interview after the Technical Screen. In this interview, the following topics might be covered:\n\n• Your current role, responsibility, and scope\n\n• Cross-functional partnerships\n\n• Situations regarding conflict resolution\n\n• Solution skills\n\n• How to drive results\n\nThe onsite for E6 engineers will also be different. You should only get one coding round, one architecture round, one design round and then a behavioral round.\n\n## Types of Meta interviews and what to expect\n\nThere are four main types of interviews you’re going to encounter when you apply for an engineering job at Meta – coding interviews, behavioral interviews, and either a system design or product design interview. Here’s what to expect during each of these rounds of interviews.\n\n### Coding interview\n\nMeta's process is highly standardized, so coding interview questions and themes tend to repeat. Coding questions are pre-approved, but that doesn’t mean the interviewers have no freedom.\n\n“Meta gives you the questions to ask or modify. But they don't tell you the answers in their interviewing wiki. And they let you design the path of the question: you get to ask your own twists and turns.”\n\n“There’s some variance with the interviewer, but usually there are 20 mins per question, and the questions are simple. They want you to get the algorithm fast, and implement the basic solution.\nThe kind of bugs that can be acceptable are empty input, and out of scope inputs like empty array/null. But an incomplete algorithm at Meta usually doesn’t cut it. They want you to get to it and get to it quickly, and you can sacrifice making a little bit of a mess along the way.”\n\n“I think there is a rule that during the programming interview, interviewers have to ask two questions. And the questions have to be balanced. The first is more like a juicy question testing problem solving skills and you as the interviewer can permit some bugs in the implementation. The second will be easy from the algorithmic point of view but the goal is to assess how much the candidate can write debugless code and test this code perfectly. And if a candidate fails to solve both problems, even if they somewhat shine during one problem: it will be ‘No Hire’.”\n\nIt's not that bugs are encouraged, it’s that they're the only company that's top-down directive is: sometimes, in certain rounds, bugs are okay. No other company does that. Meta relaxes the need for bug-free code so that candidates can code faster.\n\nFinally, Meta doesn’t ask dynamic programming questions and, in fact, those questions are banned.\n\nFor everything you need to prepare for Meta’s coding interview, check out the section called \"Meta coding interview preparation resources\" below.\n\n### System design OR product design interview\n\nMeta hires two types (on paper) of backend engineers: System Generalists and Product Generalists. System generalists get a system design interview, and product generalists get the confusingly named product design interview (in most other contexts, product design refers to UI/UX).\n\nWhich of these interviews you get is determined by your recruiter, based on your experience. If you have worked on a lot of product features, then you get a product design interview. If you have worked on high-scale distributed systems, then you get system design.\n\nThe product design interview at Meta is similar to the system design interview but with some key differences:\n\n• System design focuses more on high level architecture and scale, while product design focuses more on interactions between services. For example, the expectations for API design in system design interviews is just high level arguments/data passed, whereas product design focuses more on the details, i.e., a more comprehensive list of arguments and response structure.\n\n• Product design focuses more on how and what data flows through the entire system, between each service.\n\n• Data models are weighted much higher in the product design interview than in system design. The expectation is to be more thorough and detailed.\n\nTake a look at this video, by Meta, about the difference between these two interview types:\n\n“Product design is less databases, more data flow, more time spent on details of the API (e.g. parameters that will pass). System design is more databases, less API details, and more about scaling.”\n\n“Many people think Meta only asks high level system design questions like ‘Design Twitter’ or ‘Design Meta Feed.’ But that’s not the case. They also ask low level questions. In E6 or above interviews, you will most likely be asked ‘Design Redis’, or ‘Design Kafka’, or ‘Design Memcached.’ I’d even seen rare occasions where E5 candidates would be asked low-level system design questions; low-level questions are less common in rounds for E5 and below.”\n\n“You have to ask about back of the envelope estimations. A lot of senior engineers hate to do that. I hate to do that as well. It’s a waste of time. When I do the ‘There is a rule that I have to do this. But there is no point in doing this. Let’s spend 5 minutes talking about real system design. Let’s assume we have to scale our system from 0 to Google level and therefore estimations are just a waste of time.’”\n\nAsk your interviewer: “Do you want to spend a few minutes on estimations? I’m okay with skipping it, but if you need to see it, then let’s do it. If we skipped it, one thing that might be a more interesting conversation would be spending a few minutes on how to scale this system.’”\n\nIf you don’t know what to talk about in a E5 Meta system design round, talk about user experience. Go on about two choices you could make, then explain in depth the one preferred because it’d be a better user experience.\n\nIt’s also common for Meta interviewers to ask you to walk them through a system you’ve worked on in the past, which is known as a reverse system design interview.\n\n### Behavioral interview\n\nUnlike technical questions, behavioral questions at Meta are not standardized: interviewers can ask you whatever they want. Behavioral rounds are of medium/low importance at Meta; they’re less important than technical interview rounds, but they do carry some weight. For the best summary of what to expect in a Meta behavioral interview, read thisblog post by a former Meta engineering manager– in it he describesexactlyhow behavioral interviews at Meta are evaluated and also includes a bunch of sample questions.\n\nHere is a list of questions to get you started. Read the post to get examples of good answers (split out by the candidate’s seniority level!)\n\n• “What project are you most proud of and why?”\n\n• “Tell me about a recent day working that was really great and/or fun.”\n\n• “Tell me about a time when you wanted to change something that was outside of your regular scope of work.”\n\n• “Tell me about a time you had to make a fast decision and live with the results.”\n\n• “Tell me about a time when you needed to overcome external obstacles to complete a task or project.”\n\n• “Tell me about a time a project took longer as expected.”\n\n• “Tell me about a person or team who you found most challenging to work with.”\n\n• “Tell me about a time you disagreed with a coworker.”\n\n• “Tell me about a situation where two teams couldn’t agree on a path forward.”\n\n• “Describe a situation when you made a mistake, and what you learned from it.”\n\n• “Tell me about some constructive feedback you received from a manager or a peer”\n\n• “Tell me about a skill set that you observed in a peer or mentor that you want to develop in the next six months.”\n\nFinally, if you are applying for E5 and above make sure to have a couple of projects that lasted longer than one quarter – if all your examples are of smaller initiatives, your interviewer may walk away with the impression that you can’t handle complex projects. Also, remember to quantify the impact that you made by sharing specific metrics.\n\n## How Meta makes hiring decisions\n\nMeta’s candidate review and feedback process is usually completely asynchronous. Sometimes, they’ll do a live debrief but it’s rare. This means there’s a low likelihood for an interviewer to “fight” for a candidate. Socially influencing interviewers won’t go very far here.\n\nMeta is also the only FAANG that asks interviewers for a confidence score when filling out post-onsite feedback forms. As a result, the process at Meta can be more forgiving on failed rounds because a lower confidence score means a failed round carries less weight. Also, Meta is the only FAANG that directly asks interviewers about downleveling.\n\n“Coding is used to decide ‘Should we hire this person?’ System and product design is used to decide ‘How should we level this person?’\n\nFor coding interviews, the interviewer says a binary score first: ‘Hire’ or ‘No Hire’. Then in the comments, they say how confident they are in that binary score. The ‘Hire’ or ‘No Hire’ is an official metric, but the confidence score is not.\n\nFor system/product design, the interviewer gives the ‘Hire’ or ‘No Hire’ first. Then they say if the candidate should be considered for another level.\n\nSo the final decision could be like: ‘No Hire’ for E5 with low confidence. ‘Hire’ for E4 with high confidence.\"\n\nIn cases where the hiring panel is hung, it’s possible they may request one more follow-up interview to help them get more signal.\n\n“Interview feedback is discussed primarily by the system design and behavioral interviewers, and those are the interviewers who have the most say regarding both the hire decision and a candidate’s level. If interviewers don’t feel like they got enough signal and the candidate ends up being on the fence, the recruiter will push for an additional round. Indicative hint: If you have an additional follow-up interview, your interviewers were probably split.\"\n\n“At Staff level and above, it’s a mandate that candidates can’t get hired if they don’t pass both system design rounds.”\n\n“For E6 and above candidates, if you fail one system design round but do well in the other rounds, you can get a mulligan. They can let you retake one system design round. But the same isn’t true for behavioral: if you fail there’s no mulligan. If you fail the behavioral round, it will be ‘No Hire.’”\n\n## 'Team matching, offers, and “Bootcamp”'\n\nMeta made some changes to their process in 2023. Before, unlike at other FAANGs, you'd generally accept an offer before knowing with which team you'd end up on. Then you'd do a 6 week “Bootcamp”, where you'd be trained on Meta's engineering infrastructure and systems. After the bootcamp, there would be a 2 week team-matching period.\n\nNow, after you finish the onsite, you jump straight to the team matching process. Team matching now happens BEFORE you get an offer, and offers are contingent on team matching completely successfully.\n\nYou'll talk with hiring managers from a number of teams to gauge fit and chemistry: we've heard that sometimes it's a handful, and sometimes it's over 10.\n\nAfter your team matching conversations, your recruiter will ask you to choose a team. In order to move forward, both you and the hiring manager have to opt in.\n\nOnce you make your choice, your recruiter will officially make an offer, and you'll usually have just a few days to make your decision. We hope this will change in the future, but recently Meta has been very aggressive with both offer timelines and with negotiations - they will not negotiate unless you can share competitive offer details from another top-tier company.\n\nOne other key difference between Meta's new process and the old one is what happens during Bootcamp. Historically, Bootcamp took 6 weeks, and in addition to training new hires on  Meta's engineering infrastructure and systems, there'd be a multi-week “speed dating”-esque team matching component.\n\nBootcamp still exists, but now it's much shorter - 2-4 weeks, and the focus is getting new engineers ramped up on generic tools. After that, new engineers will continue to ramp up on their specific teams.\n\nThe team matching process is a bit like speed dating. You meet with hiring managers to gauge fit and chemistry. In order to move forward, both of you have to opt in.\n\n“When the market is good, you can talk to 20 different teams at the same time.”\n\nThere are exceptions – some people with niche skills may get hired for a specific team before they start Bootcamp, but they still have to do the bootcamp period, just not the team-matching part afterwards.\n\n## Meta coding interview preparation resources\n\nWe’ve aggregated a bunch of useful Meta content for you! We have replays of candidates doing mock interviews with Meta interviewers, long-form solutions to common Meta questions, and deep dives into technical topics that tend to come up in Meta interviews.\n\n### Meta interview replays\n\nBelow are a series of mock interview replays, conducted by Meta interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### Solutions to common Meta questions\n\nBelow are common questions that interviewers from Meta ask on our platform. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics\n\nTo figure out what technical topics might come up in your Meta interviews, we did a few things. First, we spoke to a bunch of Meta interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data, the LeetCode question list above, AND our own data-set of mock interviews in the style of Meta. Based on all of the above, here are the technical topics you’re likely to encounter.\n\n## Other Meta interview preparation resources\n\nThe following interview guides and resources can help you better understand Meta’s recruitment process and support your interview prep so you impress the hiring committee.\n\n### System design\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• If you’re primarily going for E5, then mainly practice high-level system design questions. If E6, then focus on low-level questions.\n\n• Reverse system design interviews happen sometimes at Meta, so you might like to practice these too.\n\n### Behavioral\n\n• Thisblog post about behavioral interviewing at Meta, written by a former Meta engineering manager.\n\n• Even though it’s not Meta-specific,A Senior Engineer's Guide to the Amazon Leadership Principles Interviewwill help.\n\n• Practice your ability to demonstrate communication skills with stakeholders AND practice talking about times where there was a conflict and you were able to resolve it.",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/meta-facebook#solutions-to-common-facebook-questions",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer's Guide to the Amazon Leadership Principles Interview",
      "content": "## Creating the Amazon Leadership Principles guide\n\n## About interviewing.io\n\n## How to use the Amazon Leadership Principles guide\n\n## Amazon Leadership Principles Explained\n\n## What Amazon Likes\n\n• Direct challenges\n\n• Showing customer obsession (all the time)\n\n• No answer (more so than a bad answer)\n\n• Stories that go in a perfect full circle\n\n## What Amazon Dislikes\n\n• Conflict rabbit holes\n\n• Not enough impact and metrics\n\n• Not enough focus on individual contribution\n\n• Saying LPs out loud\n\n• Misunderstanding\"Have Backbone; Disagree and Commit\"\n\n## What are Amazon’s Leadership Principles (LPs)?\n\n## In a nutshell, Leadership Principles (LPs) are the 16 values Amazon cares the most about.\n\n### 1. Customer Obsession\n\n• Tell me about a time when you strongly disagreed with your manager or peer on something you considered very important to the business.\n\n• To try to meet the high expectations of our customers, we sometimes promise more than we can deliver. Tell me about a time when you overcommitted yourself or your company.\n\n### 2. Invent and Simplify\n\n• Tell me about a time when you didn’t meet customer’s needs.\n\n• Give me an example of a complex problem you solved with a simple solution.\n\n### 3. Learn and Be Curious\n\n• Give me an example of a mission or goal you didn’t think                 was achievable. We all have things about ourselves we'd                 like to improve on at work. Give me an example of                 something that you've worked on to improve your overall                 work effectiveness.\n\n### 4. Insist on the Highest Standards\n\n• Tell me about a time when you had to work with a difficult customer or user.\n\n• Tell me about a time when you used external trends to                 improve your own company's products or services.\n\n### 5. Deliver Results\n\n• Could you tell me about a time where you were working on a project where you were working with another person. Over time, that person lessened their involvement in the project and you had to take on more responsibility.\n\n• Tell me about a strategic decision you had to make without clear data or benchmarks.\n\n### 6. Strive to be the Earth’s Best Employer\n\n• Tell me about a time when you had to communicate a change in direction that you anticipated people would have concerns with.\n\n• Tell me about a time where you were thrown into a project where you had no experience in.\n\n### 8. Have Backbone; Disagree and Commit\n\n• Often, we must make decisions as a group. Give me an example of a time you committed to a group decision even though you disagreed.\n\n• Tell me about a time where you disagreed with a coworker or PM or manager because you believed the decision they wanted to make was wrong for the customer.\n\n### 9. Success and Scale Bring Broad Responsibility\n\n• Describe a time when you took on work outside of your comfort area.\n\n• Describe a situation where you made an important business decision without consulting your manager.\n\n### 11. Are Right, A Lot\n\n• Tell me about a time when you did not effectively manage your projects and something did not get completed on time.\n\n• Tell me about a time you wouldn’t compromise on achieving a great outcome when others felt something was good enough.\n\n### 12. Hire and Develop the Best\n\n• Tell me about a time when you received negative feedback.\n\n• Describe a time when you improved morale and productivity on your team.\n\n• Give an example of a creative idea you had that proved really difficult to implement.\n\n• Tell me about a time when you encouraged a team member or organization to take a big risk.\n\n### 14. Bias for Action\n\n• Give me an example of a calculated risk that you have taken where speed was critical.\n\n• Tell me about a time where you were the first one to take action on something.\n\n• Tell me about a time you pushed back on a deadline.\n\n• Give me an example of how you have helped save costs or eliminate waste within your role or organization.\n\n• Tell me about a time when you had a disagreement with a colleague or manager.\n\n• Describe a time when you needed to influence a peer who had a differing opinion about a shared goal.\n\n## How to approach the Amazon Leadership Principles interview\n\n### Why interview preparation matters\n\n## High-level strategy to frame your Leadership Principles interview\n\n### The most common pitfall to avoid\n\n### Put Customer Obsession above all else\n\n## What to expect, what to avoid, and what to do during an Amazon Leadership Principles interview\n\n## What to expect when answering questions about Amazon Leadership Principles\n\n## Four common mistakes to avoid when answering Amazon interview questions\n\n## Most Common Mistakes in Terms of Content\n\n### Not enough impact or metrics\n\n### Falling down rabbit holes when asked about conflict\n\n### Not focusing on individual contribution\n\n### Saying Leadership Principles out loud\n\n• Saying “customer obsession”\n\n• Saying “deliver results”\n\n• Saying “delighting users is important”\n\n• Saying “get stuff done”\n\n## Tips for a successful Amazon behavioral interview\n\n### Beat the drum with customer obsession—the most important Leadership Principle\n\n## ANSWER AWithout customer obsession framing\n\n• I had to organize and refactor the codebase. And I thought object-oriented programming was the best approach. But one of my teammates did not buy in. I tried to explain the benefits but did not sway him. I wanted to get the work done, so I ended up going ahead with the approach he proposed. At the end of the day, delivering the feature was more important than proving my point to stick with the object-oriented approach. I made peace with my teammate and went ahead with his approach.\n\n## ANSWER AWith customer obsession framing\n\n• I had to reorganize the codebase and refactor the codebase. And I thought object-oriented programming was the best approach. But my teammate didn't buy in. For the sake of pushing something to prod quicker, we ended up going with his approach.But looking back on it, I wish I would have fought more for the object-oriented approach, and the reason is because user experience is really important to me. If we had the codebase nicely structured with object-oriented design and patterns and hierarchy, it'd make it way easier to maintain and more robust and less buggy. So later on we could develop cool new features for customers and push them out quicker.\n\n### No answer is often better than a bad answer\n\n### The most misunderstood Amazon leadership principle\n\n### Follow four rules when speaking about conflict\n\n#### Clearly articulate the conflict in the first few seconds of your answer.\n\n#### Make sure the topic of a conflict is relevant to your level.\n\n#### Choose actual conflicts, not potential conflicts.\n\n## Example of a potential conflict that got resolved quickly\n\n• “They said X. I said Y. And then they said, ‘Oh, you're right. Actually, Y is better.' And then we did Y.”\n\n## Example of an actual conflict\n\n• “They said X. I said Y. And then time passed. They still said X and I still said Y. So, I did research on X and Y. More time passes. I showed this research to get buy-in from some Important People. Then I showed my research to the People Who Said X. More time passes. The People Who Said X weren't convinced until Z happened. Then the People Who Said X got on board and said Y.”\n\n#### Focus on what happened and stick to the facts.\n\n### Share experiences where you took a big loss\n\n### Questions the candidate asks the interviewer are an opportunity to show signal\n\n## How to practice for a Leadership Principles interview in six steps\n\n### 1Extract the raw data\n\n### 4Refine the stuff that works\n\n### 5Go from good to great\n\n### 6Adopt the Amazon mindset\n\n## Amazon Leadership Principles interview question examples\n\n## Amazon Leadership Principles interview question examples\n\n## Bucket #1: Technical problem solving\n\n## Bucket #2: Learning (and failure)\n\n## Bucket #3: Getting stuff (for the business) done\n\n## Bucket #4: Interpersonal conflict\n\n## Bucket #5: Ambiguity",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/amazon-leadership-principles",
      "author": "interviewing.io team",
      "user_id": ""
    },
    {
      "title": "Senior Engineer's Guide To Microsoft's Interview Process and Questions",
      "content": "## Microsoft’s interview process and questions\n\nMicrosoft’s interview process consists of the following steps:\n\n• Recruiter call (and a hiring manager call from principal engineers and above)\n\n• Technical phone interview or Codility quiz\n\n• Onsite interviews\n\n• Team matching\n\nBefore we get into the details of each of these steps, here are a few general notes about Microsoft’s process, evaluation criteria, and interviewers.\n\nMicrosoft lets you interview with different teams at the same time; if you want to maximize your chances interview with several of them simultaneously.\n\nMicrosoft’s process is mainly (though not fully!) team-dependent. That means that while you interview for a specific team, you may not necessarily be interviewingjustwith people on that team. For example, sometimes you might interview with the hiring manager for a specific team, and your other interviewers will be individual contributors from other teams.\n\nEach team runs their own processes, which can vary quite a bit from team to team as well. Sometimes Microsoft bakes a quasi-team-matching activity into an interview process: where a candidate can meet multiple hiring managers in the same loop. Another variation is some candidates’ first round screens are with a hiring manager instead of a recruiter.\n\n### Step 1: Recruiter call\n\nPlease see the section above called“A note about recruiter calls”\n\n### Step 2: Technical interview (phone screen or a Codility quiz)\n\nMicrosoft’s technical phone screen is a traditional LeetCode-style coding interview, with technical questions ranging from easy to medium. Interviewers aren’t given a rubric. Some of them get training, others don’t. They have freedom to ask whatever they want and judge your technical skills however they want in this round.\n\nIf you end up getting the asynchronousCodilityquiz instead, you sign on and have to answer several algorithmic questions in a short amount of time. In some ways, this is harder than the technical phone screen with the human because if you don’t pass the test cases, you get filtered out. You’re judged on several factors including: test cases, correctness, and code quality.\n\n### Step 3: Onsite\n\nThe onsite format can vary per org, but it typically includes the following round of interviews:\n\n• One behavioral round of behavioral interview questions\n\n• Two or three coding rounds\n\n• One system design round\n\n• One domain-specific round\n\n## Microsoft’s interview types in detail\n\n### Coding\n\nThis is the most important round at Microsoft.\n\n“Since most engineers at Microsoft use C#, if you can, you should use C#, Java, or Python in the technical rounds. This way, your interviewer will be able to understand your code better and may even be able to help.”\n\nMicrosoft usually asks LeetCode-style medium-difficulty questions in coding rounds. Interviewers get to pick their own coding questions, but, according to interviewers, Microsoft favors the following topics (in no particular order):\n\n• Arrays and strings\n\n• Linked lists\n\n• Graphs and trees\n\nLeetCode’s Top Questions for Microsoftis also a helpful resource.\n\n“Tree questions are most popular, e.g., various types of tree sum, tree traversals of certain orders, subtrees, etc.”\n\nDynamic programming used to basically never happen, but now it’s a little more common. When you do get dynamic programming problems, it’s usually the classic ones like coin change, stair steps, edit distance, and various types of counting problems.\n\nTooling for coding interviews is at the team’s discretion, but many teams use Codility.\n\nFor everything you need to prepare for Microsoft’s coding interview, check out the section called \"Microsoft coding interview preparation resources\" below.\n\n### System design\n\nSystem design is tied for the second most important round at Microsoft, and it’s sometimes conducted by a hiring manager. One idiosyncratic aspect of Microsoft’s process is their penchant for asking questions about compliance-related topics.\n\n“My Microsoft interview was insanely easy. I tried to step it up when I started being an interviewer at Microsoft. But then I realized that's how it has to be. Technical is like 25% of it. It’s not a generic FAANG interview. It’s more about three things: a) ‘How well does this candidate know this system they’re going to be working on?’, b) ‘How do they meet the exact needs we have on this team?’, and c) ‘Do they understand the little things we value? Like compliance, manipulating data, data pipelines, EU data processing, etc.’”\n\n“Microsoft is obsessed with the details of compliance. I don’t think I have seen a system that is as set up for auditing as Microsoft. Employees are asked to log so much. There’s a centralized grid system which is built into Azure. All logs are to be routed into that. This allows for centralized log spanning and auditing. Which I have not seen anywhere else.”\n\nOutside of compliance-related questions, here are examples of other system design questions you might encounter:\n\n• Let's go back in time, how would you ship cargo to customers? Discuss an approach that touches on availability, latency, reliability, communication, etc.\n\n• Let's say we are interested in palindromes and we want to store them durably whenever we come up with them. Design a system that lets you enter a new palindrome every time someone comes up with one, and allows users to check if a palindrome exists in a system.\n\n• Assume you are a teacher and you want to test students if they know the country names correctly. You are provided a list of countries and pictures. Design a webpage + backend API that mimics a test for students to evaluate their knowledge (this would be for a full-stack role).\n\nTooling for system design interviews is at the team’s discretion, but many Microsoft employees use Codility Canvas or Excalidraw.\n\n### Domain-specific round\n\nThe domain-specific round is tied for the second most important round at Microsoft. Microsoft is more likely to do these types of rounds than other FAANGs, and these rounds can feel similar to system design but involve some coding.\n\nUsually, domain-specific rounds are customized to the domain a given team works on and dives deep into that technology. So, whatever area this team is in (cloud networking, big data, etc.), that’s what they’ll ask you about.\n\nOn some occasions, Microsoft customizes a round to the candidate’s skills. For example, if you’re a backend engineer, they might ask you to design an API or design a database. They also may ask you open ended trivia questions about the programming language you are most familiar with.\n\n“Another thing that happens in these rounds is they’ll ask you to discuss a complicated problem you have solved at your job. It's good for candidates to prepare to discuss 2-3 projects in detail: how did they implement caching, deal with scaling issues, and so on.”\n\nFinally, you may get a scenario question that’s commensurate with your skill set. For instance, if you’re a back-end engineer, you may get a question like, “Imagine you're in a team and we're building a credit card registration system. And it's used by different firms. How do you build the interface?”\n\n### Behavioral\n\nThis is the least important round at Microsoft: the lowest effort way to pass is to not blame your teammates, not show red flags, and stay positive.\n\nMicrosoft doesn’t have a specific set of traits they’re looking for. You can expect the usual questions about your strengths and weaknesses, failure, conflicts with colleagues, projects, and lessons you’ve learned from past experiences in your career.\n\n“A lot of people struggle with ‘What are your top 2 strengths and weaknesses?’ probably because they are trying to make up an answer on the spot. Good to prep answers to typical behavioral questions in advance.”\n\nUltimately, they are screening for three soft skills: positivity, ownership, and communication. They want to hire friendly people who can do the work and not blame others. This is not Apple or Netflix, where they want a particular flavor of personality, or where they ask interviewers to hire candidates they’d like to befriend. It’s more neutral.\n\nBehavioral rounds can sometimes have a coding component as well. When this happens, it might be an easy/medium-difficulty 20-min LeetCode-style problem.\n\n## How Microsoft makes hiring decisions\n\nInterviewers grade candidates on different scales, depending on the team.\n\nSome orgs have an asynchronous feedback process, other orgs rely on live discussion, and still-other orgs do both. Some orgs have rubrics, and others don’t. Here’s how a rubric looks at one org:\n\n• Junior: Has growth mindset, seeks to understand ideas\n\n• Senior: Drives self development, models openness, failure is okay, open to different ideas\n\n• Principal: Consistently challenges group thinking towards productive discussion\n\n## Microsoft coding interview preparation resources\n\nHere are a few more interview tips and resources to help you prep for a software developer or software engineer interview at Microsoft.\n\n• Microsoft interviewers can ask whatever questions they want, yet some interviewers repeat questions, soLeetCode’s Top Questions for Microsoftis somewhat helpful.\n\n• Study up on the services the team you’re interviewing with uses.\n\n• Ask your recruiter for specifics about your rounds. If you get nothing helpful, then practice practical questions, LeetCode-style questions, and domain-specific questions.\n\nIn addition, we’ve aggregated a bunch of useful Microsoft content for you! We have replays of candidates doing mock interviews with Microsoft interviewers, long-form solutions to common Microsoft questions, and deep dives into technical topics that tend to come up in Microsoft interviews.\n\n### Microsoft interview replays\n\nBelow are a series of mock interview replays, conducted by Microsoft interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### Solutions to common Microsoft questions\n\nBelow are common questions that interviewers from Microsoft ask on our platform. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics\n\nTo figure out what technical topics will come up in your Microsoft interviews, we did two things. First, we spoke to a bunch of Microsoft interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data AND our own data-set of mock interviews in the style of Microsoft. Based on all of the above, here are the technical topics you’re likely to encounter:\n\n## Other Microsoft interview preparation resources\n\n### Behavioral\n\n• Nothing specific, butA Senior Engineer's Guide to the Amazon Leadership Principles Interviewwould help you go above and beyond\n\n### System design and domain-specific\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• Compliance-related topics\n\n• Study up on the services the team you’re interviewing with uses",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/microsoft#solutions-to-common-microsoft-questions",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer’s Guide to Google’s Interview Process and Questions",
      "content": "## Google’s interview process and questions\n\nGoogle’s interview process consists of the following steps:\n\n• Recruiter call\n\n• Technical phone screen (and possibly a second technical phone screen)\n\n• Team matching\n\nBefore we get into the details of each of these steps, here are a few general notes about Google’s job interview process, evaluation criteria, and interviewers.\n\nAll human organizations behave like a metaphor; Google isn’t a sports team, or a family, or an army. It’s a cool grad school. Larry and Sergey set up their offices based on the model of a Stanford campus on purpose. They wanted to create an environment and company culture where people can feel chill enough to talk about anything. In general, Google interviewers tend to be more collaborative than other FAANG interviewers. At Google, the slower you go, the faster you get there.\n\nGoogle has one big, centralized interview process that’s completely divorced from which team you might end up on, which means that you will NOT, however, be interviewing with your future team members – Google has a horde of interchangeable technical interviewers who have all been trained on the same process. If you do well, there will be a team matching component at the end.\n\nAt Google, because the process is centralized, you cannot interview with multiple teams concurrently, which means you don’t get multiple shots on goal. Not only that, but Google has a limit for how many chances they’ll give you before you’re blocked from interviewing again.\n\n“You can interview three times in 5 years. If you fail all three times then you can’t interview at Google again: you’re blocked.”\n\nNote that recently, there have been rumblings of Google changing their process to something more decentralized, where a hiring manager chooses you for a teambeforeyou interview, nullifying the need for post-onsite team matching. As far as we know, this new model is being tried out right now, but the change hasn’t been adopted company-wide.\n\nGoogle also has rules for candidates whopasstheir interviews:\n\n“If you pass Google’s onsite, and end up not taking the offer, your “passing of the onsite '' is good for about a year. And if you choose to re-engage in that time, the process varies widely. Usually you can skip the phone interview. Most times you have to do the full or partial onsite. If you choose to re-engage, tell their recruiters ‘I already passed the onsite’ and push to get as many steps skipped as you can.”\n\nGoogle is not results-oriented. They’re process oriented. In other words, they care more about the “How” than the “What”. You’ve heard it before, and it’s true – they don’t need you to get to the optimal solution, but they do need to be impressed by your thought process. Because of this, Google is more attracted to comfort with ambiguity than speed.\n\nOddly, in spite of using a centralized interview process, Google doesn’t have in-depth training for its interviewers; it may surprise some candidates that there’s a larger-than-expected number of bad interviewers at Google.\n\n“There is one thing that always bothered me about the Google interview process. And it's something that a lot of candidates don’t realize. There are a lot of bad interviewers at Google. Mostly because there are a lot of highly talented people who think they know everything.\n\nI was the interviewer for the third interview round at in-person onsite. And I saw the candidate was there by himself; the second interviewer wasn’t there. The candidate was alone because the second interviewer got frustrated – they thought the candidate wasn’t worth the time for an onsite, so they left early.”\n\n“Google is more likely than Facebook to design questions on purpose to be tricky. At Google, sometimes this is intentionally disguising technical questions to look like X but they’re really Y. And other times at Google, it’s designing a technical question such that if a candidate doesn’t ask a particular question they likely won’t get the answer.”\n\n### Step 1: Recruiter call\n\nPlease see the section above called“A note about recruiter calls”\n\n### Step 2: Technical phone screen\n\nGoogle’s technical phone screen is a coding interview that focuses exclusively on data structures and algorithms questions. Your interviewer will ask you to write code to solve a specific problem.\n\nOne idiosyncratic aspect of Google’s process is their insistence on using Google docs for writing code (versus other companies which tend to use tools like CoderPad). This can be a bit jarring for those of us who are used to writing code in an IDE that does things like auto-indentation, auto-complete, syntax highlighting, adding missing parentheses or brackets etc. Despite not using an IDE, your interviewer will expect you to produce syntactically correct code. This is really hard.\n\nBefore your Google interview, you should practice in Google docs so you don’t forget to close parentheses or indent your code.\n\nThat said, more recently, Google has started interviewing using an internal tool with syntax highlighting, indentation and brackets completion. Whether you get to use it or not depends on your geography.\n\n### Step 2.5: (In some cases) Another technical phone screen\n\nThe second phone screen happens only if the first one did not produce enough signal to move forward. Perhaps you didn’t communicate your thought process well enough, your code wasn’t of good enough quality, or you weren’t fast enough – but it’ll be only one of these – if you struggled with two or all three, most likely you aren’t moving forward.\n\nIf you do get scheduled for a second phone screen, push your recruiter to give you detailed feedback so you can do better the second time – nothing beats knowingexactlywhere you need to improve. You probably won’t get a response, but if you do it’s a large boost to your prep.\n\nIf you get a second phone screen it will be very similar to the first in terms of structure and content.\n\n### Step 3: Onsite\n\nThe Google onsite usually includes 4-6 rounds. Recently, there have been some internal experiments with the format, but generally the rounds are primarily coding, and secondarily system design. Some candidates get a single behavioral round, and others get to skip it.\n\nThe more experience you have, the higher proportion of system design and domain-specific questions you can expect to be asked.\n\n## Google’s interview types in detail\n\nAs we mentioned above, Google is process-oriented rather than results-oriented. As such, communication during coding and system design rounds is more important at Google than the end result.\n\n### Coding\n\nThe most important rounds at Google are coding. In fact, Google is the only FAANG company that considers coding to be more important than system design. Google’s coding rounds are about complexity more than speed. Their interviewers are allowed to ask anything they want, so it's more likely you might get a question you’ve never practiced before.\n\nGoogle interviewers are more likely than any other FAANG company to purposefully design a question so it tricks candidates. For example, they’ll disguise a question to look like it’s Three Sum, but that’s a red herring – it’s not a Three Sum problem. It just looks like one.\n\nA lot of what you’ll see in the onsite coding mirrors what you saw in the technical phone screen. During the onsite, you may see your interviewer layer more complexity on top of questions – they’ll design a question where they plan for you to get to the solution, then when you do they’ll move the goalposts and say something like: “Remember that assumption we made earlier about [X thing]? Let’s remove that. How would that change your approach?”\n\n“At Google, I’ve passed more people thatarrive at the optimal solution without coding itthan I do people whoarrive at the optimal solution and code it. The actual code you write is less important than the thought process.”\n\n“Google is highly unstructured. Everyone can ask whatever they want.”\n\nEven though they can ask whatever they want, Google interviewers have a question bank too, but the bank is much much bigger than Facebook’s bank and, like Facebook’s bank, it’s community maintained. Some interviewers never deviate from the bank, and others don’t touch it, preferring instead to formulate their own unique questions..\n\nThis speaks to Google rewarding the “how” (aka “how a candidate got there”) or their thought processes. It also speaks to Google rewarding comfort with ambiguity. Other FAANGs have specific niche topics they love hearing and talking about (such as “performance” at Amazon), but Google is more abstract. Google might love speaking about and asking about ambiguity more than any other FAANG.\n\nFinally, Google’s coding questions are never practical. They are always theoretical. They will never ask you to pull up your own environment and write a program. They will also never ask you to take a solution to a coding problem and apply it to a real world scenario. When prepping for Google, only practice theoretical questions.\n\nFor everything you need to prepare for Google’s coding interview, check out the section called \"Google coding interview preparation resources\" below.\n\n### System design\n\nThe second most important onsite interview type at Google is system design. Again, they are allowed to ask anything they want, so don’t be scared off if you get a question you’ve never practiced before.\n\nHigh-level and low-level system design questions are both likely. Some examples include:\n\n• Design a load balancer\n\n• Design Facebook Messenger\n\n• Design an auth platform\n\nGoogle system design interviewers also tend to design problems that include linchpin questions. These are questions where if you don’t ask about a specific aspect of the problem, you can’t really solve it. For example, an older system design question at Google asked you to set up a service in some foreign country, and in the prompt, the interviewer mentioned that you have a dependency on some third party service.\n\nThe linchpin question to ask: “What’s the service level agreement for that 3rd party service?” If you didn’t ask that (or something like it), then you wouldn’t be able to effectively reason about availability, which you’d need to do in order to do well on the question.\n\nTo avoid getting tricked, ask even more questions in Google system design rounds than you normally would.\n\n### Behavioral\n\nThe least important round at Google is the behavioral round. They have the easiest behavioral screen in FAANG. Plus, you might complete an onsite at Google without a behavioral round because they’re optional. It’s not clear which candidates get them and which don’t. This is another reason to not prep too hard for their behavioral round.\n\nIf you do get some behavioral questions, they might be one of the following:\n\n• Tell me about a time when you had a colleague who was difficult to work with.\n\n• Tell me about a time you received negative feedback.\n\n• Tell me about a time you were mentoring a more junior engineer and your feedback wasn’t getting through to them.\n\n• If you were going to plan an offsite for the team, how would you do it?\n\nGoogle is also more likely to ask you reflective questions. Most other FAANGs stick to situational questions such as, “Tell me of a time when…”. Those situational questions ask you to describe a past circumstance or scenario you’ve actually experienced and are fairly straightforward to answer. Reflective questions, on the other hand, can be tricky because they’re asking you to reflect on, or speak to, something less concrete, e.g., “What do you think about setting goals?”\n\nThe smart way to answer a reflective question is to re-formulate it, and then answer as if it’s a situational question. So, “What do you think about setting goals” instead becomes,”Talk about a time you used goal-setting as a time management strategy”, which you can now more-easily answer by describing a real experience and outcome, “The last time I set goals…etc”, as opposed to wading into theories about personal agency. “I think goals are cool and important…” might not get high marks.\n\n“To be honest, there was some cultural backlash at Google when they announced that we had to do these behavioral interviews. What that means is you may get an interviewer who has very little interest in conducting this type of interview. Which could go very good or very bad. I have some peers who think this should not be a part of the interview process. So they give everyone the highest marks, pretty much just to eliminate this category from the interview. Google is primarily engineers, and most of the engineers think that this is a bunch of HR BS. So they either just won’t accept any calendar invites they get or they'll just check the boxes.”\n\n## How Google makes hiring decisions\n\nMost of the time, the post-interview feedback process at Google is completely asynchronous, and interviewers don’t meet live to discuss hiring decisions. That’s one reason why interviewing at Google isn’t like interviewing with humans: it’s more akin to interviewing with a machine.\n\nEach interviewer rates candidates on the following seven-point scale: Strong No-Hire, No Hire, Leaning No-Hire, On The Fence, Leaning Hire, Hire, and Strong Hire.\n\nHow this affects candidates is simple: a Strong Hire can get you an offer, but it can also buy you a second chance. If you don’t get an offer, but you get a Strong Hire from one of your interviewers, you might be offered one bonus interview round to decide whether you get an offer or not.\n\nThat said, you don’t need to get a “Strong Hire” to get a second chance. Overall, if you showed enough signal to not-fail but not enough to pass, sometimes they will ask you to do an additional round.\n\nIf you get lucky enough to get a round where you are really excelling, don’t quit while you’re ahead. Keep going. In that round, don’t just strive to win; strive for total domination.\n\nA “Strong No-Hire” bars you from interviewing at Google for some time. Reports vary here, but one of our Google interviewers told us that if you get a Strong No-Hire, you might be frozen out for several years.\n\nIf you passed overall then you will move on to the hiring committee phase.\n\n### Hiring committee review & team matching\n\nGoogle’s hiring committee consists of four to five engineers and engineering managers who have not interviewed you, with the intent of making hiring decisions as objective as possible.\n\nGoing into the hiring committee review, your recruiter will prepare a packet that consists of your resume, any notes from the person who referred you (if you were referred), your recruiter’s notes from their call with you, and all the feedback from your interviewers, from the technical phone screen to the onsite.\n\nIf you’re told you’ve passed the onsite, ask if you can submit a more recent copy of your resume. Some Google recruiters will let your new resume be the only resume the Hiring Committee sees. Your resume you submitted for the online application probably wasn’t customized for Google, but what you submit to the hiring committee can be.\n\nWhen the committee meets, they evaluate all the data on you holistically, and they need a consensus in order to decide to make a hire.\n\nOther than hire/no-hire decisions, the hiring committee will also decide on leveling. Ever since COVID and the rise of remote interviewing, we’ve gotten more and more reports from users that they’re being down-leveled at Google. Apparently the rationale is that Google doesn’t feel like they get as much signal from remote interviews as they did from in-person ones, and as such, when they don’t get enough of a signal for a hire but too much good signal for a rejection: they downlevel – when you want to reduce the probability of a false positives for L5… offer L4!\n\nEngineers who are downleveled at Google accept the lower level offer a lot of the time, especially in the current climate. In some extreme cases, we’ve seen engineering managers with 10+ YoE accept an L3 (basically a new grad) offer.\n\nOnce you get past the hiring committee, you will move on to team matching. The team matching process is a bit like speed dating. In the ideal case, your recruiter will propose a few teams that are actively looking for someone with your skills, and then you’ll meet with the hiring manager from each team to gauge cultural fit and chemistry. In order to move forward, both of you have to opt in.\n\nThat said, there are rare instances where a candidate will get past the hiring committee but then not find a team that they gel with.\n\n“Getting five scores of ‘Leaning Hire’ is most likely to result in a ‘No Hire’ decision. I have seen many cases where the candidates got five scores of ‘Leaning Hire’, and the recruiter gave them positive feedback too, but the candidate got rejected. In these cases, every person the candidate dealt with directly (the interviewers) were positive, yet the hiring committee (the only people in the process who dealt with the candidate indirectly) rejected the candidate.”\n\n## Google coding interview preparation resources\n\nHere are some tips for preparing for your Google coding interview:\n\n• Practice in teams; have someone make up a question. Then have them disguise it or plant a red herring in it (for example, purposefully have it look like Three Sum, but it isn’t Three Sum).\n\n• Practice with someone who can change the parameters after you’ve solved the main question by saying things like “Remember that assumption X we made earlier. What would happen if we removed that assumption?”\n\n• If you see a question online that has been marked as “Asked in a Google interview”, then it is not going to be asked in your interview, period. Google is very good at retiring questions that have been leaked.\n\n• Practice without the aid of an editor or IDE: in a Google doc, on a whiteboard, or with pen and paper.\n\nIn addition, we’ve aggregated a bunch of useful Google content for you! We have replays of candidates doing mock interviews with Google interviewers, long-form solutions to common Google questions, and deep dives into technical topics that tend to come up in Google interviews.\n\n### Google interview replays\n\nBelow are a series of mock interview replays, conducted by Google interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### Solutions to common Google questions\n\nBelow are common questions that interviewers from Google ask on our platform. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics\n\nTo figure out what technical topics will come up in your Google interviews, we did two things. First, we spoke to a bunch of Google interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data AND our own data-set of mock interviews in the style of Google. Based on all of the above, here are the technical topics you’re likely to encounter:\n\n## Other Google interview preparation resources\n\n### System design\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• Practice low-level system design questions, such as “Design a load balancer”, as much if not more than high-level system design questions, such as “Design Facebook Messenger.”\n\n### Behavioral\n\n• While brushing up via a practice interview or two never hurts, this shouldn’t be your focus with Google. As they joke internally, just don’t be a serial killer!",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/google#solutions-to-common-google-questions",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer’s Guide to Netflix's Interview Process and Questions",
      "content": "## Netflix’s interview process and questions\n\nNetflix’s interview process consists of the following steps:\n\n• Recruiter call\n\n• Hiring manager screen\n\n• Technical phone interview\n\n• A very long onsite\n\nBefore we get into the details of each of these steps, here are a few general notes about Netflix’s process, evaluation criteria, and interviewers.\n\nEvery human organization views themselves as a metaphor; Netflix doesn’t view themselves as a family like some other tech companies, they view themselves as a high-caliber sports team (in fact, Netflix calls their employees a “dream team”). They explain this metaphor themselves in their infamous culture memo.\n\nFinally, Netflix’s interview process is decentralized and team-dependent. Moreover, you can interview with multiple teams at Netflix concurrently, which can help you increase your odds of securing a job offer.\n\n### Step 1: Recruiter call\n\nPlease see the section above called“A note about recruiter calls”\n\n### Step 2: Hiring manager screen\n\nThis is a 30 minute call. A former Netflix employee called this round “Very chill, especially compared to the onsite.” This round consists of bidirectional surface-level questions.\n\nThe hiring manager will also be selling you on Netflix. Hiring managers doing selling is business as usual, but in this case, it serves an additional purpose – because their onsite is by far the most intense, they have to sell harder upfront because the onsite is a bigger commitment for the candidates.\n\n### Step 3: Technical phone screen\n\nThe Netflix technical phone screen is a coding interview that typically lasts 45-60 minutes. There is significant inter-team variation on what these interviews cover, and the tooling you use during these interviews also varies by team,\n\n### Step 4: Onsite\n\nOnsite interview structure varies from team to team, but you’ll have roughly 8 interviews focused primarily on system design, then behavioral, and then coding.\n\nDepending on the length of the onsite, Netflix recruiting may ask you if you’d prefer to split the onsite over two days, and we recommend that you proactively ask to do that, given how taxing the behavioral and system design portions are!\n\nNetflix is the only FAANG that routinely includes 1-2 directors in their onsite loops. If your loop has two, it’ll be one director will be from your org and another from a partner org. Netflix does this to reduce bias. One director may do a system design interview, and the other will do a behavioral interview.\n\n“Don’t be thrown off by having to talk to directors. Just stick to the principles: when you speak about technical stuff you’ve worked on, focus on scale, availability, and security. When you speak about behavioral stuff: use shared ideas from their culture deck, take accountability for your wins and failures, and demonstrate metrics and impact.”\n\n“The HRBP [which is basically a very senior recruiting function] and the director would typically focus on behavioral rounds. I have also seen directors spending time (30 mins) just letting candidates ask and clarify any questions that they might have regarding the team, Netflix culture, career growth path or any other aspects. So, a strong recommendation would be to be ready with your genuine questions list and get things clarified in such interviews. Candid conversation is one of the key values at Netflix and asking genuine concerns if any is seen through good lenses, as that establishes candidates' seriousness about the role to some extent.”\n\n## Netflix’s interview types in detail\n\n### Coding\n\nThe technical questions Netflix asks vary from team to team. Some teams don’t ask LeetCode questions. Other teams will ask medium-difficulty LeetCode-style coding questions with a creative/practical twist.\n\nThese rounds are going to change team by team, but the pattern we’ve noticed is that Netflix coding questions often come in two parts.\n\nTypically there is one question and, in scenarios where edge cases and tests are done early, say within 45 minutes, the interviewer may choose to  spend some time discussing general large scale engineering concepts and distributed systems (like microservices, scalability, etc.). For instance, some expansions could be:\n\n• A system design expansion on top of the coding question, such as a practical application where they ask you to apply the solution you just found to a part of their real-life system\n\n• A deep dive into a specific skill set (e.g., if this team codes in Java: they’ll have a round all about multithreading for Java specifically)\n\n• For everything you need to prepare for Netflix’s coding interview, check out the section called \"Netflix coding interview preparation resources\" below.\n\n### System design\n\nThis is the most important round at Netflix. Coding carries the least weight, behavioral carries a lot, and system design has the most.\n\nNetflix system design rounds are highly unique and highly challenging. Netflix is to system design as Google is to coding; these technical interview rounds include the most difficult and bespoke questions.\n\nSimilar to how Amazon loves Leadership Principles, Netflix loves system design so much they even throw it into coding rounds sometimes – first, you solve a LeetCode-style problem. Then they ask you to apply it to a real-world use case.\n\nThat said, Netflix system design rounds are easier to prepare for if you know the patterns: Netflix loves scale. Netflix never wants to go down, and Netflix hates when things aren’t secure. Availability is super important to them; they want to ask and hear about tactics to scale systems, keep systems highly available, and maintain secure systems.\n\nAt Netflix, you’re likely to see unique questions that you won’t get anywhere else, and the system design round is the part of the process that Netflix interviewers take the most pride in, so they make up hard, one-of-a-kind questions from scratch. Thematically, their questions are more likely to be focused on scaling. They also like to ask about security and availability.\n\nIn fact, Netflix is more likely than the rest of FAANG to give you a system design round focused solely on security. For instance, you might get asked what you would do during a DDoS attack, and the entirety of the session will be spent drilling down into the details. And because they’re also obsessed with availability, you might get questions around backups and what to do if a service goes down.\n\nMoreover, as with their coding rounds, Netflix prefers questions with a practical application, and they’re likely to ask you about something they’re working on right now. If you research the hell out of their architecture – specifically the service that particular team is in charge of – and the other services this service interacts with, you’ll be in good shape.\n\nYou’re also likely to see a “reverse system design” round, where your interviewer will ask you pointed questions about the systems you’ve worked on before, e.g., the largest scale system you’ve worked on, how did you manage it, how did you scale it, etc.\n\nQuestions they most likelywon’task are product-focused questions, such as “Design Spotify”.\n\nLearn about Netflix’s overall architecture so you can a) speak their language, and b) build or speak of something similar (in the interview) that Netflix has already built but simpler.\n\nFor the team you interview with: what’s their tech stack? What open source stuff do they do? With which other services might their service interact? That last question is most critical. If you can put forethought into how their current system works, you’ll have a huge leg up; then all you’ll need to do is discuss what you learned about their system to score a bunch of points with any of their interviewers.\n\nWhat tooling you use in these interviews depends on the team you’re interviewing with.\n\n### Behavioral\n\nAnswers to behavioral questions are almost as important as system design at Netflix. You’ll get rejected if you fail the behavioral screen.\n\nThese interviews have a heavy emphasis on the candidate being a cultural fit, being able to work in a team, having curiosity, and being product minded, highly motivated individuals capable of driving products forward.\n\nA unique part of Netflix’s behavioral interview is the “Dream Team” interview.  This is a slightly more intense behavioral round conducted by a director. The \"volume\" is turned up on all of the things you might see in a typical behavioral round at Netflix (scale, accountability, open communication about concerns, high risk and high reward.)\n\n“Netflix doesn’t hire as much as other FAANGs, so they want to make sure you're a star. That’s what the ‘Dream Team’ interview is about.”\n\nOne key thing you need to do before your Netflix behavioral interview is read their culture memo. Our interviewers tell us that if you don’t do this, you will fail the behavioral round.\n\n“The culture illustrated in theculture memois sort of accurate to how the culture at Netflix actually is, but the actual culture is less intense. Team members tend to get along really well. You don’t compete with others in your performance review like it is at companies like Facebook. We’re not ranked against peers, so people are more willing to help each other out.”\n\nNetflix will ask about impressive things you’ve done, as well as dig into your motivation (your “why”). This round will feel like you’re doing self-promotion. Typical questions will ask about your favorite project, latest project, and most significant project, as well as open-ended questions about what you’re looking for in your next role and why you’re interested in Netflix.\n\nPromote yourself early and often in Netflix behavioral rounds. Promote yourself proactively. Metrics and impact statements are effective ways to promote yourself because they convey a sense of scale and complexity.\n\nIt can be nerve-wracking to talk to a director for 45-60 minutes. It’s more nerve-wracking when, out the gate, they ask you to describe the biggest thing you’ve ever worked on. When talking to a director, it’s more important to have metrics and impact statements.\n\n## How Netflix makes hiring decisions\n\nNetflix interviewers are untrained, their questions are unstandardized, their interviews are team-dependent, and their decision-making north star is “Why”. You can interview with multiple teams concurrently, effectively giving you multiple shots on goal.\n\nThere’s also no specific company-wide scale for performance at Netflix. This is different from, say, Google, where all candidates are graded on the same “Strong Hire, Hire, Neutral, No Hire, Strong No-Hire” scale. Different teams have different processes, but most decisions are made based on live post-onsite discussions.\n\n“Netflix hiring decisions are black and white: pass or fail. And then you discuss if you'd be open to changing your mind. The only difference between Apple and Netflix was how they defined cultural fit. Besides that the hiring decisions were made in the same way: informal, mainly based on live discussions, binary decisions, and striving for consensus.”\n\nImpression management is more powerful at companies that do live feedback discussions. To learn more about impression management, check out the resources to prepare for Netflix later in this section.\n\n## Netflix coding interview preparation resources\n\nWe’ve aggregated a bunch of useful Netflix content for you! We have replays of candidates doing mock interviews with Netflix interviewers, long-form solutions to common Netflix questions, and deep dives into technical topics that tend to come up in Netflix interviews.\n\n### Netflix interview replays\n\nBelow are a series of mock interview replays, conducted by Netflix interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### Solutions to common Netflix questions\n\nBelow are common questions that interviewers from Netflix ask on our platform. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics\n\nTo figure out what technical topics will come up in your Netflix interviews, we did two things. First, we spoke to a bunch of Netflix interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data AND our own data-set of mock interviews in the style of Netflix. Based on all of the above, here are the technical topics you’re likely to encounter:\n\n## Other Netflix interview preparation resources\n\nThe resources listed below are designed to help with various aspects of Netflix interview prep, from technical problem-solving to understanding the company’s core values.\n\n### System design\n\nSince Netflix has the most difficult system design screen (and their version of this round has a lot of overlap with other FAANGs), if you prep for Netflix, you’re also upskilling for system design rounds at all FAANGs. We recommend the following resources to all engineers interviewing at FAANG:\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• Brush up on scaling, security, availability, microservices, and failure recovery/backups\n\n• Research the hell out of the technology the team you’re interviewing with makes. Then practice taking a low-level system design question, coming to a quick solution, and then applying it to a piece of the real-world system this specific team works on.\n\n• Practice low-level system design questions more than high-level ones.\n\n### Behavioral\n\nThese resources will help you “learn their language.” Then, when you communicate with Netflix, speak their language.\n\n• Khan Academy’s intro to impression management\n\n• Netflix’s famous culture slide deck\n\n• Watch a few videos on theYouTube Channel called “WeAreNetflix”",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/netflix",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "Ultimate Guide to FAANG Interviews for Senior Engineers",
      "content": "There are lots of guides out there to FAANG interview processes.This one is the most thorough and the most detailed because it’s the only one madeby interviewers for candidates– we spent hundreds of hours talking to dozens of current and former FAANG interviewers about their processes. Throughout this guide, you’ll see a bunch of direct quotes from these interviewers, where they describe the idiosyncrasies of each company’s process and bar in their own words. We’re fortunate to have them in the interviewing.io community, and we’re lucky that we can collaborate with them on this type of content. As you can imagine, they all requested to stay anonymous, but we want to thank them here, first and foremost.\n\n## Introduction to FAANG interviews\n\nFAANG interviews are a gauntlet, but you can pass them even if you doubt yourself – interviewing is easier once you learn a company’s operating metaphor. George Lakoff (neuroscience and artificial Intelligence researcher) says that every human organization has a metaphor they operate as. If you ask an employee at a FAANG company about their metaphor, you’ll probably receive a blank stare in return. But if you look at the interviewing data of that same FAANG company, the metaphors jump out of the data set like bread out of a toaster.\n\nThis guide will walk you through all the FAANGs’ metaphors and the unwritten codes of those metaphors: what they reward, what they punish, and what they’re blind to. To show them you’re obviously a part of their tribe, model their metaphors and unwritten codes.\n\nMetaphors aside, this guide will also walk you through the unglamorous logistics of every FAANG’s interview process so that you know how many steps there are, what those steps entail, and what kinds of questions they ask. Our goal is to have you walk in and be completely unfazed by the proceedings because you’re expecting them.\n\nOf course, even with all the insider info in the world, if you’re not prepared for technical interviews, you will fail, so we’d be remiss if we didn’t share some useful insights about practice to help you on your journey.\n\n## About this guide\n\nThere are 3 steps to getting a strong offer at FAANG.\n\n• Step 1: Get Interview.\n\n• Step 2: Do Interview.\n\n• Step 3: Negotiate.\n\nSteps 1 and 3 are out of scope for this post, which is solely focused on Step 2.\n\nMoreover, this guide is written for experienced, back-end leaning engineers – interview processes are usually different for juniors, but we won’t be getting into those differences. Finally, we won’t be getting into the differences in process for front-end engineers, SREs, etc. That said, if you’re targeting those roles, you’ll still get value out of this guide.\n\nIn Part 1 of this guide, we’ll highlight key similarities and differences between the FAANG companies, namely:\n\n• Microsoft (they’re not officially FAANG, but we’re including them anyway – from now on, when we say “FAANG”, we mean Microsoft as well)\n\nIn Part 2, we’ll go through each company one by one and tell you how each of their processes work and how to prepare for each one.\n\nIf you’re planning on interviewing with multiple FAANGS, we recommend reading Part 1 first. If you'd prefer to skip straight to a company’s individual guide then just click on it in the table of contents to the left! Individual guides include more detailed information on company-specific coding interviews, behavioral interviews, and anecdotes from actual interview experiences.\n\nAll of these big tech companies share grueling interview processes, strong initial compensation packages, and above average benefits. They compete with each other for the same engineers. If tech has a food chain, they’re at the top. Most other tech companies copy or are influenced by what FAANG does.\n\nThere are also a number of myths about FAANG interview processes. Two big ones are that Amazon has the lowest bar, and Google has the highest bar. That’s not true; we have the data. The reality is that all of their bars are different. It’s not a linear comparison. It’s a multidimensional comparison. Because of that, it’s impossible to say something like, “The entire process at Google is harder than the entire process at Amazon.” They’re simply different processes.\n\n“My friend interviewed at Google and Facebook, and he passed both loops. At Google, he was offered L6. At Facebook, he was offered L4. Speaking about luck: this is the same person with the same experience. And the level of difference– at two of the most trusted names in tech–was two levels of seniority.\n\nAnd one common idea in big tech is that Google’s process is easier than Facebook’s. But you can see here: it really depends. After all, this person accepted the L4 role at Facebook because the compensation package was bigger than the role at Google for L6.”\n\nLong story short: it’s complicated. That’s exactly why we wrote this guide: to demystify the differences, to decouple the 6-headed monster, and to demonstrate how to attack each head, one at a time.\n\n## 3 tips for FAANG interview success\n\nThis is the ultimate insider’s guide to tech interviews at FAANG. However, even with all the insider info in the world, if you’re not prepared for technical interviews, you will fail, so we’d be remiss if we didn’t share some useful insights about practice to help you on your journey. Yes, we know we’re a practice platform, and, look, you don’t have to practice with us. But you should practice! Here’s why.\n\n### 1. Do five practice interviews\n\nThree different startups with robust data sets on software engineering interviews found eerily similar data points about what happens after you do five technical interviews. I worked at all three companies and saw this data myself.\n\n• In a previous article abouthow to know when you're ready to interview at FAANGwe shared that completing 5 technical interviews (mock interviews or real) doubles your chances of passing a subsequent technical interview.\n\n• Triplebyte found that the chances of gettingat least 1 offerincreases with each onsite you do, up until 5 onsites. For each onsite completed after the 5th, your chances of getting an offer level off at 80-85%.\n\n• Pathrise found that most of their engineers failed 4-5 onsites before they got an offer.\n\nMind you, these datasets were quite different: Triplebyte skewed towards folks with nontraditional backgrounds, interviewing.io inclined towards senior backend engineers, and Pathrise was mainly junior engineers. Despite that, the number five emerged across these data sets, and it’s clear that something happens after you complete five technical interviews. We can’t explain what yet. But the data is screaming in all caps: there is a therethere. One more anecdotal point: these five interviews should ideally mimic the real thing as much as possible. For instance, if you want a FAANG job, but your five interviews are with startups that don’t ask algorithmic questions, you won’t get as much value. The more your practice can simulate the real game, the better.\n\n### 2. If you’re unprepared, it’s OK to reschedule\n\nIf you’re unprepared for a FAANG interview, ask to reschedule.Not rescheduling is the number one mistake we see our users make!Getting an interview tomorrow (as opposed to 1-3 months from tomorrow) is, in most cases, no different to the company… but very different to you – if you fail, you might get frozen out for months. In the rare cases where rescheduling could hurt your chances because it’s a specific role for a specific team, your recruiter will tell you that. Either way, there’s no harm in asking.\n\n### 3. A note about recruiter calls\n\nRecruiter calls don’t differ much from FAANG company to FAANG company, so we decided to put everything about what to expect in a recruiter call in one place. If a recruiter call ever meaningfully deviates from this format, we’ll mention it. Otherwise, expect that it doesn’t.\n\nA recruiter call is the first step of almost every process. In this call, a recruiter will ask you about your past experience, your salary expectations, and why you’re interested in that particular company. They will also ask you about your timeline (how soon you expect to accept an offer), how far along you are with other companies, whether you have outstanding offers, and so on.\n\nIn this call, it’s important to be able to succinctly talk about your past few positions, your major contributions at those positions (what did you do individually versus what did your team do) and their impact on the business. Remember that most recruiters don’t have a technical background and they’re not software developers, so it’s important to be able to describe your technical contributions in clear layman’s terms.\n\nIt’s also really important, at this stage, not to reveal your salary expectations, your salary history, or where you are in the process with other companies. We wrote a detailedpost about salary negotiationthat lays out exactly what to say when recruiters pressure you to name the first number. Just don’t do it – when you give out information this early in the process, you’re painting future you into a corner.\n\n## The Chaos Score\n\nThis section will give you a feel for how these companies’ processes differ. For now, don’t worry about how that translates into interview prep – we’ll cover that later when we describe how to prepare for each company.\n\nTake a look at the chart below. In it, we rank the FAANGs on their “Chaos Score”. The more points a company has, the more chaotic they are.\n\nIn this context, we define “chaos” as the level of uncertainty and unpredictability that candidates can expect from the interview process and its outcomes. If a company consistently follows the same process, asks the same questions, and thoroughly trains their interviewers, they are not chaotic. If their process is completely non-standard, non-deterministic and subjective, they are chaotic.\n\nAs you can see, Apple and Netflix win the award for the most chaotic interview processes in FAANG. Microsoft gets 2nd place. Amazon gets 3rd, Google 4th, and Facebook 5th.\n\nChaos can be pain or pleasure depending on your tolerance for uncertainty. Chaos can also either impose a terrible detriment or prove a huge advantage in interviews specifically. For instance, candidates who have spent a long time grinding on LeetCode might prefer less chaotic companies. More chaotic companies can work for candidates for a few reasons: a) niche skill sets can be an easier match for niche interview processes, b) practical interviews are more likely, and c) the interview process shows them how the team they’d be joining actually operates.\n\n### How we calculated the Chaos Score for each company\n\nTo calculate each company’s Chaos Score, we picked four categories and graded each company on a 0 to 5 point scale in each category, where 5 means most chaotic and 0 means least.\n\nWe added up the points for each company, with a maximum possible Chaos Score of 20.\n\n### Deep dive into the FAANG Chaos Scores\n\nBy “North star”, we mean what a given company values most. As such, we grouped companies into 3 buckets: companies who primarily care about \"Why\", \"How\", and \"What\".\n\n“Why” is the most chaotic because judging motivations is the most subjective approach. “How” is the second most chaotic because judging thought processes is the second most subjective. “What” is the least chaotic because judging end results is the least subjective method.\n\n“Why” companies can’t agree on what a good “why” looks like because it’s a “gut feel / friend test”. Whom you consider to be a friend and who gives you a good gut feeling isn’t quantifiable. It’s completely subjective. “Why” companies are the most prone to bias. If you speak their language and model the behaviors they encourage, you’ll seem like a friend and give them a good gut feel. If you don’t, then you won’t.\n\nIf chaos is hell, then “Why” companies are raising hell for candidates and themselves.\n\n“How” companies mainly care about your thought process:Okay, you didn’t get to the optimal solution, but what was the journey like? Google and Microsoft repeat this mantra again and again – they want to know how you think. You might get asked a really hard or specific question, but they don’t necessarily require an optimal answer to pass. They put far more weight on your ability to demonstrate a solid thought process.\n\n“What” companies mainly care about your results, such as:Did you get to the optimal solution? Facebook and Amazon want you to get there, and fast. “What” is the most straightforward for candidates: simply get results as quickly as possible.\n\nA Google or Facebook interview doesn’t change depending on the team you’re interviewing for. Both companies have one big, centralized interview process that’s completely divorced from which team you might end up on. If you do well in the team-agnostic process, there will be a team matching component after the onsite. You will NOT, however, be interviewing with your future coworkers.\n\n(Note: Google is rumored to be changing to a team-dependent process, but we’ll leave that where it is for now.)\n\nAt Microsoft, Netflix, Apple, and Amazon, the process is team-dependent. You’ll not only be interviewing with the people that you’ll be working with, but there’s more chaos. Each team defines how they do things: the types of questions asked, the types of interview rounds, and even how they make hiring decisions.\n\nTeam-dependent processes are more challenging in the sense thatyou're more likely to get blind-sided; because each team has a different process, candidates are more likely to prep for X and get (a significantly different) Y.\n\nYet, team-independent processes are more challengingbecause of the machinery. Your interviewers are so far removed from you. That detachment affects how they treat, judge, and talk about you.\n\nThink of it like this: At Netflix, Apple, Amazon, and Microsoft you’re interviewing with humans. At Google and Facebook, you’re interviewing with a machine.\n\nFacebook is the least chaotic company in this category because they have the most in-depth interviewer training in FAANG. Their process is rigorous and selective. Though most would-be interviewers pass within 6 months, some people who try never pass the bar to become an interviewer. Facebook is the only FAANG where this is true.\n\nFacebook and Amazon put interviewer candidates through roughly the same things, but Facebook is more rigorous. For example, both will have similar modules interviewers go through in training. A module at Amazon is more likely to be a box to check: if you do it, you pass. At Facebook, you don’t pass simply for doing it: you pass by meeting a predetermined bar. Also, Facebook modules are more likely to have a rubric.\n\nGoogle used to have a more in-depth interviewer training process than what they have now. For whatever reason, they began to skimp on their interviewer training roughly sometime in the 2010s. Now, Googlers can get a bit of training, but usually not as much as folks at Facebook or Amazon.\n\nNetflix, Microsoft, and Apple do not train their interviewers; certain teams may be exceptions but there’s no company-wide required interview training. The day you start, you can start interviewing. That makes them the most chaotic in this category.\n\nWhat this means for candidates is that the less training they put their interviewers through, the more likely you’ll have a bad interviewer. As the old saying goes: “Prepare for the worst, pray for the best.”\n\nCompanies that standardize their interview questions give interviewers less free reign; groups with no standardization have more free reign. At all companies, there will be interviewers who go rogue and deviate from the norm. Yet, each company has a norm.\n\nFacebook wins again for being the least chaotic/most predictable. In behavioral rounds, interviewers at Facebook can ask whatever behavioral questions they want. However, in technical rounds, they can only ask pre-approved coding questions. They can also modify pre-approved coding challenges. That’s it.\n\nGoogle is tied for the second least chaotic here; their interviewers have free reign in technical rounds. They have a large technical question bank, yet interviewers routinely make up their own ambiguous one-of-a-kind questions. In behavioral rounds, they can only ask or modify pre-approved questions.\n\nAmazon is tied for second least chaotic, but for a different reason. Technically, there’s no standardization for any round (technical or behavioral). They do, however, tend to repeat questions from their internal question bank (which is not required for interviewers to use.)\n\nMicrosoft, Apple, and Netflix are the most chaotic companies. Each team decides what to ask. Questions tend to be customized to the hiring manager’s preferences, a senior individual contributor’s diligence, what this team works on day-to-day, or the specific domain this team is in.\n\n## Which FAANGs let you interview with different teams simultaneously?\n\nWhether you get one shot or unlimited shots to land an offer changes how you prepare. Here’s the breakdown of which companies let you interview with multiple teams concurrently.\n\nIf you can interview with multiple teams concurrently, then they don’t have a cool down period. So, after you fail, you don’t need to wait at all to reinterview. Two of the biggest players only give you one shot to win, and at the remaining four your chances are unlimited.\n\nBecause their interview process is centralized, Google and Facebook are the only ones well-organized enough to not let candidates “double dip”.\n\nIf you really want a job at Netflix, Apple, Amazon, or Microsoft: stack the odds of landing your dream job in your favor and interview with multiple teams. There’s no cool-down period, so if you get rejected from Team A, you can interview with Team B tomorrow.\n\nIn Part 2, we’ll give you a deeper feel for each company, and we’ll tell you what to do about it. Each company has its own section, and each section is organized into five subsections:",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer’s Guide to Google’s Interview Process and Questions",
      "content": "## Google’s interview process and questions\n\nGoogle’s interview process consists of the following steps:\n\n• Recruiter call\n\n• Technical phone screen (and possibly a second technical phone screen)\n\n• Team matching\n\nBefore we get into the details of each of these steps, here are a few general notes about Google’s job interview process, evaluation criteria, and interviewers.\n\nAll human organizations behave like a metaphor; Google isn’t a sports team, or a family, or an army. It’s a cool grad school. Larry and Sergey set up their offices based on the model of a Stanford campus on purpose. They wanted to create an environment and company culture where people can feel chill enough to talk about anything. In general, Google interviewers tend to be more collaborative than other FAANG interviewers. At Google, the slower you go, the faster you get there.\n\nGoogle has one big, centralized interview process that’s completely divorced from which team you might end up on, which means that you will NOT, however, be interviewing with your future team members – Google has a horde of interchangeable technical interviewers who have all been trained on the same process. If you do well, there will be a team matching component at the end.\n\nAt Google, because the process is centralized, you cannot interview with multiple teams concurrently, which means you don’t get multiple shots on goal. Not only that, but Google has a limit for how many chances they’ll give you before you’re blocked from interviewing again.\n\n“You can interview three times in 5 years. If you fail all three times then you can’t interview at Google again: you’re blocked.”\n\nNote that recently, there have been rumblings of Google changing their process to something more decentralized, where a hiring manager chooses you for a teambeforeyou interview, nullifying the need for post-onsite team matching. As far as we know, this new model is being tried out right now, but the change hasn’t been adopted company-wide.\n\nGoogle also has rules for candidates whopasstheir interviews:\n\n“If you pass Google’s onsite, and end up not taking the offer, your “passing of the onsite '' is good for about a year. And if you choose to re-engage in that time, the process varies widely. Usually you can skip the phone interview. Most times you have to do the full or partial onsite. If you choose to re-engage, tell their recruiters ‘I already passed the onsite’ and push to get as many steps skipped as you can.”\n\nGoogle is not results-oriented. They’re process oriented. In other words, they care more about the “How” than the “What”. You’ve heard it before, and it’s true – they don’t need you to get to the optimal solution, but they do need to be impressed by your thought process. Because of this, Google is more attracted to comfort with ambiguity than speed.\n\nOddly, in spite of using a centralized interview process, Google doesn’t have in-depth training for its interviewers; it may surprise some candidates that there’s a larger-than-expected number of bad interviewers at Google.\n\n“There is one thing that always bothered me about the Google interview process. And it's something that a lot of candidates don’t realize. There are a lot of bad interviewers at Google. Mostly because there are a lot of highly talented people who think they know everything.\n\nI was the interviewer for the third interview round at in-person onsite. And I saw the candidate was there by himself; the second interviewer wasn’t there. The candidate was alone because the second interviewer got frustrated – they thought the candidate wasn’t worth the time for an onsite, so they left early.”\n\n“Google is more likely than Facebook to design questions on purpose to be tricky. At Google, sometimes this is intentionally disguising technical questions to look like X but they’re really Y. And other times at Google, it’s designing a technical question such that if a candidate doesn’t ask a particular question they likely won’t get the answer.”\n\n### Step 1: Recruiter call\n\nPlease see the section above called“A note about recruiter calls”\n\n### Step 2: Technical phone screen\n\nGoogle’s technical phone screen is a coding interview that focuses exclusively on data structures and algorithms questions. Your interviewer will ask you to write code to solve a specific problem.\n\nOne idiosyncratic aspect of Google’s process is their insistence on using Google docs for writing code (versus other companies which tend to use tools like CoderPad). This can be a bit jarring for those of us who are used to writing code in an IDE that does things like auto-indentation, auto-complete, syntax highlighting, adding missing parentheses or brackets etc. Despite not using an IDE, your interviewer will expect you to produce syntactically correct code. This is really hard.\n\nBefore your Google interview, you should practice in Google docs so you don’t forget to close parentheses or indent your code.\n\nThat said, more recently, Google has started interviewing using an internal tool with syntax highlighting, indentation and brackets completion. Whether you get to use it or not depends on your geography.\n\n### Step 2.5: (In some cases) Another technical phone screen\n\nThe second phone screen happens only if the first one did not produce enough signal to move forward. Perhaps you didn’t communicate your thought process well enough, your code wasn’t of good enough quality, or you weren’t fast enough – but it’ll be only one of these – if you struggled with two or all three, most likely you aren’t moving forward.\n\nIf you do get scheduled for a second phone screen, push your recruiter to give you detailed feedback so you can do better the second time – nothing beats knowingexactlywhere you need to improve. You probably won’t get a response, but if you do it’s a large boost to your prep.\n\nIf you get a second phone screen it will be very similar to the first in terms of structure and content.\n\n### Step 3: Onsite\n\nThe Google onsite usually includes 4-6 rounds. Recently, there have been some internal experiments with the format, but generally the rounds are primarily coding, and secondarily system design. Some candidates get a single behavioral round, and others get to skip it.\n\nThe more experience you have, the higher proportion of system design and domain-specific questions you can expect to be asked.\n\n## Google’s interview types in detail\n\nAs we mentioned above, Google is process-oriented rather than results-oriented. As such, communication during coding and system design rounds is more important at Google than the end result.\n\n### Coding\n\nThe most important rounds at Google are coding. In fact, Google is the only FAANG company that considers coding to be more important than system design. Google’s coding rounds are about complexity more than speed. Their interviewers are allowed to ask anything they want, so it's more likely you might get a question you’ve never practiced before.\n\nGoogle interviewers are more likely than any other FAANG company to purposefully design a question so it tricks candidates. For example, they’ll disguise a question to look like it’s Three Sum, but that’s a red herring – it’s not a Three Sum problem. It just looks like one.\n\nA lot of what you’ll see in the onsite coding mirrors what you saw in the technical phone screen. During the onsite, you may see your interviewer layer more complexity on top of questions – they’ll design a question where they plan for you to get to the solution, then when you do they’ll move the goalposts and say something like: “Remember that assumption we made earlier about [X thing]? Let’s remove that. How would that change your approach?”\n\n“At Google, I’ve passed more people thatarrive at the optimal solution without coding itthan I do people whoarrive at the optimal solution and code it. The actual code you write is less important than the thought process.”\n\n“Google is highly unstructured. Everyone can ask whatever they want.”\n\nEven though they can ask whatever they want, Google interviewers have a question bank too, but the bank is much much bigger than Facebook’s bank and, like Facebook’s bank, it’s community maintained. Some interviewers never deviate from the bank, and others don’t touch it, preferring instead to formulate their own unique questions..\n\nThis speaks to Google rewarding the “how” (aka “how a candidate got there”) or their thought processes. It also speaks to Google rewarding comfort with ambiguity. Other FAANGs have specific niche topics they love hearing and talking about (such as “performance” at Amazon), but Google is more abstract. Google might love speaking about and asking about ambiguity more than any other FAANG.\n\nFinally, Google’s coding questions are never practical. They are always theoretical. They will never ask you to pull up your own environment and write a program. They will also never ask you to take a solution to a coding problem and apply it to a real world scenario. When prepping for Google, only practice theoretical questions.\n\nFor everything you need to prepare for Google’s coding interview, check out the section called \"Google coding interview preparation resources\" below.\n\n### System design\n\nThe second most important onsite interview type at Google is system design. Again, they are allowed to ask anything they want, so don’t be scared off if you get a question you’ve never practiced before.\n\nHigh-level and low-level system design questions are both likely. Some examples include:\n\n• Design a load balancer\n\n• Design Facebook Messenger\n\n• Design an auth platform\n\nGoogle system design interviewers also tend to design problems that include linchpin questions. These are questions where if you don’t ask about a specific aspect of the problem, you can’t really solve it. For example, an older system design question at Google asked you to set up a service in some foreign country, and in the prompt, the interviewer mentioned that you have a dependency on some third party service.\n\nThe linchpin question to ask: “What’s the service level agreement for that 3rd party service?” If you didn’t ask that (or something like it), then you wouldn’t be able to effectively reason about availability, which you’d need to do in order to do well on the question.\n\nTo avoid getting tricked, ask even more questions in Google system design rounds than you normally would.\n\n### Behavioral\n\nThe least important round at Google is the behavioral round. They have the easiest behavioral screen in FAANG. Plus, you might complete an onsite at Google without a behavioral round because they’re optional. It’s not clear which candidates get them and which don’t. This is another reason to not prep too hard for their behavioral round.\n\nIf you do get some behavioral questions, they might be one of the following:\n\n• Tell me about a time when you had a colleague who was difficult to work with.\n\n• Tell me about a time you received negative feedback.\n\n• Tell me about a time you were mentoring a more junior engineer and your feedback wasn’t getting through to them.\n\n• If you were going to plan an offsite for the team, how would you do it?\n\nGoogle is also more likely to ask you reflective questions. Most other FAANGs stick to situational questions such as, “Tell me of a time when…”. Those situational questions ask you to describe a past circumstance or scenario you’ve actually experienced and are fairly straightforward to answer. Reflective questions, on the other hand, can be tricky because they’re asking you to reflect on, or speak to, something less concrete, e.g., “What do you think about setting goals?”\n\nThe smart way to answer a reflective question is to re-formulate it, and then answer as if it’s a situational question. So, “What do you think about setting goals” instead becomes,”Talk about a time you used goal-setting as a time management strategy”, which you can now more-easily answer by describing a real experience and outcome, “The last time I set goals…etc”, as opposed to wading into theories about personal agency. “I think goals are cool and important…” might not get high marks.\n\n“To be honest, there was some cultural backlash at Google when they announced that we had to do these behavioral interviews. What that means is you may get an interviewer who has very little interest in conducting this type of interview. Which could go very good or very bad. I have some peers who think this should not be a part of the interview process. So they give everyone the highest marks, pretty much just to eliminate this category from the interview. Google is primarily engineers, and most of the engineers think that this is a bunch of HR BS. So they either just won’t accept any calendar invites they get or they'll just check the boxes.”\n\n## How Google makes hiring decisions\n\nMost of the time, the post-interview feedback process at Google is completely asynchronous, and interviewers don’t meet live to discuss hiring decisions. That’s one reason why interviewing at Google isn’t like interviewing with humans: it’s more akin to interviewing with a machine.\n\nEach interviewer rates candidates on the following seven-point scale: Strong No-Hire, No Hire, Leaning No-Hire, On The Fence, Leaning Hire, Hire, and Strong Hire.\n\nHow this affects candidates is simple: a Strong Hire can get you an offer, but it can also buy you a second chance. If you don’t get an offer, but you get a Strong Hire from one of your interviewers, you might be offered one bonus interview round to decide whether you get an offer or not.\n\nThat said, you don’t need to get a “Strong Hire” to get a second chance. Overall, if you showed enough signal to not-fail but not enough to pass, sometimes they will ask you to do an additional round.\n\nIf you get lucky enough to get a round where you are really excelling, don’t quit while you’re ahead. Keep going. In that round, don’t just strive to win; strive for total domination.\n\nA “Strong No-Hire” bars you from interviewing at Google for some time. Reports vary here, but one of our Google interviewers told us that if you get a Strong No-Hire, you might be frozen out for several years.\n\nIf you passed overall then you will move on to the hiring committee phase.\n\n### Hiring committee review & team matching\n\nGoogle’s hiring committee consists of four to five engineers and engineering managers who have not interviewed you, with the intent of making hiring decisions as objective as possible.\n\nGoing into the hiring committee review, your recruiter will prepare a packet that consists of your resume, any notes from the person who referred you (if you were referred), your recruiter’s notes from their call with you, and all the feedback from your interviewers, from the technical phone screen to the onsite.\n\nIf you’re told you’ve passed the onsite, ask if you can submit a more recent copy of your resume. Some Google recruiters will let your new resume be the only resume the Hiring Committee sees. Your resume you submitted for the online application probably wasn’t customized for Google, but what you submit to the hiring committee can be.\n\nWhen the committee meets, they evaluate all the data on you holistically, and they need a consensus in order to decide to make a hire.\n\nOther than hire/no-hire decisions, the hiring committee will also decide on leveling. Ever since COVID and the rise of remote interviewing, we’ve gotten more and more reports from users that they’re being down-leveled at Google. Apparently the rationale is that Google doesn’t feel like they get as much signal from remote interviews as they did from in-person ones, and as such, when they don’t get enough of a signal for a hire but too much good signal for a rejection: they downlevel – when you want to reduce the probability of a false positives for L5… offer L4!\n\nEngineers who are downleveled at Google accept the lower level offer a lot of the time, especially in the current climate. In some extreme cases, we’ve seen engineering managers with 10+ YoE accept an L3 (basically a new grad) offer.\n\nOnce you get past the hiring committee, you will move on to team matching. The team matching process is a bit like speed dating. In the ideal case, your recruiter will propose a few teams that are actively looking for someone with your skills, and then you’ll meet with the hiring manager from each team to gauge cultural fit and chemistry. In order to move forward, both of you have to opt in.\n\nThat said, there are rare instances where a candidate will get past the hiring committee but then not find a team that they gel with.\n\n“Getting five scores of ‘Leaning Hire’ is most likely to result in a ‘No Hire’ decision. I have seen many cases where the candidates got five scores of ‘Leaning Hire’, and the recruiter gave them positive feedback too, but the candidate got rejected. In these cases, every person the candidate dealt with directly (the interviewers) were positive, yet the hiring committee (the only people in the process who dealt with the candidate indirectly) rejected the candidate.”\n\n## Google coding interview preparation resources\n\nHere are some tips for preparing for your Google coding interview:\n\n• Practice in teams; have someone make up a question. Then have them disguise it or plant a red herring in it (for example, purposefully have it look like Three Sum, but it isn’t Three Sum).\n\n• Practice with someone who can change the parameters after you’ve solved the main question by saying things like “Remember that assumption X we made earlier. What would happen if we removed that assumption?”\n\n• If you see a question online that has been marked as “Asked in a Google interview”, then it is not going to be asked in your interview, period. Google is very good at retiring questions that have been leaked.\n\n• Practice without the aid of an editor or IDE: in a Google doc, on a whiteboard, or with pen and paper.\n\nIn addition, we’ve aggregated a bunch of useful Google content for you! We have replays of candidates doing mock interviews with Google interviewers, long-form solutions to common Google questions, and deep dives into technical topics that tend to come up in Google interviews.\n\n### Google interview replays\n\nBelow are a series of mock interview replays, conducted by Google interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### Solutions to common Google questions\n\nBelow are common questions that interviewers from Google ask on our platform. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics\n\nTo figure out what technical topics will come up in your Google interviews, we did two things. First, we spoke to a bunch of Google interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data AND our own data-set of mock interviews in the style of Google. Based on all of the above, here are the technical topics you’re likely to encounter:\n\n## Other Google interview preparation resources\n\n### System design\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• Practice low-level system design questions, such as “Design a load balancer”, as much if not more than high-level system design questions, such as “Design Facebook Messenger.”\n\n### Behavioral\n\n• While brushing up via a practice interview or two never hurts, this shouldn’t be your focus with Google. As they joke internally, just don’t be a serial killer!",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/google",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer’s Guide to Meta's Interview Process and Questions",
      "content": "## Meta’s interview process and questions\n\nMeta’s interview process consists of the following steps:\n\n• Call with a Meta recruiter\n\n• Technical phone screen (and possibly a second technical phone screen)\n\n• Onsite interviews\n\nBefore we get into the details of each of these steps, here are a few general notes about Meta’s hiring process, evaluation criteria, and interviewers.\n\nMeta interviewers are guided by the company’s current motto: move fast. All human groups have a metaphor they operate from. Meta isn’t a family or an army. They’re a well-structured Formula 1 team; they spend a lot of effort to put safeguards in place, and then they go pedal to the metal. At Meta, speed wins.\n\nAt Meta, because the process is centralized, you cannot interview with multiple teams concurrently like you can at some other tech companies. You get one shot on goal every ~3 to 6 months, depending on performance.\n\n“If you pass Meta’s onsite, but don’t take the offer your status of ‘passed onsite’ is valid for a year. If you don’t take their offer and then choose to re-engage within that year, tell their recruiter ‘I already passed the onsite’ and push to get steps skipped because you usually can.”\n\nWhen interviewing at Meta, listen closely to the subtle clues and hints your interviewer gives you. Meta is the only FAANG where you can’t become an interviewer unless you give good hints.\n\n### Step 1: Recruiter call\n\nPlease see the previous section called“A note about recruiter calls”. Alsoread our guide to negotiating with Meta. It starts at the recruiter call.\n\n### Step 2: Technical phone screen\n\nMeta's technical phone screen is a 45-minute coding interview that focuses on data structures and algorithms.\n\nAt the beginning of the interview, your interviewer will ask you a question or two about your resume and recent work that you've done. This portion will take 5 minutes, and how you answer these questions doesn't meaningfully factor into the interview's outcome - they are just meant to break the ice and get you talking. The part that matters is the technical portion.\n\nAfter the intro portion, your interviewer will ask you two coding questions, and they expect you to get through both in 35 minutes. These questions will be LeetCode easy or medium difficulty.\n\nMeta’s technical phone screens are conducted inCoderPad. If you've never used it, you may want toplay around in their sandboxand get familiar with their environment before your real interview. One specific thing about Meta's way of using CoderPad is that during the interview, they'll have code execution turned off - if you've used it before and are accustomed to testing your code during the interview by running it, you'll need to practice not being able to.\n\n### Step 3: Onsite interviews\n\nThe typical Meta onsite will consist of the following:\n\n• At least two coding interviews\n\n• Two system design OR product design interviews\n\n• One behavioral interview\n\nThe process for E6 engineers, as outlined in the diagram above, is slightly different. There will be a Leadership Assessment interview after the Technical Screen. In this interview, the following topics might be covered:\n\n• Your current role, responsibility, and scope\n\n• Cross-functional partnerships\n\n• Situations regarding conflict resolution\n\n• Solution skills\n\n• How to drive results\n\nThe onsite for E6 engineers will also be different. You should only get one coding round, one architecture round, one design round and then a behavioral round.\n\n## Types of Meta interviews and what to expect\n\nThere are four main types of interviews you’re going to encounter when you apply for an engineering job at Meta – coding interviews, behavioral interviews, and either a system design or product design interview. Here’s what to expect during each of these rounds of interviews.\n\n### Coding interview\n\nMeta's process is highly standardized, so coding interview questions and themes tend to repeat. Coding questions are pre-approved, but that doesn’t mean the interviewers have no freedom.\n\n“Meta gives you the questions to ask or modify. But they don't tell you the answers in their interviewing wiki. And they let you design the path of the question: you get to ask your own twists and turns.”\n\n“There’s some variance with the interviewer, but usually there are 20 mins per question, and the questions are simple. They want you to get the algorithm fast, and implement the basic solution.\nThe kind of bugs that can be acceptable are empty input, and out of scope inputs like empty array/null. But an incomplete algorithm at Meta usually doesn’t cut it. They want you to get to it and get to it quickly, and you can sacrifice making a little bit of a mess along the way.”\n\n“I think there is a rule that during the programming interview, interviewers have to ask two questions. And the questions have to be balanced. The first is more like a juicy question testing problem solving skills and you as the interviewer can permit some bugs in the implementation. The second will be easy from the algorithmic point of view but the goal is to assess how much the candidate can write debugless code and test this code perfectly. And if a candidate fails to solve both problems, even if they somewhat shine during one problem: it will be ‘No Hire’.”\n\nIt's not that bugs are encouraged, it’s that they're the only company that's top-down directive is: sometimes, in certain rounds, bugs are okay. No other company does that. Meta relaxes the need for bug-free code so that candidates can code faster.\n\nFinally, Meta doesn’t ask dynamic programming questions and, in fact, those questions are banned.\n\nFor everything you need to prepare for Meta’s coding interview, check out the section called \"Meta coding interview preparation resources\" below.\n\n### System design OR product design interview\n\nMeta hires two types (on paper) of backend engineers: System Generalists and Product Generalists. System generalists get a system design interview, and product generalists get the confusingly named product design interview (in most other contexts, product design refers to UI/UX).\n\nWhich of these interviews you get is determined by your recruiter, based on your experience. If you have worked on a lot of product features, then you get a product design interview. If you have worked on high-scale distributed systems, then you get system design.\n\nThe product design interview at Meta is similar to the system design interview but with some key differences:\n\n• System design focuses more on high level architecture and scale, while product design focuses more on interactions between services. For example, the expectations for API design in system design interviews is just high level arguments/data passed, whereas product design focuses more on the details, i.e., a more comprehensive list of arguments and response structure.\n\n• Product design focuses more on how and what data flows through the entire system, between each service.\n\n• Data models are weighted much higher in the product design interview than in system design. The expectation is to be more thorough and detailed.\n\nTake a look at this video, by Meta, about the difference between these two interview types:\n\n“Product design is less databases, more data flow, more time spent on details of the API (e.g. parameters that will pass). System design is more databases, less API details, and more about scaling.”\n\n“Many people think Meta only asks high level system design questions like ‘Design Twitter’ or ‘Design Meta Feed.’ But that’s not the case. They also ask low level questions. In E6 or above interviews, you will most likely be asked ‘Design Redis’, or ‘Design Kafka’, or ‘Design Memcached.’ I’d even seen rare occasions where E5 candidates would be asked low-level system design questions; low-level questions are less common in rounds for E5 and below.”\n\n“You have to ask about back of the envelope estimations. A lot of senior engineers hate to do that. I hate to do that as well. It’s a waste of time. When I do the ‘There is a rule that I have to do this. But there is no point in doing this. Let’s spend 5 minutes talking about real system design. Let’s assume we have to scale our system from 0 to Google level and therefore estimations are just a waste of time.’”\n\nAsk your interviewer: “Do you want to spend a few minutes on estimations? I’m okay with skipping it, but if you need to see it, then let’s do it. If we skipped it, one thing that might be a more interesting conversation would be spending a few minutes on how to scale this system.’”\n\nIf you don’t know what to talk about in a E5 Meta system design round, talk about user experience. Go on about two choices you could make, then explain in depth the one preferred because it’d be a better user experience.\n\nIt’s also common for Meta interviewers to ask you to walk them through a system you’ve worked on in the past, which is known as a reverse system design interview.\n\n### Behavioral interview\n\nUnlike technical questions, behavioral questions at Meta are not standardized: interviewers can ask you whatever they want. Behavioral rounds are of medium/low importance at Meta; they’re less important than technical interview rounds, but they do carry some weight. For the best summary of what to expect in a Meta behavioral interview, read thisblog post by a former Meta engineering manager– in it he describesexactlyhow behavioral interviews at Meta are evaluated and also includes a bunch of sample questions.\n\nHere is a list of questions to get you started. Read the post to get examples of good answers (split out by the candidate’s seniority level!)\n\n• “What project are you most proud of and why?”\n\n• “Tell me about a recent day working that was really great and/or fun.”\n\n• “Tell me about a time when you wanted to change something that was outside of your regular scope of work.”\n\n• “Tell me about a time you had to make a fast decision and live with the results.”\n\n• “Tell me about a time when you needed to overcome external obstacles to complete a task or project.”\n\n• “Tell me about a time a project took longer as expected.”\n\n• “Tell me about a person or team who you found most challenging to work with.”\n\n• “Tell me about a time you disagreed with a coworker.”\n\n• “Tell me about a situation where two teams couldn’t agree on a path forward.”\n\n• “Describe a situation when you made a mistake, and what you learned from it.”\n\n• “Tell me about some constructive feedback you received from a manager or a peer”\n\n• “Tell me about a skill set that you observed in a peer or mentor that you want to develop in the next six months.”\n\nFinally, if you are applying for E5 and above make sure to have a couple of projects that lasted longer than one quarter – if all your examples are of smaller initiatives, your interviewer may walk away with the impression that you can’t handle complex projects. Also, remember to quantify the impact that you made by sharing specific metrics.\n\n## How Meta makes hiring decisions\n\nMeta’s candidate review and feedback process is usually completely asynchronous. Sometimes, they’ll do a live debrief but it’s rare. This means there’s a low likelihood for an interviewer to “fight” for a candidate. Socially influencing interviewers won’t go very far here.\n\nMeta is also the only FAANG that asks interviewers for a confidence score when filling out post-onsite feedback forms. As a result, the process at Meta can be more forgiving on failed rounds because a lower confidence score means a failed round carries less weight. Also, Meta is the only FAANG that directly asks interviewers about downleveling.\n\n“Coding is used to decide ‘Should we hire this person?’ System and product design is used to decide ‘How should we level this person?’\n\nFor coding interviews, the interviewer says a binary score first: ‘Hire’ or ‘No Hire’. Then in the comments, they say how confident they are in that binary score. The ‘Hire’ or ‘No Hire’ is an official metric, but the confidence score is not.\n\nFor system/product design, the interviewer gives the ‘Hire’ or ‘No Hire’ first. Then they say if the candidate should be considered for another level.\n\nSo the final decision could be like: ‘No Hire’ for E5 with low confidence. ‘Hire’ for E4 with high confidence.\"\n\nIn cases where the hiring panel is hung, it’s possible they may request one more follow-up interview to help them get more signal.\n\n“Interview feedback is discussed primarily by the system design and behavioral interviewers, and those are the interviewers who have the most say regarding both the hire decision and a candidate’s level. If interviewers don’t feel like they got enough signal and the candidate ends up being on the fence, the recruiter will push for an additional round. Indicative hint: If you have an additional follow-up interview, your interviewers were probably split.\"\n\n“At Staff level and above, it’s a mandate that candidates can’t get hired if they don’t pass both system design rounds.”\n\n“For E6 and above candidates, if you fail one system design round but do well in the other rounds, you can get a mulligan. They can let you retake one system design round. But the same isn’t true for behavioral: if you fail there’s no mulligan. If you fail the behavioral round, it will be ‘No Hire.’”\n\n## 'Team matching, offers, and “Bootcamp”'\n\nMeta made some changes to their process in 2023. Before, unlike at other FAANGs, you'd generally accept an offer before knowing with which team you'd end up on. Then you'd do a 6 week “Bootcamp”, where you'd be trained on Meta's engineering infrastructure and systems. After the bootcamp, there would be a 2 week team-matching period.\n\nNow, after you finish the onsite, you jump straight to the team matching process. Team matching now happens BEFORE you get an offer, and offers are contingent on team matching completely successfully.\n\nYou'll talk with hiring managers from a number of teams to gauge fit and chemistry: we've heard that sometimes it's a handful, and sometimes it's over 10.\n\nAfter your team matching conversations, your recruiter will ask you to choose a team. In order to move forward, both you and the hiring manager have to opt in.\n\nOnce you make your choice, your recruiter will officially make an offer, and you'll usually have just a few days to make your decision. We hope this will change in the future, but recently Meta has been very aggressive with both offer timelines and with negotiations - they will not negotiate unless you can share competitive offer details from another top-tier company.\n\nOne other key difference between Meta's new process and the old one is what happens during Bootcamp. Historically, Bootcamp took 6 weeks, and in addition to training new hires on  Meta's engineering infrastructure and systems, there'd be a multi-week “speed dating”-esque team matching component.\n\nBootcamp still exists, but now it's much shorter - 2-4 weeks, and the focus is getting new engineers ramped up on generic tools. After that, new engineers will continue to ramp up on their specific teams.\n\nThe team matching process is a bit like speed dating. You meet with hiring managers to gauge fit and chemistry. In order to move forward, both of you have to opt in.\n\n“When the market is good, you can talk to 20 different teams at the same time.”\n\nThere are exceptions – some people with niche skills may get hired for a specific team before they start Bootcamp, but they still have to do the bootcamp period, just not the team-matching part afterwards.\n\n## Meta coding interview preparation resources\n\nWe’ve aggregated a bunch of useful Meta content for you! We have replays of candidates doing mock interviews with Meta interviewers, long-form solutions to common Meta questions, and deep dives into technical topics that tend to come up in Meta interviews.\n\n### Meta interview replays\n\nBelow are a series of mock interview replays, conducted by Meta interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### Solutions to common Meta questions\n\nBelow are common questions that interviewers from Meta ask on our platform. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics\n\nTo figure out what technical topics might come up in your Meta interviews, we did a few things. First, we spoke to a bunch of Meta interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data, the LeetCode question list above, AND our own data-set of mock interviews in the style of Meta. Based on all of the above, here are the technical topics you’re likely to encounter.\n\n## Other Meta interview preparation resources\n\nThe following interview guides and resources can help you better understand Meta’s recruitment process and support your interview prep so you impress the hiring committee.\n\n### System design\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• If you’re primarily going for E5, then mainly practice high-level system design questions. If E6, then focus on low-level questions.\n\n• Reverse system design interviews happen sometimes at Meta, so you might like to practice these too.\n\n### Behavioral\n\n• Thisblog post about behavioral interviewing at Meta, written by a former Meta engineering manager.\n\n• Even though it’s not Meta-specific,A Senior Engineer's Guide to the Amazon Leadership Principles Interviewwill help.\n\n• Practice your ability to demonstrate communication skills with stakeholders AND practice talking about times where there was a conflict and you were able to resolve it.",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/meta-facebook",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "Senior Engineer's Guide To Microsoft's Interview Process and Questions",
      "content": "## Microsoft’s interview process and questions\n\nMicrosoft’s interview process consists of the following steps:\n\n• Recruiter call (and a hiring manager call from principal engineers and above)\n\n• Technical phone interview or Codility quiz\n\n• Onsite interviews\n\n• Team matching\n\nBefore we get into the details of each of these steps, here are a few general notes about Microsoft’s process, evaluation criteria, and interviewers.\n\nMicrosoft lets you interview with different teams at the same time; if you want to maximize your chances interview with several of them simultaneously.\n\nMicrosoft’s process is mainly (though not fully!) team-dependent. That means that while you interview for a specific team, you may not necessarily be interviewingjustwith people on that team. For example, sometimes you might interview with the hiring manager for a specific team, and your other interviewers will be individual contributors from other teams.\n\nEach team runs their own processes, which can vary quite a bit from team to team as well. Sometimes Microsoft bakes a quasi-team-matching activity into an interview process: where a candidate can meet multiple hiring managers in the same loop. Another variation is some candidates’ first round screens are with a hiring manager instead of a recruiter.\n\n### Step 1: Recruiter call\n\nPlease see the section above called“A note about recruiter calls”\n\n### Step 2: Technical interview (phone screen or a Codility quiz)\n\nMicrosoft’s technical phone screen is a traditional LeetCode-style coding interview, with technical questions ranging from easy to medium. Interviewers aren’t given a rubric. Some of them get training, others don’t. They have freedom to ask whatever they want and judge your technical skills however they want in this round.\n\nIf you end up getting the asynchronousCodilityquiz instead, you sign on and have to answer several algorithmic questions in a short amount of time. In some ways, this is harder than the technical phone screen with the human because if you don’t pass the test cases, you get filtered out. You’re judged on several factors including: test cases, correctness, and code quality.\n\n### Step 3: Onsite\n\nThe onsite format can vary per org, but it typically includes the following round of interviews:\n\n• One behavioral round of behavioral interview questions\n\n• Two or three coding rounds\n\n• One system design round\n\n• One domain-specific round\n\n## Microsoft’s interview types in detail\n\n### Coding\n\nThis is the most important round at Microsoft.\n\n“Since most engineers at Microsoft use C#, if you can, you should use C#, Java, or Python in the technical rounds. This way, your interviewer will be able to understand your code better and may even be able to help.”\n\nMicrosoft usually asks LeetCode-style medium-difficulty questions in coding rounds. Interviewers get to pick their own coding questions, but, according to interviewers, Microsoft favors the following topics (in no particular order):\n\n• Arrays and strings\n\n• Linked lists\n\n• Graphs and trees\n\nLeetCode’s Top Questions for Microsoftis also a helpful resource.\n\n“Tree questions are most popular, e.g., various types of tree sum, tree traversals of certain orders, subtrees, etc.”\n\nDynamic programming used to basically never happen, but now it’s a little more common. When you do get dynamic programming problems, it’s usually the classic ones like coin change, stair steps, edit distance, and various types of counting problems.\n\nTooling for coding interviews is at the team’s discretion, but many teams use Codility.\n\nFor everything you need to prepare for Microsoft’s coding interview, check out the section called \"Microsoft coding interview preparation resources\" below.\n\n### System design\n\nSystem design is tied for the second most important round at Microsoft, and it’s sometimes conducted by a hiring manager. One idiosyncratic aspect of Microsoft’s process is their penchant for asking questions about compliance-related topics.\n\n“My Microsoft interview was insanely easy. I tried to step it up when I started being an interviewer at Microsoft. But then I realized that's how it has to be. Technical is like 25% of it. It’s not a generic FAANG interview. It’s more about three things: a) ‘How well does this candidate know this system they’re going to be working on?’, b) ‘How do they meet the exact needs we have on this team?’, and c) ‘Do they understand the little things we value? Like compliance, manipulating data, data pipelines, EU data processing, etc.’”\n\n“Microsoft is obsessed with the details of compliance. I don’t think I have seen a system that is as set up for auditing as Microsoft. Employees are asked to log so much. There’s a centralized grid system which is built into Azure. All logs are to be routed into that. This allows for centralized log spanning and auditing. Which I have not seen anywhere else.”\n\nOutside of compliance-related questions, here are examples of other system design questions you might encounter:\n\n• Let's go back in time, how would you ship cargo to customers? Discuss an approach that touches on availability, latency, reliability, communication, etc.\n\n• Let's say we are interested in palindromes and we want to store them durably whenever we come up with them. Design a system that lets you enter a new palindrome every time someone comes up with one, and allows users to check if a palindrome exists in a system.\n\n• Assume you are a teacher and you want to test students if they know the country names correctly. You are provided a list of countries and pictures. Design a webpage + backend API that mimics a test for students to evaluate their knowledge (this would be for a full-stack role).\n\nTooling for system design interviews is at the team’s discretion, but many Microsoft employees use Codility Canvas or Excalidraw.\n\n### Domain-specific round\n\nThe domain-specific round is tied for the second most important round at Microsoft. Microsoft is more likely to do these types of rounds than other FAANGs, and these rounds can feel similar to system design but involve some coding.\n\nUsually, domain-specific rounds are customized to the domain a given team works on and dives deep into that technology. So, whatever area this team is in (cloud networking, big data, etc.), that’s what they’ll ask you about.\n\nOn some occasions, Microsoft customizes a round to the candidate’s skills. For example, if you’re a backend engineer, they might ask you to design an API or design a database. They also may ask you open ended trivia questions about the programming language you are most familiar with.\n\n“Another thing that happens in these rounds is they’ll ask you to discuss a complicated problem you have solved at your job. It's good for candidates to prepare to discuss 2-3 projects in detail: how did they implement caching, deal with scaling issues, and so on.”\n\nFinally, you may get a scenario question that’s commensurate with your skill set. For instance, if you’re a back-end engineer, you may get a question like, “Imagine you're in a team and we're building a credit card registration system. And it's used by different firms. How do you build the interface?”\n\n### Behavioral\n\nThis is the least important round at Microsoft: the lowest effort way to pass is to not blame your teammates, not show red flags, and stay positive.\n\nMicrosoft doesn’t have a specific set of traits they’re looking for. You can expect the usual questions about your strengths and weaknesses, failure, conflicts with colleagues, projects, and lessons you’ve learned from past experiences in your career.\n\n“A lot of people struggle with ‘What are your top 2 strengths and weaknesses?’ probably because they are trying to make up an answer on the spot. Good to prep answers to typical behavioral questions in advance.”\n\nUltimately, they are screening for three soft skills: positivity, ownership, and communication. They want to hire friendly people who can do the work and not blame others. This is not Apple or Netflix, where they want a particular flavor of personality, or where they ask interviewers to hire candidates they’d like to befriend. It’s more neutral.\n\nBehavioral rounds can sometimes have a coding component as well. When this happens, it might be an easy/medium-difficulty 20-min LeetCode-style problem.\n\n## How Microsoft makes hiring decisions\n\nInterviewers grade candidates on different scales, depending on the team.\n\nSome orgs have an asynchronous feedback process, other orgs rely on live discussion, and still-other orgs do both. Some orgs have rubrics, and others don’t. Here’s how a rubric looks at one org:\n\n• Junior: Has growth mindset, seeks to understand ideas\n\n• Senior: Drives self development, models openness, failure is okay, open to different ideas\n\n• Principal: Consistently challenges group thinking towards productive discussion\n\n## Microsoft coding interview preparation resources\n\nHere are a few more interview tips and resources to help you prep for a software developer or software engineer interview at Microsoft.\n\n• Microsoft interviewers can ask whatever questions they want, yet some interviewers repeat questions, soLeetCode’s Top Questions for Microsoftis somewhat helpful.\n\n• Study up on the services the team you’re interviewing with uses.\n\n• Ask your recruiter for specifics about your rounds. If you get nothing helpful, then practice practical questions, LeetCode-style questions, and domain-specific questions.\n\nIn addition, we’ve aggregated a bunch of useful Microsoft content for you! We have replays of candidates doing mock interviews with Microsoft interviewers, long-form solutions to common Microsoft questions, and deep dives into technical topics that tend to come up in Microsoft interviews.\n\n### Microsoft interview replays\n\nBelow are a series of mock interview replays, conducted by Microsoft interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### Solutions to common Microsoft questions\n\nBelow are common questions that interviewers from Microsoft ask on our platform. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics\n\nTo figure out what technical topics will come up in your Microsoft interviews, we did two things. First, we spoke to a bunch of Microsoft interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data AND our own data-set of mock interviews in the style of Microsoft. Based on all of the above, here are the technical topics you’re likely to encounter:\n\n## Other Microsoft interview preparation resources\n\n### Behavioral\n\n• Nothing specific, butA Senior Engineer's Guide to the Amazon Leadership Principles Interviewwould help you go above and beyond\n\n### System design and domain-specific\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• Compliance-related topics\n\n• Study up on the services the team you’re interviewing with uses",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/microsoft",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer's Guide to the System Design Interview",
      "content": "### Who we are\n\ninterviewing.io is your trusted advisor for every stage of your job search. In our lifetime, we've hosted close to 100k mock interviews, conducted primarily by senior engineers from FAANG. We have the recordings from these interviews, as well as feedback and outcomes, which lets us perform cool and useful analysis, like the kind in this guide. We’ve also helped thousands of engineers get jobs and negotiate their salaries, and along the way we’ve built a community of people dedicated to helping each other get better.\n\n## What this guide is and whom it's for\n\nCandidates often get overwhelmed with system design. We don’t blame them. There are literally hundreds of topics you can study when preparing for an interview. But does that mean that you should drop everything and go study all of them? Absolutely not. It’s vital to master the basic principles first.\n\nMastering the fundamentals will go a long way in system design. When you’re new to a subject, there can be diminishing returns by studying too much over a short period of time, and this can actually hurt you in a real interview. Early in your preparation, it can help to know more and have more options, but this can also cause you to feel overwhelmed by the sheer number of potential answers, possibly leading you toward overcomplicated solutions.\n\nOur experience has shown us that 80% percent of system design interviews involve only 20% of the concepts. This guide will teach you those key concepts in depth to increase your odds of excelling during an interview.\n\nOur primary audience is backend-leaning engineers who are interviewing for mid-level to senior-level roles. Whether you’re new to system design interviews or you’re a seasoned system design interviewer looking to refresh or hone your skills, this guide is for you.\n\n## How we made this guide\n\nWe began by listening to 30+ hours of system design interviews and system design lessons. We then performed data analysis to identify 50+ of our highest rated interviewers.\n\nCollectively, the interviewers who worked on this guide have conducted thousands of system design interviews in the wild, and we stress-tested this material by asking engineers who were new to system design to take our ideas for a spin.\n\nOur unique data set (the collective knowledge of our interviewers and our database of recorded interviews) makes us well equipped to tell you exactly what to expect in an interview. If we discuss something in this guide, it’s likely to appear in 80% of mid-level / senior interviews.\n\nRead on to gain insight from the people on the other side of the table, who will give you unique access to the only thing separating you from the high-TC job you seek: the minds of your interviewers.\n\n## How to use this guide\n\n### This guide is structured into 4 parts.\n\nNew to system design interviews? We recommend reading Parts 1-4 in order. The first two sections will introduce you to the high-level theories that will help you ease into the practical exercises and advanced strategies found in Parts 3 and 4.\n\nIf you have completed several system design interviews, feel free to begin with Part 4, which includes advanced techniques and practical tips to help you pass your interview. Afterward, you can quickly review Parts 1-3 by focusing on topics that seem helpful to you.\n\nWe created this guide because we want to provide you with a shortcut to interview success. At the same time, we don’t want you to take any shortcuts in your preparation. So we’ve got a bit of a paradox, because on one hand, we want to teach you the cheat codes that will help you beat the game, but on the other hand, we want you to put in the sweat equity required to learn the intricacies of system design yourself. The truth is that there are no royal roads, and a good interviewer will be able to recognize if you haven’t put in the work. By reading this guide and really thinking about it, you’ll learn enough to be prepared for your interview, and along the way we will provide you with a collection of tricks that will make everything easier. So here’s your shortcut, but don’t take any shortcuts.\n\nWe use the terms “machine,” “server,” and “node” interchangeably throughout the guide.\n\nThe “Table of Contents,” located on the left side of the screen, is designed to help you find and navigate the stuff you need. Use it. That way you can revisit conceptual sections to get a refresher and fast forward to sections you’re most interested in.\n\nTo give you a heads up, it will take about 6 hours (3.5 reading and 2.5 watching videos) to consume all 4 parts of this guide. We promise those hours will be incredibly well spent!\n\nIf you have an upcoming system design interview and you're vastly unprepared,the best thing you can do is reschedule your interview.The bigger the company, the less they care about rescheduling.\n\nExceptions to this Rule of thumb: you have an extenuating circumstance that requires you to get a job fast (e.g., visa issues).\n\n### Legend\n\n## Introduction to System Design\n\nYou may be reading this guide because you recently failed a system design interview. Or you watched a YouTube video that made system design seem like an overwhelming topic you’ll never fully grasp. Or perhaps you have years of experience working in the field, yet you struggle to demonstrate your technical prowess in the brief span of a system design interview.\n\nProfessional experience with distributed systems isn’t needed to pass system design interviews.And even if you do have that experience, keep in mind that many talented distributed systems engineers still struggle with the system design interview format. How you perform in an interview is not a measure of your worth as a software engineer—it is a measure of your ability to do system design interviews. The two are related but not equal; being a good programmer has a surprisingly small role in passing interviews.\n\nOne of our experts was asked: “As an experienced engineer without any scalable systems experience, how can I go into something like a FAANG system design interview when I have never designed those systems before?” Here’s the expert’s reply:\n\n\"I worked at Facebook for five and a half years. I learned more about system design from reading the internal interviewing wiki than I ever got from working at Facebook. They've got all kinds of distributed systems knowledge there, and it’s concentrated in a handful of infrastructure teams who build really great libraries and really great backend systems. That means that the rest of us never have to think about distributed systems. We get to say, 'I'm gonna make a new data type, and if I dump a billion records in it tomorrow, it doesn't matter. The systems folks have my back.' I worked at Facebook for a really long time, but I learned almost nothing about designing systems from experience.\"\n\nYou can pass system design interviews even if you’ve never designed distributed systems before. If you have copied files between machines with drag-and-drop, you are halfway there. If you implemented clients or servers or have opened network connections, you’ve got this. This guide will teach you the most important 20% of information that will appear 80% of the time in system design interviews. By the end of this guide you won’t be an expert, but you’ll be well on your way to being a better engineer and a much better interview candidate.\n\n## The difference between engineering problems and design problems\n\nIn this excerpt taken from Design Your Life, written by two Stanford professors and engineers, you’ll get a better understanding of how different problems require different approaches. We bolded to emphasize the parts that are most important to note.\n\n“There’s a difference between design problems and engineering problems...Engineering is a good approach to solving a problem when you can get a great deal of data and you’re sure there is one best solution.Bill [one of the authors] worked on the problem of engineering the hinges on Apple’s first laptops, and the solution he and his team came up with made those laptops some of the most reliable on the market. The solution required many prototypes and lots and lots of testing, similar to the design process, but the goal of creating hinges that would last five years (or opening and closing ten thousand times) was fixed, and his team tested many different mechanical solutions until they met their goal.Once this goal was met, the solution could be reproduced millions of times. It was a good engineering problem.\n\n“Compare this with the problem of designing the first laptop that had a ‘built in mouse’. Because Apple’s computers relied on the mouse to do almost everything, building a laptop that required you to be wired up to a regular mouse was unacceptable.This was a design problem. There was no precedent to design toward, there was no fixed or predetermined outcome;there were plenty of ideas floating around the lab, and a number of different designs were tested, but nothing was working. Then along came an engineer named Jon Krakower. Jon had been tinkering around with miniaturized trackballs, and had the crazy idea to push the keyboard to the back of the unit, leaving just enough room to squeeze in this tiny pointing device. This turned out to be the big breakthrough everyone had been looking for, and has been part of the signature look of Apple laptops ever since.\n\n“When you have a desired outcome (a truly portable laptop computer) but no clear solution in sight, that’s when you brainstorm, try crazy stuff, improvise, and keep ‘building your way forward’ until you come up with something that works. You know it when you see it.A great design comes together in a way that can’t be solved with equations and spreadsheets and data analysis. It has a look and feel all of its own - a beautiful aesthetic that speaks to you.”\n\nThis is one reason engineers new to system design can bomb their first couple of system design interviews spectacularly: They approach a design problem as if it’s an engineering problem. There is not a single “best” solution to a system design problem. There are no predetermined outcomes. The less code you write in a system design interview, the better.\n\nTo succeed in a system design interview, you want to collaborate with your interviewer, try crazy stuff, and try more crazy stuff until the design “feels right.”\n\n## How approaching a system design interview is different than a coding interview\n\nThe difference between coding and system design is the difference between retrieving and creating.\n\nInstead of finding (or “retrieving”) a solution, you are creating a solution. In this way, coding is akin to a science, while system design is more like an art.\n\nHere’s another way to think about it. You aren’t solving a problem—you’re creating a map to help someone else find the solution. Instead of coloring inside some lines, you’ll need to draw the lines for someone else to color in. In a system design interview, there are no correct answers—though there are certainly incorrect ones—so there is nothing to solve. Instead, you’ll ask questions, make stuff, and explain how and why the stuff you made was reasonable.\n\nDuring the interview, you’ll spend an hour playing the role of a Tech Lead, so just pretend that the interviewer is a junior engineer who will be implementing your design. Juniors will have lots of questions, and since you’re the Tech Lead, you want to welcome these questions.\n\n“Pretend it’s 1999, so a lot of the stuff we have access to today simply doesn’t exist. You and a group of your schoolmates are in your garage, hoping to make something. You're the most senior one there. You will design it and your friends will code it up, and the thing is: the Minimum Viable Product has to be completed by tomorrow. So, there’s no time to prep and no need to worry about the intricacies of system architecture that you don’t know. Just answer this: How would you design this system so your friends could code it up today, right now? It doesn’t have to be pretty. It doesn’t have to be complicated. It doesn’t have to impress anyone. It just has to get done.”\n\nThe value of communication in coding interviews is controversial (source). But without communication in a system design interview, nothing happens. By necessity, it’s more conversational in nature than a coding interview and will have more back and forth between interviewer and candidate.\n\nWith that said, sometimes you’ll have an interviewer who is cold or not very collaborative. Dealing with these interviewers requires practice. The more senior you become, the more important it is to learn how to adjust your communication style to match your audience. We recommend completing mock interviews with a variety of interviewers to help you become a seasoned, fearless veteran of system design interviews.\n\nThere’s no “right” way to design a system. If two experts designed the same system, you would see two different designs, beautiful and aesthetic in their own way and both as “correct” as the other (and with the accompanying justifications to support them).\n\nInpart 2, two experts will show you how they would each design the same system, providing you with a practical lesson on this topic.\n\n“If you want to be a great interview candidate you’ve gotta know… It’s your responsibility to leave breadcrumbs for the interviewer to go where you want them to go. That way you have them walk you down the road where you are at your best. And then the Jedi mind trick is to get them to think it was their idea to get you there.”\n\nWhat if your measurement of success in an interview isn’t what you say, but instead it’s what you get the interviewer to say? Imagine you say something that engages the interviewer’s curiosity so much that they have no choice but to follow up with a “tell me more about that.” If the areas you get them to dig into the deepest, are things you’re good at: congratulations you are doing the Jedi mind trick.\n\nA candidate doing a system design interview will usually experience confusion. The interview format is so open-ended, you cannot know about everything they'll ask you. However, there will be opportunities to strut your stuff. There will be moments when they ask you about something you know very well, and when this happens put your shoulders back and flex your muscles on this topic.\n\n## What it’s like to walk into a system design interview\n\nWhen beginning an interview, try to imagine what the interviewer is looking for. What are their goals for the session? How can you help them achieve those goals in a way that persuades them that you’ll be a strong hire?\n\nPut simply, the interviewer's goal is to find enough data to hire you.Given the limited time available to them, an interviewer has to try to get enough positive signal about your ability so they can justify giving you a “hire” rating. In one hour you have to show your interviewer that you understand the fundamentals of a system (end to end). You also should be able to name and explain (at least at a high level) each part of the system, describe the tradeoffs you make, and find a solution.\n\nThe best way to accomplish this is to imagine that you’re explaining a design doc to a group of more junior engineers. They will ask you questions about your decisions and want to know what you’re trying to solve. Anticipating these questions and your responses will set you up for success in the interview.\n\n## What your interviewer looks for, and what they don't\n\nWith this basic model in mind, let's consider the main elements that system design interviewers look for, and the elements that don’t matter.\n\nYour interviewer will expect you to have knowledge of a wide range of basic topics, but they won't expect you to be an expert in any of them. For instance, you should understand the difference between SQL and NoSQL databases, their broad performance characteristics, and the types of applications each might be useful for (which we’ll teach you later in this guide). But you would not need to know how the internals of either type of database work at any kind of detailed level.\n\nIn spite of this, you still might be asked to design those internals! Keep in mind, though, that your answer doesn't need to be optimal or reflect real-world implementations. For example, if an interviewer asks you to design a database/SQL query engine, they're not trying to discern if you're familiar with the academic literature on query engines or discover how much time you've spent working on database internals.\n\nInstead, they want to see how you would approach the problem based on what you do know, starting from first principles and collaborating with them. Your answer will probably not be anywhere near optimal, and that's OK! The interviewer will focus on the process, not the result.\n\nInitial prompts to system design problems tend to be intentionally light on detail. Many candidates make a mistake by extrapolating details from the initial prompt and crafting a solution based on those assumptions.\n\nFor example, imagine that the interviewer instructs you to design a \"photo sharing service\" with some minimally defined capabilities. This may cause some candidates to imagine that they're rebuilding Instagram and start designing around the assumption that all images will be relatively small, not examined closely, and that extensive compression to save storage and bandwidth is acceptable.\n\nBut the interviewer didn’t tell you to rebuild Instagram, so you’ll need to keep in mind that there are many different types of photo sharing services. The interviewer may have had in mind something like Imgur or Photobucket, sites that cater more to basic image hosting for the web. Or they could be thinking about something like Flickr or 500px, services built for photographers to show off their work in high resolution.\n\nSo how do you figure out what type of service the interviewer wants you to build? Ask them! A basic prompt leaves room for you to start a conversation with your interviewer about the system you're designing—what type of users does it serve, what type of traffic can it expect, what limits will it have? Demonstrating that you can think critically about the parameters of your service is the first step in any system design interview.\n\nBe very careful any time you find yourself responding immediately to a prompt in a system design interview. Even aspects of your design that seem insignificant need at least cursory consideration. Let’s use IDs as an example.\n\nA candidate will often start a discussion of a data model with a statement like, \"I'll use auto incrementing IDs,\" or \"I'll use GUID here\" as kind of a default approach to assigning IDs to data. In many applications, however, the type of ID you assign to your data has practical consequences.\n\nIs this ID going to be exposed to users? If so, how long does it need to be to avoid collisions? If we auto-increment it, are we worried about the visibility that will give third parties into our traffic patterns or the possibilities of users guessing the IDs to each others' data? If it's intended to be shared, is it convenient to type? If you print it on a business card or a flier, does it contain characters that you could confuse for each other (e.g., “1” and “I”, “0” and “O”)?\n\nYou don't need to hold an inquiry for every minor detail, but always be sure to give some justification for the decisions you make and let your interviewer know how your decisions would change in different circumstances. System design problems don't have a single definitive answer, so interviewers just want to see that you can justify your answers.\n\nCoding problems usually have an expected path. Typically you'll begin with an obvious but inefficient solution, and then the interviewer will prompt you for a series of improvements. Those improvements lead you to increasingly efficient solutions until you finally arrive at the optimal implementation.\n\nSystem design problems, on the other hand, resemble a Choose Your Own Adventure book rather than a linear novel. A complex system contains a multitude of sub-components, each one of which could serve as a design problem on its own. After you've sketched the overall layout of your system, an interviewer may decide to keep your focus on the big picture or dive into a deeper examination of one particular component.\n\nThe path your interview takes will be steered by your interviewer, but they're likely to take cues from the sub-problems in which you display interest or aptitude. In some cases they may explicitly ask you which part of the problem you'd prefer to focus on.\n\nEven if you're not choosing directly, you can still influence an interview's direction. As you talk your way through a solution, it’s OK to specifically note the parts that you have experience in and explain when you're making educated guesses. Your interviewer won't expect you to know everything, but giving them a better idea of what you do know will help them steer the interview in ways that reveal your strengths and problem-solving ability.\n\nWhen faced with a choice in a design interview, it's easy to focus on the technical details, but remember that computer systems serve human users, so you’ll want to anchor your technical decisions to the user experience they enable.\n\nSuppose, for instance, that the image sharing service you're designing will require users to log in before uploading an image. In technical terms, you might want to avoid login to keep the database schema simpler, or you could introduce login to gather better metrics. An anonymous experience may be best for a public image-hosting site intended for quick turnaround and low interaction, while a logged-in experience offers the possibility of community features like commenting and sharing, personalized metrics, and the ability to restrict an upload to authorized viewers. You may want to take either approach or even both, allowing a limited anonymous experience with extra features for logged-in users.\n\nThe important thing is to discuss the possible approaches and their consequences for the user experience with your interviewer before making a decision. You can never go wrong by making the end user the driving force in your design.\n\n## Green Flags, Red Flags, and other signposts\n\nThink of red and green flags as signposts you can use to orient yourself in the interview. Green flags indicate that things are going well, that you're engaging with the interviewer and making a positive impression. Red flags warn you that you may be going astray and should try to get the interview back on track.\n\nFollowing this quote’s advice has steered many interviewees in the wrong direction. There is no game, and talking for the sake of talking is one way to hang yourself with the rope the interviewer gives you. Also, if the goal is to not explode, well, you’re wasting your and your interviewer’s time.\n\nAs we mentioned earlier, this guide will teach you the basic information that you’ll be asked about in 80% of system design interviews. Although these are great odds, you still may encounter a scenario that’s beyond your level of understanding. If this happens to you, don’t worry! Just engage in an honest dialogue with your interviewer, explaining when you lack certain knowledge or have gaps in your understanding. When you do have a sense of how to proceed, but you’re uncertain, you should communicate from first principles. Later in this guide, we will explain how to overcome that uncertainty and still score points with your interviewer.\n\nKeep in mind that your interviewers use the same problems over and over again, and they frequently see candidates make the same mistakes. If they try to divert you from a course of action, it's likely because they've seen others flounder when using the same approach. You may be the one candidate in a hundred who finds a unique and better solution—we've had this happen before!—but carefully consider the odds before proceeding with a solution against the interviewer's advice.\n\nWith that said, there is an art to pushing back against your interviewer when the situation calls for it, and later in this guide we’ll teach you how and when to employ this strategy .\n\nWhen the interviewer offers feedback, you integrate it into your design. You ask probing questions and receive useful answers about the system you're designing, its users, and its traffic.Try to establish a tone as if you were working through a problem with a coworker rather than proving yourself to an interviewer.In the real world, when you’re assigned a project, you’ll have to ask a variety of people several questions to ensure that you fully understand the problem before making decisions. That’s what interviewers want to see.\n\nIt's OK to not know things—no one will have every answer—but it's better to admit that to your interviewer than to avoid the questions altogether. Your interviewer may be able to offer you a hint or help you reason about alternatives if they know you're struggling, but if you skip right ahead you'll miss the opportunity to provide them with any positive signal from that portion.\n\nIf you’re looking for a mid-level position or below, your interviewer should determine the direction and speed of the interview. Given an initial overview of your design, they may ask you for clarification on some aspects of it. They may ask you to produce a more detailed design for one or more components. And they may also change the requirements and ask how you could adapt your solution to accommodate this new view of the world. Wherever they take the interview, follow along and focus on the areas they direct you to.\n\nIf you’re applying for a senior role (or above), it’s a good sign if you direct more of the interview. In junior system design interviews, the interviewer expects to drive the interview, but as you reach senior levels the expectation shifts to the interviewee.\n\n​​Being overly confident and talking too much might count against a mid-level candidate. Some interviewers (especially off-script ones) love giving candidates more rope to hang themselves with, and then they ask specific questions that focus on what the candidate struggles with.\n\nIf your goal is to maximize a mid-level offer, not improve your \"average passing rate\" (i.e., if you are comfortable sacrificing some senior-plus chances to increase your mid-level chances), then you might be better off consciously \"giving control away\" to your interviewer.\n\nSimply put, at the above-senior level an awkward pause will be held against you—that’s basically guaranteed. But at mid-level, most of your attempts to fill in an awkward pause may hurt you more than keeping silent.\n\nAnother way to think of it: when you are not leading the conversation, you signal that you’re not really far above mid-level. (But if you are comfortable at mid-level, this is not a downside!)The saying, ‘Better to remain silent and be thought a fool than to speak out and remove all doubt’ can be true for mid-level interviews but not for seniors or above-senior.”\n\nThe saying, ‘Better to remain silent and be thought a fool than to speak out and remove all doubt’ can be true for mid-level interviews but not for seniors or above-senior.”\n\nIf you're struggling to provide an answer, give yourself a little bit of time to come up with something. If you're truly stuck, however, you should ask your interviewer for help. They can't tell that you're at an impasse unless you tell them, and you may waste valuable interview time while they debate whether it's been long enough to interrupt you.\n\nAn interview doesn't need to be a continuous stream of consciousness, and it never hurts to sanity check your ideas before verbalizing them.\n\nIn Part 4 of this guide, we’ll teach you how to get unstuck and exactly what to say when you’re stuck.\n\n### A few more signposts\n\nOften, candidates will say things like: “we could use this type of DB, or this other, or that other, and these are some pros and cons…” and then they move on to another component. It’s a good practice to talk about benefits and tradeoffs, but then you have to make a decision. In the real world you have to make decisions—the same thing applies to the interview. If the interviewer challenges you with some questions, it’s totally fine to change your mind and alter the component (if you think there are better choices).\n\nWe could use this type of DB, or this other, or that other, and these are some pros and cons…\n\n\"We could use this type of DB, or this other, or that other, and these are some pros and cons…And based on all these tradeoffs, I’ll use THAT type of DB.\"\n\nDon’t say things because you think you’re supposed to say them.This often occurs when candidates name specific brands of technologies (e.g., “Kafka” or “Cassandra”). Not being familiar with specific databases or other components is fine. Be smart and don’t say brand names just for the sake of saying them.\n\nI’m going to use Cassandra...” unless you are VERY familiar with that, because the next question will be: “Why Cassandra and not some_other_db?\n\nI’m going to use a NoSQL db because of [insert brief rationale].\n\nI will use Kafka…” unless you’re prepared to explain how Kafka works. Don’t say “I will use Kafka” unless you are prepared to talk about other types of queues, because they may ask you: “Oh, Kafka, interesting choice. Why that instead of [some other queue]?\n\nI will use a queue because of [insert brief rationale].\n\nSay the generic name of the component, not the brand name unless you are very familiar with it. Don’t say Kafka. Instead, say “a queue.\n\nYou finished Part 1! We hope you gained a basic understanding of the system design interview and learned some tips and tricks you can use to excel in it. As you continue reading Parts 2-4, these “glimmers” of understanding will become more and more the default system of your interviewing skills.\n\nIn Part 2 we’ll teach you the 15 fundamental system design concepts. You’ll also get to watch our long form video of two system design experts designing the same system. They’re tasked with designing interviewing.io, which in this challenge is actually three systems in one: “Design google docs, a remote compiler, and a recording service… in 30 minutes or less.”",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/system-design-interview",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "A Senior Engineer’s Guide to Netflix's Interview Process and Questions",
      "content": "## Netflix’s interview process and questions\n\nNetflix’s interview process consists of the following steps:\n\n• Recruiter call\n\n• Hiring manager screen\n\n• Technical phone interview\n\n• A very long onsite\n\nBefore we get into the details of each of these steps, here are a few general notes about Netflix’s process, evaluation criteria, and interviewers.\n\nEvery human organization views themselves as a metaphor; Netflix doesn’t view themselves as a family like some other tech companies, they view themselves as a high-caliber sports team (in fact, Netflix calls their employees a “dream team”). They explain this metaphor themselves in their infamous culture memo.\n\nFinally, Netflix’s interview process is decentralized and team-dependent. Moreover, you can interview with multiple teams at Netflix concurrently, which can help you increase your odds of securing a job offer.\n\n### Step 1: Recruiter call\n\nPlease see the section above called“A note about recruiter calls”\n\n### Step 2: Hiring manager screen\n\nThis is a 30 minute call. A former Netflix employee called this round “Very chill, especially compared to the onsite.” This round consists of bidirectional surface-level questions.\n\nThe hiring manager will also be selling you on Netflix. Hiring managers doing selling is business as usual, but in this case, it serves an additional purpose – because their onsite is by far the most intense, they have to sell harder upfront because the onsite is a bigger commitment for the candidates.\n\n### Step 3: Technical phone screen\n\nThe Netflix technical phone screen is a coding interview that typically lasts 45-60 minutes. There is significant inter-team variation on what these interviews cover, and the tooling you use during these interviews also varies by team,\n\n### Step 4: Onsite\n\nOnsite interview structure varies from team to team, but you’ll have roughly 8 interviews focused primarily on system design, then behavioral, and then coding.\n\nDepending on the length of the onsite, Netflix recruiting may ask you if you’d prefer to split the onsite over two days, and we recommend that you proactively ask to do that, given how taxing the behavioral and system design portions are!\n\nNetflix is the only FAANG that routinely includes 1-2 directors in their onsite loops. If your loop has two, it’ll be one director will be from your org and another from a partner org. Netflix does this to reduce bias. One director may do a system design interview, and the other will do a behavioral interview.\n\n“Don’t be thrown off by having to talk to directors. Just stick to the principles: when you speak about technical stuff you’ve worked on, focus on scale, availability, and security. When you speak about behavioral stuff: use shared ideas from their culture deck, take accountability for your wins and failures, and demonstrate metrics and impact.”\n\n“The HRBP [which is basically a very senior recruiting function] and the director would typically focus on behavioral rounds. I have also seen directors spending time (30 mins) just letting candidates ask and clarify any questions that they might have regarding the team, Netflix culture, career growth path or any other aspects. So, a strong recommendation would be to be ready with your genuine questions list and get things clarified in such interviews. Candid conversation is one of the key values at Netflix and asking genuine concerns if any is seen through good lenses, as that establishes candidates' seriousness about the role to some extent.”\n\n## Netflix’s interview types in detail\n\n### Coding\n\nThe technical questions Netflix asks vary from team to team. Some teams don’t ask LeetCode questions. Other teams will ask medium-difficulty LeetCode-style coding questions with a creative/practical twist.\n\nThese rounds are going to change team by team, but the pattern we’ve noticed is that Netflix coding questions often come in two parts.\n\nTypically there is one question and, in scenarios where edge cases and tests are done early, say within 45 minutes, the interviewer may choose to  spend some time discussing general large scale engineering concepts and distributed systems (like microservices, scalability, etc.). For instance, some expansions could be:\n\n• A system design expansion on top of the coding question, such as a practical application where they ask you to apply the solution you just found to a part of their real-life system\n\n• A deep dive into a specific skill set (e.g., if this team codes in Java: they’ll have a round all about multithreading for Java specifically)\n\n• For everything you need to prepare for Netflix’s coding interview, check out the section called \"Netflix coding interview preparation resources\" below.\n\n### System design\n\nThis is the most important round at Netflix. Coding carries the least weight, behavioral carries a lot, and system design has the most.\n\nNetflix system design rounds are highly unique and highly challenging. Netflix is to system design as Google is to coding; these technical interview rounds include the most difficult and bespoke questions.\n\nSimilar to how Amazon loves Leadership Principles, Netflix loves system design so much they even throw it into coding rounds sometimes – first, you solve a LeetCode-style problem. Then they ask you to apply it to a real-world use case.\n\nThat said, Netflix system design rounds are easier to prepare for if you know the patterns: Netflix loves scale. Netflix never wants to go down, and Netflix hates when things aren’t secure. Availability is super important to them; they want to ask and hear about tactics to scale systems, keep systems highly available, and maintain secure systems.\n\nAt Netflix, you’re likely to see unique questions that you won’t get anywhere else, and the system design round is the part of the process that Netflix interviewers take the most pride in, so they make up hard, one-of-a-kind questions from scratch. Thematically, their questions are more likely to be focused on scaling. They also like to ask about security and availability.\n\nIn fact, Netflix is more likely than the rest of FAANG to give you a system design round focused solely on security. For instance, you might get asked what you would do during a DDoS attack, and the entirety of the session will be spent drilling down into the details. And because they’re also obsessed with availability, you might get questions around backups and what to do if a service goes down.\n\nMoreover, as with their coding rounds, Netflix prefers questions with a practical application, and they’re likely to ask you about something they’re working on right now. If you research the hell out of their architecture – specifically the service that particular team is in charge of – and the other services this service interacts with, you’ll be in good shape.\n\nYou’re also likely to see a “reverse system design” round, where your interviewer will ask you pointed questions about the systems you’ve worked on before, e.g., the largest scale system you’ve worked on, how did you manage it, how did you scale it, etc.\n\nQuestions they most likelywon’task are product-focused questions, such as “Design Spotify”.\n\nLearn about Netflix’s overall architecture so you can a) speak their language, and b) build or speak of something similar (in the interview) that Netflix has already built but simpler.\n\nFor the team you interview with: what’s their tech stack? What open source stuff do they do? With which other services might their service interact? That last question is most critical. If you can put forethought into how their current system works, you’ll have a huge leg up; then all you’ll need to do is discuss what you learned about their system to score a bunch of points with any of their interviewers.\n\nWhat tooling you use in these interviews depends on the team you’re interviewing with.\n\n### Behavioral\n\nAnswers to behavioral questions are almost as important as system design at Netflix. You’ll get rejected if you fail the behavioral screen.\n\nThese interviews have a heavy emphasis on the candidate being a cultural fit, being able to work in a team, having curiosity, and being product minded, highly motivated individuals capable of driving products forward.\n\nA unique part of Netflix’s behavioral interview is the “Dream Team” interview.  This is a slightly more intense behavioral round conducted by a director. The \"volume\" is turned up on all of the things you might see in a typical behavioral round at Netflix (scale, accountability, open communication about concerns, high risk and high reward.)\n\n“Netflix doesn’t hire as much as other FAANGs, so they want to make sure you're a star. That’s what the ‘Dream Team’ interview is about.”\n\nOne key thing you need to do before your Netflix behavioral interview is read their culture memo. Our interviewers tell us that if you don’t do this, you will fail the behavioral round.\n\n“The culture illustrated in theculture memois sort of accurate to how the culture at Netflix actually is, but the actual culture is less intense. Team members tend to get along really well. You don’t compete with others in your performance review like it is at companies like Facebook. We’re not ranked against peers, so people are more willing to help each other out.”\n\nNetflix will ask about impressive things you’ve done, as well as dig into your motivation (your “why”). This round will feel like you’re doing self-promotion. Typical questions will ask about your favorite project, latest project, and most significant project, as well as open-ended questions about what you’re looking for in your next role and why you’re interested in Netflix.\n\nPromote yourself early and often in Netflix behavioral rounds. Promote yourself proactively. Metrics and impact statements are effective ways to promote yourself because they convey a sense of scale and complexity.\n\nIt can be nerve-wracking to talk to a director for 45-60 minutes. It’s more nerve-wracking when, out the gate, they ask you to describe the biggest thing you’ve ever worked on. When talking to a director, it’s more important to have metrics and impact statements.\n\n## How Netflix makes hiring decisions\n\nNetflix interviewers are untrained, their questions are unstandardized, their interviews are team-dependent, and their decision-making north star is “Why”. You can interview with multiple teams concurrently, effectively giving you multiple shots on goal.\n\nThere’s also no specific company-wide scale for performance at Netflix. This is different from, say, Google, where all candidates are graded on the same “Strong Hire, Hire, Neutral, No Hire, Strong No-Hire” scale. Different teams have different processes, but most decisions are made based on live post-onsite discussions.\n\n“Netflix hiring decisions are black and white: pass or fail. And then you discuss if you'd be open to changing your mind. The only difference between Apple and Netflix was how they defined cultural fit. Besides that the hiring decisions were made in the same way: informal, mainly based on live discussions, binary decisions, and striving for consensus.”\n\nImpression management is more powerful at companies that do live feedback discussions. To learn more about impression management, check out the resources to prepare for Netflix later in this section.\n\n## Netflix coding interview preparation resources\n\nWe’ve aggregated a bunch of useful Netflix content for you! We have replays of candidates doing mock interviews with Netflix interviewers, long-form solutions to common Netflix questions, and deep dives into technical topics that tend to come up in Netflix interviews.\n\n### Netflix interview replays\n\nBelow are a series of mock interview replays, conducted by Netflix interviewers on our platform. Watch them so you can learn from others’ mistakes.\n\n### Solutions to common Netflix questions\n\nBelow are common questions that interviewers from Netflix ask on our platform. Since our data comes from mock interviews, questions may not be exactly the same as what you'd see in real interviews.\n\n### Technical topics\n\nTo figure out what technical topics will come up in your Netflix interviews, we did two things. First, we spoke to a bunch of Netflix interviewers in our community. Then we cross-referenced all the anecdotes we heard with Glassdoor data AND our own data-set of mock interviews in the style of Netflix. Based on all of the above, here are the technical topics you’re likely to encounter:\n\n## Other Netflix interview preparation resources\n\nThe resources listed below are designed to help with various aspects of Netflix interview prep, from technical problem-solving to understanding the company’s core values.\n\n### System design\n\nSince Netflix has the most difficult system design screen (and their version of this round has a lot of overlap with other FAANGs), if you prep for Netflix, you’re also upskilling for system design rounds at all FAANGs. We recommend the following resources to all engineers interviewing at FAANG:\n\n• A Senior Engineer's Guide to the System Design Interview\n\n• Brush up on scaling, security, availability, microservices, and failure recovery/backups\n\n• Research the hell out of the technology the team you’re interviewing with makes. Then practice taking a low-level system design question, coming to a quick solution, and then applying it to a piece of the real-world system this specific team works on.\n\n• Practice low-level system design questions more than high-level ones.\n\n### Behavioral\n\nThese resources will help you “learn their language.” Then, when you communicate with Netflix, speak their language.\n\n• Khan Academy’s intro to impression management\n\n• Netflix’s famous culture slide deck\n\n• Watch a few videos on theYouTube Channel called “WeAreNetflix”",
      "content_type": "guide",
      "source_url": "https://interviewing.io/guides/hiring-process/netflix#solutions-to-common-netflix-questions",
      "author": "Kevin Landucci",
      "user_id": ""
    },
    {
      "title": "Reachability Problems and DFS",
      "content": "Depth-first search, or DFS, is a fundamental graph algorithm that can be used to solvereachabilityproblems. This post shows how to adapt the basic DFS template to solve several problems of this kind. Reachability problems are often easier in undirected graphs. Below, we specify if the algorithm works for undirected graphs, directed graphs, or both.\n\nWe assume that the reader is already familiar with the concept of DFS.Hereis an excellent video introducing DFS with step-by-step animations. We also assume that the reader is familiar with the adjacency list representation of a graph, and we use big-O notation in the analysis.\n\nThe algorithms below are in Python.ndenotes the number of nodes. Nodes are identified with integers in the range0..n-1. The graphGis a graph stored as an adjacency list:Gis a list ofnlists. For eachvbetween0andn-1,G[v]is the list of neighbors ofG.\n\nIf the graph is given as an edge list instead, we can initialize it as follows:\n\nIf the graph is given as an adjacency matrix, we can iterate through the rows of the adjacency matrix instead of through the adjacency lists. To iterate through the neighbors of a nodev, instead of\n\nNote that using an adjacency matrix affects the runtime analysis of DFS:O(n²)instead ofO(m).\n\nThis is the simplest question that can be answered with DFS. The primary data structure in DFS is a list of booleans to keep track of already visited nodes (we call itvis). If we start a DFS search from a nodes, the reachable nodes will be the ones for whichvisis true.\n\nFor this,Gcan be directed or undirected. We make use of a nested function in Python so that we do not need to passGandvisas parameters (in Python nested functions have visibility over the variables in the scope where they are defined).\n\nDFS runs inO(m)time andO(n)space, wheremis the number of edges. This is because each edge is considered twice, once from each endpoint, if the endpoints end up being visited, or zero times if the endpoints are not visited.\n\nThe iterative version takesO(m)space instead ofO(n)because nodes can be inserted into the stack multiple times (up to one time for each incident edge). Alternatively, we can mark the nodes as visited when we add them to the stack instead of when we remove them. This change reduces the space usage to the usualO(n). However, with this change, the algorithm is no longer DFS. It still works for answering reachability questions because the set visited nodes is the same, but the order in which they are visited is no longer consistent with a depth-first search order (it is closer to a BFS (breath-first search) order, but also not exactly a BFS order).\n\nThe difference between marking nodes when they added vs removed from the stack is discussed in detailhere. Since the recursive version is shorter and optimal in terms of space, we favor it from now on. That said, it should be easy to adapt the iterative version above to the problems below.\n\nWe use the same code from before, but we add early termination as soon as we seet. Now, the recursive function has a return value.\n\nAdding the early termination can make the DFS faster, but in the worst-case the time/space complexity is the same.\n\nThe hardest part on this problem is constructing the graph in the first place.\n\nThe edges \"traversed\" in a DFS search form a tree called the \"DFS tree\". The DFS tree changes depending on where we start the search. The starting node is called the root. We can construct the DFS tree by keeping track of the predecessor of each node in the search (the root has no predecessor). If we construct the DFS tree rooted ats, we can follow the sequence of predecessors fromttosto find a path fromstotin reverse order.\n\nInstead of using the listvisto keep track of visited nodes, we know a node is unvisited if it has no predecessor yet. We indicate that a node has no predecessor with the special value-1.\n\nNote that DFS doesnotfind the shortest path formstot. For that, we can use BFS (breath-first search). It just returns any path without repeated nodes.\n\nFor undirected graphs, this is almost the same question as the first question (\"which nodes can be reached bys?\") because of the following property:\n\nAn undirected graph is connected if and only if every node can be reached froms, wheresis any of the nodes.\n\nThus, the code is exactly the same as for the first question, with two differences: 1) we choosesto be0(could be anything), and 2) we change the last line to check if every entry invisis true.\n\nFor directed graphs, we need to take into account the direction of the edges. A directed graph isstrongly connectedif every node can reach every other node. We can use the following property:\n\nA directed graph is strongly connected if and only ifscan reach every node and every node can reachs, wheresis any of the nodes.\n\nWe already know how to use DFS to check ifscan reach every node. To check if every node can reachs, we can do a DFS starting froms,but in the reverse graph of G. The reverse graph ofGis likeGbut reversing the directions of all the edges.\n\nThe runtime is stillO(m), but the space is nowO(m)because we need to create and store the reverse graph. There are alternative algorithms (like Tarjan's algorithm) which can do this inO(n)space.\n\nWe can use the typical DFS to answer this question for undirected graphs. We use a common pattern in DFS algorithms: an outer loop through all the nodes where we launch a search for every yet-unvisited node.\n\nThe runtime is nowO(n+m)because, ifm < n, we still spendO(n)time iterating through the loop at the end.\n\nFor directed graphs, instead of connected components, we talk aboutstrongly connected components. A strongly connected component is a maximal subset of nodes where every node can reach every other node.\n\nIf we want to find the number of strongly connected components, we can use something likeTarjan's algorithm, a DFS-based algorithm that requires some additional data structures.\n\n• https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/(Premium only)\n\n• https://leetcode.com/problems/number-of-islands/\n\n## Which nodes are in the same connected components?\n\nThis question is more general than the previous two. We label each nodevwith a numberCC[v]so that nodes with the same number belong to the same CC. Instead of having a listCCin addition tovis, we use the CC number-1to indicate unvisited nodes. This way, we do not needvis\n\nFor directed graphs, again we need Tarjan's algorithm or an equivalent algorithm.\n\n• https://leetcode.com/problems/max-area-of-island/\n\n• https://leetcode.com/problems/sentence-similarity-ii/\n\nIn the second problem, nodes are given by names, not indices, so they need to be converted.\n\nFor undirected graphs, this question is simple. First, we consider the problem in each CC independently. This is very common pattern in graph problems. We do this with an outer loop through all the nodes where we launch a search for every yet-unvisited node.\n\nDuring the DFS search in each CC, if we find an edge to an already visited node that is not the predecessor in the search (the node we just came from), there is a cycle. Such edges in a DFS search are calledback edges. We add one parameter to the recursive functionvisitto know the predecessor node.\n\nFor directed graphs, it is not as simple: the fact that a neighbornbris already visited during the DFS search does not mean thatnbrcan reach the current node. To check if a directed graph is acyclic, we can use the linear-timepeel-off algorithmfor finding a topological ordering. This algorithm detects if the graph is acyclic and finds a topological ordering if so, though we are only interested in the first part.\n\n• https://leetcode.com/problems/redundant-connection/\n\nThis problem is easier to solve using union-find, but it can be done with DFS.\n\nUsually, we ask this question for undirected graphs. We can use this characterization of trees:\n\nAn undirected graph is a tree if and only if it is connected and has exactlyn-1edges.\n\nWe already saw how to check if the graph is connected with DFS, and counting the number of edges is straightforward:\n\nThis is exactly the same question as whether the graph can be two-colored, so see the next section.\n\nTwo-coloring a graph means assigning colors to the nodes such that no two adjacent nodes have the same color, using only two colors. Usually, we consider coloring question for undirected graphs.\n\nWe consider whether each CC can be colored independently from the others. We can color each CC using DFS. We use values0and1for the colors. The color of the start node can be anything, so we set it to0. For the remaining nodes, the color has to be different from the parent, so we only have one option.\n\nInstead of having avisarray, we use the special color-1to denote unvisited nodes.\n\nWith 3 or more colors, the problem becomesa lot harder.\n\n• https://leetcode.com/problems/is-graph-bipartite/\n\n## What is the distance from a node s to every other node in a tree?\n\nWe cannot use DFS to find the distance between nodes in a graph which can have cycles, because DFS is not guaranteed to follow the shortest path from the root to the other nodes. For that, BFS is more suitable (if the graph is unweighted). However, since trees are acyclic, there is a unique path between any two nodes, so DFS must use the unique path, which, by necessity, is the shortest path. Thus, we can use DFS to find distances in a tree.\n\n• https://leetcode.com/problems/time-needed-to-inform-all-employees/\n\nA spanning tree of a connected, undirected graphGis a subgraph which has the same nodes asGthat is a tree.\nThe edges traversed by a DFS search on a connected graph form a spanning tree (sometimes called a DFS tree). Thus, we do DFS and add the traversed edges to the resulting tree.\n\nDFS has many uses. We showed how to make minor modifications to the DFS template to answer reachability and connectivity questions.\n\nAfter DFS, the next algorithm to learn would be BFS (breath-first search). Like DFS, it can answer reachability questions. On top of that, it can also answer questions about distance in undirected graphs.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\nThe specs of the UI for the Wall Game and renders from frontend generators.\n\nMy grandparents' story during the Spanish Civil War.\n\nA comprehensive guide to different implementations of Dijkstra's algorithm, with code.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/reachability-problems-and-dfs?category=dsa",
      "author": "Prerequisites",
      "user_id": ""
    },
    {
      "title": "Heapify Analysis Without Math",
      "content": "I'm writing about heaps for Beyond Cracking the Coding Interview (beyondctci.com), and the most technical part is the analysis ofheapify. It's easy to show that it takesO(n log n)time, wherenis the number of nodes in the heap, but it's not straightforward to show that this is not tight and the method actually takesO(n). time.\n\nEvery proof I have found online involves a summation over the levels of the heap that ends up looking something like the one inWikipedia heap page:\n\nwhich is more math than I want to put in this book (the bulk of the audience consists of people trying to land a SWE job, not math enthusiasts).\n\nBelow is the proof \"without complicated math\" I came up with that heapify takesO(n)time. If you are familiar with the classic proof, let me know if you find it easier - I might use it for the book. Also, please let me know if you've seen someone else proving it in a similar way.\n\nIf you already know what heapify is, you can jump directly to theProof.\n\nHeaps are binary trees with two special properties:\n\n• They arecompletebinary trees: all the levels except the last one have the maximum number of nodes; the last level may not be full, but all the nodes are aligned to the left. (In particular, this implies that heaps have logarithmic height, which is key to the big O analysis.)\n\n• Theheap property:every node is smaller than its children (this is assuming a min-heap - it would be the opposite for a max-heap).\n\nI will focus on the heapify operation and its analysis, but if you want to learn heaps from scratch, the Algorithms with Attitude Youtube channel has agreat videoon it. He also covered theclassic linear-time prooffor heapify, if you want to compare it to mine.\n\nIn any case, I left a full Python heap implementation at the bottom of this post.\n\nHeapify (invented byRobert W. Floyd) converts a binary tree which is already complete, but may not have the heap property, into a proper heap.\n\nHeapify uses the \"bubble-down\" procedure, which starts at a node that may not satisfy the heap property, and recursively swaps it with the smallest of its two children until the heap property is restored:\n\nHeapify works by \"bubbling down\" every non-leaf (internal) node, from bottom to top:\n\nThis figure shows the heapify steps for a min-heap. The first tree is the initial state, which doesn't yet have the min-heap property. Leaves are already at the bottom, so bubbling them down has no effect. The next 3 trees show the evolution after bubbling down the two nodes at depth 1 and then the node at depth 0.\n\nIn the array-based heap implementation,heapify()looks like this:\n\nThe reason why we start bubbling down from the middle of the heap is that, in a complete tree, at least half the nodes are leaves, and we don't need to bubble those down.\n\nHere, we won't prove that itworks, only that its analysis isO(n).\n\nI'll start with a definition and a fact we'll use later:\n\nAperfectbinary tree is a complete tree where the last level is full:\n\nFact 1: In a perfect tree, the number of leaves is 1 more than the number of internal nodes.\n\nFact 1 is true because the number of nodes at each level is a power of 2, so:\n\n• the number of internal nodes is the sum of all the previous powers of 2.\n\nThe sum of the first few powers of 2 add up to one less than the next power of 2. You can see that if you line them up like this:\n\nIt's a bit likeZeno's paradox, where each power of 2 in the sum halves the remaining distance, but never quite gets to 64.\n\nIn the worst case, each node will get bubbled down all the way to a leaf. Thus, each node needs to move downO(log n)levels, so one might reasonably expect heapify to takeO(n log n)time. This is correct in the 'upper bound' sense, but not tight: the total time is actuallyO(n). The intuition for why that is the case is that most nodes are in the deeper levels of the tree, where they don't need to travel a lot to get to the bottom.\n\nMain Claim: If you heapify a perfect tree, the number of 'bubble-down' swaps is smaller thann, the number of nodes.\n\n• We'll assume the worst case, in which every node is bubbled down to a leaf position.\n\n• If the claim is true and heapify does<nswaps, then it takesO(n)time, since most bubble-down iterations involve a swap.\n\n• We make the claim about perfect trees (rather than complete trees in general) to keep things simple.\n\n• When the height is 1, the claim is true because the tree has 1 node and requires 0 swaps to heapify.\n\n• Every time we add a new level,the number of nodes increases more than the number of swaps(by one, to be exact).\n\nIf we can prove (2), together with (1) it implies the Main Claim because, as we add levels, the number of swaps can never catch up to the number of nodes.\n\nTo see why (2) is true, imagine we add a new level to a perfect tree:\n\nEvery preexisting node needs to bubble down one additional level, while the new leaves do not need to do to be bubbled down. Thus, the number of swaps increases by the number of preexisting nodes.\nBut, another way of saying Fact 1 is that if you take a perfect tree and add a new level, the number of new/leaf nodes is 1 more than the number of preexisting/internal nodes.\n\nWe can compute the actual number of swaps needed, in the worst case, for concrete heights:\n\nWe can see that the number of swaps never catches up with the root, per the Main Claim.\n\nWe can also show how the number of nodes grows vs the number of swaps:\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/heapify-analysis?category=dsa",
      "author": "Robert Floyd",
      "user_id": ""
    },
    {
      "title": "Problem Solving BCtCI Style",
      "content": "Here's a thought: You don't want the first time you think about the question\"What should I do if I get stuck in a coding interview?\"to be when you are stuck in a coding interview.\n\nIn a way, getting stuck in a coding interview is an opportunity. The main goal of the interview is to see your problem-solving thought process, and being stuck is the ideal time to showcase it.\n\nBut you want to be prepared. It's valuable to have a plan for this exact scenario. We all dread blanking out in an interview, but having a plan makes it easy to simply focus on executing it. So, let's talk about what such a plan could look like in this blog post.\n\nInBeyond Cracking the Coding Interview, we go over all the steps in an interview, and our best tips to do well in each of them:\n\nIn this blog post, I'll zoom in on the problem-solving step, \"Design the Algorithm,\" and illustrate the thought process with a problem.\n\n• Minimally sketch the naive solutionto establish a baseline.\n\n• Identify upper and lower boundsusing big O analysis to narrow down the range of possible solutions.\n\n• Look for triggers (Keywords)that point to a specific approach.\n\n• Employ boosters: problem-solving strategies that give you the \"boost\" you need when you are stuck.\n\nThese are not revolutionary ideas -- it's what good problem solvers do and think about instinctively. One of the main goals of the book, and of this blog post, is to spell out the thought process of people who are really good at this in a relatable way so that anyone can reproduce it.\n\nWe playfully call this theMIKE template(Minimally sketch brute force,Identify bounds,Keywords (triggers),Employ boosters) afterMike Mroczka, one of the authors of BCtCI.\n\nRather than expanding on these now, we'll see them in action with the following problem.\n\nThe problem is based onLeetCode 3458, which appeared in a recent contest. You can go and give it a try before reading on (it's labeled as medium, but I think it's on the harder end of medium). The thought process I'll walk through here is based on how I solved it during the contest.\n\nGiven a strings, a substring ofsisspecialif any character in it does not appear outside it.\n\n• \"bcb\"is a special substring because'b'and'c'do not appear insoutside\"bcb\".\n\n• \"abc\"is not a special substring because'a'appears insoutside\"abc\".\n\nGiven a stringsconsisting ofnlowercase English letters, determine the maximum number of disjointspecialsubstrings. Two substrings are disjoint if they do not overlap.\n\nFirst, we need to digest what the problem is asking. This problem follows a common pattern: it introduces a kind of esoteric definition, \"special substring\", and then asks us to do something with it.\n\nTo make sure we understand what a special substring is, it's good to look at a few examples, starting with the provided ones. For instance, in\"abcba\", do you understand why\"a\"is not special but\"c\"is?\n\nTake some time to come up with your own examples. Rushing to solving a problem before understanding it well is a common but often costly mistake.\n\nSometimes, it helps to tackle just one part of the problem first, so we can start making progress.\n\n• Part B: Find the most non-overlapping special substrings.\n\nThe key here is to not overthink it. We just want to get the ball rolling and have a baseline we can improve upon.\n\nSince we don't want to spend too much time in an interview, you could even just describe the idea in a sentence and move on. But we prefer to briefly sketch it in very high-level pseudocode. We call it 'intended English': it's written like English, but with indentation to show the code structure:\n\nInterviews often involve considering trade offs between algorithms, so it's a\ngood habit to give them names and list their time/space complexity.\n\nIn this case, the space complexity depends on how many special substrings we might find, which is not clear yet, so we'll leave it out for now.\n\nSketching the brute force solution helps us ensure we understand the problem\n(and if we are solving for the wrong thing, we give the interviewer a chance\nto let us know).\n\nWe can use big O analysis to narrow down the range of possible solutions. An upper bound means \"we don't have to consider any solution that takes longer than this\", and a lower bound means the opposite: \"we don't have to consider any solution that takes less time than this\". In the book, we go over two ways of establishing an upper bound and two ways of establishing a lower bound:\n\n• Brute force upper bound: we just saw that we can find all special substrings inO(n^4)time, so we don't have to consider any solution that takes longer than that.\n\n• TLE (Time Limit Exceeded) upper bound: here is where we use the problem constraints to establish an upper bound. The problem says thatn <= 10^5, which usually means thatO(n^2)solutions are too slow, butO(n log n)or faster solutions are fine.\n\n• Output-size lower bound: thespacetaken by the output is a lower bound for the time complexity, because that's how long it takes just to write the output. In our case, the output of the overall problem is just a number, so this lower bound is trivial:O(1). Bounds are not always useful!\n\n• Task-based lower bound: some problems involve an inherent task thatanysolution must fulfill. The runtime of this task is a lower bound. In this case, we know weat leastneed to read every letter in the input, so we have a lower bound ofO(n). In other words, we can rule out solutions that takeO(log n)orO(1)time.\n\nCombining our findings, we can narrow down our search range toO(n log n)orO(n)algorithms (something likeO(n log^2 n)would also be fine, it's just less common).\n\nThere are certain properties of problems that point to a specific approach. Here are some triggers we can identify for this problem:\n\n• O(n log n)possible target complexity->sorting or heaps\n\nUnfortunately, triggers are not a guarantee, and these triggers don't seem to help for this problem:\n\n• In sliding windows, once you move past a character, you don't later go back. So, in Example 1, it would be impossible to find both\"abcba\"and\"bcb\": if you find\"abcba\"first, therightpointer would have to go back to find\"bcb\". But if you find\"bcb\"first, theleftpointer would have to go back to find\"abcba\".\n\n• Sorting doesn't seem like a good fit because the input order is important.\n\nSo, triggers didn't help, and brute force is still far from the target complexity. It's time to employ boosters.\n\nThe boosters are roughly ordered, but we don't always have to use them in order. In fact, here's a plot twist: what we did at the beginning, splitting the problem into two parts, is the third booster:Decrease the Difficulty->Break Down the Problem.\n\nThe first booster is straightforward: take the brute force pseudocode we already have and try to optimize it.\n\nIn the boosters diagram, we list three ways to go about it. One of them is theData structure pattern. Many bottlenecks come from having to do some calculation inside a loop. In those situations, ask yourself,\n\n\"Do I know of any data structure which makes this type of operation faster?\"\n\nFor this problem, we can use a hash set to optimize the innermost loop:\n\nIf you have working code or pseudocode but think of an optimization or better\napproach, do NOT edit your code. Copy-paste it and work on a separate copy.\nThis way, if you don't have time to finish or realize it's wrong, you'll still\nhave the previous working version.\n\nWe got down toO(n^3)time, but we know we still need to bring this down to the target complexity.\n\nLet's say we don't know how to optimize the code further. Often, the breakthrough comes from uncovering some \"hidden\" observation orpropertynot explicitly mentioned in the statement. Our second booster is to go hunting for those.\n\nIn the book, we discuss a bunch of ways of doing this, but the most basic and effective one is to try to solve the problem manually with a non-trivial example. By non-trivial, we mean that is is not some weird edge case, which would not be helpful for figuring out a general algorithm.\n\nLet's actually do that: takes = \"mississippi\"andmanuallytry to find all the special substrings.\n\nDon't overthink it. Don't think about algorithms yet. Just write them down.\n\nDone? Ok,nowtry to reverse-engineer what shortcuts your brain took. This is one property you may have noticed:\n\nProperty 1:a special substring must start at the first occurrence of a letter.\n\nYou may have noticed this property when your brain skipped over the second, third, or fourth'i's inmississippiand intuitively realized that there is no special substring starting at those. Writing down the propertyformalizesthis instinct and ropes in the interviewer.\n\nNow that we have a property, we have to find a way to use it.Property 1allows us to optimize the outer loop: it means we only have26 = O(1)possible starts to check (problems where the input consists of only lowercase letters often have optimizations like this).\n\nAs we iterate through the possible starts, we can track letters seen so far (e.g., in a hash set):\n\nWe like to write down the big O simplification (O(26 * n^2) = O(n^2)), so\nthe interviewer doesn't think we missed steps.\n\nWe haven't hit our target time complexity yet, so let's keep hunting for properties. Here is another one:\n\nProperty 2:of all the special substrings that start at a given letter, we only care about the shortest one.\n\nOur ultimate goal is to find the most non-overlapping special substrings. If we can choose between two special substrings, one of which contains the other, it is always \"optimal\" or, at least, \"safe\" to pick the smaller one.\n\nFor instance, ifsis\"baa\", we have two choices for special substrings starting at'b':\"baa\"and\"b\". We should pick\"b\"so that the\"aa\"part can be in another disjoint special substring.\n\nAgain, when we find a property, we need to think of how to apply it.Property 2means that, for each starting pointi, we can grow a substring one letter at a time, and stop as we find the first special substring.\n\nLet's break this down a bit more: say you start at indexi.\n\n• If you find a lettercthat appears at some later point, we need to grow the substring up to that index.\n\n• If you find a lettercthat appears beforei, we can stop the search. No substring starting atican be special.\n\nFor example, imagineistarts at the first'b'in the following string:\n\nThat means we need to grow the substring at least up to the last'b'in the string:\n\nAs we grow the substring, we hit an'a', which appears beforei, and we realize that no substring starting atican be special.\n\nWe can now add this logic to our algorithm. We can start the algorithm by computing the first and last index of each letter (this is an example of thepreprocessing patternin the boosters diagram -- it's common for properties from Booster 2 to enable optimizations from Booster 1).\n\nThen, as we grow each substring, we keep track of the farthest index we need to reach. (This is actually a common pattern in sliding window algorithms, where we maintain information about the window as it 'slides', rather than computing it from scratch every time the window moves. So, the 'sliding windows' trigger wasn't completely off).\n\nWe got the time down toO(n). Since we hit the lower bound, we can be confident Part A is as good as it can be, and we can move on to Part B.\n\n## Part B: Find the most non-overlapping special substrings\n\nLet's be honest: even if in the book we reallyemphasizedeveloping your problem-solving skills by using the MIKE template and the boosters, knowing a bunch of leetcode questions DOES give you an edge in coding interviews. So, I'll tell you how I actually solved this problem in the contest. I realized that Part B is just a variation of a classic greedy problem: most non-overlapping intervals. Indeed, a substring can be seen as an interval of the string.\n\nThe \"most non-overlapping intervals\" problem is in BCtCI, so I already knew that it can be solved with a greedy algorithm that sorts the intervals by their end time and then iterates through them, picking the ones that don't overlap with the previous one (hereis a similar problem on leetcode). This algorithm fits within our target time complexity, so I didn't have to think beyond that.\n\nIf I didn't already know the solution, I would have walked through the MIKE template again for Part B.\n\nYou may think that the bottleneck is the sorting, but it's not. Recall that there are only up to 26 special substrings (by Property 1). Sorting26intervals takesO(26 log 26) = O(1)time.\n\nI wanted to give an overview of all the high-level ideas for problem-solving in leetcode-style interviews. We could dive a lot deeper into any of those ideas, so this blog post may feel a bit rushed, but the meta-point is thatyou should have a plan for when you are stuck in an interview(and you should be following it during your practice sessions so it becomes second nature). It's not important that you use the MIKE template --yourplan should work foryou. But the ideas covered in this post should probably be part of it.\n\nIf you have any comments, let me know onlinkedinorX.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\nA step-by-step guide to understanding and implementing dynamic programming algorithms with practical examples.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/problem-solving-bctci-style?category=dsa",
      "author": "Property",
      "user_id": ""
    },
    {
      "title": "Get Binary Search Right Every Time, Explained Without Code",
      "content": "One of the things that makes binary search tricky to implement is that you usually need to tweak the pointer manipulation logic in subtle ways based on the specifics of the problem.\n\nE.g., an implementation that works for finding a target in a sorted array when the target is present, may not work if the target is missing. Or, it may not be clear how to tweak the code to find the last occurrence of the target instead of the first one. And of course, there are plenty of less conventional applications of binary search where the input is not an array, likecatching bike thieves.\n\nInBeyond Cracking the Coding Interview, we wanted to simplify this, so we went looking for a general binary search template. Going into it, I thought we might need at least two templates, but we ended up with just one, which we called the \"transition point recipe\", and which works for every problem we tried, including the 17 problems in the binary search chapter of the book. If you find one where it doesn't work, let me know!\n\nHere is the thesis of the transition point recipe:\n\nEvery binary search problem can be reduced to the 'transition point problem'.\n\nIn the 'transition point problem', you are given an array with just two values, say1and2, where all the1s come before the2s, and you need to point where it changes.\n\nE.g., in the array[1, 1, 1, 1, 1, 2, 2, 2], the last1is at index4and the first2is at index5.\n\nKnowing how to solve this specific problem is key to our recipe. The specific binary search implementation is not important, but there is an invariant we can follow that makes it quite easy: ensure that the left pointer is always at a1and the right pointer is always at a2.\n\nWe give code in the book, but remembering exact code in an interview is error prone. Instead, the four bullet points below are all Ipersonallyremember, and I feel confident that I can derive the rest easily.\n\n• Start by handling some edge cases:The array is emptyEvery value is1Every value is2\n\n• Initialize two pointers,leftandright, to the first and last indices, respectively.\n\n• For the main binary search loop, always maintain theinvariantthat the value atleftis1and the value atrightis2. Let this invariant guide your pointer manipulation logic, so that you don't need to memorize any code.\n\n• Stop when theleftandrightpointers are next to each other (i.e.,left + 1 == right).\n\nCombining the invariant with the stopping condition, we get that, at the end,leftwill be at the last1andrightwill be at the first2.\n\nThese bullet points rely on two ideas to make binary search easier: (1) handling edge cases upfront, and (2) letting strong invariants guide the implementation. Notice how the invariant even guides the edge cases at the beginning, as they are the necessary ones to be able to initializeleftandrightin a way that satisfies it.\n\nOk, so now, let's take for granted that we can solve the transition point problem. How does this help us solve other binary search problems?\n\nThe idea is to come up with a (problem-specific)predicate, like< target,>= target, orx % 2 == 0, which splits the search range into two regions, the \"before\" region and the \"after\" region.\n\nThis predicate is a function that takes an element of the search range and returns a boolean, and -- as you probably saw coming -- it is key that all the elements withtruevalues come before the elements withfalsevalues (or the other way around).\n\nThen, we can use the solution to the transition point problem to find the transition point between the 'before' and 'after' regions. The only difference is that, instead of checking boolean values directly, we check the result of the predicate.\n\nYou can even wrap the predicate in a function, which we calledis_before(x)in the book, which tells you whether a given element is in the 'before' region. Then, it's really obvious that we are just solving the transition point problem every time.\n\nThe only part that requires some thinking is choosing the right transition point. For example:\n\n• if we want to find thefirstoccurrence oftargetin a sorted array, we can useis_before(x) = x < target, which means that, iftargetis present, the first occurrence is the first element in the 'after' region (so, we can check/return therightpointer at the end).\n\n• if we want to find thelastoccurrence oftargetin a sorted array, we can useis_before(x) = x <= target, which means that, iftargetis present, the last occurrence is the last element in the 'before' region (so, we can check/return theleftpointer at the end).\n\nYou can try the transition-point recipe on all the problems from the binary search chapter of the book online atstart.interviewing.io/beyond-ctci/part-vii-catalog/binary-search, even if you don't have the book. There, you can also find all our solutions using the recipe, in Python, JS, Java, and C++.\n\nBy the way, the binary search chapter of the book is free -- it's inbctci.co/free-chapters.\n\nWant to leave a comment? You can post under thelinkedin postor theX post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\nMy grandparents' story during the Spanish Civil War.\n\nA proof that heapify takes linear time without using complex equations.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/binary-search?category=dsa",
      "author": "The",
      "user_id": ""
    },
    {
      "title": "Actually Implementing Dijkstra's Algorithm",
      "content": "Dijkstra's algorithm for the shortest-path problem is one of the most important graph algorithms, so it is often covered in algorithm classes. However, going from the pseudocode to an actual implementation is made difficult by the fact that it relies on a priority queue with a \"decrease key\" operation. While most programming languages offer a priority queue data structure as part of their standard library, this operation is generally not supported (e.g., in C++, Java or Python). In this blog, we go over the different ways to implement Dijkstra's algorithm with and without this operation, and the implications of using each. All in all, we consider 5 versions of Dijkstra (names mostly made up by me):\n\n• Textbook Dijkstra: the version commonly taught in textbooks where we assume that we have a priority queue with the \"decrease key\" operation. As we said, this often does not hold true in reality.\n\n• Linear-search Dijkstra: the most naive implementation, but which is actually optimal for dense graphs.\n\n• Lazy Dijkstra: practical version which does not use the \"decrease key\" operation at all, at the cost of using some extra space.\n\n• BST Dijkstra: version which uses a self-balancing binary search tree to implement the priority queue functionality, including the \"decrease key\" operation.\n\n• Theoretical Dijkstra: version that uses a Fibonacci heap for the priority queue in order to achieve the fastest possible runtime in terms of big-O notation. This is actually impractical due to the complexity and high constant factors of the Fibonacci heap.\n\nRoughly, each of the 5 versions corresponds to a different data structure used to implement the priority queue. Throughout the post, letnbe the number of nodes andmthe number of edges. Here is summary of the resulting runtime and space complexities:\n\n• Textbook Dijkstra: indexed binary heap. Runtime:O(m*log n); space:O(n).\n\n• Linear-search Dijkstra: unordered array. Runtime:O(n²); space:O(n).\n\n• Lazy Dijkstra: binary heap. Runtime:O(m*log n); space:O(m).\n\n• BST Dijkstra: self-balancing BST. Runtime:O(m*log n); space:O(n).\n\n• Theoretical Dijkstra: Fibonacci heap. Runtime:O(m + n*log n); space:O(n).\n\nWe provide implementations in Python and C++. The initial sections are mostly background. If you are already familiar with Dijkstra's algorithm, you can skip to the code snippets.\n\nThe input consists of a graphGand a special nodes. The edges ofGare directed and have non-negative weights. The edge weights represent the \"lengths\" of the edges. The goal is to find the distance fromsto every other node inG. The distance fromsto another node is the length of the shortest path fromsto that node, and the length of a path is the sum of the lengths of its edges. If a node is unreachable froms, then we say that the distance is infinite.\n\nMore precisely, this is known as the \"single-source shortest-path\" (SSSP) problem, because we find the distance from one node to every other node. Related problems include the \"all-pairs shortest paths\" problem and the single-source single-destination problem. Dijkstra's algorithm is a really efficient algorithm for the SSSP problem when the edges are non-negative. Dijkstra's algorithm does not work in the presence of negative edges (zero-weight edges are fine). IfGcontains negative edges, we should use the Bellman-Ford algorithm instead.\n\nThe constraint that the edges are directed is not important: ifGis undirected, we can simply replace every undirected edge{u,v}with a pair of directed edges(u,v)and(v,u)in opposite directions and with the weight of the original edge.\n\nTo simplify things, we make a couple of assumptions that do not make any actual difference:\n\n• Nodes not reachable bysplay no role in the algorithm, so we assume thatscan reach every node. This is so that, in the analysis, we can assume thatn=O(m).\n\n• We assume that the distance fromsto every node is unique. This allows us to talk about \"the\" shortest path to a node, when in general there could be many.\n\nA graph is a mathematical concept. In the context of graph algorithms, we need to specify how the graph is represented as a data structure. For Dijkstra's algorithm, the most convenient representation is the adjacency list. The valuable thing about the adjacency list representation is that it allows us to iterate through the out-going edges of a node efficiently.\n\nIn the version of the adjacency list that we use, each node is identified with an index from0ton-1. The adjacency list contains one list for each node. For each nodeubetween0andn-1, the listG[u]contains one entry for each neighbor ofu. In a directed graph, if we have an edge(u,v)fromutov, we say thatvis a neighbor ofu, butuis not a neighbor ofv. Since the graph is weighted, the entry for each neighborvconsists of a pair of values,(v, l): the destination nodev, and the lengthlof the edge(u,v).\n\nOne of the data structures that we maintain is a listdistwheredist[u]is the best distance known foruso far. At the beginning,dist[s] = 0, and for every other nodedist[u] = infinity. These distances improve during the algorithm as we consider new paths. Our goal is to get to the point wheredistcontains the correct distance for every node.\n\nDuring the algorithm, thedistlist is only updated through an operation called \"relaxing\" an edge.\n\nIn words, relaxing an edge(u,v)means checking if going toufirst and then using the edge(u,v)is shorter than the best distance known forv. If it is shorter, then we updatedist[v]to the new, better value.\n\nDijkstra's algorithm is based on the following observations:\n\n• ifdist[u]is correctandthe shortest path fromstovends in the edge(u,v), then if we relax the edge(u,v), we will find the correct distance tov. If either of the conditions are not satisfied, relaxing(u,v)may improvedist[v], but it will not be the correct distance.\n\n• To find the correct distance tov, we need to relax all the edges in the shortest path fromstov, in order. If we do it in order, each node in the path will have the correct distance when we relax the edge to the next node, satisfying the conditions.\n\nDijkstra's algorithm is efficient because every edge is relaxed only once (unlike other algorithms like Bellman-Ford, which relaxes the edges multiple times). To relax every edge only once, we must relax the out-going edges of each node only after we have found the correct distance for that node.\n\nAt the beginning, onlyshas the correct distance, so we relax its edges. This updates the entries indistfor its neighbors. The neighbor ofsthat is closest tos, say,x, has the correct distance at this point. This is because every other path fromstoxstarts with a longer edge, and, since the graph does not have negative-weight edges, additional edges can only increase the distance. Next, sincexhas the correct distance, we can relax its out-going edges. After that, the nodeywith the 3rd smallest distance indist(aftersandx) has the correct distance because the node beforeyin the shortest path fromstoymust be eithersorx. It cannot be any other node because simply reaching any node that is notsorxis already more expensive than the distance we have found fory. We continue relaxing the out-going edges of nodes, always taking the next node with the smallest found distance. By generalizing the argument above, when we relax the out-going edges of each node, that node already has the correct distance. We finish after we have gone through all the nodes. At that point,distcontains the correct distance for every node.\n\nIn order to implement Dijkstra's algorithm, we need to decide the data structures used to find the unvisited node with the smallest distance at each iteration.\n\nPriority queues are data structures that are useful in many applications, including Dijkstra's algorithm.\n\nIn a normal queue, we can insert new elements and extract the oldest element. A priority queue is similar, but we can associate a priority with each element. Then, instead of extracting the oldest element, we extract the one with highest priority. Depending on the context, \"highest priority\" can mean the element with the smallest or largest priority value. In this context, we will consider that the highest priority is the element with the smallest priority value.\n\nA priority queue is anabstractdata structure. That means that it only specifies which operations it supports, but not how they are implemented. There actually exist many ways to implement a priority queue. To make matters more confusing, different priority queues implementations support different sets of operations. The only agreed part is that they must support two basic operations:\n\n• extract_min(): remove and return the element with the smallest priority value.\n\nFor Dijkstra's algorithm, we can use a priority queue to maintain the nodes, usingdist[u]as the priority for a nodeu. Then, at each iteration we can extract the unvisited node with the smallest distance. However, there is a problem: when we relax an edge, the valuedist[u]may decrease. Thus, we need the priority queue to support a third operation which is not commonly supported:\n\n• change_priority(e, k): set the priority ofetok(assuming thateis in the priority queue).\n\nA related operation is removing elements that are not the most prioritary:\n\n• remove(e): removee(assuming thateis in the priority queue).\n\nIf a priority queue implements remove, we can use it to obtain the same functionality aschange-priority(e, k): we can first callremove(e)and then reinsert the element with the new key by callinginsert(e, k).\n\nAssuming that we have a priority queue data structure that supportsinsert,extract-min, andchange-priority, Dijkstra's pseudocode would be as follows.\n\nThe priority queue contains the unvisited nodes, prioritized by distance froms. At the beginning, the priority queue contains all the nodes, and they are removed as they are visited.\n\nA common variation is to add them to the priority queue when they are reached for the first time, instead of adding all the nodes at the beginning. The only change is how the priority queue is initialized and the if-else cases at the end:\n\nIt does not change the runtime or space complexity, but there is also no downside to deferring insertions to the PQ. On average, the PQ will contains fewer elements.\n\nUsually, we analyze the algorithmsafterimplementing them. However, in order to choose the best data structure for the priority queue, we need to analyze how much we use each type of operation.\nThus, it is convenient to define the runtime in terms of the priority queue operations, without specifying yet how they are done. LetT_ins,T_min, andT_changebe the time perinsert,extract_min, andchange_priorityoperation, respectively, on a priority queue containingnelements.\n\nThe mainwhileloop hasniterations, and the total number of iterations of the innerforloop, across allniterations, ism. This is because each edge is relaxed once.\n\nThe runtime is dominated by the priority queue operations, so it isO(n*T_ins + n*T_min + m*T_change). These operations dominate the runtime because everything else combined (like updating thedistlist) takesO(n+m)time.\n\nThe simplest way to simulate theextract_minfunctionality of a priority queue is to iterate through the entiredistlist to find the smallest value among the non-visited entries. If we do this, we don't need a priority queue. We call thislinear-search Dijkstra. We getT_ins = O(1),T_min = O(n), andT_change = O(1). Plugging those in, the total runtime of linear-search Dijkstra isO(n + n*n + m) = O(n²), where we simplify out themterm becausen² > min any graph. More precisely, a directed graph withnnodes has at mostn*(n-1)=O(n²)edges.\n\nA graph with \"close to\"n*(n-1)edges is called dense.Linear-search Dijkstra is actually optimal for dense graphs.This is because Dijkstra's algorithm must takeO(m)time just to relax all edges, so it cannot be faster thanO(m), and, in dense graphs that is already proportional toO(n²).\n\nAnd C++. We omit the includes and \"using namespace std;\".\n\nTheO(n²)time from the implementation above is slow if the graphGis sparse, meaning that the number of edges is small relative toO(n²). Recall that the time isO(n*T_ins + n*T_min + m*T_change). Ifmis more similar tonthan ton², then we would be happy to trade a slowerchange_prioritytime for a fasterextract_mintime.\n\nThe best possible answer in terms of big-O notation is to use a priority queue implementation based on a data structure known as aFibonacci Heap. A Fibonacci heap containing at mostnelements achieves the following times:\n\nAmortized time means that it could take more time, but, if we average out the times for that operation across the execution of an algorithm, each one takes that time on average.\n\nUsing a Fibonacci heap, we get a total time ofO(n*log n + m)for Dijkstra's algorithm. This is really fast in terms of big-O notation, but Fibonacci heaps have larger constant factors than other data structures, making them slower in practice.\n\nThe most common way to implement a priority queue is with abinary heap. It is simple and fast in practice. Binary heaps supportinsertandextract_mininO(log n)like a Fibonacci heap. However, they do not support thechange_priorityoperation.\n\nIt is possible to modify a binary heap to to support thechange_priorityoperation inO(log n)time. The result is sometimes called an \"indexed priority queue\". Using an indexed priority queue, we would get a total runtime ofO(n*log n + m*log n) = O(m*log n). This is slightly worse than with a Fibonacci heap, and faster in practice.\n\nIn any case, the priority queues provided by languages like C++, Python, and Java, do not support thechange_priorityoperation. This creates a disconnect between the pseudocode taught in classrooms and the actual code that we can write.\n\nThe goal of this post is to illustrate the options to deal with this issue. There are 3:\n\n• Textbook Dijkstra: find or implement our own indexed priority queue.\n\n• Lazy Dijkstra: we implement Dijkstra without using thechange_priorityoperation at all.\n\n• BST Dijkstra: we use a self-balancing binary search tree as the priority queue.\n\nWe will cover the latter two options. The first option is an interesting exercise in data structures (Iimplementedit once for a project), but it is more about the inner workings of binary heaps than it is about Dijkstra's algorithm.\n\nAll three options have a runtime ofO(m*log n). Note that for dense graphs, this becomesO(n² log n)time, so they are all worse than the naive linear-search Dijkstra. In terms of space, lazy Dijkstra is worse than the others, as it needsO(m)space, as opposed toO(n)for the other options.\n\nWe implement Dijkstra using a priority queue that does not support the change-priority operation. We need the following change: when we find a shorter distance to a node that is already in the priority-queue, instead of using the \"change-priority\" operation, we simply use an \"insert\" operation and add a copy of the node in the priority queue with the new distance. Then, when we extract a node from the priority queue, we ignore it if it is not the first time we extract that node. We call this version of Dijkstra \"lazy Dijkstra\" because we \"postpone\" the removal of the pre-existing copy of the node.\n\nHere is a Python version. The logical structure of a binary heap is a binary tree, but, internallythe tree is represented as an arrayfor efficiency reasons. Python is a bit whack because, instead of having a priority queue module that encapsulates the implementation, we have theheapqmodule, which provides priority queue operations that can be used directly on a list representing a binary heap.heapqoffers functionsheappop(equivalent toextract_min) andheappush(equivalent toinsert). These functions receive a normal Python list as a parameter, and this list is assumed to represent a binary heap. In Python, if the priority queue contains tuples, then the first element in the tuple is the priority. Thus, in the implementation we insert tuples to the priority queue with the distance first and the node second.\n\nAnalysis: since nodes can be added to the priority queue multiple times, in lazy Dijkstra the maximum number of elements in the priority queue increases fromO(n)toO(m). As a result, we doO(m)extract_minandinsertoperations. The total runtime isO(m*log m). This can be simplified toO(m*log n), becauselog m < log (n²) = 2 log n = O(log n). Thus, in terms of big-O notation,lazy Dijkstra is equally fast as textbook Dijkstra(Dijkstra with an indexed priority queue). The only thing that got worse is the space used by the priority queue.\n\nSelf-balancing binary search trees, like red-black trees or AVL trees, are a type of data structure that maintains a set of elements ordered according to values associated with the elements, known as the elements' keys. They support a few operations, all inO(log n)time. For our use case, we are interested in the following ones:\n\n• Given a key, find if there is an element with that key, and optionally remove it.\n\nThese operations allow us to use a self-balancing BST to implement a priority queue. With the third operation, we can even implement thechange_priorityoperation, as we mentioned.\n\nPython does not actually have a self-balancing binary search tree module (why?!), so we cannot implement this version of Dijkstra either without finding or implementing our own self-balancing BST.\n\nHere is a C++ version. In C++, the set data structure is implemented as a self-balancing BST:\n\nAnalysis: in a sense, BST Dijkstra combines the best of both worlds: it has the same runtime and space complexity as textbook Dijkstra, without needing the extra space of Lazy Dijkstra, but it uses a much more ubiquitous data structure, a self-balancing BST. However, in practice, self-balancing BSTs are slower than binary heaps. This has to do with the fact that heaps can be implemented on top of an array, while BSTs use recursive tree data structures with child pointers. The array has much betterlocality of reference. For sparse graphs, I'd expect the performance of the different versions to be ordered as follows:\n\nTextbook Dijkstra > Lazy Dijkstra > BST Dijkstra > Theoretical Dijkstra > Linear-search Dijkstra\n\n• Find the City With the Smallest Number of Neighbors at a Threshold Distance\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\nAn optimal solution for a graph problem that comes up in the Wall Game.\n\nA linear-time algorithm for a graph problem that comes up in the Wall Game.\n\nMy grandparents' story during the Spanish Civil War.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/implementing-dijkstra?category=dsa",
      "author": "Priority",
      "user_id": ""
    },
    {
      "title": "Iterative Tree Traversals: A Practical Guide",
      "content": "I don't know how often tree traversals come up in actual software projects, but they are popular in coding interviews and competitive programming.\nIn this article, I share an approach for implementing tree traversal algorithms iteratively that I found to be simple to remember and implement, while being flexible enough to do anything that a recursive algorithm can (I also didn't like most suggestions I saw online). The main technique is given in section\"Iterative Postorder and Inorder Traversal\", but first I give some context. I also link to practice problems onleetcode.comfor the reader to play with. I provide some solutions, but I suggest trying the problems out first. The code snippets are in C++, but leetcode accepts most languages.\n\nMathematically, trees are just connected acyclic graphs. However, in the context of tree traversals, we are usually working withrooted treesrepresented with a recursive structure such as the following (which is the default definition in Leetcode for binary trees). A leaf is a node with two null pointers as children:\n\nA tree traversal is an algorithm that visits every node in a tree in a specific order (and does some computation with them, depending on the problem). For binary trees specifically, there are three important orders:\n\n• Preorder:root before children. As we will see, this is the simplest to implement.\n\n• Inorder:left child, then root, then right child. This traversal is most often used onbinary search trees(BST). A BST is a rooted binary tree with the additional property that every node in the left subtree has a smaller value than the root, and every node in the right subtree has a larger value than the root. This traversal is called \"inorder\" because, when used on a BST, it will visit the nodes from smallest to largest.\n\n• Postorder:children before root. It comes up in problems where we have to aggregate information about the entire subtree rooted at each node. Classic examples are computing the size, the height, or the sum of values of the tree.\n\nBecause rooted trees are recursive data structures, algorithms on trees are most naturally expressed recursively. Here are the three traversals. I use the functionprocess(node)as a placeholder for whatever computation the problem calls for.\n\nSide-note: in C++, pointers are implicitly converted to booleans: a pointer evaluates to true if and only if it is not null. So, in the code above, \"if (!root)\" is equivalent to \"if (root == NULL)\".\n\n• https://leetcode.com/problems/binary-tree-preorder-traversal/\n\n• https://leetcode.com/problems/binary-tree-inorder-traversal/\n\n• https://leetcode.com/problems/binary-tree-postorder-traversal/\n\nIf the recursive implementation is so simple, why bother with an iterative one? Of course, to avoid stack overflow. Most runtime engines/compilers set a limit on how many nested calls a program can make. For example, according tothis article:\n\nDefault stack size varies between 320k and 1024k depending on the version of Java and the system used. For a 64 bits Java 8 program with minimal stack usage, the maximum number of nested method calls is about 7000.\n\nIf the height of the tree is larger than this limit, the program will crash with astack overflow error. A recursive implementation is safe to use if:\n\n• Somehow we know that the input trees will be small enough.\n\n• The tree isbalanced, which means that, for each node, the left and right subtrees have roughly the same height. In a balanced tree, the height is guaranteed to belogarithmicon the number of nodes (indeed, that is why balanced BSTs guaranteeO(log n)search time), so any tree that fits in RAM (or even disk) will require a tiny number of recursive calls.\n\nHowever, if we are not in either of the cases above, an iterative solution is safer.\n\nRecursive and iterative traversals have the same runtime complexity, so this is not a concern when choosing either (all the problems shown in this article can be solved in linear time using either).\n\nThe main approach for converting recursive implementations to iterative ones is to \"simulate\" the call stack with an actual stack where we push and pop the nodes explicitly. This works great \"out-of-the-box\" with preorder traversal.\n\nIncidentally, when implementing tree traversals we need to make an implementation choice about how to handle NULL pointers. We can be eager and filter them out before adding them to the stack, or we can be lazy and detect them once we extract them from the stack. Both are fine—what matters is to be deliberate and consistent about which approach we are using. I prefer the latter as it yields slightly shorter code, so I will use it in all the following examples. For comparison, here is the iterative preorder traversal with both approaches:\n\nNote thatthe right child is pushed to the stack before the left one. This is because we want the left child to be above in the stack so that it is processed first.\n\n• https://leetcode.com/problems/invert-binary-tree/\n\n• https://leetcode.com/problems/maximum-depth-of-binary-tree/\n\nThis problem asks to find the depth of a binary tree (follow the link for the description and examples). It requires passing information from each node to its children. We can do this by changing the stack tostack<pair<TreeNode*, int>>, so that we can pass anintto each child, as in the solution below:\n\nIn the code above, the{}notation is used to create pairs (e.g.,{root, 0}). If one is not familiar with pairs in C++, or is using a language without the equivalent, a simple alternative is to use two separate stacks, one for the nodes and one for the info.\n\n• https://leetcode.com/problems/minimum-depth-of-binary-tree/\n\nA solution for the last one, this time using a stack with a pair of nodes:\n\nWhile iterative preorder traversal is straightforward, with postorder and inorder we run into a complication: we cannot simply swap the order of the lines as with the recursive implementation. In other words, the following doesnotyield a postorder traversal:\n\nThe node is still processed before its children, which is not what we want.\n\nThe workaround, once again emulating the recursive implementation, is to visit each node twice.We consider postorder traversal first. In the first visit, we only push the children onto the stack. In the second visit, we do the actual processing.\nThe simplest way to do this is to enhance the stack with a\"visit number flag\". Implementation-wise, we change the stack tostack<pair<TreeNode*, int>>so that we can pass the flag along with each node. The iterative postorder looks like this:\n\nNote the order in which the nodes are added to the stack whenvisit == 0. The parent ends up under its children, with the left child on top. Since it is the first time that the children are added to the stack, their visit-number flag is 0. For the parent, it is 1.\nFor simplicity, I also follow the convention to always immediately call pop after extracting the top element from the stack.\n\nThe same approach also works for inorder traversal (that's the point). Here is a version where we visit each node three times: one to push the left child, one to process the node, and one to push the right child.\n\nIn fact, the second and third visits can be merged together: processing the node does not modify the stack, so the two visits are followed one after the other anyway. Here is my preferred version:\n\nFor completeness, here is the version found in most of my top Google hits (seethisfor a nice explanation):\n\nWhile it is shorter, it cannot be easily converted to postorder traversal, so it is not as flexible. Also, I find it easier to follow the execution flow with the visit-number flag.\n\n• https://leetcode.com/problems/kth-smallest-element-in-a-bst/\n\nA solution (follow the link for the statement and examples):\n\n• https://leetcode.com/problems/validate-binary-search-tree/\n\n• https://leetcode.com/problems/balanced-binary-tree/\n\nThis problem asks to check if a binary tree is balanced. It requires passing information back from the children to the parent node in a postorder traversal. Passing information from the children to the parent is easy with recursion. It can be done both with return values or with parameters passed by reference. For this problem we need to pass two things: aboolindicating if the subtree is balanced, and anintindicating its height. I use a reference parameter for the latter (returning apair<bool,int>would be cleaner).\n\nPassing information from the children to the parent in an iterative implementation is more intricate. There are three general approaches:\n\n• Use a hash table mapping each node to the information.\n\nThis is the easiest way, but also the most expensive.\nWhile the asymptotic runtime is still linear, hash tables generally have significant constant factors.\n\n• Add a field to the definition of the node structure for the information needed.\n\nThen, we can read it from the parent node by traversing the children's pointers.\nIn Leetcode we cannot modify theTreeNodedata structure so, to illustrate this approach, I build a new tree first with a new struct:\n\n• Pass the information through an additional stack.\n\nThis is the most efficient, but one must be careful to keep both stacks in synch. When processing a node, that node first pops the information from its children, and then pushes its own info for its parent. Here is a solution (with eager NULL-pointer detection):\n\n• https://leetcode.com/problems/diameter-of-binary-tree/\n\nThis problem also requires passing information from the children to the parent in a postorder traversal. Here is a solution using the third approach again, but this time with lazy NULL-pointer detection. Note that we push a 0 to thedepthsstack when we extract a NULL pointer from the main stack, and during processing we always do two pops regardless of the number of non-NULL children:\n\n• https://leetcode.com/problems/most-frequent-subtree-sum/\n\n• https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/\n\nSo far, we have looked at binary trees. In an n-ary tree, each node has an arbitrary number of children.\n\nFor n-ary trees, preorder traversal is also straightforward, and inorder traversal is not defined.\n\nFor postorder traversal, we can use a visit-number flag again. Two visits suffice for each node: one to push all the children into the stack, and another to process the node itself. I do not include the code here because it is very similar to the binary tree case.\n\nConsider a more complicated setting where we need to compute something at the node after visiting each child. Let's call this \"interleaved traversal\". I useprocess(node, i)as placeholder for the computation done before visiting the i-th child. Here is the recursive implementation and the corresponding iterative one using visit-number flags.\n\n• https://leetcode.com/problems/n-ary-tree-preorder-traversal/\n\n• https://leetcode.com/problems/n-ary-tree-postorder-traversal/\n\nThe common framework to all our solutions has been to pass a visit-number flag along with the nodes on the stack. User \"heiswyd\" on leetcode postedherean alternative way to pass the flag implicitly: initially, it pushes each node on the stack twice. Then, it can distinguish between the first visit and the second visit by checking whether the node that has just been extracted from the stack matches the node on top of the stack. This happens only when we extract the first of the two occurrences. Post-order traversal looks like this:\n\nIt is cool, but I prefer passing the flag explicitly for clarity.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\nThe specs of the UI for the Wall Game and renders from frontend generators.\n\nA collection of arguments in favor of coding interviews.\n\n## Why Many Greedy Algorithms Are Pickier Than They Need To Be\n\nMany greedy algorithms can be modified to make local rather than global choices while still producing the same solutions.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/iterativetreetraversal?category=dsa",
      "author": "What",
      "user_id": ""
    },
    {
      "title": "In Defense of Coding Interviews",
      "content": "There is already a lot of discourse about everything wrong with coding interviews. Indeed, one of the first chapters inBeyond Cracking the Coding InterviewisWhat's Broken About Coding Interviews?(it's one of the sneak peek free chapters inbctci.co/free-chapters).\n\nHere, I want tocollect all the arguments for the contrary view: that there are no clear better alternatives to coding interviews at Big Tech companies.\n\n• I am one of the authors ofBeyond Cracking the Coding Interview, a prep book for coding interviews. Thus, I am vested in coding interviews not going away.\n\n• I love leetcoding and specialized in DS&A for my PhD, so I haven't personally experienced thedreadthat most people feel grinding it.\n\n• I've been an interviewer at Google in the past, but I'm not currently working for Big Tech, and I don't have any inside knowledge. This is just my assessment.\n\n• This post is only about Big Tech. I don't think coding interviews are a good idea for startups.\n\n• This post contains \"Strong Opinions, Weakly Held\". I believe everything here, but I'm very receptive to pushback and opposing data.\n\nI think Big Tech companies understand that being cracked at DS&A is not really necessary to be a good SWE. I don't think coding interviews are about that at all.\n\nImagine you are a Big Tech company, like Google. You receive a massive stream of applications, and you have to trim that down to a still large number of hires. Your hiring system needs to bescalable:\n\n• you need a way to evaluate candidates that minimizes interviewer bias (notyourbias, or a specific person's bias, but all the biases of a large, heterogeneous group)\n\nSo, the first thing you do to scale--in true engineering fashion--is decoupling hiring and team matching. But that means you cannot hire for specific tech or domain experience: You don't know in what team candidates will end up, and your teams use a bunch of different languages and tech stacks (and a lot of it is internal anyway, so you definitely can't hire for that).\n\nSo, you need acompetence assessmentthat is independent of any particulars about the job, much like the role the SAT plays for college admissions. How do you do that?\n\nIf you are a Big Tech company, what you actually want is candidates who can take any complex software system (that's not part of the candidate's previous expertise) and answer hard questions about it, like what's the best way to add a feature, how to optimize it, or how it should be refactored. In other words, the competence you want to assess is general problem-solving skills, and that's what coding interviews are designed for: you are given a tough problem that you haveideallynever seen before (more on this later), and asked to showcase your thought process on how you approach it. When working as intended, I believe it gives moresignalabout your problem-solving skills and is easier to evaluate impartially than other popular interview formats, like talking about previous experience or take-home assignments. And there's an impartial way to evaluate them, by looking at the optimality of the solution.\n\nYes, there's a lot more to being a SWE than problem-solving skills--and that's why Google also does system design and behavioral interviews, but you still want to hire for this trait.\n\n## The two crucial flaws: memorization and cheating\n\nHopefully, the rationale above covered one of the most common criticisms of coding interviews: that they do not reflect the day-to-day work of an engineer. Instead, I want to focus on whatIthink are the two biggest issues with coding interviews:\n\n• Memorizing an absurd amount of leetcode problems gives you an edge.This is the classic reason why peoplehatecoding interviews with a passion. It has led to an \"arms race\" where candidates have to memorize more and more problems to improve their odds, and interviewers keep asking about more niche topics. At the extreme, coding interviews end up feeling like a lottery, and candidates find prep a soul-sucking waste of time.\n\nMemorizing an absurd amount of leetcode problems gives you an edge.This is the classic reason why peoplehatecoding interviews with a passion. It has led to an \"arms race\" where candidates have to memorize more and more problems to improve their odds, and interviewers keep asking about more niche topics. At the extreme, coding interviews end up feeling like a lottery, and candidates find prep a soul-sucking waste of time.\n\n• Cheating has become easy with AI.This is a newer issue that's becoming more prevalent due to the fact that LLMs are pretty good at leetcoding. In real time, a cheater can feed the problem statement to an LLM (without obvious tales like \"select all\"), get a solution, and even a script for what to say.\n\nCheating has become easy with AI.This is a newer issue that's becoming more prevalent due to the fact that LLMs are pretty good at leetcoding. In real time, a cheater can feed the problem statement to an LLM (without obvious tales like \"select all\"), get a solution, and even a script for what to say.\n\nFrom the company's side, Issue (1) is not much of an issue. It definitely undermines the \"problem-solving\" part of the interview if a candidate is just recalling the question, but, statistically, if they do enough rounds, it's unlikely to happen every round. Some people (not me) also argue that the memorization is even good for the companies because it rewards hard work and dedication.\n\nFor what it's worth, one thing we hoped to change about the interview prep\ndiscourse with BCtCI is that candidates should focus on improving their\nproblem-solving skills rather than memorizing. See, for instance, how weteach binary searchor how weapproach hard\nproblems. But yes,\ngrinding is still necessary.\n\nIssue (1) also means that they'll lose a big chunk of candidates who are great SWEs but won't put up with grinding leetcode or that simply don't perform well under pressure (and, from personal experience, many great developers fall in this group). This sucks from the candidate's perspective, but if you are Google, you receive an overwhelming amount of applications from qualified candidates, so you are more OK with rejecting good candidates than accepting bad ones.\n\nIssue (2), on the other hand, has the potential to completely ruin coding interviews from the company's side. I'm seeing a quick rise of stories from frustrated interviewers who interviewed or even hired cheaters who could then not do the job (ExhibitA).\n\nI expect to see some kind of systematic response to this from Big Tech, but it's not clear what as of April 2025.This articleincludes some internal comments from Google execs:\n\n[Brian] Ong [Google’s vice president of recruiting] said candidates and Google employees have said they prefer virtual job interviews because scheduling a video call is easier than finding a time to meet in available conference rooms. The virtual interview process is about two weeks faster, he added.\n\nHe said interviewers are instructed to probe candidates on their answers as a way to decipher whether they actually know what they’re talking about.\n\n“We definitely have more work to do to integrate how AI is now more prevalent in the interview process,” said Ong. He said his recruiting organization is working with Google’s software engineer steering committee to figure out how the company can refine its interviewing process.\n\n“Given we all work hybrid, I think it’s worth thinking about some fraction of the interviews being in person,” Pichai responded. “I think it’ll help both the candidates understand Google’s culture and I think it’s good for both sides.”\n\nI thought going back to in-person interviews would be ano-brainerfor a company like Google, but my reading of these comments is that they don't seem too bothered for now. ~shrug~\n\nDisclaimer: I haven't worked for a Big Tech company since before AI cheating\nwent viral, so I don't have internal insight into what people in charge of\nhiring are actually thinking.\n\nTwo related arguments that I don't subscribe to are (1) that leetcode-style interviews are no longer relevant because AI can solve them, and (2) that LLMs should be allowed during coding interviews because they are allowed on the job. The fact that AI can solve coding questions doesn't change that it still gives you the important signal that you want from humans: algorithmic thinking and general problem-solving skills. We just need humans to not cheat.\n\nI'll share my thoughts on how to improve coding interviews to address these issues. First, let's see why I think the alternatives are not better.\n\nTake-home assignments are even more subject to cheating, so that can't be the answer to cheating. Never mind LLMs, you don't even know who did the assignment. But take-home assignments have other flaws:\n\n• They create an asymmetry between company and candidate, where the company asks for a ton of work from the candidate without putting any effort in. \"Oh, we have way too many candidates we need to filter down to a shortlist? Send all of them a complex task to do over the weekend.\" I prefer a model where both company and candidate have to put in time. I'm more OK with take-home assignments as the final stage of the process.\n\n• They favor people who are unemployed and/or have a lot of free time to polish the assignment.\n\nI find this too subjective to give signal about problem-solving skills, and it's more about being a good \"salesperson\". I also think it's more subject to bias:people with a similar background as yours are probably more likely to have similar interests, and thus you may find their side-projects more interesting.\n\nThis makes sense to me in smaller companies, where you find a candidate with the perfect profile for the task at hand. It doesn't scale to Big Tech companies.\n\nIf there are other alternatives that fulfill the same purpose as coding interviews but don't suffer from the same issues, I'd love to hear about them.\n\nOne idea I liked is going through a code review during the interview, but it's not clear that (1) it offers as much signal about problem-solving skills, and (2) it is easy to evaluate impartially.\n\nRight now, FAANG interviewers focus too much on \"Did they solve the question or not?\" That's because they don't get much training on how to interview well (if at all), and it's the most straightforward way to pass on a hire/no hire recommendation to the hiring committee. This leads to many interviewers just pasting the prompt in and mostly sitting in silence. This is the ideal scenario for cheaters.\n\n• In-person interviews. These have other benefits, like allowing the candidate to get a better sense of the company culture.\n\n• Not using publicly available questions, and actively scanning for leaks.\n\n• Cheating detection software (privacy is a concern here -- would it be too crazy for a company to ship a laptop to the candidate just for the interview?).\n\n• Stop asking questions that require knowing some niche trick that a normal person wouldn't be able to figure out on the spot. Those reinforce a focus on memorization.\n\nI also think that measures designed to throw LLMs off could be effective (at least in the short term) and require minimal effort, such as:\n\n• Stating the question, or part of it, instead of writing the whole thing down\n\n• Including a 'decoy' question and telling the candidate, \"Ignore that line, it is part of our anti-cheating measures.\"\n\nPerhaps the most effective way to counter both memorization and cheating is to make coding interviews more open ended and conversational. To use a chess analogy, a cheater may make a great move, but if you ask them to explain why they did it, they may not be able to.\n\nThe interviewer can use a coding question as a launching point, but then drill down on technical topics as they come up. So, e.g., if a candidate chooses to use a heap, the interviewer could go into:\n\n• What made you think of using a heap? What properties are important for this problem?\n\n• What are the tradeoffs of using a heap vs binary search trees?\n\n• How would you go about implementing a heap that supports arbitrary priorities?\n\nIf interviewers did that, it wouldn't even be necessary to ask tricky questions. They could evenaskFibonacci.\n\nThe problem is that, the more open ended the interview is, the more difficult\nit is to evaluate candidates systematically. To start, you'd need better\ninterviewers and better interviewer training. However, it seems to me that\nthere isa fundamental tradeoff between how objective the evaluation is and\nhowgameablethe interview is by memorizing or cheating.\n\nI don't have a good solution to this--I would love to hear yours.\n\nAn underrated upside of leetcode interviews is that you only need to study one thing for all the big companies. I feel like if every company asked different things, interview prep time would decrease for any specific company but increase overall.\n\nIn fact, a likely outcome of the push for fewer leetcode-style interviews is an even worse compromise: coding interviews won't completely go away, so you'll still need to grind leetcode, but you'll also have to prep a bunch of specialized stuff for each company on top of that.\n\nCoding interviews act as a form of standardized testing, similar to the role of SAT for college admissions in the US. And, much like the SAT allows high-school students from all backgrounds to attend top colleges, coding interviews allow candidates from all backgrounds to get at the top companies. The leetcode grind is the same for everyone.\n\nIf we kill coding interviews without a good alternative, it seems inevitable that Big Tech companies will give more weight to resume and referrals. We all agree that's a bad thing.\n\nThe best question we got in ourReddit AMAfor BCtCI was whetherwe'd use coding interviews ourselves if we were in charge of hiring. You can see Gayle's, Mike's (mikemroczka.com), and my answers. We all saidnoin its current form, but yes with caveats/improvements.\n\nMy favorite answer was Mike's. He's less of a proponent of leetcode-style interviews than I am, but I think he strikes a thoughtful balance between DS&A and practical stuff:\n\nBest question so far. Yes, I would ask DS&A questions still, but not exclusively and not difficult ones. Many startups shouldn't ask them though, because most people are bad at discerning what a reasonable question is.\n\nI would do 4-5 rounds of interviews because less than that is hard to be significant, but more than that and you're wasting too much of a candidate's time (Netflix has a whopping 8 rounds!!). For a senior engineer role, I'd do something like this.\n\nRound 1: An online DS&A assessment to filter out people that can't do the simple things (easy & very simple medium questions only, not hard)\n\nRound 2: Live interview of DS&A (simple medium, not hard. essentially just making sure you didn't cheat on the previous round by asking you to explain your answers and code something new from scratch)\n\nRound 3: System design (no need for perfect answers, but I'd ask an uncommon question to ensure it was something they hadn't memorized)\n\nRound 4: Behavioral, with a focus on cross-team impact. This would just be a simple pass/fail and just a vibe check. It might also be skipped if the prior two rounds had good signal for emotional intelligence\n\nRound 5: Remote logging into a server and working on an actual bug that was fixed in our codebase before. There would be no time limit, but time on the server would be logged to weed people out who needed days to complete a simple task.\n\nThis ends up testing a little bit of theory, practical knowledge, emotional intelligence, and the generalized SWE skillset.\n\nFull disclosure. This is my answer. Not the answer of every author. Again, I'd stress that the average startup wouldn't benefit from DS&A and shouldn't be asking them\n\nWant to leave a comment? You can post under thelinkedin postor theX post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\nA step-by-step guide to understanding and implementing dynamic programming algorithms with practical examples.\n\n## Lifecycle of a CS research paper: my knight's tour paper\n\nThe backstory and thought process behind a fun paper from my PhD.\n\nA guide to implementing preorder, inorder, and postorder tree traversals iteratively.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/in-defense-of-coding-interviews?category=dsa",
      "author": "The",
      "user_id": ""
    },
    {
      "title": "Lazy vs Eager Algorithms",
      "content": "Warning: I have not tested any code snippet below. Please let me know if you find a bug.\n\nMost algorithms have multiple valid implementations. For instance, in a binay tree problem, you have multiple ways of handling NULL nodes. I'm currently writingBeyond Cracking the Coding Interview(beyondctci.com), which means that my co-authors and I need to take a stance on what version of each algorithm to use. Ideally, we want to show the simplest version of each algorithm:\n\nIn the book, we don't claim that the version we show is \"the best\" - we say to use the one that works best for you. But showing one in the book is an implicit endorsement.\n\nOne particular decision that comes up again and again with recursive algorithms is choosing between thelazyversion and theeagerversion of an algorithm.\n\n• Aneagerrecursive function expects 'valid' inputs and ensures to only call the recursive function with 'valid' inputs. We can also call it aclean(call)stackalgorithm.\n\n• Alazyrecursive algorithm allows 'invalid' inputs, so it starts by validating the input. Then, it calls the recursive function without validating the inputs passed to it. We can also call it adirty stackalgorithm.\n\nWhat 'valid' means depends on the algorithm--we'll see plenty of examples. We'll also translate the concept of eager vs lazy to iterative algorithms.\n\nAneagertree traversal eagerly validates that the children are not NULL before passing them to the recursive function. Alazytree traversal doesn't, so it needs to check if the current node is NULL before accessing it.\n\nFor instance, here is eager vs lazy preorder traversal:\n\nBoth have the same runtime and space analysis. Even the constant factors probably don't change much, so it comes down to style preference. Which one do you prefer?\n\nAneagergraph DFS eagerly checks that the neighbors are not already visited before passing them to the recursive function. Alazygraph DFS doesn't, so it needs to check if the current node is already visited.\n\nFor a graph DFS, we can also do a mix between lazy and eager: we can eagerly check if nodes are already visited, and lazily mark them as visited:\n\nAgain, they all have the same analysis. Which one do you prefer?\n\nConsider the same DFS algorithm but on a grid of 0's and 1's. The 0's are walkable cells, the 1's are obstacles, and\nwalkable cells next to each other are connected. This time, we need to check that the neighbors are not out of bounds, which we can do lazily or greedily.\n\nIn alazymemoization DP (Dynamic Programming) algorithm, we call the recursive function for a subproblem without checking first if we have already computed that subproblem. In aneageralgorithm, we only call the recursive function for subproblems that we still need to compute.\n\nFor memoization DP, I thinklazyis cleaner and more conventional.\n\nConsider a level-order traversal on a binary tree. A level-order traversal is an iterative algorithm that uses a queue data structure.\n\n• Alazyversion puts children in the queue without checking if they are NULL first. We can call it adirty queuealgorithm.\n\n• Aneagerversion checks for NULL nodes and avoids putting them in the queue. We can call it aclean queuealgorithm.\n\nThis is the first exception where one is better than the other in terms of big O analysis. ThelazyBFS allows adding already-visited nodes to the queue, while theeagerone does not. We'll first look at the two versions, and then analyze them.\n\nIt may come as a surprise that these two arenotequivalent like all the other examples.\n\nLet's sayVis the number of nodes andEis the number of edges. To keep things simple, consider that the graph is connected, meaning thatEis at leastV-1and at mostO(V²).\n\nBoth versions takeO(E)time. The difference is in the space complexity: the eager version takesO(V)space because we never have the same node twice in the queue. The lazy version takesO(E)space because we allow the same nodes multiple times in the queue.\n\n• When we visit start, we add A, B, C, D, E to the queue. Now the queue is:[A, B, C, D, E]\n\n• When we visit A, we add start, B, C, D, E to the queue. Now the queue is:[B, C, D, E, start, B, C, D, E]\n\n• When we visit B, we add start, A, C, D, E to the queue. Now the queue is:[C, D, E, start, B, C, D, E, start, A, C, D, E]\n\nBy the time we finish popping the nodes added as neighbors of the start node, we've doneVqueue pops andV²queue appends, so the queue size isO(V²).\n\nSo, why didn't this happen for other lazy algorithms we have seen?\n\n• For tree traversals, each tree node has a single parent that it can be reached from, so we don't need to worry about the same node appearing twice in the call stack or in the level-order traversal queue.\n\n• For graph DFS,every node in the call stackis marked visited, so if we callvisit()on a node that is already in the call stack, we'll immediately return as we'll see it is marked as visited.\n\n## Eager Dijkstra is better than Lazy Dijkstra, but harder to implement\n\nI wrote extensively about different Dijktsra implementations inthis Dijkstra blog post.\n\nDijkstra is similar to BFS, with the main difference that it uses a priority queue (PQ) instead of a queue to visit the nodes that are closer first (in terms of shortest paths).\n\nIn BFS, when a node is added to the queue, its distance from the starting node is already established and there is never a reason to add it again to the queue. In Dijkstra, when a node is added to the PQ, we might later find a shorter path while it is still in the PQ. When that happens, we can do two things:\n\n• Lazy Dijkstra: just add the node again with the new, improved distance. It will get popped before the previous occurrence because it has higher priority in the PQ. When a node with a \"stale\" distance gets popped off from the queue, we just ignore it.\n\n• Eager Dijkstra(called textbook Dijkstra in the other blog post): instead of adding the node again, find the existing occurrence of it in the PQ, and update it with the new found distance. This guarantees that the same node never appears twice in the PQ.\n\nBoth versions takeO(E*log V)time, but eager is more space efficient, analogously to eager BFS:O(V)for eager Dijkstra vsO(E)for lazy Dijkstra.\n\nUnfortunately, eager Dijkstra is not so easy to implement in Python because we are missing thedecrease_key()operation in a heap (and Python does have a self-balancing BST data structure, which can also be used for eager Dijkstra). You can see a BST-based C++ implementation in my other blog post.\n\nThedijkstra_lazy()algorithm above is more or less standard and it has been known as \"lazy Dijkstra\" for a while. However, it is possible to make an even lazier version which has the same runtime and space analysis (but likely bigger constant factors). The idea is that instead of only adding to the PQ the neighbors for whom we find an improved distance, we can simply add all of them, and discard duplicates once we extract them from the PQ:\n\nWe could keep looking at lazy vs eager algorithms, but I'll stop here. In aggregate, these are the pros and cons that I see:\n\n• Lazy algorithms require less code.This is because you only need to validate the parameters of the recursive function once at the beginning, instead of validating what you pass to each recursive call. This is specially true in binary tree problems, where you usually have two recursive calls. It doesn't apply as much for graphs.\n\n• Lazy algorithms require less indentation.For instance, in graph problems, we don't need to do checks inside the for loop over the neighbors.\n\n• Lazy algorithms do not require special handling for the first recursive call.You don't need to worry about things like checking if the root is NULL or marking the start node as visited.\n\n• Lazy recursive functions have simpler preconditions.You can just pass anything to them, and they work.\n\n• For a graph BFS, eager has a better space complexity.This is a case where eager is objectively better. (Eager Dijkstra is also better but it is not expected to be implemented in interviews. Your interviewer is probably expecting lazy Dijkstra.)\n\n• Eager algorithms do fewer recursive calls or iterations.In a binary tree, the number of NULL nodes is always one more than the number of internal nodes. This means that a lazy traversal does twice as many recursive calls/iterations as the eager counterpart. This could make a big difference if you want to debug the code manually. For instance, in this picture, you can see that adding NULLs to the queue makes visualizing the steps more painful:\n\n• Eager algorithm can 'feel safer'.A friend commented that, with a lazy algorithm, they feel like they are missing an edge case.\n\nHere are my personal preferences for coding interviews (not those of the other authors of 'Beyond Cracking the Coding Interview'):\n\n• For memoization DP, use lazy. It is much cleaner to code.\n\n• For Dijkstra, use lazy Dijkstra (not super lazy Dijkstra). It is what is realistic to do in an interview and probably what the interviewer expects.\n\n• For binary tree traversals (iterative or recursive), use lazy. It is a bit cleaner.\n\n• For graph DFS, use eager. It is a bit more standard, and aligned with a graph BFS.\n\nIn the book, we'll definitely mention that some algorithms can be implemented in a lazy or eager way (in way less detail than here), and that you should choose the one that feels easier to you. But, we still need to pick one to show in the problem solutions. One idea is trying to be consistent throughout (e.g., doing all tree and graph traversals in an eager way). If you have an opinion on which one is better, please reach out! I'd love to hear it.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\nA linear-time algorithm for a graph problem that comes up in the Wall Game.\n\nA guide to implementing preorder, inorder, and postorder tree traversals iteratively.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/lazy-vs-eager?category=dsa",
      "author": "Introduction",
      "user_id": ""
    },
    {
      "title": "Breaking Down Dynamic Programming",
      "content": "Note: the approach in this guide later became the foundation for the dynamic programming chapter inBeyond Cracking the Coding Interview.\n\nWhen I was a TA for \"Algorithm Design and Analysis\", the students struggled with dynamic programming. To simplify/demystify it, I tried to break it down into a logical sequence of steps, each of which should not feel too intimidating on its own. This is explained in detail here. To complement the explanations, there are links to problems onleetcode.com, in case the reader wants to practice. The code snippets are in Python, but Leetcode accepts most popular languages.\n\nIn short, dynamic programming (DP) is a technique for problems that seem hard to solve as a whole, but become easy if we know the solution to smaller subproblems. More technically, we can use it in problems where the (value of the) solution can be expressed as an equation which is a function of the input, and is expressed in terms of itself with smaller inputs. This is called arecurrence equation. The classic example is the Fibonacci recurrence:Fib(n) = Fib(n-1) + Fib(n-2).\n\nA recurrence equation can be translated into code:\n\nHowever, the above function has an exponential runtime. A recursive function becomes exponential when it is possible to reach the same subcall through different execution paths. In the Fibonacci case, we have the following nested calls:Fib(n) -> Fib(n-1) -> Fib(n-2), andFib(n) -> Fib(n-2). SinceFib(n-2)is called twice all the work from this call is duplicated, which in turn means that subcalls made fromFib(n-2)will start to duplicate and grow exponentially.\n\nDynamic programming is simply a workaround to this duplication issue. Instead of recomputing the solutions of the subproblems, we store them and then we recall them as needed. This guarantees that each subproblem is computed only once.\n\nWe start with the code which is a literal translation of the recurrence equation, but then we add a dictionary / hash table to store results.\n\n• declaring our dictionary for storing results,memooutside the recursive function (memo comes \"memorization\" or \"memoization\", a name used in the literature).\n\n• before computing the result, we check if the solution has already been computed. This check can be done before or after the base case.\n\n• before returning, we save the result in thememotable.\n\nUsing a memoization table in this way solves the inefficiency (we will go deeper into the analysis part later).\n\nInstead of starting from the largest input and recursively reaching smaller subproblems, we can directly compute the subproblems from smallest to largest. This way, we already have the solutions to the subproblems when we need them. For this approach, we change the dictionary for an array/vector, and we change recursive calls for a for loop.\n\nMost problems can be solved with both recursive and iterative DP. Here are some considerations for how to choose:\n\n• Recursive DP matches the recurrence equation more directly, so it can be easier to implement.\n\n• Both have the same runtime complexity, but the recursive version will generally have larger constant factors due to all the recursive function calling and due to using a hash table instead of an array.\n\n• Iterative DP often allows for an optimization to reduce the space complexity (discussed later).\n\n• Translate the recurrence equation into recursive code.\n\nWe already saw steps 1–4 with the Fibonacci example. Now, we will walk through all the steps in more detail using a more complicated example, thelongest common subsequence problem:\n\nGiven two stringss1ands2, find the length of the longest string which is a subsequence of boths1ands2. A stringtis asubsequenceof a stringsif every char intappearsin orderins, but arenot necessarily contiguous. For example,abcis a subsequence ofaxbyz, butbais not (do not confuse subsequence with substring or subset).\n\n• https://leetcode.com/problems/longest-common-subsequence/\n\nStep 1: choose our subproblems. This varies from problem to problem, but when the input to the problem is a string, a natural way to obtain smaller problems is to look at shorter strings. Here we can use as a subproblem aprefixofs1and a prefix ofs2.\n\nSome notation: letnbe the length ofs1andmthe length ofs2. LetLCS(i,j)be the solution for the LCS problem for the prefix ofs1of lengthn(s1[0..i-1]) and the prefix ofs2of lengthm(s2[0..j-1]). Then, our goal is to findLCS(n, m).\n\nStep 2: find the recurrence equation. Now we need to come up with an expression forLCS(i,j)as a function ofLCSwith smaller indices (as well as a base case). This is the hardest step of DP, and often it is here that we realize that we chose bad subproblems in Step 1. If that happens, hopefully we will discover some hint for what our subproblems should be.\n\nIn order to derive the recurrence equation for LCS, we need the following observation: if the two strings end with the same characterc, then, to maximize the length of the subsequence, it is \"safe\" to addcto the subsequence. In contrast, if both strings end with different characters, thenat leastone of them cannot appear in the subsequence. The complication is that we do not know which one. Thus, instead of guessing, we can simply consider both options.\n\nThis observation yields the recurrence equation (excluding base case):\n\nThis step is not intuitive at first, and requires practice. After having done a few problems, one starts to recognize the typical patterns in DP. For instance, usingmaxamong a set of options of which we do not know which one is the best is easily the most common pattern in DP.\n\nStep 3. Translate the recurrence equation into recursive code. This step is a very simple programming task. Pay attention to the base case.\n\nIf we draw the few first steps of the call graph, we will see that the same subproblem is reached twice. Thus, call graph blows up, leading to an exponential runtime.\n\nStep 4. Add memo table. This step should be automatic: one does not even need to understand the previous code in order to add the memo table.\n\nThe base case corresponds to when one of the strings is empty. The LCS of an empty string with another string is clearly an empty string.\n\nIncidentally, if we flip the check on the memo table, the code becomes a bit more streamlined (fewer lines + merging the two returns). I prefer this form (it does the same):\n\nWe have eliminated the exponential blowup. In general, DP algorithms can be analyzed as follows: # of distinct subproblems times time per subproblem excluding recursive calls. For LCS, we getO(nm)*O(1)=O(nm).\n\nWe used DP to compute the length of the LCS. What if we want to find the LCS itself?\nA naive way to do it would be to store the entire result of each subproblem in the memoization table instead of just its length. While this works, it is clear that it will require a lot of memory to storeO(nm)strings of lengthO(min(n,m))each. We can do better.\n\nStep 5, \"Reconstruct the solution\", is how to reuse the table that we constructed in Step 4 to find the actual solution instead of just its length. I said that this step is optional because sometimes we just need thevalueof the solution, so there is no reconstruction needed.\n\nThe good news is that we do not need to modify the code that we already wrote in Step 4. The reconstruction is a separate step that comes after. In addition, the reconstruction step is very similar (follows the same set of cases) as the step of building the memo table. In short, we use the memo table as an \"oracle\" to guide us in our choices. Based on the values in the memo table, we know which option is better, so we know how to reconstruct the solution.\n\nIn the code above, first we runLCS(n,m)to fill the memo table. Then, we use it in the reconstruction. The conditionmemo[(i-1,j)] >= memo[(i,j-1)]tells us that we can obtain a longer or equal LCS by discarding a char froms1instead of froms2.\n\nNote that there is a single recursive call in the reconstruction function, so the complexity is justO(n+m).\n\nThe new/different steps are highlighted. Step 3. is to design the layout of the table/matrix where we are going to store the subproblem solutions. There is no coding in this step. By \"design\", I mean making the following choices:\n\n• what are the dimensions of the table, and what does each index mean. Generally speaking, the table should have one dimension for each parameter of the recurrence equation. In the case of LCS, it will be a 2-dimensional table.\n\n• what is the ``dependence relationship'' between cells (which cells do you need in order to compute each cell).\n\n• which cells do not need to be filled (in the case of LCS, we need them all).\n\nHere is how I would lay out the table for LCS (you can find a different layout in the problems below):\n\nNext (Step 4), we fill the memo table with a nested for loop. If the layout is good, this should be easy. Before the main loop, we fill the base case entries. Then, we must make sure to iterate through the table in an order that respects the dependencies between cells. In the case of LCS, we can iterate both by rows or by columns.\n\nIn the code above, the base case entries are filled implicitly when we initialize the table with zeros everywhere.\n\nIf we need to reconstruct the solution, we can do it in the same way as for the recursive DP. The only difference is that memo is a matrix instead of dictionary.\n\nClearly, the space complexity of iterative DP is the size of the DP table. Often, we can do better. The idea is to only store the already-computed table entries that we will use to compute future entries. For instance, in the case of Fibonacci, we do not need to create an entire array -- keeping the last two numbers suffice. In the case of a 2-dimensional DP table, if we are filling the DP table by rows and each cell only depends on the previous row, we only need to keep the last row (and similarly if we iterated by columns). Here is the final version for LCS where we improve the space complexity fromO(nm)toO(n+m):\n\nNote: this optimization is incompatible with reconstructing the solution, because that uses the entire table as an \"oracle\".\n\n• If the input is a string or a list, the subproblems are usually prefixes or substrings/sublists, which can be specified as a pair of indices.\n\n• If the input is a number, the subproblems are usually smaller numbers.\n\n• Generally speaking, the number of subproblems will be linear or quadratic on the input size.\n\n• Often, we usemaxorminto choose between options, or sum to aggregate subsolutions.\n\n• The number of subproblems is most often constant, but sometimes it is linear on the subproblem size. In the latter case, we use an inner loop to aggregate/choose the best solution.\n\n• Sometimes, the recurrence equation is not exactly for the original problem, but for a related but more constrained problem. See an example below, \"Longest Increasing Subsequence\".\n\nHere are some practice problems showcasing the patterns mentioned above. Follow the Leetcode links for the statements and example inputs. I jump directly to the solutions. I'd recommend trying to solve the problems before checking them.\n\n• https://leetcode.com/problems/palindromic-substrings/\n\nHere, the goal is to count the number of substrings of a stringswhich are palindromic. There is a trivialO(n³)time solution without DP:\n\nWe can improve this toO(n²)with DP. The subproblems are all the substrings ofs. LetPal(i, j)be true iffs[i..j]is a palindrome. We have the following recurrence equation (excluding base cases):\n\nBased on this recurrence equation, we can design the following DP table:\n\nThis type of \"diagonal\" DP tables are very common when the subproblems are substrings/sublists. In this case, the base cases are substrings of length 1 or 2. The goal isPal(0,n-1).\n\nGiven the dependency, the table can be filled by rows (starting from the last row), by columns (starting each column from the bottom), or by diagonals (i.e., from shortest to longest substrings). In the code below, I illustrate how to fill the table by diagonals.\n\nHere, a subproblem can be a grid with reduced width and height. LetT[i][j]be the cheapest cost to reach cell(i,j). The goal is to findT[n-1][m-1], wherenandmare the dimensions of the grid. The base case is when eitheriorjare zero, in which case we do not have any choices for how to get there. In the general case, we have the recurrence equationT[i][j] = grid[i][j] + min(T[i-1][j], T[i][j-1]): to get to(i,j), we first need to get to either(i-1,j)or to(i,j-1). We useminto choose the best of the two. We convert this into an iterative solution:\n\nThis is similar to the previous problem, but we need to accumulate the solutions to the subproblems, instead of choosing between them. Problems aboutcountingsolutions can often be solved with DP.\n\n• https://leetcode.com/problems/longest-increasing-subsequence/\n\nThis problem will illustrate a new trick: if you cannot find a recurrence equation for the original problem, try to find one for a more restricted version of the problem which nevertheless you enough information to compute the original problem.\n\nHere, the input is a listLof numbers, and we need to find the length of the longest increasing subsequence (a subsequence does not need to be contiguous). Again, the subproblems correspond to prefixes of the list.\nLetLIS(i)be the solution for the prefix of lengthi(L[0..i]). The goal is to findLIS(n-1), wherenis the length ofL.\nHowever, it is not easy to give a recurrence equation forLIS(i)as a function of smaller prefixes. In particular,the following is wrong(I will let the reader think why):\n\nThus, we actually give a recurrence equation for a slightly modified type of subproblems: letLIS2(i)be the length of the LISending at index i. This constraint makes it easier to give a recurrence equation:\n\nIn short, since we know that the LIS ends atL[i], we consider all candidate predecessors, which are the numbers smaller than it, and get the best one by usingmax. Crucially, this recurrence works forLIS2(i)but not forLIS(i).\nHere is a full solution:\n\nAt the end, we do not simply returnT[n-1]becauseTis the table forLCS2, notLCS. We returnmax(T)because the LCS must endsomewhere, soLCS(n-1) = LCS2(j)for somej < n.\n\nNote that the runtime isO(n²)even though the table has linear size. This is because we take linear time per subproblem.\n\n• https://leetcode.com/problems/number-of-longest-increasing-subsequence/\n\nA harder version of the previous problem. A similar approach works. First solve the LIS problem as before, and then do a second pass to count the solutions.\n\n• https://leetcode.com/problems/shortest-common-supersequence/\n\nThis problem is similar to LCS, and it requires reconstruction.\n\nI should mention that noteveryproblem that can be solved with DP fits into the mold discussed above. Despite that, it should be a useful starting framework. Here are many more practice problems:\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/breaking-down-dynamic-programming?category=dsa",
      "author": "Introduction",
      "user_id": ""
    },
    {
      "title": "Snacks: It's not too late for Euro Summer flights",
      "content": "Really, there’s nothing south of $1000. Fortunately, you read Shreycation and we’ve identified the best opportunities for you to use your points. Here’s how you can get your bank to pick up the tab for your sunny spree on the Spanish coast.\n\nYou may remember my love for the Air France and KLM’s joint program, Flying Blue.Every month, Flying Blue chooses a set of cities to enjoy a promotional discount of 25% off — if you fly from those cities to basically anywhere in Europe, you’ll be able to enjoy the promo rate, if they have availability.\n\nEconomy flights between the USA and Europe cost 25k Flying Blue points one-way usually, so with the 25% discount, you’re looking at 18.75k points instead. And as a cherry on top, if you’ve got a Chase card, Chase Ultimate Rewards currently has a 25% transfer bonus to Flying Blue.That means you just need to transfer 15k Chase points to Flying Blue— that’ll get boosted to 18.75k, and you’re looking at a free flight to Europe!\n\nThe current promo cities are also quite convenient for my coastal readers here:San Francisco, Atlanta, Washington, Miami, Boston, and even my hometown ofPhoenixare all getting repped this time! Even some of my readers over in Asia are getting some love, with discount fares from Hong Kong and Singapore. I’ve rarely seen such a convenient set of origin cities for Flying Blue promo award, so take advantage now. (Full list of promo cities here.)\n\nGenerally, I saw a decent amount of availability left for July and August flights. Here’s a sample one I found for SF to Madrid on July 5:\n\nFlying Blue does charge you for fuel surcharges, so you’ll still owe some money, but it’s still a great deal. Let’s do some quick maths: this flight costs $610 on Google Flights, so after the $120 in surcharges, we’re using 18750 Flying Blue miles to pay for the remaining $490. If you’re transferring from Chase, you’re really only burning 15000 Chase points, so that’s$490/15000 = 3.2¢/point, more than double what your points are worth in the Chase portal!\n\n• The promotion is almost over — May 31 is the last day to book.However, you can book for any dates up till Oct 31, so there’s no need to fly soon. New promo rates will go live in June, but the origin cities might not be this convenient.\n\nThe promotion is almost over — May 31 is the last day to book.However, you can book for any dates up till Oct 31, so there’s no need to fly soon. New promo rates will go live in June, but the origin cities might not be this convenient.\n\n• If you need to change or cancel, it costs 70 EUR. Even if you’re not sure about your trip, given how good the savings are, it might still be worth getting a ticket.\n\nIf you need to change or cancel, it costs 70 EUR. Even if you’re not sure about your trip, given how good the savings are, it might still be worth getting a ticket.\n\n• Even if you don’t live in one of the origin cities, you can just buy a cheap flight to one of those cities, and then fly from there.\n\nEven if you don’t live in one of the origin cities, you can just buy a cheap flight to one of those cities, and then fly from there.\n\n• Not all dates will have the promo rates still available. We’re in the last 2 days of this promotion, so many June dates are gone by now, but just use their point calendar at the top of the search screen to locate the 18750 mile fares. It bugs out sometimes when you search roundtrips, so I’d suggest searching one-ways instead.\n\nNot all dates will have the promo rates still available. We’re in the last 2 days of this promotion, so many June dates are gone by now, but just use their point calendar at the top of the search screen to locate the 18750 mile fares. It bugs out sometimes when you search roundtrips, so I’d suggest searching one-ways instead.\n\nAnother one of my favorite hacks for getting to Europe for cheap is using Virgin Atlantic. For many summer dates, you can fly from NYC to London for just 12k Virgin Atlantic miles. And even better, Chase is also running a 25% transfer bonus for Virgin Atlantic too — you can be in London for just 9600 Chase points.\n\nAnd if you want to mourn the end of summer with some off-season travel to London, it’s just 6000 Virgin miles for that same flight in September (or just 4800 Chase points)! This is so insanely cheap that I might just buy one of these on impulse.\n\n• Here I showed one-ways to London, but the flights from London back to the US can sometimes be surprisingly expensive if you buy them as one-ways rather than as part of a roundtrip ticket. If you fly back from somewhere else in Europe, this isn’t much of a problem.\n\nHere I showed one-ways to London, but the flights from London back to the US can sometimes be surprisingly expensive if you buy them as one-ways rather than as part of a roundtrip ticket. If you fly back from somewhere else in Europe, this isn’t much of a problem.\n\nEven though we’re officially in summer now, doesn’t mean you can’t get some cheap tickets to Europe! Flying Blue and Virgin Atlantic consistently offer some great fares to Europe, and they aren’t slouching one bit for summertime. Chase holders get some extra sprinkles on top with that transfer bonus.\n\nAnd if you’re looking for hotels for Europe, it’s still not too late for that either. AtAnecdote, we’ve been handling dozens of summer trips — we can help you find a great hotel and add some awesome perks (free breakfast, room upgrades) to boot.\n\nThe world of points has changed a lot in the last year, so let me know what you want me to talk about next!",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/snacks-its-not-too-late-for-euro",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "How to actually transfer your points",
      "content": "We’ve been talking a lot about how you can use your credit card points to get outsized value on your points. Instead of just getting 1¢/point,you can squeeze out 3x, 5x, or even 10x the valuejust by transferring your points into airline mileage programs to book “award travel.” This also lets you book free flights on airlines where you might not otherwise have any miles; just transfer them over from a card! There are entire forums dedicated to going down the rabbit hole on strategies for optimally deploying your points.\n\nBut if it’s your first rodeo, you’re probably hung up on a more fundamental question:how do I actually move the points from one program to another?The UIs for many of these credit card and airlines program are historically a bit lacking, so the process can be unintuitive.\n\nOne of my dear Shreycation readers was recently fed up with the29 degree weather in NYCand needed to escape somewhere warm. He wanted to book a flight to Hawaii, so I helped him through the process. Now I’ll be walking you through that same process in this issue.\n\nBefore we can book our travel using points, we must pinpoint available award seats that can be redeemed with an airline's mileage program. It’s essential to ensure this award space existsBEFOREwe transfer points from your credit card, as once points are transferred, there's no going back.Point transfers are one-way and irreversible.Finding ideal award space is the subject of Shreycation issues past, present, and future, but for the purpose of this example, we’ll work with one of my favorite award redemption paths.\n\nI’ve previously talked about how you canbook dirt cheap domestic flights on United Airlinesby redeeming miles in the Turkish Airlines Miles & Smiles program. (Turkish and United are partners, meaning I can redeem Turkish points on a United ticket.) Traveling to Hawaii counts as domestic travel in Turkish’s eyes, so we can take advantage of a sweet spot here and book a EWR (Newark) to HNL (Honolulu) flight for a very cheap 10k Turkish miles. (Booking this flight directly with United would cost 30k+ United miles.)\n\nNow I don’t have any Turkish miles since I rarely fly on Turkish in the first place, but there’s where our credit card points come in.We can mint miles in Turkish by transferring from points from a card.\n\nNot all airlines are partnered with all credit card partners, so you’ll first need to make sure you use a credit card that can transfer to your desired airline mileage program. (This is also why I recommend having cards in multiple programs, even if it’s the entry level cards!)\n\nGoing back to our EWR-HNL example, we’re booking through Turkish Airlines, so according to the diagram above, I’d need to use Bilt, Capital One, or Citi to transfer points. If I go the “Transfer” tab in the Bilt app, I can scroll down and select Turkish:\n\nIf you haven’t made an account with the target mileage program yet, you’ll need to do that first and enter your account number when transferring.\n\nMost of the time, this is dead simple.The vast majority of points transfer tend to be at a 1:1 ratio, so if you need 10k airline miles, just transfer 10k credit card points.That means I just need to transfer 10k Bilt points into Turkish Airlines to book my EWR-HNL flight.\n\nLearning how to finally use that small fortune of points you’ve been sitting on? Send this article to a friend who desperately needs some help! (We have areferral programhere at Shreycation that’ll score you some dope content and perks; use the button below to make sure your referral counts.)\n\nMany point transfers are nearly instant.Once you’ve triggered the request from the credit card portal, you can usually make a quick coffee and by the time you’re back, the miles will be credited to your airline mileage account.\n\nFor example, my points took 10 minutes to transfer from Bilt to Turkish, and I got an email confirmation from Bilt telling me the deed was done.\n\nSometimes, the transfers can take longer though. For example, transferring Bilt points to American AAdvantage or Amex points to Singapore KrisFlyer can take up to 24 hours. Good award tickets tend to go away quickly, so if you’re dealing with a partner that has a transfer delay, you can often call up the airline to “hold” the award for you. This lets you rest easy knowing someone else won’t swoop your spot just because your points were in transit.\n\nNow that you’ve transferred the points, you can return back to the portal for the airline you’re booking through and complete your booking!\n\nOften when booking award travel, you might notice you’ll still need to enter your credit card and pay some cash. This is because most award travel has a few taxes and surcharges, on top of the miles you’re redeeming. You can’t pay for these extra fees in miles unfortunately.\n\nSince these fuel surcharges can be hefty, it’s important to consider those when valuing your redemption — spending 27k miles to get a $400 flight for free is less compelling if you’re spending $170 in surcharges.\n\nNow that you have your flight booked, you might be wondering how to manage your flight (e.g. check in, change your seat, upgrade, etc.). This differs based on whether you booked your award directly with the airline or if you booked via a partner.\n\nIn our example though, we’re using Turkish to book a ticket on a United flight, so things get a little more complicated since there’s 2 airlines involved: the one we booked from (Turkish), and the one we’re actually flying (United). Upon booking, Turkish will send me an email with a confirmation number.\n\nNow I can enter that confirmation on the United website and it should link the reservation to my MileagePlus account (sometimes you may need to contact them if this doesn’t work automatically though). United may assign me a different confirmation number than the one Turkish gave me, but rest assured, it’s the same flight.\n\nSince I have United status, linking my trip to my United account lets me enjoy my United perks on the flight(e.g. picking a Economy Plus seat for free). To be clear, I won’t earn any United miles or status points on this flight, but I will get to enjoy my existing perks.\n\nWhat if I need to make changes or need customer support?If you need help with the booking (e.g. cancel/change flight), contact the airlines you booked through(Turkish in this case). If you need help with the flight (delays, missed flight, seat change), contact the airline you’re actually flying on(United in this case).\n\nAs I mentioned earlier, this article is inspired by an actual Hawaii trip I was helping a Shreycation reader with.The golden rule of free travel is to earn lots of points per dollar and redeem them for lots of cents per point.Using tips and tricks we’ve covered in previous issues, he executed this to a T. He earned 10k miles from a single fancy dinner with friends because he took advantage of awhopping 16x bonus on Bilt Dining on the 1st of the month. He then identified a Turkish airlines redemption for his Hawaii trip for just 10k miles.Just by strategically earning and deploying points, his one dinner from 2 months ago paid for his Hawaii flight today.(That flight would have cost $775 by the way. That’s 7.75¢/point — insane value, especially for economy.)\n\nThose of you who have been following along with previous Shreycation issues might have noticed that the Turkish redemption here is 2.5k miles more than expected. After all,just 1 month ago I wrote that all domestic redemptions were 7.5k miles. Unfortunately, this week Turkish has finallysuccumbed to inflation the same way United and many others have, and they made various routes more expensive (sometimes as much as 90% higher). The silver lining is domestic trip awards only increased 33% from 7.5k to 10k, so it’s still one of the best deals out there for domestic travel.",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/how-to-actually-transfer-your-points",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "Snacks: fly cross-country for just 5k points?!",
      "content": "This snack covers a Bilt-specific deal, but if you don’t have one, scroll down because there’s still a bonus snack for you to nibble on!\n\nBilt has a habit of pulling out somekiller transfer bonuses on the 1st of the month, and February is no exception.On February 1, Bilt is offering a whopping 75-150% transfer bonus to Air Canada’s Aeroplan frequent flyer program.Your exact bonus depends on your status level with Bilt, which you can check in the app.\n\nNow here’s how you turn that into the cheapest cross-country flight I’ve ever seen.We can go on the Air Canada Aeroplan site and look up EWR <> SFO flights on March 5 and we’ll see these options:\n\nFlying cross-country takes 12.5k Aeroplan miles on a typical day, which usually means transferring 12.5k Bilt points. But on Feb 1 we’re armed with a huge transfer bonus from Bilt,which meansit could costas low as 12.5/2.5 = 5k Bilt pointsif you’re Bilt Platinum. But even if you’re just Bilt Blue, it’s still just 7.2k points — strictly better than transferring 7.5k points to Turkish!Also, the cash value of regular economy on these flights is $165.That values your Bilt points as much as 3.3¢/point.That’s pretty darn good, especially for economy!\n\nThis deal is ONLY available on Feb 1,so make sure not to miss out! Aeroplan is quickly becoming one of the most compelling Star Alliance programs, and I’m not sure when we’ll be lucky enough to see an Aeroplan bonus this crazy again.\n\nBut Shrey, I can’t really commit to a flight today.That’s fine! All you need to do on Feb 1 is transfer some miles. You can book later.\n\nDo Aeroplan miles expire?That is a great question. Aeroplan miles do expire 18 months after you receive them, but only if you have zero activity on your Aeroplan account. Basically anything you do with Aeroplan resets the clock,including transferring more points. So if you’re worried about forgetting,you can add yourself to this calendar invitefor July 2025, which will remind you to transfer the minimal amount of points to Aeroplan to delay expiration.\n\nIs NYC <> SFO the only good route to book?Nope! You can use this transfer bonus to book any of the awesome routes in the bonus snack below.\n\nIf this article made you curious about the Bilt card, you canlearn more in my review here. If you do end up getting it, I would appreciate you using my referral link. It gets me some extra points which I can use to power more issues of Shreycation!\n\nYou know how your Chipotle bowl costs 20% more because of inflation? Turns out points are affected by inflation too, and in summer 2023, Uniteddevaluedtheir points program. Routes that may have cost just 35k United miles now cost upwards of 55k. This opens the field for other programs to offer some great deals.\n\nUnited MileagePlus used to be one of the most cost-effective ways to book many Star Alliance flights on points, but now Air Canada Aeroplan is eyeing that crown.Let’s analyze some of the most popular travel routes:\n\nAeroplan outperforms in the vast majority of routes except for West Coast <> Europe.Especially great savings come from the short-haul North American routes, North America <> West/South Asia routes, and North America <> South America routes.\n\nEagle-eyed readers will notice that Air Canada levies higher cash fees on their award flights. But don’t worry, the math is mathing. Let’s take North America <> East Asia for example: 50k miles + 77 CAD on Aeroplan vs. 55k miles + 6 USD on United. 77 CAD is about 56 USD, meaning there’s a difference of +50 USD and -5k miles between the two. 5k miles is worth just 50 USDonly if you’re a points novice and value each mile at 1¢/point.But the whole point of Shreycation is to help youget way more value from your points than the default 1¢/point, so just by subscribing, you’re making those 5k miles worth way more than 50 USD! The math indeed maths.\n\nThanks for reading! Wielding the point-hacking force is a lot more fun with friends. Plus, if you refer 3 friends, I’ll send you my exclusive, comprehensive guide on stopover programs so you can hack multi-city trips. (And if you don’t know what stopovers are,boy are you missing out.)",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/snacks-air-canada-bonus",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "How to actually transfer your points",
      "content": "You've got points and you know you can transfer them for great value...but how do you actually do that? A button by button tutorial on putting your points to work.",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/how-to-actually-transfer-your-points/comments",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "Why you need a Bilt card in your wallet",
      "content": "One of the biggest questions I’ve gotten this past year is what in the **** is a Bilt card? It’s a justified question: their ads are everywhere from airports to subways, and they’ve quickly become one of the hottest credit cards on the market.\n\nIn my opinion they very much deserve the hype. I was a skeptic when I first heard of the card, but their team continues to deliver tremendous value. Here’s a few reasons why Bilt has quickly reached the top of my card stack.\n\nThe marquee benefit of Bilt is the ability to earn 1x points on rentwithout paying the credit card transaction fees. Technically, you can earn 1x points on rent on many other cards too (rent would just fall in the “other” purchases category) but you’d have to pay a ~3% transaction fee, which wouldn’t be worth it in most cases. Bilt lets you bypass those fees and feasibly earn points on your rent. If you’re living in a typical US metro area, you’ll easily earn tens of thousands of free points per year this way! Given this is the only card product on the market that does this, it’s natural to have some questions:\n\n• “So wait are they just fronting the transaction fee?”:Nope, Bilt spins up a special bank account that has your rent preloaded, and you use that to pay for your rent instead of your personal bank account. Your online rent payment portal will omit the standard credit card fee since you’re technically paying via bank transfer, and Bilt will charge you for the debited amount.\n\n“So wait are they just fronting the transaction fee?”:Nope, Bilt spins up a special bank account that has your rent preloaded, and you use that to pay for your rent instead of your personal bank account. Your online rent payment portal will omit the standard credit card fee since you’re technically paying via bank transfer, and Bilt will charge you for the debited amount.\n\n• “What if I don’t have an online rent portal?”:Bilt can send a check, PayPal, or Venmo to your landlord. This requires a bit of one-time setup, but you’ll earn points all the same. They don’t support Zelle yet unfortunately.\n\n“What if I don’t have an online rent portal?”:Bilt can send a check, PayPal, or Venmo to your landlord. This requires a bit of one-time setup, but you’ll earn points all the same. They don’t support Zelle yet unfortunately.\n\n• “Any catch?”:You need to use your Bilt card 5x a month to earn points on rent, but that’s about it! As you’ll see below, you’ll want to use it way more than that anyway.\n\n“Any catch?”:You need to use your Bilt card 5x a month to earn points on rent, but that’s about it! As you’ll see below, you’ll want to use it way more than that anyway.\n\nCool, so you can earn points on rent, but that’s only worth something if the points are useful. As we discussed inIssue 1, points are only as good as their transfer partners, and honestly, I’ve been shocked by how good the list is for Bilt:\n\n• Bilt is theONLYcard program that transfers toAmerican. Oneworld loyalists rejoice! Also, American has been putting up some impressively cheap award tickets for Asia travel lately, but more on that in a future issue.\n\nBilt is theONLYcard program that transfers toAmerican. Oneworld loyalists rejoice! Also, American has been putting up some impressively cheap award tickets for Asia travel lately, but more on that in a future issue.\n\n• Bilt also coversUnited, which makes them the only card program that partners with 2 major US airlines. If you’re also sitting on an Amex, note that this gives you direct point transfers to the full US trifecta: United, American, and Delta.\n\nBilt also coversUnited, which makes them the only card program that partners with 2 major US airlines. If you’re also sitting on an Amex, note that this gives you direct point transfers to the full US trifecta: United, American, and Delta.\n\n• I’ve written aboutAir France/KLMbefore, and it’s a fantastic program for dirt cheap Europe trips.Air Canada,British Airways,Virgin Atlanticare also fantastic for a whole variety of partner awards, and I’ll certainly write about them soon. Most major card programs are partnered with these four airlines though, so this isn’t a unique benefit.\n\nI’ve written aboutAir France/KLMbefore, and it’s a fantastic program for dirt cheap Europe trips.Air Canada,British Airways,Virgin Atlanticare also fantastic for a whole variety of partner awards, and I’ll certainly write about them soon. Most major card programs are partnered with these four airlines though, so this isn’t a unique benefit.\n\n• Turkish AirlinesandAviancaare stellar options for rare but super high value redemptions within Star Alliance. If you’re curious, you can learn howI saved 70k-90k points using these programsfor an EWR-LHR trip, andhow I used Turkishto fly cross country for a mere 7.5k miles. Turkish isn’t partnered with Amex or Chase, and Avianca isn’t partnered with Chase, so if you’re holding these cards, Bilt helps round out your transfer partner portfolio.\n\nTurkish AirlinesandAviancaare stellar options for rare but super high value redemptions within Star Alliance. If you’re curious, you can learn howI saved 70k-90k points using these programsfor an EWR-LHR trip, andhow I used Turkishto fly cross country for a mere 7.5k miles. Turkish isn’t partnered with Amex or Chase, and Avianca isn’t partnered with Chase, so if you’re holding these cards, Bilt helps round out your transfer partner portfolio.\n\nHonestly, their BizDev team must be doing the most. I’ve personally been very invested in the Chase ecosystem, yet I’ve found myself spending more on Bilt lately because Bilt has access to killer partners I just don’t have on Chase.\n\nPaying your landlord isn’t typically something to celebrate, but Bilt makes the first of the month a little sweeter with their “Rent Day” bonuses. Every Rent Day, Bilt provides some wildly good deal or transfer bonus or status trial that’s usually hard or even impossible to find otherwise. Here’s some examples from the past:\n\n• Complimentary United Silver or Gold status for 120 days, with the potential to retain it for a full year.\n\nComplimentary United Silver or Gold status for 120 days, with the potential to retain it for a full year.\n\n• 90 day free trial of World of Hyatt Explorist status,Hyatt’s 2nd best status tierproviding complimentary room upgrades and late checkouts.\n\n90 day free trial of World of Hyatt Explorist status,Hyatt’s 2nd best status tierproviding complimentary room upgrades and late checkouts.\n\nTransfer bonuses of 150% are absolutely unprecedented in the points world; usually people would rejoice over a 30% transfer bonus on the other major card programs. And re: the restaurant points boost, I have a friend who put his Bilt card down on a $750 friends’ dinner and walked away with a whopping 12k points — a free cross-country flight right there.\n\n(Note that some bonuses scale with your Bilt status tier. I won’t get into it this time, but Bilt has their own status program and you earn status based on the points you’ve earned. But even the entry-level tier got 75% transfer bonuses; still an insane deal.)\n\nBilt is perhaps the most gamified, content-forward, and youthful of the Big 5 credit card programs, and as such they have some fun Rent day programming too:\n\n• Point Quest: A trivia show where you earn up to 250 points for answering current events questions. (They also release their content onTikTok!)HQ Trivia is back, but with points??\n\nPoint Quest: A trivia show where you earn up to 250 points for answering current events questions. (They also release their content onTikTok!)\n\n• RentFree: A Family Feud-style game show where you enter a drawing to get your rent paid for by Bilt.\n\nRentFree: A Family Feud-style game show where you enter a drawing to get your rent paid for by Bilt.\n\n• All spend categories (besides rent) earn double points! Dining goes from 3x to 6x, Travel goes from 2x to 4x, and all other non-rent spending goes from 1x to 2x.\n\nAll spend categories (besides rent) earn double points! Dining goes from 3x to 6x, Travel goes from 2x to 4x, and all other non-rent spending goes from 1x to 2x.\n\nBilt has partnered with a whole variety of restaurants in major US metro cities, and you’ll earn anywhere from 2x to 10x extra points per dollar when you dine there. That’s on top of the 3x points you earn from any dining transaction on your Bilt.\n\nOne of the coolest parts of this program is you don’t even need to use your Bilt card; you can register other cards you own into your “Bilt Wallet” and you’ll still earn the extra Bilt points!\n\nI’ve registered my Chase Sapphire Reserve in my Bilt Wallet. Now let’s say I go eat at one of my new favorite NYC spots,8282 in Lower East Side. 8282 is listed as a +3x Bilt Dining partner. I’ve got two options to earn points on my meal:\n\nAs you can see, Bilt Dining affords you flexibility on how you earn points on your nights out, which can be very useful as you try to build up points balances in multiple programs.\n\nAlso, as of yesterday it’s officially NYC restaurant week, and there’s plenty of Bilt Dining restaurants on the list right now! If you’ve already got the card, there’s a whole list of them in the app.\n\nI went to one of their events in November atMeduza, an up-and-coming mediterranean restaurant that had literally just opened a few days prior! It was a lovely 5 course menu with a cocktail pairing, and the vibes were excellent. They had all the guests sit on a long table together, so everyone got to socialize and become friends while drinking way too much. Plus they had some of the Bilt team at the event too, and I got to ask a bunch of my prying questions about the card.\n\nThe dining experiences were bookable in the Bilt app for $150/seat or 12,500 Bilt points; I personally opted for the former because I know I can extract more than 1.2¢ of value per point. They’ve also run dining experiences in Miami, Dallas, and Boston.\n\nI’m not personally the biggest football fan, but back in September, they also let cardholders book spots in a box suite for a Jets vs. Chiefs game. The cost was just 10k Bilt points — given that a typical box suite goes from $5-25k for 20 people, this was quite the steal! Plusapparently Taylor Swift attended that gameto cheer on Travis Kelce, so who knows, you could have bumped into her at the stadium too.\n\nBecause the Bilt card is also a World Elite Mastercard, you get some additional travel protections for peace of mind:\n\n• Auto rental collision damage waiver: Rent a car and you can decline the extra collision insurance from the rental company.\n\nAuto rental collision damage waiver: Rent a car and you can decline the extra collision insurance from the rental company.\n\n• Trip cancellation protection: If your trip gets cancelled due to medical reasons, they’ll reimburse you even for non-refundable plans.\n\nTrip cancellation protection: If your trip gets cancelled due to medical reasons, they’ll reimburse you even for non-refundable plans.\n\n• Cellphone protection: If you pay your phone bill with Bilt, they’ll pay you if you phone gets destroyed or stolen.\n\nCellphone protection: If you pay your phone bill with Bilt, they’ll pay you if you phone gets destroyed or stolen.\n\n• Purchase protection: Buy something recently and it got destroyed or stolen? Bilt will reimburse you.\n\nPurchase protection: Buy something recently and it got destroyed or stolen? Bilt will reimburse you.\n\nAll of this comes for a $0 annual fee, which is honestly a bit wild. This makes it a super friendly “first travel card” for beginners, and an easy addition for experts.\n\nFriends have been asking me for years about the best card to start travel hacking with, and I used to say the Chase Sapphire Preferred. While that’s still an awesome card, it has a $95 annual fee, and Bilt is free with amazing benefits and partners to boot. I would highly recommend this card for beginners, but as I discussed above, there’s plenty of perks even for seasoned veterans. Even if you don’t pay rent, the rent day bonuses and transfer partners alone make the card worth it.\n\nThe card is definitely targeted towards younger generations living in major US metro cities, which is a refreshing positioning compared to some of the other cards. If you’re based in NYC, Bilt has an especially strong presence here (they’re based here after all), but you’ll also get a decently fulfilling set of perks and benefits on Bilt Dining and Bilt Experiences in other major US cities.\n\nIf you do decide to get a Bilt, I would appreciate if you use myreferral linkbelow! It gets me some extra points which I can use to travel more and power more issues of Shreycation. I only provide this because Bilt is a product I’m personally a huge fan of (can you tell?), and I hope you enjoy it too!",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/issue-2",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "Snacks: earn free miles when shopping",
      "content": "Welcome to Shreycation Snacks. This isn’t a full feature Shreycation issue — it’s a bite-sized snack with tasty tips. Read it on the subway, read it during a boring Zoom call, read it on the toilet — you do you. (Don’t worry, Issue 3 still comes out this week.)\n\nEveryone shops online, but in 2024 it’s time to get rewarded for it. Virtuallyevery major US airline and credit card program has its own shopping portal where you can earn free miles.It’s easy. Let’s say I need to get yet another one of myfavorite pants from Theory. If you’ve readmy previous issues, you can guess I’m a big United MileagePlus fan. Before I buy, I’ll log ontoshopping.mileageplus.comfirst, look up Theory, and click the “Shop Now” button. I’ll then proceed to buy the pants using any credit card, andI’ll get a free 2x United miles for doing basically nothing, on top of whatever points I get on my credit card.\n\nIt adds up. I’ve been using these for a year and I’ve racked up about 20k miles; I recently used 15k for a last minute NYC-SFO flight that would have cost $400 otherwise.\n\nLinks for portals (bookmarkthem!):American,United,Delta,Alaska,Southwest,JetBlue,Capital One,Citi,Chase. (Unfortunately Amex and Bilt don’t have portals.)\n\n• Make sure to temporarily turn off your adblocker (cmd + period on Chrome for Mac) OR add the adblock filter list for your preferred shopping portal (e.g.here’s United’s).\n\nMake sure to temporarily turn off your adblocker (cmd + period on Chrome for Mac) OR add the adblock filter list for your preferred shopping portal (e.g.here’s United’s).\n\n• Sometimes you can download browser extensions that will pop up whenever you go on a site that earns miles. No need to go to the shopping portal! For example,here’s United’s.\n\nSometimes you can download browser extensions that will pop up whenever you go on a site that earns miles. No need to go to the shopping portal! For example,here’s United’s.\n\n• If you shop via a credit card shopping portal, you’ll usually need to use one of their cards to get the points. For airlines shopping portals, anything works.\n\nIf you shop via a credit card shopping portal, you’ll usually need to use one of their cards to get the points. For airlines shopping portals, anything works.\n\nThe lounge battles are heating up. Chase is officially pissed that Amex cornered the market with their Centurion lounges, and they’ve decided enough is enough. Last week, Chase finally opened their hotly-anticipated Sapphire Lounge in LGA terminal B, their third lounge after BOS and HKG (hong kong).\n\nThe new LGA lounge is over 21800 sqft with plenty of little nooks for privacy, children’s play room, game room, and conference desks + phone booths. Also, they offer an upscale bar (with cocktails inspired by NYC’s ownApothekeand wine line fromParcelle), amazing food (both buffet + a la carte style), andcomplimentary mini-facials and skincare kits. For those who want extra style, they’ve got bookable private suites with caviar and wine service. The only issue is the lounge has no natural light or runway views, but it is very cozy.\n\nHow to access: If you have the Chase Sapphire Reserve, you can visit for free whenever with 2 guests. If you have Priority Pass through some other card, you get 1 free visit per year but no free guests.\n\nChase also has a JFK lounge openingtomorrow (!!)and is adding lounges in LAS, PHL, PHX, and SAN soon.",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/snacks-free-miles-shopping-portals",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "Let the government pay for your next flight",
      "content": "Did you know Etihad Airways will practically pay you to visit Abu Dhabi during your next international trip? It’s called astopover, and it’s the easiest hack for adding an extra stop to your itinerary.\n\nHere’s how it works. Let’s say I’m traveling from NYC to Delhi during mid March. There’s a $411 option that involves connecting through Abu Dhabi (AUH) with a 3.5 hour layover:\n\nBut Abu Dhabi is beautiful and maybe I’m not quite satisfied just exploring the airport — after all, if I’m connecting through Abu Dhabi anyway, I might as well stay there for a few nights and explore! This mean I need to book 2 separate one-way trips (JFK > AUH, AUH > DEL), but that costs a total of $802; almost double my original itinerary price!\n\nThis gives me access to a new itinerary option that costs $434,almost the same price as my original itinerary, but with one big difference:I get a 48 hr connection time rather than just 3.5 hrs.And obviously, I’m more than welcome to leave the airport and explore the city during that time.\n\nLet’s recap. I was going from NYC to Delhi but noticed I had a connection in AUH. Initially I was going to just rot at my gate for a lackluster 3.5 hr layover, butbecause of Etihad’s stopover program, I’m actually able to explore the glory of Abu Dhabi for 2 nights for practically the same cost! That’s 2 trips for the price of one! (If you’re doing the math, between the subsidized airfare and the free hotels, that one little stopover checkbox on the Etihad site hassaved me over $500.)\n\nLayovers are less than 24hrs in length, and usually don’t involve leaving the airport. The vast majority of flight connections are layovers — you’re just there as a means to an end.\n\nStopovers are usually 24hrs or more, and involve you intentionally leaving the airport to explore the city. The connecting city becomes a destination in and of itself.\n\nSome stopover programs require you to contact customer support, so knowing the difference and using precise language with the support rep can expedite your process.\n\nMany of the world’s major airlines are at least partially, if not majority-owned by their home government. The Singaporean government’s investment arm, Temasek, owns 56% of Singapore Airlines. TAP Portugal was swallowed up by the Portuguese government in 2020 when they bought out 72.5% of the carrier — the list goes on. These nationalized carriers are often called “flag carriers.”\n\nMost governments have an active interest in boosting tourism to their nation. Since they have a majority stake in their flag carriers, foreign governments can use them to incentivize impulse visits by implementing stopover programs. So when Etihad offers you a free stopover in Abu Dhabi, you’re getting your travels subsidized by the Emirati government in the hope that you’ll come again and maybe even tell your friends. Talk about customer acquisition cost…\n\nThere’s a ton of stopover programs out there, and they all vary in their perks, pricing, and how long you’re allowed to stay. Most aren’t as generous as Etihad and won’t comp your hotel, but in all cases,the programs below will let you stay a few days in their host city without needing to book separate one-way tickets, which saves you some dough. Other programs let you do free stopovers, but only on award tickets (i.e. tickets you buy using points/miles).\n\nGoing through all the stopover programs is beyond the scope of this article, but I will introduce a few fan favorites:\n\nWhat if my layover is less than 24 hours?Well turns out Turkish still has something for ya! If your layover is 6-20 hrs, Turkish offers layover service! You can just hit up a “TourIstanbul” counter during your layover and they’ll put you on a tour bus and show you around and give you a meal for free. If you’re at the upper end of this layover range (12+ hrs), Turkish will let you relax in a hotel for free too (think of this as “Stopover-Lite”).\n\nJapan Airlines will let you spend 1-6 nights in Tokyo or Osaka. If you’re heading to say, Niseko for skiing this season, might as well throw in a stop at Tokyo! Technically, you should be able to useJapan Airlines’ multicity booking toolto just specify your desired stopover, and it should give you the same price as with a non-stopover itinerary. In practice, JAL’s tech isn’t that great, so sometimes you’ll see the price jump. No worries though; you can call up their booking agents and they can set up the stopover without the price difference.\n\nIf you’re flying into Asia, you can add a free stopover in Singaporeas long as you’re booking using Singapore KrisFlyer miles(sorry, no free stopovers on cash tickets).For example if I want to fly SFO > BKK (Bangkok), that would cost 42k miles each way on Singapore Airlines, with a connection in SIN (Singapore). In theory, if I wanted to build in my own SIN stopover on miles, I’d actually need to book 3 flights on miles: SFO > SIN (42k), SIN > BKK (13k), BKK > SFO (42k), total of 95k miles. But since Singapore has a free stopover program, that SIN > BKK flight basically becomes free, and I save 13k miles!\n\nNote that you get 1 free stopover if you book aroundtripsaver award, or 1 free stopover on a one-way advantage award (saver, as the name suggests, is a cheaper award that has limited capacity). Also, Singapore doesn’t give complimentary hotels, but they do offer deep discount stopover packages that include accommodations, transportation, and attraction tickets.\n\nBut Shrey, I don’t have KrisFlyer miles!Yes you do. Every major card program except Bilt transfers points into Singapore KrisFlyer. If you’re not sure what that means, check out mybreakdown on transfer partners!\n\nWhat if I have a long layover in SIN but I don’t want to stopover?SIN is widely consideredthe world’s best airportand there’s so much to do there (I almost missed a connection because I was too engrossed), but if you do want to get out,Singapore does offer free 2.5hr toursif your layover is 5.5hrs or longer.\n\nI’ve written about the Flying Blue frequent flyer program before, and it’s truly the gift that keeps on giving. Let’s say you wanted to book an economy ticketon pointsfrom Toronto (YYZ) to Rome (FCO) for the Italian summer. Flying Bluecurrently has promo fares for routes involving Toronto, so you’d get a great rate; just 22k miles for YYZ > FCO on KLM, connecting through Amsterdam (AMS). But we can stretch our miles even further and make our AMS layover into an AMS stopover at no extra points cost!\n\nThanks for reading! As always, your feedback is crucial to making the next issue of Shreycation even better. If you’ve got 60 seconds (seriously),drop me some feedback here.",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/issue-3",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "How to get 10x the value from your points",
      "content": "Hi! I'm Shrey, and I'm a software engineer turned travel advisor. Back in March 2020, the travel bug bit me hard at probably the worst possible time. While the rest of the world was in quarantine picking up new hobbies, baking sourdough, and doing TikTok dances, I spent all my free time reading about the one thing I couldn’t do at the time: travel.\n\nToday we’re tackling transfer partners, one of the most important and high impact topics that will show you the path to doing tons of free flights. I imagine people are at very different levels of familiarity with transfer partners, so if you’re new, keep reading, and if you’re a seasoned veteran, feel free to scroll down a bit unless you want a refresher!\n\nIf you’ve seen people zipping around on free business class flights, chances are they’re not just secretly point millionaires. Instead, they’re stretching their credit card points by transferring them into specific airline frequent flyer programs.\n\nThe major credit card programs for travel are Amex, Chase, Citi, Capital One, and Bilt — I’ll call these the Big 5. Most travelers know that the Big 5 programs each have a travel portal where you can easily redeem your points on flights. The catch isthis usually involves spending your points at afixed rateof 1-1.5¢/point. That means if you want a $1000 flight, you’re could be burning as much as 100k points — that’s more than most credit card sign up bonuses, just for one flight!\n\nI could probably write a PhD thesis on transfer partners, but for now I’ll try and give you my best 10 minutes on the topic.\n\nGetting high redemptions doesn’t come for free, and it does involve a bit of a learning curve. First, a few ground rules for working with points:\n\n• Transfers are one way.Once you transfer points from a credit card program to a frequent flyer program, you can’t go back. Only transfer if (a) you have a redemption in mind and are about to book or (b) there’s a great transfer bonus (we’ll talk about this in future issues).\n\nTransfers are one way.Once you transfer points from a credit card program to a frequent flyer program, you can’t go back. Only transfer if (a) you have a redemption in mind and are about to book or (b) there’s a great transfer bonus (we’ll talk about this in future issues).\n\n• You can’t just transfer to any program.Each of the big 5 credit card programs partners withspecificfrequent flyer programs. This is why it’s best to own cards across various programs.\n\nYou can’t just transfer to any program.Each of the big 5 credit card programs partners withspecificfrequent flyer programs. This is why it’s best to own cards across various programs.\n\n• You usually can’t transfer points across frequent flyer programs.For example, a mile in United MileagePlus usually can’t be transferred to Air Canada Aeroplan. (There are a few limited exceptions, but I’ll cover those in future issues.)\n\nYou usually can’t transfer points across frequent flyer programs.For example, a mile in United MileagePlus usually can’t be transferred to Air Canada Aeroplan. (There are a few limited exceptions, but I’ll cover those in future issues.)\n\nNow for some examples! Let’s say you want to take advantage of theshoulder seasonfor London in April — it’s starting to warm up but you’re not paying peak season prices. If you have a Chase Sapphire or Bilt card, you can transfer your credit card points to United MileagePlus and book a United Polaris business class flight departing March 30th from EWR to LHR for 80k miles.\n\nSince I have the Chase Sapphire Reserve, my Chase points redeem at a fixed rate of 1.5¢/point in their portal (a signature benefit of that card), but just by transferring into United instead, I squeeze out 65% more value from my points!\n\nAs I mentioned earlier, each of the Big 5 programs has a designated list of transfer partners. Here’s the list for Bilt for example:\n\nIt’s perfectly normal to look at this list and think “I’ve never heard of half of these airlines, let alone flown them.” But you don’t actually need toflythese airlines to get tremendous value out of their frequent flyer programs.\n\nWhen an airline join an alliance, they agree to allow other airlines in the alliance sell tickets on their flights, and in return they get to sell tickets on their partners flights. When you go on the United website and you see an option to buy a ticket that’s actually operated by Turkish Airlines, that’s why — both of them are in Star Alliance.\n\nFortunately for us, this cross-selling phenomenon isn’t just limited to tickets bought in cash (“revenue tickets”, in point hacker parlance). It also applies to tickets bought on points (“award tickets”)! In other words, Turkish Airlines can let members of their frequent flyer program, Miles&Smiles, book award tickets on United flights using their Turkish Airlines miles. Similarly, United MileagePlus members can often book Turkish Airlines flights using their United miles.\n\nThis opens up a whole glorious world of possibilities and points arbitrage. Each frequent flyer program uses a different method to calculate how many points a given flight should cost. Some look at the flight distance, some look at which regions the flight transits between, and others look at how much demand exists for that seat. This means you can sometimes find theexact same flight and cabinfor fewer points in a partner program!\n\nSo let’s go back to our example: EWR-LHR in business class on flight UA 110. If we check the Turkish Airlines award search, we can find that same exact seat for just 45k Turkish miles. That’s a whopping 4.97¢/point!\n\nIf you’ll recall, this same flight would have cost 80k United miles or just above 130k Chase points — we’ve literally gotten 2-3x the value just by going through a United partner.\n\nYou may think “but wait, I don’t have any Turkish miles.” But if you have a Bilt card (or selected Citi or Capital One cards), your credit card points can transfer at a 1:1 ratio into Turkish Airlines Miles&Smiles. This is why these transferrable points programs are so powerful: you can use them to book flights in programs you don’t regular use.\n\nNow let’s say youonlyhave an Amex. You wouldn’t be able to transfer to Turkish Airlines unfortunately, but there’s still a deal for you! Chances are you’ve never flown or even heard of Avianca, but all you need to know is they’re a Star Alliance partner too. And that same EWR-LHR United business class seat is still available for 60k Avianca Lifemiles. Not as amazing as the Turkish redemption, but still a nice discount from the United MileagePlus one!\n\n(As you can see, it does pay to have exposure to various Big 5 programs so you can always get the optimal redemption.)\n\nBy the way, that March 30th EWR-LHR flight I’ve been using as my example? That’s a real flight with actual award availability as of 6am this morning. Good points deals often get snapped up fast, so take a look if you’re interested!\n\n• Typically you’ll see the really mouthwatering redemptions (>= 5¢/pt) on premium cabins. However, you can still find nice economy redemptions at a rate of 2-3¢/pt! For instance, our example EWR-LHR flight costs $460 for economy and is also available for 20k Avianca Lifemiles; that’s 2.3¢/pt.\n\nTypically you’ll see the really mouthwatering redemptions (>= 5¢/pt) on premium cabins. However, you can still find nice economy redemptions at a rate of 2-3¢/pt! For instance, our example EWR-LHR flight costs $460 for economy and is also available for 20k Avianca Lifemiles; that’s 2.3¢/pt.\n\n• I’ve talked a lot about how you can get > 1¢/point by transferring points. But since the redemption rate isn’t fixed in most frequent flyer programs, the opposite can also be true. Sometimes you may see terrible redemptions of 0.5¢/point, in which case you need to look elsewhere, book via the credit card portal, or maybe even just book on cash.\n\nI’ve talked a lot about how you can get > 1¢/point by transferring points. But since the redemption rate isn’t fixed in most frequent flyer programs, the opposite can also be true. Sometimes you may see terrible redemptions of 0.5¢/point, in which case you need to look elsewhere, book via the credit card portal, or maybe even just book on cash.\n\nFor most partners, the transfer is nearly instant. Go make a coffee and your freshly transferred miles should be deposited in your frequent flyer account by the time you’re back. On some occasions though, the transfer can take longer. This can be a bit inconvenient if you’re booking a particularly popular award ticket that may run out of space; I’ll talk about how to get around this in a future issue.\n\nNope! If you’re trying to save cash, ultimately free travel is free travel. You might not be maximizing your points, but that might not be what matters then. However, be careful not to exhaustallyour points in the portal; missing a killer partner redemption because you’re out of points is quite painful.\n\nMany portals also offer a combo of cash + points payment option. This can help take the edge off a particularly pricey flight by letting you, in effect, set your own preferred discount using points. I recently did this for a last-minute domestic flight; flights were $200 more than usual, so I used 13,000 points to offset the increase. Additionally, by using the Chase portal with my Chase Sapphire Reserve, my points were valued 50% higher (1.5¢/pt), and I earned 5x points on the cash portion— not bad!\n\nNot all award space is created equally. Usually when an airlines releases award tickets for a given flight, they release it into 4 buckets:\n\nAirline saver space is a special promotional rate offered for award tickets. If you can snag one of these rates, you know you’re getting the best points rate that program can offer. Often airlines will have a fixed rate for saver space (e.g. “one way US-Europe economy = 20k”), but unfortunately many US-based airlines have dynamic rates even for saver space. There’s very limited seats available in this bucket, and once it’s exhausted, you’re just left with non-saver space.\n\nFinally the partner saver space bucket is similar to airline saver space, but allocated for the airlines’ partners instead. The partner program is allowed to choose whatever pricing strategy they want for these seats, and often, the best deals come from partners that price their partner saver space cheaper than the airlines’ own saver space. One catch: the amount of partner saver seats is less than the amount of airline saver space, so if you find one, you better book fast.\n\nYes, weirdly enough the cheapest way to fly across the USA on points is through a non-US based airline! The Miles&Smiles program uses a region-based award chart where the point cost of a flight depends on your start and end region. Generally most programs using such charts tend to split the US into an East and a West region, which bumps up the cost of flying cross country. Fortunately, Turkish Airlines has a sweet spot here: flights within a single country count as flying within a single region,regardless of the size of the country. If we reference theiraward charts, we can see the saver (“promotional”) award ticket rate for domestic/intracountry flights is just:\n\n(Turkish is in Star Alliance, so these flights are actually just United flights being cross-sold by Turkish.)\n\nThis is such a ridiculously low cost award that has managed to stay under the radar for quite a while now. But there’s a good reason for that: for the longest time, the only way to transfer to Turkish was through Citi or Capital One, which aren’t as popular. But that’s all changed with the Bilt card; it’s one of the fastest growing cards in America, and they have recently become the 3rd transfer partner for Turkish. Now these deals are way more accessible to travelers!\n\nLet’s look for NYC > SFO for Feb 13 (perfect V-Day timing for all the cross-country long distance couples!).\n\nNow that we’ve identified a date that has partner saver space, we can head back to Turkish and search there:\n\nAnd voila! We found Turkish partner saver space for this domestic United flight, and its just 7.5k Turkish miles compared to 12.5k Air Canada miles!\n\nOne caveat: before you get too excited about the 12.5k mile domestic business class redemptions, I should say that it’s very very hard to find award availability for this one. I’ve never succeeded on it personally, and if you find it, you might wanna buy a lottery ticket. The economy tickets are usually very doable though.\n\nThis one isn’t that underrated, and is actually one of the more popular redemptions for people who are getting started in the points game. It doesn’t hurt that Flying Blue is a transfer partner for each of the Big 5 credit card programs too! The reason I’ve still listed it here is many people tend to consider Flying Blue as just a good way to book Delta awards if you don’t have an Amex, but they’re missing the best part: Flying Blue promo rates.\n\nEvery month, Flying Blue releases a new set of cities that they offer promotional pricing on (usually 25% off their regular partner saver rates). As long as you fly between any country in Europe and these cities, you’re eligible for the discounted pricing (while seats last of course). The discounted pricing is in effect for trips within 6 months of the current month, so the January promos are in effect for trips till June 30.\n\nUnfortunately there’s no US-based cities on this list for January, but in December, you could have booked flights from the following cities for a discount:\n\nThis month there are lots of Canadian cities on the list though (Toronto, Montreal, Ottowa), so for my Canadian friends out there, it’s your time to shine! You can always see the list of citieshereunder “Long-Haul Flights” (I suggest bookmarking this link!)\n\nLet’s check out an example. Let’s say you’re looking to do V-Day in the city of love, Paris. We can pop in Toronto for the origin and Paris for the destination, and select Business. Seems there’s some partner saver space for Feb 13! You can tell because the button is in green; non-saver space is shown in blue.\n\n50k ain’t bad for Air France business class! You will need to pay a bit of a higher fee here (220 euros), but this flight is going for $5526 right now, so you’re getting an insane 10.5¢/pt redemption here. What a steal for V-day in Paris.\n\nThere’s so many more underrated transfer partners I could include, but this issue is getting kinda long, so I’ll throw ‘em in a future issue!\n\n• Bilt Dining has 100 restaurants participating in NYC Restaurant Week! You’ll earn extra Bilt points on these restaurants, even if you don’t use your Bilt card (just make sure to register your other card in the Bilt wallet). Plus you can register any Mastercardhere(including your Bilt one) to get $10 in statement credits per restaurant, up to $30. You can check your Bilt app for the full 100 restaurant list.\n\nBilt Dining has 100 restaurants participating in NYC Restaurant Week! You’ll earn extra Bilt points on these restaurants, even if you don’t use your Bilt card (just make sure to register your other card in the Bilt wallet). Plus you can register any Mastercardhere(including your Bilt one) to get $10 in statement credits per restaurant, up to $30. You can check your Bilt app for the full 100 restaurant list.\n\nChase Offers has a few cool promos running (may vary by card). Be sure to activate them in the Chase app! Here’s a few on the Chase Sapphire Reserve:\n\n• 10% back on various hotel chains, including Intercontinental, Crowne Plaza, Le Meridien, Kimpton, Hyatt Place, and Holiday Inn.\n\n10% back on various hotel chains, including Intercontinental, Crowne Plaza, Le Meridien, Kimpton, Hyatt Place, and Holiday Inn.\n\n• Park Hyatt Bangkok: Stay 3 nights, pay for 2 on stays till March 31. Also, stay 2 nights, pay for just 1 for specialty suites (with same perks)\n\nPark Hyatt Bangkok: Stay 3 nights, pay for 2 on stays till March 31. Also, stay 2 nights, pay for just 1 for specialty suites (with same perks)\n\n• Thompson Denver: Stay 3 nights, pay for 2 for stays till March 10. Those of you going for a *cough* certain digital asset conference *cough* might find this one useful! (I’ve stayed there personally too for that same conference in the past)\n\nThompson Denver: Stay 3 nights, pay for 2 for stays till March 10. Those of you going for a *cough* certain digital asset conference *cough* might find this one useful! (I’ve stayed there personally too for that same conference in the past)\n\n• Grand Hyatt Playa del Carmen Resort: Stay 3 nights, pay for 2 for stays till June 30. Also, you’ll get an extra $50 to spend at the spa (on top of the $100 hotel credit).\n\nGrand Hyatt Playa del Carmen Resort: Stay 3 nights, pay for 2 for stays till June 30. Also, you’ll get an extra $50 to spend at the spa (on top of the $100 hotel credit).\n\n• If you’re staying at a Kimpton hotel this month or next, say “Chalet All Day” to the front desk. You’ll be glad you did!\n\nIf you’re staying at a Kimpton hotel this month or next, say “Chalet All Day” to the front desk. You’ll be glad you did!",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/issue-1",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "Why you need a Bilt card in your wallet",
      "content": "One of the biggest questions I’ve gotten this past year is what in the **** is a Bilt card? They're everywhere, but what's the hype about, and is Bilt really worth it?",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/issue-2/comments",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "How to get 10x the value from your points",
      "content": "If you've seen people zooming around the world for free on points, it's not because they're point millionaires. Learn how you can maximize the value of your points by using transfer partners rather than just wasting them in your credit card portal. Also, 2 killer redemptions that you can claim today!",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/issue-1/comments",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "Robinhood's Latest Quest",
      "content": "This week I was gonna talk about how to hack basic economy, but then Robinhood upended those plans when they dropped one of their biggest announcements in years: a 3% cash back credit card.\n\nI mean she is truly a stunning card. But looks aren’t everything. Let’s dive in and see what this card is made of.\n\nFirst things first, Robinhood’s done a great job stealing headlines with this card, and it’s not just all show. This is indeed a wonderfully designed card.\n\nEveryone’s talking about the flagship feature, the 3% cash back on everything.And with good reason: 3% is the highest base cash back rate across any card I’ve seen.There’s not much else to say here — it’s truly a great cash back rate with no hoops to jump through. There’s something refreshing about the simplicity here, and it’s especially great for beginners.\n\nNo foreign transaction fees means you can truly use this card to earn 3% oneverything, including that shopping spree in Milan.\n\nThis is actually the perk I’m most excited for with this card, because as far as I know,no other card on the market offers native virtual cards.\n\nVirtual cards let you hide your true credit card number when spending online, and allow you to set an expiry date and spending limit. The killer use case here is managing subscriptions: if you just want 1 month of Hulu tobinge Shogun, you can load a virtual card with $8 and have it expire in a month. If you forget to cancel your subscription, it won’t matter; your payment method will be invalid by the month’s end anyway.\n\nThe Robinhood Gold card is part of the Visa Signature family, which comes with various optional benefits that credit card providers can activate. I’m happy to say Robinhood really went for extra credit here; this card is loaded with benefits, including:\n\n• Purchase security: If you buy something nice and it gets lost or stolen in 90 days, you can get up to $1k back.\n\nPurchase security: If you buy something nice and it gets lost or stolen in 90 days, you can get up to $1k back.\n\n• Return protection: If you aren’t satisfied with a recent purchase and the store won’t take it back, you can get reimbursed up to $250.\n\nReturn protection: If you aren’t satisfied with a recent purchase and the store won’t take it back, you can get reimbursed up to $250.\n\n• Trip cancellation protection: If you get injured before or during a trip, you can get up to $2k to cover nonrefundable arrangements.\n\nTrip cancellation protection: If you get injured before or during a trip, you can get up to $2k to cover nonrefundable arrangements.\n\n• Auto rental collision damage waiver: You can skip the insurance at the rental car office when you use you card to rent.\n\nAuto rental collision damage waiver: You can skip the insurance at the rental car office when you use you card to rent.\n\n…but that travel has to be booked through Robinhood’s forthcoming travel portal. Now if you’ve used these travel portals through Chase or Amex or other cards, you know these portals aren’t that fun or convenient to use. Also, sometimes these portals don’t have the flights and hotels you’re interested in. Robinhood’s portal isn’t live so it’s hard to make judgements quite yet, but something tells me it won’t be groundbreaking here.\n\n5% cash back has been emerging as a popular number for spend in travel portals, so this number isn’t as groundbreaking as the 3% cash back. You’ll earn the same with a Chase Freedom or a Capital One Quicksilver. But still, 5% is 5%, and it’s good to see Robinhood meeting the industry standard here.\n\nThis will be one of the first times I’ve seen a card’s good standing status tied to some external monthly subscription, and I’m not totally sure how this will work. If you decide not to pause your Robinhood Gold subscription for a month or two, do they close your credit card? Who knows.\n\nFortunately, Robinhood Gold is only $5/month, and if you already invest with Robinhood, it’s a bit of a no brainer: you’ll get a free $1k in margin, lower margin interest rates, 5% on uninvested cash, and more.\n\nIn the world of cash back cards, Robinhood’s 3% universal cash back might as well make it the new king. But cash back cards are the little league since they aren’t nearly as flexible or value as cards earning points. That’s becausethe value of cash back is fixed but the value of points is variable. 1¢ of cash back is 1¢ of cash back and will always be just 1¢ of cash back. But depending on your skill and luck, 1 point could be redeemed for anything from 1¢ to 10¢. That means a card that earns a standard 1x points on everything could be the equivalent of earning 1% to 10% cash back depending onhow you usethose points.\n\nThe Robinhood Gold account comes with no sign up bonuses or introductory 0% APR rates whatsoever. For other cards in this category, there’s usually a ~$200 sign up bonus, and at least 1 year of 0% APR.\n\nIf you intend on actively using this card for many years, the lack of a bonus might not be a huge issue today, but do note that it’ll take almost $7k in spending to match the free sign up bonus of its peers.\n\nThe bigger issue is the lack of a 0% APR intro period. Right now, if you rack up a $10k balance on a card with 12 months of 0% APR, you can instead invest all that money in a high yield savings account and earn 5% over the course of the year.That’s basically the equivalent of a 5% cash back on everything. You’re forgoing that option if you choose to spend more on a Robinhood Gold card.\n\nThat’s not to say this will necessarily happen to the Robinhood card, but it’s good to know that this may not last in perpetuity.\n\nBy itself, this card ticks a lot of boxes: great cash back on everything, solid protections, no transaction fees. This makes it an excellent card for beginners.\n\nI’ve waxed poetic about the value of points above, but if care more about simplicity, a card that gives 3% cash back without having to think about it is a pretty solid middle ground. And if you don’t travel much in the first place, you won’t be able to extract much of the value of your points anyway — cash back could be the better option.\n\nThe Robinhood Gold card also effectively renders many other cash back cards obsolete, meaning you can double down on simplicity and get by with fewer cards. Most cash back fans can now get by with just two cards: (1) the Robinhood Gold, and (2) some card that earns 5% on seasonal categories (e.g. Chase Freedom Flex, Discover It).\n\nA key element of any good personal card portfolio is a “catch all” card that earns > 1% cash back or 1x points on non-category spend. In other words, it’s cool if you have swanky cards that earn 3% on travel and dining (“category spend”), but if you also  drop $3000 a year on Rumble Boxing or have a crippling shopping addiction, it would be nice to earn boosted cash back here too.\n\nCatch all cards usually don’t have highly boosted cash back on special categories, but they do have slightly boosted cash back on everything. Up till now, 2% was about the best you could do for a catch all cash back card (RIPCiti Double Cash), but now Robinhood has blown this out of the water with its 3% and is the obvious choice.\n\nThere’s one big caveat: if you have one of the premium travel cards — a Chase Sapphire, Amex Gold or Platinum, or a Capital One Venture — it might make sense to choose a card in those ecosystems as your catch all card. That’s a topic for another Shreycation issue, but generally you’ll get more value (and better purchase protections) on those cards than the Robinhood Gold.\n\nDeath and taxes may be the only two things guaranteed in life, but the Robinhood card can help youreduceyour annual subscription to Uncle Sam.\n\nThe IRS lets you pay your outstanding taxes using a credit card.They’ll charge you 1.8% for this privilege, but if you’re using a card that gives you 3% cash back…you see where I’m going here.\n\nWe can go one step further for a really cheeky version of this hack. Since you’re paying taxes with a credit card, you have at least a whole month to pay down the balance while avoiding an interest charge. So maybe instead of paying down the card immediately,stick that tax money in a 5% APY high yield savings account for a month, and then pay your card. 5% APY earned for one month translates to a ~0.4% ROI, boosting your effective tax discount to 1.6%.\n\nYou can also do this hack with the Paypal Mastercard (which gives you 3% cash back on Paypal transactions), but the Robinhood Gold card is a way more versatile card to have in your wallet.\n\nIf you’ve decided the Robinhood Gold is the way to go for you, you can use the link below to add yourself to the waitlist. We’ve also got some alternative cards below that are worth your consideration!\n\nI’ve mentioned this card a few times in this article, but the Chase Freedom Unlimited is a very compelling alternative to the Robinhood Gold if you’ve already got a Chase Sapphire Preferred or Reserve.\n\n• 1.5% cash back on everything…BUT if you have a Chase Sapphire card, you can opt to receive 1.5x points instead. And as we discussed above, 1.5 pts is easily worthat least3¢.Also, 5x on travel booked through Chase Travel, 3x on dining, 3x on drugstores\n\n1.5% cash back on everything…BUT if you have a Chase Sapphire card, you can opt to receive 1.5x points instead. And as we discussed above, 1.5 pts is easily worthat least3¢.\n\nWells Fargo has really been stepping up its game lately and has started building their own points ecosystem with their own transfer partners. I’ll write more about it later, but their starter card is the Wells Fargo Autograph and its quite compelling.\n\n• 3x points on many categories: dining, gas, travel, transit, streaming, and phone services. For some of you, this might be the majority of your spend (groceries and shopping are notably missing though).\n\n3x points on many categories: dining, gas, travel, transit, streaming, and phone services. For some of you, this might be the majority of your spend (groceries and shopping are notably missing though).",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/robinhood-gold-card",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "Snacks: fly cross-country for just 5k…",
      "content": "Air Canada 🤝 Bilt brings you the deal of the month with an unheard of 150% transfer bonus. Here's how to make the most of it.",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/snacks-air-canada-bonus/comments",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "Snacks: Alaska joins Bilt",
      "content": "Alaska Airlines has some of the best redemptions in the market, but they’ve always been so hard to claim since Alaska wasn’t a transfer partner of any major credit card. Read: if you want Alaska miles, you gotta fly Alaska.\n\nThat changed last week, when Bilt signed on Alaska as a transfer partner.I swear, I’m not sponsored by Bilt but they do keep rolling out the hits. I’m actually surprised they managed to make this partnership work, but they also did manage to break through with American Airlines, and American + Alaska have their own partnership too now … maybe just a simple matter of 2 + 2.\n\n• You can book flights across all of oneworld (e.g. American, British Airways, Cathay Pacific, Japan Airlines, Qatar, Qantas, Iberia) AND their non-alliance partners (e.g. Korean Air, Singapore Airlines, LATAM). This list covers some of the best airlines in the world!\n\nYou can book flights across all of oneworld (e.g. American, British Airways, Cathay Pacific, Japan Airlines, Qatar, Qantas, Iberia) AND their non-alliance partners (e.g. Korean Air, Singapore Airlines, LATAM). This list covers some of the best airlines in the world!\n\n• You can book free stopovers even on one-way awards. If you don’t know what a stopover is,I’ve written extensively about them before— it’s your way to turn a single trip into multiple for free.Alaska Airlines Mileage Plan is one of the most popular ways to book premium cabins on Japan Airlines (credit:Prince of Travel)\n\nYou can book free stopovers even on one-way awards. If you don’t know what a stopover is,I’ve written extensively about them before— it’s your way to turn a single trip into multiple for free.\n\nHere’s how you can use all this to your advantage. Let’s say you want to do a huge Asia trip. You can book NYC <> HKG (Hong Kong) with a stopover in Tokyo on the way there and another stopover in Singapore on the way back. This would usually cost you 152k miles if you booked every leg individually, but thanks to the free stopover policy, you only spend 108k miles. Valuing your miles at 2¢/point, that’s $880 saved on a 3 destination Asia trip.\n\nBoeing has been in the news forallthewrongreasonslately. I won’t care to speculate on the causes here, but even thoughair travel remains remarkably safe, it’s understandable if you to avoid Boeing so you can sleep better on your flight.\n\nIf you’ve got a flight coming up,you can check outamiflyingonaboeing.com, made by yours truly to quickly check what aircraft you’re flying on.\n\nVirgin Atlantic has a 50% off deal on all award flights from the US to the UKending midnight tonight!\n\nNote that this only applies to flights on Virgin Atlantic itself, and must involve trips that complete before June 30.\n\nNow there is one somewhat unfortunate issue preventing this from being one of the greatest points deals this year. Virgin Atlantic chargesfuel surcharges on award flights, meaning you can’t just focus on the miles cost. For example, a roundtrip starting May 10th requires 10k Virgin miles + $492, but the equivalent “Economy Classic” ticket would cost $667. That still values your miles at 1.75¢/point (($667 - $492) / 10000), but it’s not amazing. Premium economy gives you some better value, at 3.1¢/point (would usually cost $1773 in cash).\n\nBut there’s a hack. I won’t get into the weeds here, but often you canget cheaper fuel surcharges if you book two separate one-way tickets rather than one roundtrip.For example, here’s what happens if I book the same premium economy itinerary, but as two one ways.\n\nNote the points cost remains the same: 8.75k + 8.75k = 17.5k miles. But the fuel surcharge is cheaper; instead of $1227, it’s $453 + £394, which converts to $957.You save $270 literally by clicking some buttons differently.\n\nWait I don’t have Virgin Atlantic miles though.Oh my friend, you most definitely do. Virgin Atlantic partners witheverymajor card program, so transfer away. (If you ever forget who transfers to who, I’ve made asuper nice diagram here.)\n\nWhat if I’m not ready to commit to a flight now?It’s inconvenient that this deal expires tonight. But you can always change your flight for $50. You can also cancel at least 24 hrs before the flight to get your miles and taxes back. Fuel surcharges should also be refunded in most cases.\n\nSince chances are someone handling your bag has an iPhone, you can usually track your bag’s journey in granular detail. Also, as soon as you log onto inflight wifi with an iPhone, chances are some other iPhone user is sitting just above where your bag is in the cargo hold, and you can make sure your bag is happily enjoying its flight too 😄\n\nAirTags are on discount right now too! AirTags usually cost $100 for a set of 4, butAmazon is selling them for $80 right now.\n\nThanks for reading! I know I’ve been away for a while; I’ve been gearing up for a launch that’s very near and dear to my heart, and you’ll be hearing it first here.",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/snacks-alaska-joins-bilt",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "Snacks: How to girl math your Lyfts",
      "content": "It’s Saturday and a lot of you are about to end your night by taking a $50 Lyft back home. Not a fun expense, but saving 20% on it would make it feel a bit better.\n\nThis isn’t a limited time discount —turns out you can getat least20% off any time on your Lyfts. It just requires a bit ofgirl math.\n\nThe Chase Sapphire Reserve earns a whopping 10x points on Lyft rides. Last year I flew a $10000 business class itinerary in United Polaris business class by transferring 99k Chase points to United MileagePlus, garnering a value of 10¢/point. I definitely had some of my Lyfts contribute to those 99k points, and since I earned 10x points and redeemed those points for 10¢ a point,I effectively got $1 back for every $1 I spent on a Lyft.In other words, my Lyfts were free.\n\nNow a 10¢/point redemption isn’t super common and mostly exists when flying premium cabins, but even if you just redeem on economy flights, you can still get a pretty sizable discount on your Lyfts. At the very least, you can redeem Chase points in the Chase portal directly for 1.5¢/point. But if you transfer those points into airlines, you can easily and routinely get at least 2¢/point. That means you’re effectively earning 20¢ per dollar you spend on Lyft — 20% off!\n\nSo next time it’s late at night and you’re Lyfting back home, know that if you girl math it, you’re at least getting it at a discount.\n\n(Unfortunately for my Uber loyalists, this arbitrage is a Lyft only thing. The Capital One Savor cards will give you 10% off Ubers,but 10% isn’t the same as 10x points.)",
      "content_type": "newsletter",
      "source_url": "https://shreycation.substack.com/p/snacks-lyft-girl-math",
      "author": "Shrey G",
      "user_id": ""
    },
    {
      "title": "SNEAK PEEK",
      "content": "0\nINTERVIEW CHECKLIST\nBEYOND CRACKING THE CODING INTERVIEW\n\n1\nSTUDY PLAN\nBEYOND CRACKING THE CODING INTERVIEW\nBOOSTERS\n\nCRACKING THE CODING INTERVIEW 189 PROGRAMMING QUESTIONS AND SOLUTIONS\nCRACKING THE PM CAREER\nTHE SKILLS, FRAMEWORKS, AND PRACTICES TO BECOME A GREAT PRODUCT MANAGER\nCRACKING THE PM INTERVIEW\nHOW TO LAND A PRODUCT MANAGER JOB IN TECHNOLOGY\nCRACKING THE TECH CAREER\nINSIDER ADVICE ON LANDING A JOB AT GOOGLE,\nMICROSOFT, APPLE, OR ANY TOP TECH COMPANY\n\nBEYOND\nCRACKING the\nCODING INTERVIEW\nGAYLE L. MCDOWELL\nMIKE MROCZKA\nALINE LERNER\nNIL MAMANO\nCareerCup, LLC\nPalo Alto, CA\n\nBEYOND CRACKING THE CODING INTERVIEW\nCopyright © 2025 by CareerCup.\nAll rights reserved. No part of this book may be reproduced in any form by any electronic or me- chanical means, including information storage and retrieval systems, without permission in writing from the author or publisher, except by a reviewer who may quote brief passages in a review.\nPublished by CareerCup, LLC, Palo Alto, CA. Compiled Feb 15, 2025.\nFor more information, or to enquire about bulk or university copies, contact support@careercup.com.\nPlease report bugs or issues at beyondctci.com. 978-1955706001 (ISBN 13)\n\nTo my favorite coders, Davis and Tobin—\nGayle\nTo my dog, my wife, and our readers (and not necessarily in that order)—\nMike\nTo my two wonderful kids (or if I have more, then whichever two are the most wonderful)—\nAline\nAls meus pares—\nNil",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 8,
      "font_size": 9
    },
    {
      "title": "Ch 25.  Dynamic Arrays.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .282",
      "content": "_ _ I N I T_ _ ( )\nInterview Replay: Recordings of actual mock interviews.\nSnippet: Material that you can copy/paste online, including email templates and code recipes.\nResource: Bonus chapters, worksheets, and other material.\nProblems, Solutions, and AI Interviewer: You can try every problem in the book with the\nAI Interviewer. Solutions are online in four languages (Python, Java, JavaScript, and C++).\nWatch for these speech-bubble icons, which mean there is online content.\nPA R T  I\n\nI\nR E A D M E\nThis is a big book, and yes, it needs an instruction manual. We ask (beg?) you to read this. We'll keep it short and to the point. We also know lots of books have online materials, and they're often junk. We promise this isn't the case with ours.\nBefore we do that, we’d like to address the relationship between this book and interviewing.io.\nYou'll see a lot of references to it. This book is not from interviewing.io, but we do partner with them for access to lots of data, interview replays, and an AI Interviewer. Because of this relationship, we know that sometimes mentioning interviewing.io might sound promotional. We’ve tried to avoid that as much as we could. We hope—trust—that you'll forgive this in exchange for access to lots of data, resources, and tools (and the discount code).\nThe book is roughly split into two segments: the # rst segment (Parts I–V) is the soft squishy stu$  (backed up by a lot of qualitative and quantitative data). The second segment (Parts VI and onwards) is the technical content, which has its own README (pg 168). Please read it before diving into those parts.\nONLINE MATERIALS AND DISCUSSION\nYou can access all of our online materials and bonus chapters here:\nTalk with the authors, get help if you're stuck, and geek out with us on Discord. bctci.co bctci.co/discord\n\n__INIT__!\" ▸ README 11\nICONS\nWhenever you see an icon wrapped in a speech bubble, it means that there’s online content that goes with it, like so:\nProblems, Solutions, and AI Interviewer: Each problem in the book has a Python solution (without any fancy Python-speci# c tricks). We also provide Java, JavaScript, and C++ solutions online. We encourage you to try each problem with AI Interviewer and to only look at the solution if you get stuck.\nInterview Replay: These are recordings of actual mock interviews from interviewing.io’s collection, conducted by engineers from FAANG and other top companies. We use them to showcase real-life examples of successes and mistakes.\nSnippet: These are snippets that you can copy and paste. Sometimes they’re code. Sometimes they’re text that you can steal verbatim (e.g., emails to recruiters).\nResource or document: These are bonus chapters, downloadable problem sets, or worksheets (e.g., an equity calculator, a calculator to help you # gure out the order in which to approach companies).\nBUGS, QUESTIONS, AND CONTACT\nWebsite: beyondctci.com\nBugs: bctci.co/bugs\nErrata: bctci.co/errata\nEmail: beyond@gayle.com\nGet $50 oﬀ  anonymous mock interviews on interviewing.io  While this book gives you the tools and strategies to tackle tough tech- nical questions, it is essential to put these tools into practice. With the purchase of this book, you get $50 o$  on interviewing.io mock inter- views. There, you can practice anonymously with FAANG interviewers.\nEven if you don’t use interviewing.io, # nd a way to practice with another person; grinding problems by yourself quickly reaches the point of diminishing returns. bctci.co/discount-X3A4\n\nI\nH E L L O  W O R L D .  H E L L O  R E A D E R .\nThe only thing worse than technical interviews is not having technical interviews.\nOscar Wilde(ish)\nAlways stay gracious, best revenge is your paper.\nBeyoncé Knowles-Carter\nCracking the Coding Interview (CtCI) has been the industry leader in teaching engineers how to get into top tech companies for over a decade. It's referenced in almost every major interview prep source, includ- ing books, podcasts, blogs, and online courses, as the source of truth on how to get into the major tech companies in our industry. And—although this was never the intention—it's even been used as a classroom textbook and a question bank for companies to draw on.\nSo, why write another interview prep book? And why now?\nWhile CtCI remains an excellent foundation for interview preparation, the landscape of technical interviews has evolved dramatically since its publication. Online interview resources have changed how candidates practice, and the questions asked in interviews have grown both in di%  culty and variety. And, as more candidates are preparing for interviews than ever before, the bar for passing has risen accordingly.\nBut it’s not just the questions that have changed. The process of landing a job at top tech companies has grown even more competitive. The technical interview format has sparked increasing debate, and AI is reshaping how people apply for jobs, how companies screen candidates, and even how interviews are conducted.\nAmidst these shifts, we felt it was time to take a step back and rethink what a modern interview prep book should look like—one that complements existing resources and patches the gaps between what candidates are doing and what they need to be doing.  We realized that a new edition wouldn’t cut it. It would have to be a brand new book, and this book would have to: •\nFocus on understanding, not memorization. We aim to teach you the computer science fundamentals and the interview skills needed to excel, regardless of your educational background. By building a deep understanding of these concepts, you’ll be prepared to tackle problems you’ve never seen before— something memorization alone can’t achieve.\n\n__INIT__!\" ▸ HELLO WORLD. HELLO READER. 13\n\n•\nCover important non-technical topics. CtCI only brie&y touched on what some call the “squishy” stu$—resumes, negotiation, and managing your job search. This book devotes ~150 pages to these topics because they are now critical to success. We’ll guide you through technical recruiting with practi- cal advice, down to exactly what to say in the situations you’re likely to encounter.\n\n•\nGround our advice in data. This book draws on a decade of insights from real-world interviews, includ- ing a corpus of over 100,000 interviews conducted on interviewing.io by senior engineers from FAANG+ companies. You’ll get a data-driven perspective on what technical interviews look like at top companies today.\nNow, to address the angry elephant in the room: technical interviews are &awed, right? Absolutely. We don't just acknowledge that; we're going to dive into a candid discussion of everything wrong with technical interviews, and what you can do about it.\nDespite what some have suggested, CtCI didn't invent this format—nor is BCtCI going to end it. As far as we can tell, technical interviewing isn't going anywhere. But we hope to make the process a little less daunting and a lot more transparent—by leveling the playing #eld and giving you access to what was previously insider knowledge. We hope that you’re able to put away your hatred of the format, read this book with an open mind, put in the work, and get your revenge... by nailing your interviews, fearlessly negotiating, and landing the high-paying, challenging, awesome job that you deserve.\nBefore we get on with the real stu$, we have one request for you. Do not read this book—at least not in the traditional sense of left-to-right, top-to-bottom, page-to-page. Rather, we implore you to do this book. Use it. Interact with it. This is so important that we have a literal README on how to use it.\nWe hope you enjoy reading doing this book, inasmuch as one can enjoy a book about interviews and job searches. We really enjoyed writing building it.\n\nI\nCR A SH & LE AR N: OUR FAILED IN T ERV IE WS\nEveryone loves a success story, but failure is often the best teacher. We will share here our most humbling interview experiences—times we bombed, blanked, or were simply unprepared. These stories aren’t just about the mistakes we made; they’re about the lessons we learned and how those failures shaped us.\nOur hope is that by sharing these moments, you’ll see that even \"experts\" have stumbled, arguably in career- altering ways. More importantly, you’ll learn that just as these interview failures don't re& ect on our skills as engineers, nor do yours.\nGAYLE\nEntering my fourth year of a # ve-year undergrad/master's program, I was fortunate to have three Microsoft internships behind me. Determined to try something new for my # nal internship, I sent countless cold emails and resumes into the void of online applications. Somehow, Google picked mine. I was thrilled.\nFrom the bits I'd heard about technical interviewing, questions could be anything from implementing an\nArrayList to the heavy-ball brainteaser1. Imagine my surprise when, instead, I got a math question: \"What is 2^20?\" My answer was the always-brilliant \"Um, I don't know? Can I use a calculator?\"\nAll I could think about was what a stupid question this was and how I de# nitely didn't know the answer. And why should I? Who cares? Just look it up if you need to know it. (Sound familiar?)\nWhat I didn't realize then was that—probably—my interviewer wasn't expecting me to just know this. Most likely, she wanted me to start from what I did know, perhaps that 210 is about 1000. From there, if I knew my exponent rules, I could solve it: 220 = 210 * 210 is about 1000 * 1000… so approximately 1 million.\nIn her mind, it was a problem-solving question—albeit one that relied on a lot of math2. But in my mind, I didn't know the answer, and I was supposed to, and <PANIC>. All I needed to do was focus on what I could solve rather than what I knew.\nStill a stupid question though3. 1  Given a balance (i.e., a scale that only tells you which side is heavier) and eight balls—all the same weight other than one which is slightly heavier—# nd the heavy ball in as few measurements as possible. 2  In general, asking math-heavy questions is a no-no for interviews. However, I'll let her o$  the hook here, a little. I was a computer science major with a math minor. If I didn't know exponent rules, something had gone very wrong. 3  Why is this a bad question? Put aside the \"it's not relevant\" part. The relevant factor is: is it predictive? Approached the right way, this could be a problem solving question. However, it didn't feel like that to me—and perception matters.\nAdditionally, even if I had approached it as a problem-solving question, there is very little \"meat\" to the question; what distinguishes between good and bad other than understanding how to break up the exponents?\n\n__INIT__!\" ▸ CRASH & LEARN: OUR FAILED INTERVIEWS 15\nMIKE\nIn my #rst year of college as a CS student, I was the only student to get an opportunity to interview at Google for their internship position4—and I was ecstatic about it. The problem? I hadn't taken my data structures and algorithms class yet. My GPA took a colossal hit that semester as I spent way too much time cutting class to watch YouTube lectures on sorting algorithms and NP-hard problems in an attempt to prepare for my interview.\nThe interview day came, and I had two back-to-back meetings with di$erent Googlers. I described the optimal solution for my #rst interview, which I nervously coded in C++ with a hashmap—but then the second inter- viewer stumped me with a binary tree question5. After much fumbling, the interviewer walked me through a viable way to solve the problem, which I coded, but I knew I had bombed my chance at a Google internship.\nA few years later, I passed Google’s full-time interviews twice—declining the #rst o$er for a remote role at\nSalesforce and accepting the second for a permanent position at Google.\nALINE\nAfter graduating from MIT, I spent three years cooking professionally. While my culinary detour could #ll a book, I wasn’t good enough at it to make it a career. Out of money, I returned to coding. Coming o$ three years of &ipping pans, chopping food, and drinking nightly, I found myself back in a well-lit o%ce, standing at a whiteboard, asked to reverse a linked list.\nNot only had I forgotten what these interviews were like (I was expecting to talk about my past projects), but\nI completely blanked on what a linked list was, much less how to reverse one. And this particular interview was with Sasha Aickin, Red#n’s CTO, back when they were like #ve people. It’s one of the things I still kick myself for, every now and again.\nTo his credit, Sasha patiently explained how linked lists work, and, through a series of hints, got me to change pointer directions. I clumsily erased and redrew arrowheads, but I don’t think I wrote much code. It was too little, too late.\nI never forgot how shitty failing that interview felt. I also never forgot how gracious Sasha was, in the face of my failure, and how he patiently walked me through the problem by asking leading questions. Both of those experiences helped me come up with the idea for interviewing.io: a place where people could fail privately, without the stigma, and learn from those failures, by pairing with kind, empathetic people who care.\nNIL\nNil insists that he’s never failed an interview. We would like to clarify that it’s because he’s only done one—and passed. True to his name, Nil has exactly zero failure stories to share. Classic edge case. 4  For the curious, I sent over 100+ cold email messages to former alumni until someone was willing to refer me. Even back then, I was using the techniques we show you in this book. 5  I was asked to compute the maximum sum of any path in the tree, which did not necessarily start at the root but could include it. For a variant of that problem, see Problem 35.1: Aligned Chain (pg 436).\n\nUGLY TRUTHS & HIDDEN REALITIES\nInterview Replay: Recordings of actual mock interviews.\nSnippet: Material that you can copy/paste online, including email templates and code recipes.\nResource: Bonus chapters, worksheets, and other material.\nProblems, Solutions, and AI Interviewer: You can try every problem in the book with the\nAI Interviewer. Solutions are online in four languages (Python, Java, JavaScript, and C++).\nWatch for these speech-bubble icons, which mean there is online content.\nPA R T  I I\n\nU G LY  T R U T H S  &  H I D D E N  R E A L I T I E S\n\nI\nC H A P T E R  0\nW H Y  J O B  S E A R C H E S  S U C K\nJob searches suck—especially for engineers, who are, by and large, rational, well-intentioned people who expect the world to function according to some set of predictable rules. Why do job searches suck so much? •\nJob searches are not deterministic, and neither are interview outcomes. In job searches, e$ ort doesn’t always correlate with results. For technical interviews speci# cally, there’s little predictability in how the same person will perform from interview to interview (pg 26). •\nNo feedback loop. When you apply online and don't get a response, you can't tell if you weren’t a # t or if no one even saw your application. Your insecurities can convince you that not only did a human look, but they quickly sized you up, saw right through you, and lasered in on every single & aw to conclude (correctly, in your mind) that you’re un# t for the job. When you interview, whether you pass or get rejected, you often don’t know why, which makes it di%  cult to know how to prepare the next time. •\nThe content of your resume is often eclipsed by the brands in it. If you don’t have brand-name companies or schools, it’s much harder to get noticed. Recruiters are notoriously bad at making value judgments based on resumes1. Despite these shortcomings, resumes are still the gold standard, and that means candidates from non-traditional backgrounds enter the game with a signi# cant disadvantage. •\nTo get in the door, you very likely have to know someone. Surprisingly, this is even true for candidates who look good on paper; recruiters often ignore online applications because the signal-to-noise ratio is so poor. But it’s especially true if you don’t look good on paper. •\nTechnical interviews are notoriously ﬂ awed and not representative of the actual engineering work you do every day. This one is especially rough, and it bears out in our data. Senior engineers often do worse than juniors in their # rst few interviews because junior engineers have more recently completed an algorithms class or have done extensive interview prep. Senior engineers have been in the trenches, often focusing on building applications; there are very few engineering roles where you’re doing the types of academic problems that you get in interviews day in and day out.\nThese are just a few of the challenges, but the strategies in this book will help you navigate them and achieve success—however you de# ne it.\nGiven all these & aws, you might ask: How did we get here, where our technical interviews feel so divorced from the work and so unpredictable in their outcomes? For that, let’s take a brief look at the history of technical interviewing. 1  See https://www.reddit.com/r/recruitinghell/comments/qhg5jo/this_resume_got_me_an_interview/\n\nC H A P T E R  1\nI\nC H A P T E R  1\nI\nC H A P T E R  1\nA BRIEF HISTORY OF TECHNICAL INTERVIEWS\nA de# nitive work on the history of technical interviewing was surprisingly hard to # nd, but we were able to piece together a narrative by scouring books like How Would You Move Mount Fuji, Programming Interviews\nExposed, and the bounty of the internets. The story goes something like this.\nTechnical interviewing has its roots as far back as the 1950s, at Shockley Semiconductor Laboratories in\nMountain View, California. William Shockley’s1 interviewing methodology came out of the need to keep up with the innovative, rapidly moving, Cold War-fueled tech sector, something that traditional hiring approaches taken from established, skills-based assembly line industries simply couldn’t handle.\nAnd so, Shockley relied on questions that could gauge analytical ability, intellect, and potential quickly. One canonical question2 in this category has to do with coins:\nYou have eight identical-looking coins, except one is lighter than the rest. Figure out which one it is with just two weighings on a pan balance.\nThe techniques that Shockley developed were adopted by Microsoft during the 1990s, as the success of the desktop computer, and later, the # rst dot-com boom spurred an explosion in tech hiring. Like Shockley,\nMicrosoft also needed to quickly and scalably assess high volumes of candidates for potential. As soft- ware engineering became increasingly complex, it was no longer possible to have a few centralized expert programmers manage the design and then delegate away the minutiae. Even rank-and-# le developers needed to be able to produce under a variety of rapidly evolving conditions, where just mastery of speci# c skills wasn’t enough.\nThe puzzle format, in particular, was easy to standardize because individual hiring managers didn’t have to come up with their own interview questions, and a company could quickly build up its own interchangeable question repository. Over time, most companies did away with puzzle questions3 for engineers, and moved to algorithmic questions: these questions seemed more relevant but still assessed problem-solving skills.\nAt many top companies, such as Google, this need for interchangeable parts ultimately carried over to the interview process as well—rather than having individual teams run their own processes and pipelines, 1  We are acutely aware that this is the same William Shockley who became the poster boy for eugenics. He was a pretty awful person. 2  A # rst attempt—if you're an engineer—is to do something akin to binary search: split the coins into two sets of four coins each. Then, take the lighter set, and divide it into two sets of two coins each. Then, split in half again. But that will be three weighings, not two. To reduce a weighing, consider that the balance will also tell us if the sets are equal.\nWe can divide the coins into three sets. 3  https://www.nytimes.com/2013/06/20/business/in-head-hunting-big-data-may-not-be-such-a-big-deal.html\n\n20\nBEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES\nView online materials for Beyond Cracking the Coding Interview at bctci.co companies standardized it. This way, in addition to questions, you could e$ectively plug and play the inter- viewers themselves—any interviewer within your org could be quickly trained up and assigned to speak with any candidate, independent of the prospective team.\nAt the same time, companies didn’t always create incentives for engineers to work hard at being good interviewers, and as you’ll see later in this book, we believe that much of the &ak that algorithmic interviews get is due to the interviewers conducting them (and, often, lack of training or proper incentives).\nSo where does this leave us? Technical interviews are, at best, a proxy for the day-to-day tasks that a software engineer actually does, and not all interviewers are good. But, regardless, do technical interviews work? Well, that's complicated and depends a lot on your de#nition of \"work.\" For whom, the candidate or the company?\nFor what type of company? Compared to what?\nWe would argue that interviewing as a whole is &awed, and it's really a matter of picking your poison.\nHowever, even the most ardent defenders4 of these sorts of technical interviews agree that false nega- tives—great engineers who get rejected—are common. FAANGs and other companies who adopt these processes tolerate a high false negative rate, under the rationale that it's better to reject a good candidate than to hire a bad one. The process is optimized to reduce false positives.\nFor you, the candidate, that kind of sucks. But it is what it is, and that's what this book is here for: to help you avoid being one of those false negatives. 4  Let's call out the elephant in the room. Some might assume that, as authors of a coding interview book, we must adamantly believe in the value of coding interviews. Not so. Not only has our intimate look at coding interviews exposed many &aws, but the entire existence of coding interview prep means that coding interviews are, at least, a little bit broken.\n\nC H A P T E R  2\nI\nC H A P T E R  2\nI\nC H A P T E R  2\nWHAT'S BROKEN ABOUT CODING INTERVIEWS\nThis chapter dives into the systemic & aws of technical interviews, from the prevalence of bad questions and bad interviewers to the randomness of interview outcomes and the growing interview-industrial complex.\nBut it’s not all doom and gloom. Once you understand the challenges and accept that the system is & awed, you’ll be able to operate within it and win (and do so with con# dence and integrity).\nIT’S NOT THE WORK YOU DO EVERY DAY\nOne of the most persistent critiques of technical interviews is that they feel disconnected from the work you do every day. If interviews were like the work you did every day, we’d expect that senior engineers would outperform juniors in interviews. As it turns out, that’s not the case: frustratingly, the more experienced you are, the worse you perform.\nWe actually have data for this. If you look at performance in their # rst mock interview on interviewing.io, junior engineers signi# cantly outperform senior ones. In the upcoming graph, you can see the average score that candidates got in their # rst mock interview on interviewing.io, broken out by seniority. Not only do junior engineers signi# cantly outperform experienced engineers,1 but experienced engineers perform the worst out of all the groups. 1  At this point, you’re probably thinking that the bar is di$ erent for more junior engineers. At some companies, it is.\nAt some, it is not. Our interviewers know the experience level of their candidates and adjust their bar accordingly when giving feedback. With that in mind, new grads likely do the best in interviews because they’re fresh o$  a data structures and algorithms course.\n\n22\nBEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nThis e$ ect gets less pronounced as people practice more; once everyone has done a bunch of mock inter- views, they all roughly converge, as you can see in the next graph. But, out of the gate, recency with the material gives you a signi# cant advantage.",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 25,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "210 is about 1000. From there, if I knew my exponent rules, I could solve it: 220 = 210 * 210 is about 1000 * 1000… so approximately 1 million."
        },
        {
          "type": "snippet",
          "code": "1  Given a balance (i.e., a scale that only tells you which side is heavier) and eight balls—all the same weight other than one which is slightly heavier—# nd the heavy ball in as few measurements as possible. 2  In general, asking math-heavy questions is a no-no for interviews. However, I'll let her o$  the hook here, a little. I was a computer science major with a math minor. If I didn't know exponent rules, something had gone very wrong. 3  Why is this a bad question? Put aside the \"it's not relevant\" part. The relevant factor is: is it predictive? Approached the right way, this could be a problem solving question. However, it didn't feel like that to me—and perception matters."
        },
        {
          "type": "snippet",
          "code": "3 for engineers, and moved to algorithmic questions: these questions seemed more relevant but still assessed problem-solving skills."
        },
        {
          "type": "snippet",
          "code": "1  We are acutely aware that this is the same William Shockley who became the poster boy for eugenics. He was a pretty awful person. 2  A # rst attempt—if you're an engineer—is to do something akin to binary search: split the coins into two sets of four coins each. Then, take the lighter set, and divide it into two sets of two coins each. Then, split in half again. But that will be three weighings, not two. To reduce a weighing, consider that the balance will also tell us if the sets are equal."
        },
        {
          "type": "snippet",
          "code": "1 but experienced engineers perform the worst out of all the groups. 1  At this point, you’re probably thinking that the bar is di$ erent for more junior engineers. At some companies, it is."
        }
      ]
    },
    {
      "title": "CHAPTER 2 ▸ WHAT'S BROKEN ABOUT CODING INTERVIEWS",
      "content": "24\nBEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nThe fact that memorizing questions gives you an edge is ironic, given that the whole purpose of modern technical interviewing is to evaluate one’s ability to think like an engineer, rather than come to the table with a bunch of speci#c skills. It’s also one of the things that makes it harder to stomach practicing for interviews.\nIt’s a tough pill to swallow to know that, ultimately, you’re competing with memorizers.\nIn this book, we’ll arm you with the kind of foundational understanding that will make memorization less important (but will be just as e$ective at improving your performance).\nBAD INTERVIEWERS WHO DON’T WANT TO BE THERE\nGood interviewers can get good signal from a bad question. Bad interviewers cannot even get good signal from a good question. For a good interviewer, the question is just a tool to guide the discus- sion into interesting areas. For bad interviewers, the question is an absolute to which they must hear the exact answer they have in mind.\nJos Visser, Member of Technical Sta$ at OpenAI, and formerly of Google, Facebook, and Amazon\nYes, bad questions are bad. However, bad interviewers are, in our minds, the biggest problem with technical interviews. A terrible question, in the hands of a skilled, engaged interviewer, can yield meaningful signal.\nA great question asked by an unskilled, disconnected interviewer will always be bad.\nWe talked about how large companies adopted modern technical interviewing in part because of the “interchangeable parts” approach to provisioning interviewers. However, human beings are not gears or sprockets—each comes with their own unique hangups and proclivities. It’s naive to think that you can swap one interviewer for another and achieve the same result.\nIn our experience hiring professional mock interviewers, we saw very quickly that whether some- one likes to conduct interviews is bimodal: either they love it or they hate it, with not much in between.\nThe people who like interviewing tend to enjoy teaching. They tend to have higher-than-average empathy, they remember a time when they were on the other side of the table, and they want to make that experi- ence less painful for their candidates. They also tend to approach interviews with a certain curiosity. They are curious about novel ways to solve the problem, about new rabbit holes their candidates will inevitably go down, and about the candidates themselves.\nThe people who hate interviewing treat it as a disruption—a necessary evil between shipping features. They do the bare minimum, and it shows. Over the years, we've listened to a lot of interviews. You can immediately identify when an interviewer is checked out. You’ll hear them typing. You’ll hear them go silent for a while.\nThey’ll often need to ask the candidate to repeat themselves. You certainly won’t hear them collaborating with their candidate or gently guiding them away from a perilous rabbit hole. Most of us have been on the receiving end of an interviewer’s callous indi$erence and know what it feels like.",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 27,
      "font_size": 8
    },
    {
      "title": "CHAPTER 2 ▸ WHAT'S BROKEN ABOUT CODING INTERVIEWS",
      "content": "26\nBEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES\nView online materials for Beyond Cracking the Coding Interview at bctci.co •\nBad interviewers will judge too much on super# cial grounds, which is especially unfair to candidates who come from a non-traditional background or lack some little bit of institutional knowledge.\nFor all their perceived objectivity (and certainly they’re more objective than ones where you talk about your experience), coding interviews are a complex interaction between two humans. When one of the parties isn’t truly present, the candidate pipeline su$ ers, and you end up with fewer candidates to choose from and, ultimately, worse hires.  NON'DETERMINISTIC OUTCOMES\nAnyone who’s done multiple technical interviews has probably felt in their gut that outcomes are somewhat arbitrary. So much depends on serendipity and, well, clicking! Did you click with your interviewer? Did some- thing click in your head at the right time when trying to solve the problem?\nIf you’ve felt like this, you’re not alone, and we have the data to prove it. On interviewing.io, after every interview, you get a technical score from your interviewer, on a scale of 1 to 4. The same candidate can do multiple interviews, each of which is with a di$ erent interviewer and/or di$ erent company, and this opens the door for some pretty interesting and somewhat controlled comparative analysis.\nWith that in mind, we looked at how the same person performed from interview to interview.  We analyzed interviewing.io’s data to understand how individuals performed across multiple inter- views (for this analysis, we included people who did between 3 and 20 interviews). Each circle or diamond represents people with that speci# c average score and standard deviation across their interviews.\nThe y-axis is the standard deviation of performance; a higher standard deviation re& ects more volatility.\nSome surprising takeaways from this analysis:",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 29,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "1 to 4. The same candidate can do multiple interviews, each of which is with a di$ erent interviewer and/or di$ erent company, and this opens the door for some pretty interesting and somewhat controlled comparative analysis."
        }
      ]
    },
    {
      "title": "CHAPTER 2 ▸ WHAT'S BROKEN ABOUT CODING INTERVIEWS",
      "content": "28\nBEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nINTERVIEW PREP BEGETS INTERVIEW PREP\nTechnical interviewing has given rise to a booming preparation industry. This is somewhat ironic, as it defeats the purpose of this form of interviewing; the goal was to understand the candidate's aptitude, independent of what they currently know.\nThe reality is that—as we've shown—interview prep works. We might not like it, but people do better with preparation. That's why interview prep is a multi-billion dollar industry, including everything from books and courses to asynchronous coding challenges and mock interviews. This also means that you are being compared to candidates who are prepping for interviews (and, in many cases, simply memorizing a ton of questions), which means that the expectations for you have gone up too. What do you do about this? You, of course, prepare for interviews too.\nIt's an unfortunate cycle; interview prep begets interview prep.6 But for the record, memorizing problems without also working on understanding goes against our preparation philosophy, and it’s honestly not that e$ective.\nAll that said, it’s time to change our lens and talk about how to work the system. Technical interviews are here to stay, and if you want a job at a top-tier tech company, you have to jump through this hoop. 6  Would it be better if we did the impossible and magically got rid of all interview prep? Probably not. Before today's industry, there were still some books and resources—but it relied more on word of mouth and \"inside\" sources (friends telling you what to expect). This favored people with connections. The bar might have been lower, but the playing #eld was more unfair.\n\nC H A P T E R  3\nI\nC H A P T E R  3\nI\nC H A P T E R  3\nW H AT  R E C R U I T E R S  W O N ' T  T E L L  Y O U\nShow me the incentives, and I’ll show you the outcome.\nCharlie Munger\nIt is di%  cult to get a man to understand something when his salary depends on his not understanding it.\nUpton Sinclair\nEven though recruiters try to position themselves as your advocate, remember this: recruiters are not your friend, and they don’t work for you.\nI (Aline) used to be a recruiter. I ran my own third-party agency, and I also worked in-house before starting interviewing.io. That means I’ve had to struggle with the tangled incentive structure1 that comes with being a recruiter. There’s always tension; recruiters are, by and large, good human beings who genuinely want to help their candidates, but they also have an employer they’re beholden to, as well as a comp/bonus structure that rewards certain behaviors, some of which run counter to candidates’ best interests.\nThere’s some distinction between in-house recruiters and third-party recruiters (recruiters who work for an agency that does placement, rather than a speci# c company that’s hiring engineers).  THIRD'PARTY RECRUITERS\nWorking with third-party recruiters (also known as agency recruiters) is, at best, mixed. The most important thing to realize about them is that you are not the customer. The employer is. As such, even when they're paid a commission based on your salary, their incentives are, at best, sometimes aligned with yours.\nUltimately, a recruiter's incentive is to get the deal done, not to get you the best possible deal. Here’s why.\nA recruiter, depending on market conditions, gets anywhere from 8% - 25% of a candidate’s base salary when they make a placement. However, that cut is going to the recruiting agency as a whole rather than to the individual recruiter; you will almost always end up working with large agencies rather than a single person.\nLet's say that you get an o$ er. You talk to your third-party recruiter and tell them that you would like more money. The recruiter may go to the hiring manager and try to advocate for you, but they're not going to 1  https://blog.alinelerner.com/if-youre-an-engineer-who-wants-to-start-a-recruiting-business-read-this-# rst/  What Recruiters Won’t Tell You\n\n30\nBEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES\nView online materials for Beyond Cracking the Coding Interview at bctci.co push very hard because the incremental di$erence in their cut is going to be pretty small2, and to them the thing that matters is making the hire. After all, they're evaluated on the number of hires they make, #rst and foremost, independent of compensation. Third-party recruiters are incentivized to get the deal done, not to risk the deal by negotiating hard for you.\nThis means:\n\n•\nIf they have multiple clients potentially matching the same company, and they know you're less likely to take their o$er, they'll #ght for the other candidates more than you.\n\n•\nThey may expose information to the company that reveals whether you'll demand a high salary. Remem- ber: they're paid by the company, not you. If the company likes them, that's good for them.\n\n•\nThey may encourage you to take a lower salary. Sure, they get a slightly higher commission if you negotiate a higher salary, but they get no commission until the deal is done.\n\n•\nThey may encourage an employer to lowball you, if they think you’ll take it.3\nSo, when you work with third-party recruiters:\n\n•\nDo not tell them anything about your job search.\n\n•\nDo not share your compensation history/expectations.\n\n•\nAlways deal directly with the companies they introduce you to, once you establish a point of contact there.\n\n•\nAssume that anything you tell your recruiter is going to get back to every company you’re working with.\nIN'HOUSE RECRUITERS\nSome in-house recruiters get a bonus for hires, but this bonus is rarely tied to your compensation. In fact, in some cases, they may get a bigger bonus if they’re able to negotiate you down.\nAt big companies, in particular, in-house recruiters follow a playbook, and are evaluated accordingly. They’re trained to make o$ers within speci#c bands, and they’re trained to mobilize such that they don’t lose candi- dates to other big companies; if you wave a Facebook countero$er in front of Google, they will act. If you tell them you’re interviewing at a startup, they will not, because they know that startups don’t pay as much.\nBecause of this playbook4—and because they are working for the employer—their incentives do not align with yours. They’re incentivized, #rst and foremost, to follow the rules their head of department sets for them. This is true for how they evaluate candidates, who they let through, and how they read resumes. And it’s de#nitely true for how they negotiate.\nGenerally speaking, recruiters want to help, and many are rooting for their candidates. But they’re also operating inside a box, and that box isn’t set up to put your interests #rst. 2  Understanding that, let's do the math anyway. Let’s say your o$er has a base salary of $150k. Say that your recruiter goes to bat for you and tries to get you up to $165k. Before, the agency would have gotten paid $15k. Now the agency gets paid $16.5k. That incremental $1.5k isn’t worth risking a deal over (even a few thousand dollars would not justify jeopardizing the deal). On top of that, the individual recruiter is only going to maybe get a few hundred dollars total from that increase. 3  Why would a recruiter recommend that an employer not pay you more? It seems counterintuitive, but remember that the employer is their customer, not you. A savvy business person will often take a short-term hit in the service of building an enduring relationship with their customer. Telling an employer that they don’t need to pay a candidate more (even though paying the candidate more would get the recruiter marginally more money) builds trust and makes it more likely that that employer will keep coming back to them for future searches. Employers often work with several agencies at once and cycle between agencies, so anything agencies can do to retain employers is a win. 4  For more insight, watch this video on how recruiting leaders think about looking at resumes, debrie#ng interviews, and extending o$ers. https://www.youtube.com/watch?v=dHSufqvgUqY",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 33,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "6 But for the record, memorizing problems without also working on understanding goes against our preparation philosophy, and it’s honestly not that e$ective."
        },
        {
          "type": "snippet",
          "code": "6  Would it be better if we did the impossible and magically got rid of all interview prep? Probably not. Before today's industry, there were still some books and resources—but it relied more on word of mouth and \"inside\" sources (friends telling you what to expect). This favored people with connections. The bar might have been lower, but the playing #eld was more unfair."
        }
      ]
    },
    {
      "title": "CHAPTER 3 ▸ WHAT RECRUITERS WON'T TELL YOU",
      "content": "C H A P T E R  4\nI\nC H A P T E R  4\nI\nC H A P T E R  4\nI\nW H AT  I N T E R V I E W E R S  W O N ' T  T E L L  Y O U\nMaterial for this chapter at bctci.co/interviewer-secrets\nMuch of interviewing advice takes an idealistic stance: interviewers are fundamentally well-intentioned rational actors who want to run a fair process, and any & aws in the process itself are circumstantial or occur because of very rare bad actors.\nThat’s not strictly true. As we previously discussed (pg 24), most employers don’t reward strong interview- ing skills, so interviewers have little motivation to improve.\nHere are some additional interviewing tropes, which may or may not be true. We’ll discuss them all and address them with data. Can you guess which ones are true? •\nIt’s not about whether you get the right answer. Rather it’s about demonstrating your thought process. •\nInterviewers decide early on if you’ve passed the interview. •\nIf you’re a great communicator and build rapport with your interviewer, you can pass the interview, even if your technical skills are wobbly.\nIS IT REALLY ABOUT DEMONSTRATING YOUR THOUGHT PROCESS,\nOR DO YOU NEED TO GET TO AN OPTIMAL SOLUTION?\nOn interviewing.io, candidates who clearly and correctly explained their approach but failed to reach an acceptable working solution received a \"thumbs up\" only 32% of the time, compared to the platform's overall average of 51%. This means that failing to produce a working solution reduces your chances of passing the interview by 37%.1\nHow Interview Replays Work and How to Use Them\nInterview replays come from mock interviews on interviewing.io. Replays are shared with the permission of both participants. Each replay includes the interviewer’s feedback. You can watch just the relevant snippet, but we include the entire interview.\nWe strongly recommend pausing your reading and watching these replays. Hearing real people interview lets you learn from their mistakes—so that you aren’t doomed to repeat them.\nWhere we know it (and where enough time has elapsed since they did mock interviews), we’ll share the candidate’s outcome. 1  To be clear, if you’ve gotten to the optimal solution and have mostly working code (maybe some small syntax errors or an o$  by one error), we believe most interviewers would still give a Hire rating. But if it’s not working, it has to be very close. ewers Won t Tell You",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 35,
      "font_size": 8
    },
    {
      "title": "CHAPTER 4 ▸ WHAT INTERVIEWERS WON'T TELL YOU",
      "content": "34\nBEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nThose who believe that the # rst impression is make-or-break might be reassured by this: the interviewer's # rst annotation is aligned with the outcome just 56% of the time—barely better than a coin & ip. The # rst annotation occurs at an average of 13 minutes into the interview, which means the chit-chat is done and we've kicked o$  the problem solving portion. We can't speak for what happens in non-eng interviews, but at least for eng interviews: no, interviewers do not decide in the # rst few minutes. Whew!\nHowever, your interviewer’s impression of you by the 18-minute mark is predictive.\nFigure 1. This graph is based on 7,883 interviews with annotations from the interviewing.io corpus.\nYou can see when the # rst annotation that was predictive of the interview outcome happened. Most happen in the # rst 18 minutes.\nMoreover, the average sentiment gets worse over time for both successful and unsuccessful candidates, with the sharpest decline occurring in the # rst 15 minutes.",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 37,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "13 minutes into the interview, which means the chit-chat is done and we've kicked o$  the problem solving portion. We can't speak for what happens in non-eng interviews, but at least for eng interviews: no, interviewers do not decide in the # rst few minutes. Whew!"
        }
      ]
    },
    {
      "title": "CHAPTER 4 ▸ WHAT INTERVIEWERS WON'T TELL YOU",
      "content": "36\nBEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nCOMMUNICATION SKILLS ARE NICE, BUT TECHNICAL SKILLS ARE\nNICER\nCommunication in technical interviews boils down to two aspects: rapport-building at the start (about yourself, your projects, etc) and clear communication throughout the interview.\nRAPPORT-BUILDING AT THE START\nLook, this isn’t the kind of thing you usually say in an interview prep book, but the chit-chat in the #rst few minutes does not matter… much. Data shows positive communication in the #rst #ve minutes increases pass rates by 6 percentage points for underperforming candidates, compared to a 25-point boost from strong technical performance. Be enthusiastic and personable, but don’t stress this unless small talk is a challenge for you. The technical stu$ really does matter more.\nCOMMUNICATION THROUGHOUT THE INTERVIEW\nAlthough many candidates believe in coding as soon as possible, the data shows the opposite: successful candidates actually code slightly later (about two minutes later4 in a one-hour interview). This di$erence is small, but extra surprising given that many unsuccessful candidates will be quite delayed in coding because they lack a working approach. So why would coding later be linked to better outcomes? Communication, essentially. Candidates who explain their approach do better in interviews, but communication takes time.\nThinking out loud is essential in technical interviews, but beyond a baseline, communication may not signi#- cantly impact outcomes—at least for roles below Sta$. On interviewing.io, candidates are rated on technical skills, problem-solving ability, and communication skills (all on a 1 - 4 scale), alongside a pass/fail score.\nOur analysis found that once a candidate scores 2 / 4 in communication, additional improvements yield diminishing returns. In contrast, boosting technical or problem-solving scores by 1 or 2 points can increase the odds of passing by 1.5X to 2.4X, emphasizing the greater importance of these skills.\nAs roles become more senior though, communication and behavioral skills play an increasingly critical role in interview outcomes. At the Sta$ level and beyond, our anecdotal experience—supported by feedback from interviewers—shows that the evaluation criteria shift signi#cantly to emphasize these skills.\nAll that said, we can't fully tease apart technical ability and communication skills; when a candidate can't communicate their solution, interviewers are also less likely to be impressed by their approach—and they are less able to give you hints to help you along.\nWhere does this leave you?\n\n•\nDon’t worry about practicing speci#cally for the #rst 5 minutes of the interview. You can prepare for it a little, but don't stress about it.\n\n•\nGet used to thinking out loud.\n\n•\nSpend the bulk of your time getting better at solving problems.\nFortunately, practicing thinking out loud doesn't come at the cost of practicing solving problems. You can quite literally do them at the same time. 4  Candidates with successful interviews #rst run code 27% of the way through the interview, whereas candidates with unsuccessful interviews #rst run code 23.9% of the way into the interview. This di$erence is small, but nonetheless statistically signi#cant. https://interviewing.io/blog/we-analyzed-thousands-of-technical-interviews-on-everything- from-language-to-code-style-here-s-what-we-found#user-content-fnref-3\n\nC H A P T E R  5\nI\nC H A P T E R  5\nI\nC H A P T E R  5\nM I N D S E T  A N D  T H E  N U M B E R S  G A M E\nNo matter how good an engineer you are, if you get too much in your head during interviews, you’ll fail.\nWe’ve seen countless candidates self-sabotage because they jumped into the interview prep material before they accepted some fundamental truths about the journey. This chapter is about how to approach these interviews, and we encourage you to take it seriously. It’s not woo-woo nonsense. It’s our way of making sure you can apply your full potential for the rest of the book. With that in mind, here are the things you need to internalize and truly believe before you begin your studies.\nTECHNICAL INTERVIEWING IS A NUMBERS GAME\nTechnical interviews are a numbers game, but many engineers underestimate just how much. It takes doing many interviews, and even more importantly, access to a peer group going through the same thing, to really internalize it. Here, we’ll try to short-circuit all of that and convince you that failing an interview doesn’t re& ect on your engineering skills or potential; it’s often the byproduct of a broken system.\nRemember the graph (pg 26) where we showed that most people’s technical interview performance is all over the place? Here it is again (Figure 1). Only 25% of people performed consistently, and about two thirds of people who got at least one 4 also got at least one 1 or 2.\nDue to this inconsistency, even great engineers routinely fail interviews. This is a particularly big issue in tech- nical phone screens, where interviewers must decide if someone gets to onsite based on just one data point.\nMany candidates go into the process assuming it’s repeatable, like a standardized test—a reasonable but & awed assumption. The truth is, unless you’ve been through the wringer, and unless you have people around you who have also been through the wringer, you’re unlikely to realize just how unpredictable and variable the process can be.\nFor me (Aline), this became clear when I was a student at MIT. Attending a top-tier computer science program o$ ered a number of advantages, but one of the most important (and least obvious) was access to a peer group that was going through the same things.\nHaving this group around me meant that we could all practice with each other, share our successes and failures, and have multiple shots on goal at top companies. Everyone was interviewing everywhere, and we quickly learned that bombing a Microsoft interview did not mean that you weren’t meant to be an engineer.\nIt just meant that you needed to work some more problems, do some more mock interviews, and try again at Google.\n\n38\nBEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nFigure 1. Standard deviation vs. mean interview performance (33,052 interviews; 7,161 interview- ees). We analyzed interviewing.io’s data to understand how individuals performed across multiple interviews (for this analysis, we included people who did between 3 and 20 interviews). Each circle or diamond represents people who had that speci# c average score and standard deviation across their interviews.\nOne of the most critical things to internalize is that if you fail an interview, that’s all it is. It is not a well-reasoned indictment of your potential as an engineer. Keep practicing and try again.\nUnfortunately, dusting yourself o$  and trying again is harder for some groups than for others.\nPERSEVERANCE AFTER FAILURE IS HARDER FOR ENGINEERS FROM\nNON'TRADITIONAL BACKGROUNDS\nMany years ago, we noticed that on interviewing.io, women were performing signi# cantly worse in technical interviews than men. This disparity still exists today. But before you jump to conclusions, the reason is not that women are actually technically weaker. Let us explain.\nFigure 2. Gender di$ erences in interview passthrough rate.",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 41,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "6 percentage points for underperforming candidates, compared to a 25-point boost from strong technical performance. Be enthusiastic and personable, but don’t stress this unless small talk is a challenge for you. The technical stu$ really does matter more."
        },
        {
          "type": "snippet",
          "code": "5 minutes of the interview. You can prepare for it a little, but don't stress about it."
        },
        {
          "type": "snippet",
          "code": "052 interviews; 7,161 interview- ees). We analyzed interviewing.io’s data to understand how individuals performed across multiple interviews (for this analysis, we included people who did between 3 and 20 interviews). Each circle or diamond represents people who had that speci# c average score and standard deviation across their interviews."
        }
      ]
    },
    {
      "title": "CHAPTER 5 ▸ MINDSET AND THE NUMBERS GAME",
      "content": "40\nBEYOND CRACKING THE CODING INTERVIEW ▸ UGLY TRUTHS & HIDDEN REALITIES\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nWe are calling this out because we want it to change your behavior: everyone fails these interviews, regardless of background. If you're a woman, and very likely if you’re from a non- traditional background, know that failure isn't a career end. Accept the system's &aws and learn to navigate them.\nThis means learning as much as you can, practicing as much as you can, then learning some more, and then practicing some more.\nEnd-to-end, the practice journey may take anywhere from two to six months, depending on where you start and your previous exposure to algorithms and data structures. But, no matter who you are, you will need to practice, and you will fail some interviews. This is an axiom of our book.\nIt might take two failures before things turn around. It might take #fteen. But we implore you to exert yourself and keep going. If you approach technical interviewing from a place of curiosity, we promise that you’ll get through it and #nd success at the end… which brings us to our #nal point.\nPRACTICE IS REALLY IMPORTANT CRITICAL\nIt's all well and good to talk about who is doing well in mock interviews, but at the end of the day, your goal is to do well in real interviews. To understand what is driving strong performance in real interviews, we surveyed interviewing.io users about how well they did in real interviews at Google, Meta, and Amazon and compared their performance at these companies against their past total interview count (both mock and real), gender, whether they had a computer science degree, and how they learned to code.\nThe factor that stood out most was how many technical interviews an engineer had done in the past. Across all users, people who had completed #ve or more interviews had higher rates of passing a phone interview than those who had done fewer. The number of interviews mattered more than people’s starting technical pro#ciency, and it also mattered more than gender and pedigree (those factors didn’t actually matter).4\nPROBABILITY OF PASSING A\nTECHNICAL PHONE SCREEN 1 - 4 INTERVIEWS\nBEFOREHAND 5+ INTERVIEWS\nBEFOREHAND\nAmazon 65% 81%\nMeta 40% 71%\nGoogle 51% 80%\nFigure 5. The probability of passing phone screens at Amazon, Google, and Meta, as a function of how many technical interviews candidates had done previously, based on data from interviewing. io users. Practice helps, and the “tipping point” is #ve interviews.\nBut what, speci#cally, is it about practice that is so impactful? According to survey results, it's about direct feedback (when candidates were fortunate enough to get it; most often it was in mock interviews, rarely in real ones).\nEngineers typically can’t gauge how they did in interviews,5 so they probably can’t gauge why they passed or failed—although, unfortunately, they often think they can. As a result, they are bound to over-index on the wrong things and neglect the ones that truly matter. We’ll talk more about the limited utility of using real interviews for practice in “What about using companies for practice?” on page 79. Mock interviews o$er direct, honest feedback from other people so that you know how you're perceived and what to improve. 4  https://interviewing.io/blog/how-know-ready-interview-faang 5  https://interviewing.io/blog/people-cant-gauge-their-own-interview-performance-and-that-makes-them-harder- to-hire",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 43,
      "font_size": 8
    },
    {
      "title": "CHAPTER 5 ▸ MINDSET AND THE NUMBERS GAME",
      "content": "J O B  S E A RC H E S,  S TA R T  TO  FI N I S H\nInterview Replay: Recordings of actual mock interviews.\nSnippet: Material that you can copy/paste online, including email templates and code recipes.\nResource: Bonus chapters, worksheets, and other material.\nProblems, Solutions, and AI Interviewer: You can try every problem in the book with the\nAI Interviewer. Solutions are online in four languages (Python, Java, JavaScript, and C++).\nWatch for these speech-bubble icons, which mean there is online content.\nPA R T  I I I\n\nJ O B  S E A R C H E S ,  S TA R T  T O  F I N I S H\n\nC H A P T E R  6\nI\nC H A P T E R  6\nI\nC H A P T E R  6\nI\nR E S U M E S\nMaterial for this chapter at bctci.co/resumes\nYou might have heard these two seemingly con& icting statements about resumes: •\nThey're super duper important! They're what get you in the door! •\nPeople only skim them.\nThese aren't necessarily con& icting, but they do seem at least somewhat at odds. Muddling all of this is the incredible amount of resources out there about optimizing resumes: books, blog posts, resume writers, free and paid resume templates, and so on.\nWhat's the truth? The truth is that recruiters don't spend too long reviewing your resume, it's hard to di$ er- entiate yourself with it, and much of what they do look for is out of your hands.\nThis doesn't mean skip this—if you're going to spend weeks or months on interview prep, you might as well spend a little time on your resume. But realistically, this is not the place to stress. Optimize, but don't overoptimize. ▶\nWhat about LinkedIn? While we're using the term \"resume\" here, almost everything here applies to\nLinkedIn. Consider LinkedIn your online resume.  WHAT RECRUITERS LOOK AT\nIn 2024, interviewing.io ran a study1 where they asked 76 recruiters to look at resumes and indicate which candidates they’d want to interview. They were most likely to contact you if: •\nYou look good on paper, i.e., you have top-tier companies and/or schools on your resume (in our experi- ence, companies matter more) •\nYou belong to a group that’s been traditionally underrepresented in tech (i.e., you’re a woman or a person of color) •\nTo some extent, if you have niche skills (e.g., ML engineering)\nWhat's missing? Things like, for example, having a quanti# able impact or demonstrating teamwork. Essen- tially, everything recruiters look for is stu$  that you either have or you don't. 1  https://interviewing.io/blog/are-recruiters-better-than-a-coin-& ip-at-judging-resumes",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 47,
      "font_size": 8
    },
    {
      "title": "CHAPTER 6 ▸ RESUMES",
      "content": "46\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nIt's only when you read the resume that you learn that not only is this resume obviously fake, but it also celebrates accomplishments like \"Spread Herpes STD to 60% of intern team.\" And yet, it got a 90% callback rate. Recruiters just aren't reading the details.\nTHEY AREN'T CONSISTENT\nIn this same interviewing.io study, we also learned that recruiters were only slightly better than a coin &ip at identifying talent. And, what’s more, they all disagreed with each other about what a good resume looked like.4\nRecall all that resume advice you've probably heard, and stop and think: if people can't agree with each other on what makes a good resume, how can you optimize so much for this?\nWe're saying all this not to suggest that you shouldn't care, but rather to encourage you to care a bit less. Do an adequate job and then put your focus elsewhere.\nAN ADEQUATE RESUME\nIf recruiters are skimming your resume—not reading it—what do you do? You make your resume skimmable.\nThat is, make the things recruiters are looking for—if you have them—really easy for recruiters to spot.5\nAnd if you don’t have these traits? It will still help you to do this. Everyone is aided by making their best stu$ easy to spot.\nThese are the #ve easy steps to making an adequate resume: 1. Use a template. Any template will do. 2. Keep it to one or two pages. 3. Write up your work experience. Use clear, concise bullets. 4. Add your skills, education, and other sections. 5. Proofread.\nThat's it. And, please, skip the resume writers6.\nRESUME TEMPLATES\nThere are many templates online. Look for one which has:\n\n•\nSections for Skills, Education, and Work Experience.\n\n•\nColumns for your companies, or something else that makes it very easy to see where you worked.\n\n•\nWill allow you to #t your resume on one (or two) pages.\n\n•\nReasonable white space. Some resume templates put the headings like \"Skills\" and \"Experience\" as one big column, which takes up a lot of space. Unless you're struggling to #ll a single page, it's best to avoid these ones.\n\n•\nUses bullets. 4  This was the second study of its kind that we did. We #rst got these results in 2014: https://blog.alinelerner.com/ resumes-suck-heres-the-data/ 5  Of course, whether you want to lead with underrepresented minority status is a personal decision. We’ve heard di$ering opinions on this and are not here to judge. All we can do is share the data—do with it what you will. 6  While there are some resume writers who produce good work, most do not. They will waste your money since, as we've explained, they're optimizing for things that mostly don't matter. On top of this, it's not unusual that a resume writer will actually cause damage. Most are not technical and don't know how to write a technical resume. They end up &u%ng your resume up with \"leadership\" and killing o$ the technical stu$.",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 49,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "4\nRecall all that resume advice you've probably heard, and stop and think: if people can't agree with each other on what makes a good resume, how can you optimize so much for this?"
        },
        {
          "type": "snippet",
          "code": "5\nAnd if you don’t have these traits? It will still help you to do this. Everyone is aided by making their best stu$ easy to spot."
        }
      ]
    },
    {
      "title": "CHAPTER 6 ▸ RESUMES",
      "content": "48\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nAs you can see, he spent almost 3 years at Apple, but a recruiter skimming his resume might not notice that because it was a while ago. Instead, he showcases an undergrad award and some technologies/languages that he knows. Neither of those is nearly as useful to recruiters as FAANG experience.\nHis current title is also ML engineer, and one at the Principal level at that. But it wasn’t always: He went from back-end to SRE to a little bit of everything to ML, and because of that, it’s possible a recruiter would miss it as well.\nWe edited this candidate’s resume to put all the things recruiters look for at the very top of the resume and moved the buzzword soup to the bottom. This candidate is obviously well-positioned because he has FAANG",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 51,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "3 years at Apple, but a recruiter skimming his resume might not notice that because it was a while ago. Instead, he showcases an undergrad award and some technologies/languages that he knows. Neither of those is nearly as useful to recruiters as FAANG experience."
        }
      ]
    },
    {
      "title": "CHAPTER 6 ▸ RESUMES",
      "content": "50\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co\n\n•\nIf you went to, say, MIT but then went to work as a chef for a few years before trying to claw your way back into coding, perhaps your education is more relevant. (That's probably a silly example8, right?)\nYes, some people might initially misread your resume, but that's perhaps a risk worth taking.\nGPA\nYou don't have to list your GPA on your resume and most people don't care a whole lot—or, at least, they say they don't.\nIf you're a current student or new grad, the conventional wisdom is:\n\n•\nList your GPA if it's above a 3.0\n\n•\nSkip it if it's below a 3.0\nThis is one of those cases where conventional wisdom is reasonable. Note that, because this is the conven- tional wisdom, recruiters will often make the assumption that \"no GPA\" implies \"low GPA.\"  #\nAgain, people don't care much about your GPA. However, your GPA typically gets listed on the same line as your degree, so it also doesn't take up additional space. If you have a good GPA and you've graduated recently, it doesn't hurt you to list it.\nIf you have considerable experience, you probably want to just leave o$ your GPA. It just looks weird when someone has 20+ years of experience and still has their GPA on their resume.\nSkills\nIt's standard to list what languages and technologies you know. But do you list everything you ever worked with? Just what you're comfortable being tested on right now? What you could brush up on fairly quickly?\nWhat exactly does an interviewer assume by the listing of a speci#c language on your resume?\nI (Gayle) have asked this question to hundreds of interviewers over the years, and answers are all over the map. Some interviewers assume \"pro#ciency\" if a language is on a resume, and then others assume \"you worked with it at some point\"—and many others are in between. What this means for you is that whatever you do is wrong… or right.\nHere's our advice:\n\n•\nList languages in pro#ciency order\n\n•\nDrop a language if neither of the following is true:\n\n»\nYou have worked with it (professionally or personally) in depth in the last three years\n\n»\nYou could code a typical interview question with it, with only minor syntax errors\n\n•\nFocus on languages, not &avors of a language (particularly for top-tier companies and most startups).\nThere is stigma9 at many companies when candidates list every version of a language.\nIf you aren't sure whether a language makes the cut, you can describe your pro#ciency. For example, you can say \"Skills: Python (pro#cient); Java (pro#cient); C++ (prior experience but now rusty). 8  https://www.linkedin.com/in/alinelerner/details/experience/ 9  When people ask why there is stigma, the answer usually goes something about companies hiring in a language agnostic way; if they are okay hiring a Java developer to write Python, then why would they care about which versions of Python you know? That's true, but doesn't address the stigma question. The answer to that is a bit unfair, but it is essentially that while top-tier companies are language agnostic, many lower-tier companies are not. And in fact, the lower-tier companies often do care about the speci#c &avors of a language. When you list the &avors of Java that you know, they bucket you as a developer who would work for a lower-tier company. It's not fair, but it's the truth.",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 53,
      "font_size": 8
    },
    {
      "title": "CHAPTER 6 ▸ RESUMES",
      "content": "52\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co jobs page! For years, the fax number mentioned on our jobs page went to a printer in some corner that nobody knew existed.\nDespite all of this—your resume not actually being the thing that gets you noticed, how little time recruit- ers spend reviewing your resume, how inconsistent reviewers are, how little you can actually do to drive change—we’ve seen candidates agonize over each bullet point, #nessing each and every word. But if the people reading your resume are barely skimming and can't agree on what they're looking for, it is incredibly di%cult to optimize.\nYou need to get someone to consider you. That is done through personal outreach, not picking out your resume from the black hole that is an ATS (Applicant Tracking System). Make your resume good enough for when someone opens your email and is intrigued, but don't stress too much about it. Job searches are stressful enough.\n\nC H A P T E R  7\nI\nC H A P T E R  7\nI\nC H A P T E R  7\nI\nG E T T I N G  I N  T H E  D O O R\nMaterial for this chapter at bctci.co/getting-in-the-door\nWe recently surveyed interviewing.io users about which methods of getting in the door at companies worked well for them in their last job search. Here are the results.1 Interestingly, these results were quite consistent between company types; channels that worked well for FAANGs tended to work well for startups and vice versa.\nEﬀ ective recruiting channels, ranked from most to least eﬀ ective: •\nWarm referrals (referrals from people who know you well and have worked with you in the past) •\nIn-house recruiters contact you •\nApply online •\nCold outreach to hiring managers\nIneﬀ ective recruiting channels: •\nCold outreach to recruiters •\nCold referrals (referrals from people who don’t know you) •\nAgency recruiters contact you\nOverall, the most useful channels were in-house recruiters (when they reached out to you) and warm referrals.\nObviously, whether you know someone at a company you’re interested in and whether recruiters reach out to you are largely out of your control. So what can you control?\nHere are all of these channels, graphed with respect to both their e$ ectiveness and how much control you have over them.\nIt turns out that cold outreach to hiring managers, when done right, is both e$ ective and controllable. In our experience, that channel is both misused and underutilized and is the best bet for many candidates (see \"What to Actually Do\" on page 59).\nNow let’s look at each channel in detail. 1  This data came primarily from surveying experienced engineers (4+ years), rather than juniors.\n\n54\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nFigure 1. Channels graphed with respect to both their e$ ectiveness and how much control you have over them.\nIN'HOUSE RECRUITERS CONTACT YOU\nYou have little control over this. The best thing you can do is to make sure that the things recruiters look for (pg 44) are well-highlighted on your resume (if it’s public-facing) and on your LinkedIn. The rest is luck.  APPLY ONLINE\nIf you’ve ever applied to jobs online, then you know it’s kind of like screaming into a black hole.2 Though some candidates get value out of this channel, it’s still a numbers game.\nAccording to recruiting tool Gem, applicants who come from recruiter outreach (called “outbound” in recruiter lingo) are 6 - 10X more likely to get hired than applicants who apply online (called “inbound”). 3\nAs Lyft recruiting manager Nate Wylie put it:\nOur data… showed higher pass-through rates for candidates [we reached out to] at each stage of the interview process vs. applicants via the careers page. It’s not that we want to ignore applicants; it’s just that historically we don’t get what we’re looking for—and with speed—through that channel.4\nThe silver lining here is that when you don’t hear back from a company (or even when you get an automatic rejection email wishing you \"the best in your future endeavors\"), it’s not because a human looked at your resume and made a deliberate, thoughtful decision about you. It’s tempting to think that way because it plays so well into our insecurities. The reality is that a human probably never saw your resume in the # rst place. 2  Or, like faxing your resume to an old machine buried in a closet that no one has entered in years. 3  https://www.gem.com/blog/outbound-candidates-more-likely-to-be-hired 4  Having been a recruiter myself, I (Aline) can con# rm that many companies do indeed ignore their online careers page.\nMany years ago, when I # rst joined the recruiting team at a top-tier startup, I spent my # rst few days going through the resumes of people who had applied online. I found a treasure trove of candidates, including very experienced applicants from top-tier companies. But no one had seen these applicants because no one had been monitoring inbound activity for months!",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 57,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "1 Interestingly, these results were quite consistent between company types; channels that worked well for FAANGs tended to work well for startups and vice versa."
        }
      ]
    },
    {
      "title": "CHAPTER 7 ▸ GET TING IN THE DOOR",
      "content": "56\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nWhile both large and small startups use agencies liberally, clearly the value to candidates is limited.6 Out of all of our survey respondents, only a handful of our users said that agencies were useful to them, and of those who mentioned agencies, the majority said that they were the worst channel.\nWe won’t belabor the point, but it’s probably not in your best interest to spend much time working with agency recruiters. It has an opportunity cost and not much upside. And you can routinely get screwed in salary negotiations when you work with an agency recruiter pg 29, if you even get that far.\nCOLD OUTREACH\nNot all cold outreach is created equal, for two reasons. First, there’s your audience: hiring managers vs. recruiters. And then there’s the quality of the outreach itself. We'll talk more about how to write the kinds of messages that will get you responses in (pg 61), but #rst, let’s talk about the audience.\nYou can see in our survey results that cold outreach to hiring managers was net positive for FAANG/FAANG- adjacent companies and neutral for the other company types. Cold outreach to recruiters, on the other hand, was net negative for both FAANG/FAANG-adjacents and small startups and neutral for large startups.\nIgnoring the quality of the outreach for a moment, which we expect is probably comparable for both types, why does this di$erence exist?\nIf you had to answer the question of who’s the right person to reach out to about jobs, your gut instinct might be to say it’s recruiters. After all, hiring good people is o%cially their job! But what does “good” really mean?\nCOLD OUTREACH TO RECRUITERS DOESN’T WORK\nWhen I ran my own recruiting agency, I kept running into the same wall. I’d present candidates who didn’t look good on paper but who I had strong reason to believe were actually good. Recruiters at my client companies, by and large, would not entertain those candidates because it was simply too risky for them. Engi- neering time is precious, and if a recruiter presents a candidate who doesn’t #t the mold and that candidate ultimately doesn’t work out, it’s a strike against the recruiter. On the other hand, if a recruiter continually presents “safe”, name-brand candidates, some of whom make it through and some of whom do not, no one can blame you. It’s the whole adage about how no one ever got #red for choosing IBM, except with people.\nTo put it really concretely, I’d expect that as an in-house recruiter, if you presented 10 name-brand candidates, 8 of whom didn’t get an o$er, 1 of whom did but was clearly never interested in your company, and 0 of whom got hired, no one would bat an eye. On the other hand, if you presented 10 candidates, all of whom looked kind of weird on paper, 2 of whom got o$ers, and 1 of whom got hired, you’d probably get a stern talking to.7\nYou might think that, over time, companies would start to track which recruiters bring in candidates who actually get hired and reward those recruiters. The reality is that most recruiters aren’t evaluated this way because it takes too long. 6  We’d argue that the value to companies is limited as well. Though there are a handful of excellent agency recruiters out there, most are terrible. The hard thing is that, as an employer, you can’t immediately tell who’s terrible, and you end up wasting a bunch of time reviewing pro#les of candidates who might look promising on the surface, but because of selection bias (these are the people who decided to work with bad agency recruiters, after all) are not a #t. That or they’re not interested in your company (and have possibly never even opted in to talk to you) or both. 7  One of the #rst companies I worked with when I was running my own agency made a deal with me after seeing the non-traditional kinds of candidates I presented. They said that, though they’d be down to talk to the #rst 3 candidates\nI sent their way, if most of them didn’t make it to at least onsite, I was going to be #red. Not only did they work with me for a long time, this company later became one of interviewing.io’s #rst customers.",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 59,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "10 name-brand candidates, 8 of whom didn’t get an o$er, 1 of whom did but was clearly never interested in your company, and 0 of whom got hired, no one would bat an eye. On the other hand, if you presented 10 candidates, all of whom looked kind of weird on paper, 2 of whom got o$ers, and 1 of whom got hired, you’d probably get a stern talking to.7"
        }
      ]
    },
    {
      "title": "CHAPTER 7 ▸ GET TING IN THE DOOR",
      "content": "58\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nWith that sad reality in mind, here’s the good news: there is someone who’s actually incentivized to make hires and is much more open-minded: the hiring manager!9\nREACH OUT TO HIRING MANAGERS INSTEAD\nUnlike recruiters, hiring managers are judged on how quickly and e$ectively they’re able to build stu$, and are—directly or indirectly—incentivized to grow headcount.10 For hiring managers, it’s not about the appear- ance of doing the work; it’s about the cold, hard reality of whether the work got done. And because they’re judged on actually getting stu$ done, hiring managers are also much more incentivized than recruiters to take risks.\nOutside of needing more people to build things, hiring managers are also incentivized to hire for their teams because the better they are at recruiting and #lling headcount, the more likely they are to get promoted.\nSo, armed with an understanding of how hiring works behind the scenes, here’s our recommended, hyper- practical approach. It starts with treating your job like a sales funnel.\nTREAT YOUR JOB SEARCH LIKE A SALES FUNNEL\nIf you’re an engineer, chances are you haven’t ever done sales.11 But if you do sales for any appreciable amount of time, you’ll start thinking about everything in life as a funnel.\nFunnels are wide at the top and narrow at the bottom. That’s why they’re such an apt metaphor for the sales process—you do a lot of outreach, and you don’t get many responses. Of the responses you do get, relatively few will do the thing you want them to do. And even fewer will ultimately “close” (aka, buying—or, in this case, hiring).\nIn your engineering career, you’ve mastered many abstract concepts that are much more complex than a funnel. Despite its simplicity, however, the funnel is one of the hardest concepts to internalize emotionally, especially for people who are used to having control over outcomes. When you write code for n hours, you can expect that you will build m features.\nIn sales though, you do a lot of work, very little of it will pan out, and when it does pan out, it can feel almost random; an impersonal, mediocre email gets a response while your beautifully targeted email is met with deafening silence.\nAnd then there’s rejection. When you apply to jobs online and don’t hear back, it stings, but the sting is softened by the possibility that a human never even saw your application. You’re not reaching out to people when you apply online; you’re dealing with a bureaucratic machine. 9  Note that if you’re interested in smaller startups (Series A and below), you can substitute “founder” for “hiring manager” in these steps. Founders are the most incentivized to get shit done and take risks, regardless of company size and stage, but at larger startups, they may be less likely to read cold emails because they get bombarded with all manners of requests and sales pitches. At a Series B or C company or at public companies with fewer than, say, 3000 employees, in addition to hiring managers, you should also target Directors and VPs — they have the power to get things done and aren’t so far removed from feeling the pain of not #lling roles that making an extra hire or two is out of their purview.\nAt large public companies, targeting Directors and above doesn’t make much sense — they ARE too far removed from doing the work to make individual hires. If you do contact them, the best outcome is that they’ll pass you on to one of their direct reports. 10  Yes, hiring managers are actually sometimes evaluated on their ability to hire. Moreover, the more headcount a manager is able to command, the greater their political capital inside the organization, and the easier it is to not only get promoted but also get hired at their next company for increasingly senior titles. 11  Maybe you had a job in high school selling Cutco knives or magazines, in which case what we’re about to say will resonate.",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 61,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "11 But if you do sales for any appreciable amount of time, you’ll start thinking about everything in life as a funnel."
        },
        {
          "type": "snippet",
          "code": "9  Note that if you’re interested in smaller startups (Series A and below), you can substitute “founder” for “hiring manager” in these steps. Founders are the most incentivized to get shit done and take risks, regardless of company size and stage, but at larger startups, they may be less likely to read cold emails because they get bombarded with all manners of requests and sales pitches. At a Series B or C company or at public companies with fewer than, say, 3000 employees, in addition to hiring managers, you should also target Directors and VPs — they have the power to get things done and aren’t so far removed from feeling the pain of not #lling roles that making an extra hire or two is out of their purview."
        }
      ]
    },
    {
      "title": "CHAPTER 7 ▸ GET TING IN THE DOOR",
      "content": "60\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co •\nJust targeting managers, not Directors or VPs. Google is a huge organization. You want the people who are most likely to help, and they’re the ones who are struggling to hire for their teams. •\nIn position for less than 2 years: These are the people who are still trying to prove themselves and who are less likely to have a long-standing relationship with their recruiter to the point where they only rely on internal recruiting and overlook other sources of candidates. •\nGeography: Let's focus on the places we most want to work. • 1st- or 2nd-degree connection: This way, when they look you up, they’ll see some social proof. You can expand this to 3rd-degree connections if needed.\nOnce you have your list, put their LinkedIn URLs into a spreadsheet. Then, do a pass through your targets’ pro# les and see if any of them link to personal websites, social media accounts, blogs, or anything else that will help you # nd common ground with them. Add any useful links in your spreadsheet because we’ll be mining them when we actually write our emails.\nIf you come from a non-traditional background (e.g., you didn’t attend a top school or work at a prestigious company), consider adding startups to your target list, if you’re at all open to working at a startup. Then try to # nd startups who have a founder from a non-traditional background like you—you’d be surprised by how many founders don’t have a traditional pedigree (many end up taking the founder road because they get tired of being overlooked). If you can # nd people like you, it’ll be easier to establish common ground, and you’ll be more likely to get a response.\nLook up their email addresses\nOnce you have your list of LinkedIn URLs, use a tool like RocketReach to look up their emails. RocketReach is a nice tool for email discovery because 1) it takes LinkedIn URLs as inputs and 2) its email database is generally up-to-date and correct.",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 63,
      "font_size": 8
    },
    {
      "title": "CHAPTER 7 ▸ GET TING IN THE DOOR",
      "content": "62\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nContract management, Business operations, Program Management, Leadership, Strategy planning,\nVendor negotiation, Consulting, Product Integrations).\nI really do appreciate your time and excited to work with you in my search. My detailed resume is attached, if you've time this week, we can catch up over phone or a co$ee to provide you further details.\nAppreciate your assistance!\nThanks,\nREDACTED\n\n▶\nDon’t do this! This email sounds generic and has probably been sent to many people.\nHi Aline,\nI am writing to express my strong interest in joining the engineering team at interviewing.io. With my extensive experience in engineering, I would love to discuss how I can help Interviewing.io achieve even greater heights. I’ve had success driving growth for companies like REDACTED, Amazon, Tata Group and\nI believe my skills would be incredibly bene#cial for your team.\nQuick Highlights: •\nAchieved a 20% month-over-month improvement in system performance metrics at REDACTED through optimized engineering work&ows and scalable solutions. •\nPlayed an integral role in building and deploying data-driven algorithms at Amazon, scaling the seller's GMV by 3X via enhanced platform reliability and feature innovation. •\nCore skills include Software Development, Distributed Systems, API Design, Cloud Infrastructure (AWS, GCP, Azure), and Machine Learning Engineering.\nPlease #nd my CV here\nWould you be open to a quick chat this week to explore how I could contribute to Interviewing.io's success?\nI’m looking forward to the possibility of working with you.\nRegards,\nREDACTED\n\n▶\nDon’t do this either! There is nothing here about why this candidate is a good #t for interviewing.io, and the bullets aren’t compelling enough on their own.\nEmails like the above are impersonal and tell me that you didn't really invest time in understanding me and my company. If you didn't invest in me, why should I invest in you? •\nDon't open the email with how they found you. We really don't care, and you want the #rst line to be meaningful. •\nDon't be overly formal in how you address the person. Use their $rst name.13 •\nDon't get their gender wrong (e.g., referring to a woman as \"sir\"); you’d be surprised how often this happens). •\nDon't paste in a generic cover letter. These are sure to get ignored—if you’re not going to put in the e$ort to write to me personally, why would I put in the e$ort to read your email? 13  In some cultures, using your target’s #rst name might come o$ as overly informal. Use your best judgment here if outside the U.S.",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 65,
      "font_size": 8
    },
    {
      "title": "CHAPTER 7 ▸ GET TING IN THE DOOR",
      "content": "64\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co\n\n•\nIn the absence of something technical, it’s okay to reference something non-technical you've seen on their public pro#les. We've seen candidates connect with strangers based on a shared love of Star Wars or Hearthstone.\nWe understand that you won't always be able to #nd common ground. But if you can, it'll help you a lot, especially if you’re light on social proof or accomplishments.\nSelling yourself\nSelling yourself is usually about one of two things:\n\n•\nAccomplishments: What have you built or created?\n\n•\nSocial proof: Have you worked at a top company or attended a top school?\nSome people are fortunate enough to have both, but many will have just one. That’s okay. We’ll work with what you have!\nAccomplishments should answer the following questions. What have you done that most other people haven’t? What have you done that, if you were to tell it to a stranger, would cause them to pause and think you're special or interesting?\nBelow are some examples:\n\n•\nA blog post you wrote about a technical topic did well16 on Hacker News, Reddit, or social media.\n\n•\nSomething you built got some great press when your company announced its last funding round.\n\n•\nYou refactored a piece of code at work, and now it runs 100X faster.\n\n•\nYou won a company hackathon.\n\n•\nYou’re a core contributor to a notable open-source project.\n\n•\nSomething you built is being used by a number of other people.\nRemember, even if you're a new engineer in the #eld, and you don't have job experience yet, you still have accomplishments you can highlight!\nSocial proof is about your pedigree—attending a top school, working at a company known for having a high engineering bar, etc. People won't click on links or open your resume until after they're interested, so you need to get them interested right away. That is: you should spoon-feed them the most impressive-sounding things about you out of the gate. This may feel strange and uncomfortable like you’re bragging. However, we assure you that it’s necessary to get your target’s attention. They’re not thinking you’re bragging. They’re thinking, “Is this worth my time?” Your job is to convince them that it is.\nAlso, don’t forget to link to your LinkedIn or personal website. Attaching a resume may feel too heavy-handed for a #rst conversation, as we discussed earlier (pg 63).\nHere's an example of a prospective intern, leveraging both social proof and accomplishments, to write a compelling email.\nHello Ms. Lerner,\nMy name is REDACTED, and I am a sophomore at MIT.\nI wanted to reach out directly to you, as I am looking for a possible opportunity to sharpen my technical skills over this REDACTED and truly love Interviewing.io’s mission in reimagining the art of engineering recruitment!\nI have extensive experience in software development, having interned at IBM, MIT CSAIL (being featured by Redacted Newspaper 1 and Redacted Newspaper 2), and REDACTED previously (resumes attached 16  Many people think that for something to be worth mentioning, it has to have gone viral. That’s simply not correct – in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 67,
      "font_size": 8
    },
    {
      "title": "CHAPTER 7 ▸ GET TING IN THE DOOR",
      "content": "66\nBEYOND CRACKING THE CODING INTERVIEW ▸ JOB SEARCHES, START TO FINISH\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nIf your call to action is to set up a time to talk (which it probably should be because it’s speci# c), we recom- mend providing them with a time window. \"Would you want to meet up sometime?\" puts the burden on the recipient to pose a time, while \"Can we talk next Monday at 3pm?\" is problematic because, most likely, they aren't free then. Instead, try something like the candidate above did: \"Would you be available sometime within the next two weeks for a thirty-minute call? I'm free most weekdays between X and Y and can pretty much do any time on weekends if those are better for you.\"\nHow long it takes\nSo, how long does the outreach portion take? Below are the rough steps and our estimates for each one.\nDepending on the length of your list and how hard-to-# nd your targets are, these numbers may change. 2 days:\nCreate a target list 1 day:\nWrite your # rst draft email template 3 days:\nGo through your target list and # nd personal tidbits about each target (e.g., blog posts) 2 days:\nWrite outreach to the # rst batch 1 week:\nWait for results so you can iterate on your outreach 2 days:\nWrite outreach to the second batch 1 week:\nWait for results so you can iterate on your outreach 2 days:\nWrite outreach to the third batch 1 week:\nWait for results so you can iterate on your outreach\nOptimistically, the above adds up to 5 weeks. The hard part about this kind of work is that it comes in stops and starts, and it’s non-deterministic; you're somewhat at the mercy of your recipients and their schedule.\nWe’ll talk in Managing Your Job Search (see \"How to manage timing for practice vs. outreach\" on page 82) about how to time outreach with interview prep; depending on your workload and # nancial situation, you can either run these concurrently or space them out.\nCOLD OUTREACH TEMPLATES\nHere are two templates you can use for cold outreach. The # rst one gets higher response rates but requires more e$ ort and can't always be used. The second one is weaker but more generic. You can choose what # ts your needs best. We expect both of these templates to be far more e$ ective than throwing your resume into the black hole of online portals.\nTemplate: If your target has an online presence\nThis template includes common ground, accomplishments/social proof, and a call to action. It will get you the highest response rates, possibly anywhere from 25 - 50%. However, it can be challenging to use because it requires you to 1) do a deep dive into their online presence and 2) tie what you # nd back to something you’re doing. Sometimes, that tie-in might be tenuous or non-existent (in which case, maybe skip it).\nCopy/paste this template at bctci.co/outreach-what-to-say-2.\nHi {First Name},\nI’ve read your work on {some details about their writing}, and I {insert your thoughts on the work}. {If you can make the connection between their work and yours, talk about something similar you’ve been working on.}",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 69,
      "font_size": 8
    },
    {
      "title": "SNEAK PEEK",
      "content": "BEYOND\nCRACKING the\nCODING INTERVIEW\nPass Tough CODING Interviews, get noticed, and Negotiate succesfully\n\n0\nINTERVIEW CHECKLIST\nBEYOND CRACKING THE CODING INTERVIEW\n\n1\nSTUDY PLAN\nBEYOND CRACKING THE CODING INTERVIEW\nBOOSTERS\n\nCracking the Coding Interview 189 Programming Questions and Solutions\nCracking the PM Career\nThe Skills, Frameworks, and Practices to Become a Great Product Manager\nCracking the PM Interview\nHow to Land a Product Manager Job in Technology\nCracking the Tech Career\nInsider Advice on Landing a Job at Google,\nMicrosoft, Apple, or Any Top Tech Company\n\nBEYOND\nCRACKING the\nCODING INTERVIEW\nGAYLE L. MCDOWELL\nMIKE MROCZKA\nALINE LERNER\nNIL MAMANO\nCareerCup, LLC\nPalo Alto, CA\n\nBEYOND CRACKING THE CODING INTERVIEW\nCopyright © 2025 by CareerCup.\nAll rights reserved. No part of this book may be reproduced in any form by any electronic or me- chanical means, including information storage and retrieval systems, without permission in writing from the author or publisher, except by a reviewer who may quote brief passages in a review.\nPublished by CareerCup, LLC, Palo Alto, CA. Compiled Feb 15, 2025.\nFor more information, or to enquire about bulk or university copies, contact support@careercup.com.\nPlease report bugs or issues at beyondctci.com. 978-1955706001 (ISBN 13)\n\nTo my favorite coders, Davis and Tobin—\nGayle\nTo my dog, my wife, and our readers (and not necessarily in that order)—\nMike\nTo my two wonderful kids (or if I have more, then whichever two are the most wonderful)—\nAline\nAls meus pares—\nNil",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 9,
      "font_size": 9
    },
    {
      "title": "CHAPTER 29 ▸ BINARY SEARCH",
      "content": "330\nBEYOND CRACKING THE CODING INTERVIEW ▸ CATALOG OF TECHNICAL TOPICS\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nSomething that is typically tricky with binary search is the exit condition of the loop  Here, we keep going until l and r are next to each other (i e , until the 'unknown' region in Figure 4 is empty), which happens when r - l is 1  That's why the condition says r - l > 1 4\nAnother tricky part is knowing what to return  With this recipe, we just need to reason about the transition point: do we need the fi nal 'before' or the fi rst 'after'?\nWe recommend starting by defi ning the is_before() function  Keep in mind that, for binary search to work, we must defi ne it in such a way that the search range is monotonic: all the 'before' elements must appear before all the 'after' elements  That's why binary search doesn't work on unsorted arrays  Revisiting Solution 29.1\nHere is how we applied the recipe in Solution 29 1: we defi ned the 'before' region as the elements < target, and the 'after' region as the elements ≥target\nIn the initialization, we have the three edge cases from the recipe to ensure that l is 'before' and r is 'after': 1 if n == 0: 2   return -1 3 l, r = 0, n - 1 4 if arr[l] >= target or arr[r] < target: 5   if arr[l] == target: 6     return 0 7   return -1\nThe while loop is just like the recipe, except that we didn't factor out is_before() into a helper function: 1 while r - l > 1: 2   mid = (l + r) // 2 3   if arr[mid] < target: 4     l = mid 5   else: 6     r = mid\nFinally, when we fi nd the transition point, we consider what that means: l is at the largest value smaller than the target, and r is at the smallest value greater than or equal to the target  So, if the target is in the array at all, it must be at index r 1 if arr[r] == target: 2   return r 3 return -1\nWhat to do at the end depends on how we defi ne the 'before' region  We could have also defi ned 'before' as \"less than or equal to the target,\" in which case, at the end, we would have to check the element at l instead of r\nThis recipe is a bit like a one-size-fi ts-all pair of socks  While more concise (but less reusable) implementations may exist for some problems, there is value in needing only one easy-to-remember recipe\nTRANSITION-POINT PROBLEM SET\nFor each of the following problems: •\nReframe it as fi nding a transition point by defi ning 'before' and 'after' regions •\nFind the location of l and r after fi nding the transition point for the given example input 4  We could have also written this in other ways, like r > l + 1  One way to remember the formula for the number of elements between l and r, r-l-1, is that it looks like a sleepy cat",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 18,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "1 if n == 0: 2   return -1 3 l, r = 0, n - 1 4 if arr[l] >= target or arr[r] < target: 5   if arr[l] == target: 6     return 0 7   return -1"
        },
        {
          "type": "snippet",
          "code": "1 while r - l > 1: 2   mid = (l + r) // 2 3   if arr[mid] < target: 4     l = mid 5   else: 6     r = mid"
        },
        {
          "type": "snippet",
          "code": "1 if arr[r] == target: 2   return r 3 return -1"
        }
      ]
    },
    {
      "title": "CHAPTER 29 ▸ BINARY SEARCH",
      "content": "332\nBEYOND CRACKING THE CODING INTERVIEW ▸ CATALOG OF TECHNICAL TOPICS\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nANSWER 2\nSQUARED TARGET\nWe should return arr[l], since the last number in the 'before' region is the largest number that still works\nANSWER 3\nFIRST NON-NEGATIVE\nIncluding 0 in the 'before' region would be a mistake: if there are multiple zeros, l would point to the last one, but the goal is to return the fi rst one\nFirst 'p': The 'before' region consists of words that start with a–o and the 'after' region consists of words that start with p–z  If there are words that start with 'p', the fi rst one will be at index r\nIncluding words that start with 'p' in the 'before' region would be incorrect: if we inserted another word starting with 'p,' like \"pear,\" l would point to the last word starting with 'p' rather than the fi rst one\nANSWER 4\nNEAREST ELEMENT\nPost-processing requires a bit of thought  If the target is in the array, it will be at l  We can peek at arr[l] and return l if it is the target  Otherwise, we need to fi nd the closest value to it, which could be at l or r  We return either l or r, based on whether arr[l] or arr[r] is closer\nANSWER 5\nDECK CUT\nTrick question! This doesn't require binary search as the answer is always 52 - deck[0]  Still, we could fi nd the transition point from 52 back to 1 with a binary search  The 'before' region would be numbers ≥deck[0]\nThe l pointer would end up at the 52 and the r pointer at the 1  We would return l\nVALIDATION & DRAWING ADVICE\nVisualizing the binary search in an interview is helpful both for you and your interviewer  Instead of trying to verbally explain what you're doing, show them in the shared editor  Our suggestions are similar to the Two\nPointers chapter (pg 296): •\nWrite each pointer (l, r, and m for the midpoint) on its own line so you can move them independently with ease",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 20,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "0 in the 'before' region would be a mistake: if there are multiple zeros, l would point to the last one, but the goal is to return the fi rst one"
        },
        {
          "type": "snippet",
          "code": "52 and the r pointer at the 1  We would return l"
        }
      ]
    },
    {
      "title": "CHAPTER 29 ▸ BINARY SEARCH",
      "content": "344\nBEYOND CRACKING THE CODING INTERVIEW ▸ CATALOG OF TECHNICAL TOPICS\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nONLINE RESOURCES\nOnline resources for this chapter include: •\nA chance to try each problem in this chapter in AI Interviewer •\nInterview replays that show specifi c mistakes people make with binary search problems •\nFull code solutions for every problem in the chapter in multiple programming languages\nTry online at  bctci co/binary-search\n\nC H A P T E R  3 8  AI interviewer, replays, and more materials for this chapter at bctci co/sliding-windows\nI\nC H A P T E R  3 8\nI\nC H A P T E R  3 8\nI\nS L I D I N G  W I N D O W S ▶\nPrerequisites: None\nIn this chapter, we will use the sliding window technique to tackle problems about fi nding or counting subarrays 1\nWe will use the following setting for problems throughout this chapter: a bookstore is looking at the number of book sales  The sales for each day are stored in an array of non-negative integers called sales  We say a good day is a day with at least 10 sales, while a bad day is a day with fewer than 10 sales  An interviewer could ask questions such as the following: •\nFind the most sales in any 7-day period (Problem 1) •\nFind the most consecutive days with no bad days (Problem 5) •\nFind the longest period of time with at most 3 bad days (Problem 8) •\nFind the shortest period of time with more than 20 sales, if any (Problem 14) •\nCount the number of subarrays of sales with at most 10 bad days (Problem 18) •\nCount the number of subarrays of sales with exactly 10 bad days (Problem 19) •\nCount the number of subarrays of sales with at least 10 bad days (Problem 20)\nAll these questions receive an array as input, sales  The fi rst four ask us to fi nd a subarray, while the last three ask us to count subarrays, making them ideal candidates for the sliding window technique  In this chapter, we will cover variants of the sliding window technique to tackle each of the mentioned problems and more\nThe basic idea of a sliding window is to consider a subarray (the \"window\"), marked by left (l) and right (r) pointers  We move or \"slide\" the window to the right by increasing the l and r pointers, all while computing some value about the current window 2 3 1  Beyond DS&A, the term 'sliding window' is also used in network protocols like TCP (https://en wikipedia org/wiki/\nTransmission_Control_Protocol) and in machine learning architectures like convolutional neural networks (https:// en wikipedia org/wiki/Convolutional_neural_network) 2  A sliding window is a special case of the two-pointer technique  Like in the Two Pointers chapter, we use the terms \"pointer\" and \"index\" interchangeably 3  Sliding windows are usually not useful for problems about subsequences because they don't have a good way of dealing with \"skipping\" elements  Subsequence problems are more commonly tackled with other techniques that we will see later, like dynamic programming or backtracking\n\n510\nBEYOND CRACKING THE CODING INTERVIEW ▸ CATALOG OF TECHNICAL TOPICS\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nFigure 1. Window 1 is a subarray from l = 4 (included) to r = 10 (excluded)  We can slide it and get Window 2 by increasing l and r\nTHE ELEMENTS OF A SLIDING WINDOW PROBLEM\nProblems where sliding windows may be useful tend to involve the following: •\nYou have to fi nd a subarray of an input array •\nThis subarray must satisfy some constraint, which separates the subarrays into valid and invalid  Examples of constraints: »\nThe length must be k (for some given value k) »\nThe sum must be at least / at most / exactly k »\nIt must contain or not contain specifi c elements »\nIt must not contain repeated elements •\nThere is usually an objective that makes some subarrays \"better\" than others  For example: »\nMaximize/minimize the length of the window »\nMaximize/minimize the sum of the elements in the window »\nMaximize/minimize the number of distinct elements in the window •\nLess commonly, if there is no objective, the goal may be to count the number of valid subarrays\nFor instance, in the fi rst bookstore problem, the constraint is \"the length of the subarray must be 7,\" and the objective is to maximize the sum  In the last one, the constraint is \"at least 10 bad days,\" and there is no objective since it is a counting problem  Can you identify the constraints and objectives for the other bookstore problems?\nBRUTE FORCE BASELINE\nMost sliding window problems can be solved with a brute force algorithm that checks every subarray one by one  If the subarray is valid, then we check if it's the best one so far\nThe brute force solution is correct, but we'd ideally like a more optimized solution  Before diving into how to do this, it can be useful to consider what our upper bound, lower bound, and target runtimes might be (see the Boundary Thinking chapter) •\nUpper bound: O(n3) will be the most common brute force upper bound across sliding window prob- lems, where n is the length of the input array  There are O(n2) subarrays to search through  For each of those, checking whether it is valid and the best so far in a naive way could take O(n) time •\nLower bound: if we don't look at every element in the input, we won't even know what some substrings look like, so O(n) is the natural lower bound •\nTarget: the sliding window technique often allows us to reach a linear runtime, so we should aim for that",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 34,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "snippet",
          "code": "3 8  AI interviewer, replays, and more materials for this chapter at bctci co/sliding-windows"
        },
        {
          "type": "snippet",
          "code": "1\nWe will use the following setting for problems throughout this chapter: a bookstore is looking at the number of book sales  The sales for each day are stored in an array of non-negative integers called sales  We say a good day is a day with at least 10 sales, while a bad day is a day with fewer than 10 sales  An interviewer could ask questions such as the following: •"
        },
        {
          "type": "snippet",
          "code": "20 sales, if any (Problem 14) •"
        },
        {
          "type": "snippet",
          "code": "2  A sliding window is a special case of the two-pointer technique  Like in the Two Pointers chapter, we use the terms \"pointer\" and \"index\" interchangeably 3  Sliding windows are usually not useful for problems about subsequences because they don't have a good way of dealing with \"skipping\" elements  Subsequence problems are more commonly tackled with other techniques that we will see later, like dynamic programming or backtracking"
        },
        {
          "type": "snippet",
          "code": "10 bad days,\" and there is no objective since it is a counting problem  Can you identify the constraints and objectives for the other bookstore problems?"
        }
      ]
    },
    {
      "title": "CHAPTER 38 ▸ SLIDING WINDOWS",
      "content": "516\nBEYOND CRACKING THE CODING INTERVIEW ▸ CATALOG OF TECHNICAL TOPICS\nView online materials for Beyond Cracking the Coding Interview at bctci.co 1 def max_no_bad_days(sales): 2   l, r = 0, 0 3   cur_max = 0 4   while r < len(sales): 5     can_grow = sales[r] >= 10 6     if can_grow: 7       r += 1 8       cur_max = max(cur_max, r - l) 9     else: 10       l = r+1 11       r = r+1 12   return cur_max\nFigure 3. Illustration of the sliding window for max_no_bad_days()\nUnlike in the fi xed-length window case, a resetting window stays valid throughout the algorithm  We also introduced a can_grow variable to decide whether to grow or reset 6 When sales[r] is a bad day, we reset the window by moving both l and r past the problematic element\nOnce the window cannot grow anymore (r == len(sales)), we stop, as we surely won't fi nd a bigger window by shrinking it\nWe can put these ideas together in a general recipe for resetting window problems  RECIPE 2. RESETTING WINDOW RECIPE. resetting_window(arr):   initialize:   - l and r to 0 (empty window)   - data structures to track window info   - cur_best to 0   while we can grow the window (r < len(arr))     if the window is still valid with one more element       grow the window (update data structures and increase r)       update cur_best if needed     else       reset window and data structures past the problematic element   return cur_best\nNow that we have seen two types of sliding windows, it is worth mentioning that problems can fi t the criteria for more than one window type\nRecall Problem 38 4: \"Given the array best_seller and a number k with 1 ≤ k ≤ len(sales), return whether there is any k-day period where every day has the same best-selling title \" We can solve it with a fi xed-length window like we saw, or with a resetting window: 6  You could skip declaring the variable can_grow and put the condition directly in the if statement, but the name \"can_grow\" makes it clear what the if/else cases correspond to, so it is extra easy for the interviewer to follow",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 40,
      "font_size": 8,
      "code_blocks": [
        {
          "type": "function",
          "code": "def max_no_bad_days(sales): 2   l, r = 0, 0 3   cur_max = 0 4   while r < len(sales): 5     can_grow = sales[r] >= 10 6     if can_grow: 7       r += 1 8       cur_max = max(cur_max, r - l) 9     else: 10       l = r+1 11       r = r+1 12   return cur_max"
        },
        {
          "type": "snippet",
          "code": "1 def max_no_bad_days(sales): 2   l, r = 0, 0 3   cur_max = 0 4   while r < len(sales): 5     can_grow = sales[r] >= 10 6     if can_grow: 7       r += 1 8       cur_max = max(cur_max, r - l) 9     else: 10       l = r+1 11       r = r+1 12   return cur_max"
        },
        {
          "type": "snippet",
          "code": "0 (empty window)   - data structures to track window info   - cur_best to 0   while we can grow the window (r < len(arr))     if the window is still valid with one more element       grow the window (update data structures and increase r)       update cur_best if needed     else       reset window and data structures past the problematic element   return cur_best"
        }
      ]
    },
    {
      "title": "CHAPTER 38 ▸ Sliding Windows",
      "content": "536\nBEYOND CRACKING THE CODING INTERVIEW ▸ CATALOG OF TECHNICAL TOPICS\nView online materials for Beyond Cracking the Coding Interview at bctci.co\nSliding window triggers: The input type is just an array of numbers or a string, and maybe a number  The lower bound is linear\nKeywords: subarray, substring, length, contiguous, consecutive, range, longest, or shortest\nAt this point, you should be ready to start adding sliding window problems to your practice rotation  You can fi nd the problems in this chapter and additional problems in the companion AI interviewer\nONLINE RESOURCES\nOnline resources for this chapter include: •\nA chance to try each problem in this chapter in AI Interviewer •\nInterview replays that show specifi c mistakes people make with  sliding windows problems •\nFull code solutions for every problem in the chapter in multiple programming languages\nTry online at  bctci co/sliding-windows",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 60,
      "font_size": 0
    }
  ]
}