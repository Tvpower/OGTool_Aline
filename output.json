{
  "team_id": "aline123",
  "items": [
    {
      "title": "It's OK to postpone your interviews if you're not ready",
      "content": "• For employers\n\n• Gift mock interviews\n\n# It's OK to postpone your interviews if you're not ready\n\nAt interviewing.io, we’ve seen hundreds of thousands of engineers go through job searches, and the biggest mistakes we see people make are all variations on the same theme: not postponing their interview when they aren’t ready.\n\nI’ve found myself repeating that it’s OK to postpone interviews so often that I finally broke down and decided to make it a blog post. It’s very simple advice, so the bulk of this post will be spent trying to convince you that it’s fine to postpone. And then of course I’ll tell you what to say.\n\nDo any of these situations sound familiar?\n\n• A recruiter from a FAANG (or other top-tier) company contacts you out of the blue and invites you to interview. You do the recruiter call, and it goes well. The recruiter reaches out to schedule your technical phone screen. You haven’t practiced enough, and you know it, but you are scared to tell the recruiter that you want to postpone the interview by a few months (months?!) because the position may no longer be there. So, you plow ahead, do the phone screen, fail it, and then you’re frozen out for a year.\n\n• You were able to postpone your technical phone screen and take the time to study up on data structures & algorithms problems. You do well in the interview. But then your recruiter schedules your onsite the following week. Because you were so focused on DS&A prep, you haven’t had much time to study up on system design. You fumble the system design interview during the onsite, and you either get rejected or get down-leveled.\n\nBoth of these situations are extremely common, but they’re both preventable. You can just ask to postpone. There are a few edge cases where that’s not a good idea, but in most situations, it’s the right thing to do.\n\n## When postponing is OK, and when youshouldn’ttake our advice\n\nIf you’re applying to a large company with a centralized process (in other words, a process where you interview first and get matched with a team later), postponing is almost always OK. These companies are perpetually hiring, and their open roles are evergreen.1\n\nEven if you’re applying to a large company with a decentralized process (where you interview for a specific team), we recommend postponing unless you’re extremely excited about the team you’re talking to. In that scenario, it’s possible that if you postpone, the slot will be filled. But if it’s not a perfect fit and you’d be OK with another team, we recommend postponing — in the worst case, you’ll simply get slotted into a different team.\n\nThe only time when postponing isn’t a good idea is when you’re applying to a very small company that has just one open headcount. In that scenario, it is possible that postponing will cost you the opportunity because they’ll choose another candidate. However, you can ask how likely that is to happen, up front.\n\nWith that edge case out of the way, here’s a little-known fact about how timing works at large companies: Recruiters don’t really care when you interview. Though they’d prefer that you interview sooner rather than later so they can hit their numbers, at the end of the day, they’d rather be responsible for successful candidates than unsuccessful ones.\n\nEvery recruiter, in every job search, will tell you that time is of the essence because of all the other candidates in the pipeline. Most of the time, that is irrelevant and just something they say to create an artificial sense of urgency. There are always other candidates in the pipeline because the roles are evergreen. But they have nothing to do with your prospects.\n\n## Exactly what to say to postpone your interviews\n\nYou can use this text verbatim when postponing your interviews, and, with some small edits, you can even use it several times (e.g., before the phone screen and then again before the onsite).\n\n> I’m really excited about interviewing at [company name]. Unfortunately, if I’m honest, I haven’t had a chance to practice as much as I’d like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I’ll realistically need a couple of months to prepare. How about we schedule my interview for [date]?\n\nI’m really excited about interviewing at [company name]. Unfortunately, if I’m honest, I haven’t had a chance to practice as much as I’d like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I’ll realistically need a couple of months to prepare. How about we schedule my interview for [date]?\n\nOne important thing to remember is to be conservative about how long it will take. You’ve probably heard the adage about how, when you have to estimate the time an engineering task will take, you should think of a number and double it. Here, you may even want to triple it.\n\nI’ve seen many candidates ask for 2 weeks because that feels like a reasonable thing to ask for, only to have it blow up in their face when they realize they need to ask for another extension (which is still worth doing but harder because the company may think you’re taking them for a ride). If you need two months, ask for two months.\n\n## Postponing can also be a good way to control the timing of your job search\n\nThis section is extra credit, but once you get comfortable with postponing your interviews when you’re not prepared, you can use the same skills to batch your interviews and ultimately control the timing of your job search.\n\nWhat does it mean to control the timing of your job search? Ideally, you want all of your offers to come in at the same time, both because it maximizes optionality (one company that arbitrarily offers first doesn’t rush you into making a decision) and maximizes leverage (you can negotiate from a position of power).\n\nIf you want to dive deeper into this process, take a look at a book I recently co-wrote,Beyond Cracking the Coding Interview. It includes a full chapter about how to manage your job search, which covers everything from determining the order in which to approach companies to how to speed them up and slow them down once you’re in process. There’s a lot more detail than I can touch in this post, and much of it depends on your specific circumstances, but you can probably get 50% of the way there just by postponing your interviews in batches.\n\nThe big insight here is that, except for the edge cases we discussed above, a recruiting process can be paused at any point.\n\nIn other words, you can do a bunch of outreach to companies, then do a bunch of enthusiastic recruiter calls, and THEN pause all the processes until you’re prepared to do technical phone screens.\n\nThen, you batch the phone screens.\n\nFinally, if needed, you pause again to give yourself time to prepare for onsites. Onsite interviews require a different skill set than technical phone screens. The technical phone screen isn’t about depth or fit — it’s just a way to cut people who aren’t likely to pass the onsite.\n\nThe onsite, on the other hand, isn’t just meant to cut poor performers. It’s at once a deeper dive into your technical ability and a way to gauge fit. If you’ll be interviewing with your future team (typical at companies with a decentralized process), it’s also meant to assess your ability to work together, collaborate on hard things, complement the team's existing skillset, and so on. It usually has some coding (to verify that your technical phone screen wasn’t a fluke), but the focus is usually on system design and behavioral interviews2, which are also the interviews commonly used for leveling decisions.\n\nSo, onsite prep is much more about system design and getting your stories right for your behavioral interviews. Some people can pull off prepping for both coding and sys design/behavioral at the same time. For many, depending on their existing familiarity with the material, it’s a tall order. So, it’s wise to take the time you need and prepare.\n\nThen, once you’re ready, you batch the onsites.\n\nWhen your offers come in, you should ask for extensions as needed, speed companies up, and startnegotiating(which we’ve written about in the past and which, of course, is covered at great depth in the book).\n\nFootnotes:\n\n• Yes, it’s true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you’d have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze.↩\n\nYes, it’s true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you’d have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze.↩\n\n• Some companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.↩\n\nSome companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Copy List With Random Pointers\n\n### Maximum Subarray\n\n### Fruit into Baskets\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/its-ok-to-postpone-your-interviews-if-youre-not-ready",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Read nine chapters of Beyond Cracking the Coding Interview for free",
      "content": "• For employers\n\n• Gift mock interviews\n\n# Read nine chapters of Beyond Cracking the Coding Interview for free\n\nAlong with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I wrote the official sequel toCracking the Coding Interview. It's fittingly calledBeyond Cracking the Coding Interview..\n\nNow, we're releasing9 chapters of the book for free! There are two PDFs in the linked folder:\n\n• The first seven chapters of the book, covering topics such as why technical interviews are broken, what recruiters won't tell you, why not to spend a lot of time on resumes, and how to get in the door at companies without a referral.\n\n• Two technical chapters: Sliding Windows and Binary Search. Our new take on Binary Search teaches one template that works for every binary search problem on LeetCode, with only a single-line change you need to remember. The Sliding Windows chapter features 6 unique sliding window templates that make off-by-one errors a thing of the past.\n\nTake a look, and let me know what you think. You can reach me ataline@interviewing.io.\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Recover Binary Search Tree\n\n### Decode String\n\n### Integer Replacement\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/nine-free-chapters-of-beyond-cracking-the-coding-interview",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Don't make recruiters think, or, why your resume is bad and how to fix it",
      "content": "• For employers\n\n• Gift mock interviews\n\n# Stop trying to make recruiters think, or, why your resume is bad and how to fix it\n\nYears ago, Steve Krug wrote a book about web design calledDon’t Make Me Think. It’s a classic, and the main point is that good design should make everything painfully obvious to users without demanding anything of them.\n\nResumes are just the same. Your resume shouldn’t make recruiters think. It should serve up the most important things about you on a platter that they can digest in 30 seconds or less.\n\nBefore I share some resume tips, there’s something important I want to reiterate:Don’t spend a lot of time on your resume. You can read mypiece about how resume writing is snake oil, but the TL;DR is that recruiters spend a median of 30 seconds looking at resumes, and most of that is spent looking for top-tier companies. If you don’t have top-tier companies (and in some cases niche skills), wordsmithing your bullets or rearranging your sections or changing your layout won’t help. If you do have top-tier companies, sometimes doing some wordsmithing and rearrangement will help…if your top company experience or niche skills are buried.\n\nIf you don’t have top-tier brands, the best bang for your buck is to switch from online applications to hiring manager outreach.Here’s how to do it.\n\nWith that said, I know that no matter what I say, people will still grind on their resumes instead of doing outreach. Grinding on resumes is safe. Outreach is scary and opens you up to personal (rather than impersonal) rejection. So, look, if you’re going to dosomethingto your resume, let’s make sure that that something is low-effort and high-return. Unlike the endless resume tweaking that most candidates do, these changes directly address how recruiters actually read resumes.\n\nHere we go.\n\n## Stop putting filler buzzwords in your \"About\" section. Use it to spell out the most impressive things about you.\n\nYour \"About\" or \"Summary\" section is prime real estate. Yet so many candidates fill this section with meaningless jargon like \"passionate self-starter\" or \"detail-oriented team player.\"\nInstead, use this section to explicitly tell recruiters the 2-3 most impressive things about you in plain English. This is your chance to control the narrative.Want recruiters to take something away from reading your resume?Don’t assume they’ll figure it out. They’re not reading it long enough to intuit anything. Spell it out for them verbatim in this section.\nDo this, not that:\n\n❌ Results-driven full-stack engineer with a passion for scalable systems and user-centric design✅ Senior engineer with 3 years at Amazon, promoted twice in 3 years (2X the company average)1\n\n## Don’t include your GPA if it’s under 3.8\n\nThis is simple but effective: only include your GPA if it's 3.8 or higher2. A middling GPA doesn't help your case and might inadvertently signal academic mediocrity.\n\nIf your GPA isn't stellar, focus on other academic achievements: hackathons, technical competitions, fellowships or scholarships. These provide better signals about your capabilities than a so-so GPA.\n\n## Context matters for lesser-known companies\n\nIf you've worked at Google or Facebook, recruiters instantly get what kind of company you're coming from. But when you have \"TechStartup123\" on your resume, they have no idea what they're looking at or how impressive it might be.\n\nFor lesser-known companies, include a one-line description explaining what the company does, along with any impressive metrics or investors:\n\n❌ \"Software Engineer, DevTools Inc.\"✅ \"Software Engineer, DevTools Inc. ($50M Series B from Sequoia, 2M+ active users)\"\n\nThis simple addition provides crucial context that helps recruiters evaluate your experience properly. Without it, they might discount valuable experience simply because they don't recognize the company name.\n\n## Avoid the \"job-hopper\" misperception\n\nHere's a common mistake: listing each role at the same company as if they were separate jobs. This can make recruiters think you've job-hopped, which is often seen as a red flag.\n\nInstead, group different roles under the same company heading:\n\n❌ Listing separate entries for \"Junior Developer at XYZ\" and \"Senior Developer at XYZ\"✅ \"XYZ Company - Senior Developer (2021-Present) - Junior Developer (2019-2021)Promoted in 2 years vs. company average of 3.5 years\"\n\nThe second format clearly shows growth within a single company and explicitly highlights faster-than-average promotion, which is a strong positive signal. (You may also want to carry over your promotion cadence into your “About” section, as you saw above.)\n\n## Be crystal clear about your work authorization status\n\nThis one is particularly crucial if you have a foreign-sounding name and/or education outside the US. I've seen many qualified candidates get passed over because recruiters assumed they needed visa sponsorship when they actually didn't. Don't leave this to chance.\n\nMake your work status explicit in your header or summary section:\n\n❌ No mention of work authorization (leaving recruiters to guess)✅ \"US Citizen\" or \"Green Card Holder\" or \"Authorized to work in the US without visa sponsorship\"\n\n## Career changers: provide context about the change\n\nIf you've switched careers, your resume can look confusing without proper context. Recruiters might struggle to understand why someone with your background is applying for this role, or they might not recognize how your previous experience translates to your current trajectory.\n\nAddress this head-on in your “About” section.\n\n❌ Listing previous career experience with no explanation of your transition✅ \"Transitioned from marketing to software engineering in 2021 after completing a bootcamp\" or \"Former accountant who pivoted to data science through self-study and online courses while continuing full-time work\"\n\nThis context helps recruiters understand your timeline and puts your current title and achievements in perspective. Without it, you risk serious misinterpretation:\n\n• Recruiters might think you're far more junior than you actually are in your new field (potentially ruling you out for appropriate-level positions)\n\n• Or conversely, they might assume you have years of relevant experience in your new field (and then wonder why you haven't achieved more in that time)\n\nBoth misinterpretations can be fatal to your application. By providing a clear timeline of your transition, you help recruiters accurately gauge your experience level and set appropriate expectations. This transparency also demonstrates valuable traits like adaptability and determination.\n\nAnd here's another key point for career changers: you don't need to list all your previous positions before the transition... unless they're impressive. Be selective about what pre-transition experience you include:\n\n❌ DON'T include mundane or irrelevant details from your previous career that add nothing to your current narrative. Your three years as a retail associate before becoming a developer probably won't strengthen your software engineering application.✅ DO highlight prestigious achievements from your previous career. If you were, say, a concert pianist, a lawyer who graduated from a top-tier law school, or a management consultant at McKinsey, absolutely include that. These signal that you're smart and high-achieving, regardless of domain.\n\n## In conclusion\n\nIf you do all these things, you may or may not see a return. After all, even the impact of these tweaks pales in comparison to having top brands on your resume. But, given that these will take you a few minutes to do, it doesn’t hurt. Here’s the TL;DR:\n\nFootnotes:\n\n• I have no idea what the average promotion cadence is at Amazon, and this example is meant to be illustrative rather than accurate, though maybe my readers will tell me the cadence now.↩\n\nI have no idea what the average promotion cadence is at Amazon, and this example is meant to be illustrative rather than accurate, though maybe my readers will tell me the cadence now.↩\n\n• I realize this diverges from the advice inBeyond Cracking the Coding Interview, where Gayle recommends including it if it’s 3.0 or more. This is one of the cases where the authors had differing opinions. We’re (mostly) human.↩\n\nI realize this diverges from the advice inBeyond Cracking the Coding Interview, where Gayle recommends including it if it’s 3.0 or more. This is one of the cases where the authors had differing opinions. We’re (mostly) human.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Reverse Nodes in k-Group\n\n### Alien Dictionary\n\n### Remove Nth Node from End of List\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/stop-trying-to-make-recruiters-think-or-why-your-resume-is-bad-and-how-to-fix-it",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.",
      "content": "# How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.\n\nInpart 1 of this post, we talked about which channels are most effective for getting in the door and did an analysis of those channels along two axes: effectiveness and how much control you actually have. Here’s a quick summary.\n\nIn the quadrant above, you can see that while getting contacted by an in-house recruiter is very effective, whether you get contacted or not is largely out of your hands. The channel that maximizes both effectiveness and control is cold outreach to hiring managers (not recruiters!) “done right”. What does “done right” mean? That’s what we’ll talk about in this post (part 2 of 2). Most people do this type of outreach incorrectly. Here, we’ll get very tactical and tell you exactly what to say and do to reach out to hiring managers at the companies you’re interested in and actually get responses.\n\nHere’s our recommended, hyper-practical approach.\n\n## Prerequisites/tooling\n\n• Buy a month or two of LinkedIn Sales Navigator. This will run you a few hundred dollars, but it’s worth it.\n\n• Get an account with an email discovery tool likeRocketReach(an excellent email discovery tool).\n\n• GetStreak, which lets you do mail merges in Gmail. You create an email template, with variables for everything from recipient name to long snippets of personalized text, and then you upload a CSV with all the values. The resulting emails feel personalized but get sent to hundreds of people at once.\n\n## Treat your job search like a sales funnel\n\nIf you’re an engineer, chances are you haven’t ever done sales (maybe you had a job in high school selling Cutco knives or magazines, in which case what we’re about to say will resonate). But if you do sales for any appreciable amount of time, you’ll start thinking about everything in life as a funnel.\n\nFunnels are wide at the top and narrow at the bottom. That’s why they’re such an apt metaphor for the sales process — you do a lot of outreach, and you don’t get many responses. Of the responses you do get, relatively few will do the thing you want them to do. And even fewer will ultimately “close” (aka, buying — or, in this case, hiring).\n\nIn your engineering career, you’ve intellectually mastered many abstract concepts that are much more complex than a funnel. Despite its simplicity, however, the funnel is one of the hardest concepts to internalize emotionally, especially for people who are used to having control over outcomes. When you write code fornhours, you can expect that you will buildmfeatures.\n\nIn sales though, you do a lot of work, very little of it will pan out, and when it does pan out, it can feel almost random; an impersonal, mediocre email gets a response while your beautifully targeted email is met with deafening silence.\n\nAnd then there’s rejection. When you apply to jobs online and don’t hear back, it stings, but the sting is softened by the possibility that a human never even saw your application. You’re not reaching out to people when you apply online; you’re dealing with a bureaucratic machine.\n\nOn the other hand, when you email a real human and they don’t respond, that hurts: you put yourself out there, someone made a value judgment about you, and you lost.\n\nThe good news is that, after a while, the pain lessens, and you build up some useful emotional calluses and acquire the thousand-yard stare of someone who’s been rejected a million times for a million reasons, ranging from soul-crushingly legitimate to incontrovertibly random.Sadly, there’s no shortcut. You’ve got to do the reps, you’ve got to get the rejections, and you’ve got to pick yourself up again. You get used to it, and then it doesn’t hurt as much, because experience has taught you that if you keep going, you will eventually get to a yes.\n\n## What to actually do\n\nFirst, come up with a target list of companies.How to do that is out of scope for this post, but we may write about it in the future. For now, we’ll assume you have a list.\n\nOnce you have your list of companies, use LinkedIn Sales Navigator to find hiring managers at those companies (or founders or directors or VPs, as above). Below is an example query where we look for Google hiring managers.\n\nYou might think that Google is so big that sifting through all their various hiring managers will be intractable. Fortunately, you can whittle down the list to a pretty manageable size by applying some filters.\n\nHere are our filters:\n\n• Just targeting managers, not directors or VPs. Google is a huge organization. You want the people who are most likely to help, and they’re the ones who are struggling to hire for their teams.\n\n• In position for less than 2 years:These are the people who are still trying to prove themselves and who are less likely to have a long-standing relationship with their recruiter to the point where they only rely on internal recruiting and overlook other sources of candidates.\n\n• Geography:Let's focus on the places we most want to work.\n\n• 1st- or 2nd-degree connection:This way, when they look you up, they’ll see some social proof. You can expand this to 3rd-degree connections, if needed.\n\nOnce you have your list, put their LinkedIn URLs into a spreadsheet. Then, do a pass through your targets’ profiles and see if any of them link to personal websites, social media accounts, blogs, or anything else that will help you find common ground with them.Add any useful links in your spreadsheet because we’ll be mining them when we actually write our emails.\n\n### Look up their email addresses\n\nOnce you have your list of LinkedIn URLs, use a tool like RocketReach to look up their emails.\n\nWhy not reach out on LinkedIn? While recruiters live on LinkedIn, managers generally do not. Possibly, they don't even like or check LinkedIn much. They live in their emails, so that's where you want to target them.\n\nRocketReach is a nice tool for email discovery because 1) it takes LinkedIn URLs as inputs and 2) its email database is generally up-to-date and correct.1\n\nIf RocketReach fails or you don't wish to pay for it, you might just be able to guess their email address, as email addresses tend to follow common forms:aline@interviewing.io(my actual email address),alerner@interviewing.io, oraline.lerner@interviewing.io.\n\nWhere possible, contact managers via their work email address.2In some cases, you won’t be able to find their work email, in which case it’s acceptable to fall back to their personal email.\n\n### Write succinct, highly personalized emails\n\nNext, compose a fairly personalized, yet short, email.All too often, candidates write a long, generic cover letter that’s obviously been sent to a ton of people. I get many emails that look like this:\n\nDon’t do this!\n\nDon’t do this either! There is nothing here about why this candidate is a good fit for interviewing.io, and the bullets aren’t compelling enough on their own. Note that this particular email is from a marketer, not an engineer, but the anti-patterns are the same.\n\nEmails like the above are impersonal, but worst of all, they have a poor signal-to-noise ratio — I want to find a reason to say yes and to invest my valuable time into this person. But they’re not giving me one, and they’re making me work for it in the process.\n\n• Don't open email with how they found you.This is a big pet peeve of ours. I don’t care how you found me! I know I’m on LinkedIn. What I care about is why talking to you will add value for me or why you’re interesting. Use the most significant real estate in the email, the first sentence, to tell me that!\n\n• Don't be overly formal in how you address the person. Use their first name.\n\n• Don't get their gender wrong(e.g., referring to a woman as \"sir\" — you’d be surprised how often this happens).\n\n• Don't paste in a generic cover letter.These are sure to get ignored immediately — if you’re not going to put in the effort to write to me personally, why would I put in the effort to read your email?\n\n• Don't forget to include a link to a LinkedIn or a personal website.We don’t recommend attaching your resume, though. It can seem overly formal/somewhat presumptuous if you're trying to build rapport.\n\nMore broadly, if you want someone to go out on a limb for you, make it dead simple for them to justify expending their social/political capital on you. Hiring managers, as a rule, want to help. Make it a no-brainer for them.\n\nThere are three components to a great cold email:\n\n• Common ground with your target\n\n• Proof that you’re worthy of their time\n\n• A strong call to action\n\nNot every cold email will have (1) because you won’t always be able to find common ground with everyone — there’s simply not enough information out there about some targets to be able to craft a compelling narrative that’s highly personalized to them.\n\nBut every cold email you write should have (2). It is your job to sell yourself quickly and succinctly. You want your target to feel like they’d be an idiot to pass up the chance to talk to you.\n\n#### Finding common ground\n\nThe email below is personal, succinct, and finds common ground. Not only that, but it conveniently finds common ground thatbenefits the candidate(a soft-spot for non-traditional candidates, like himself!).\n\nTo find common ground, reference something your target cares about. Then either show them that you care about it too or that helping you would fit into their worldview and further that cause.\n\nAs we mentioned above, finding common ground may be tough because there might not be enough information available about your target, but it’s important to do the work before you give up on this route — finding common ground is the tactic that’s going to get you the highest response rates.\n\nHere are some examples of great ways to build common ground:\n\n• Reference a project they worked on (maybe they wrote a blog post about it, mentioned it in a comment on Hacker News, or are a contributor to some open source project). Then…If possible, talk about relevant work you’ve done. It’s important not to make this connection too tenuous. If you do, this approach might backfire because they’ll start to get excited about you, only to be let down and ultimately feel tricked.If you do not have relevant work to share, ask a thoughtful question or two about theirs.\n\n• If possible, talk about relevant work you’ve done. It’s important not to make this connection too tenuous. If you do, this approach might backfire because they’ll start to get excited about you, only to be let down and ultimately feel tricked.\n\n• If you do not have relevant work to share, ask a thoughtful question or two about theirs.\n\n• Reference a controversial point of view that they hold, and affirm it in an authentic way.\n\n• In the absence of something technical, it’s okay to reference something non-technical you've seen on their public profiles. We've seen candidates connect with strangers based on a shared love of Star Wars or Hearthstone.\n\nWe understand that you won't always be able to find common ground. But if you can, it'll help you a lot, especially if you’re light on social proof or accomplishments.\n\n#### Selling yourself\n\nSelling yourself is usually about one of two things:\n\n• Accomplishments: What have you built or created?\n\n• Social proof: Have you worked at a top company or attended a top school?\n\nSome people are fortunate enough to have both, but many will have just one. That’s okay. We’ll work with what you have!\n\n#### Accomplishments\n\nWhat have you done that most other people haven’t? What have you done that, if you were to tell it to a stranger, would cause them to pause and think you're special or interesting?\n\nBelow are some examples:\n\n• You’ve had a blog post about a technical topic or a personal project do well3on Hacker News, Reddit, or social media.\n\n• Something you built at work got some great press when your company announced its last funding round.\n\n• You refactored a piece of code at work, and now it runs 100X faster.\n\n• You won a company hackathon.\n\n• You’re a core contributor to a notable open-source project.\n\n• Something you built is being used by a number of other people.\n\n#### Social proof\n\nSocial proof is more about your pedigree. If you attended a top school or worked at a company known for having a high engineering bar, you should absolutely mention it!People won't click on links or open your resume untilafterthey're interested, so you need to get them interested right away. That is: you should spoon feed them the most impressive-sounding things about you out of the gate. This may feel strange and uncomfortable, like you’re bragging. We assure you, however, that it’s necessary to get your target’s attention. They’re not thinking you’re bragging. They’re thinking, “Is this worth my time?” Your job is to convince them that it is.\n\nAlso, don’t forget to link to your LinkedIn or personal website. Attaching a resume may feel too heavy-handed for a first conversation, as we discussed above.\n\nHere's an example of a prospective intern, leveraging both social proof and accomplishments, to write a compelling email. His email isn't super personalized, but he did make some effort to say that what we do at interviewing.io is important.\n\n#### Formulating a strong call to action\n\nA call to action is an invitation for the recipient to do something. You can go one of two ways with your call to action: ask for a job interview or start a conversation.Which you do should be a function of how much firepower you have in the way of social proof and accomplishments. It’s not fair, but if you can get your target’s attention with one or both of those, being bold and asking for a job interview makes sense. This approach can be effective, but it won’t work for most people… because most people don’t have enough social proof or accomplishments to justify this type of request.\n\nIf you can’t leverage social proof or accomplishments, you’re going to have to work harder and bank entirely on building common ground, which will likely take some time and effort and involve a live conversation before they’re convinced to expend their social capital on you.\n\nIf you’re asking for an interview, just come right out and say it. You can use the intern candidate’s email from earlier as a guide. However, this isn’t our preferred way to do it, and we really recommend starting a conversation instead.\n\nTake a look at the email below.\n\nIn this email, the candidate doesn’t ask me about jobs — he just asks to meet to discuss a topic. Indeed, he’s done his research. I write atonabout judging resumes, and it’s a topic I could go on about for hours if you’ll let me. His email read like he’s genuinely interested in the subject and that we’d have a good conversation, so of course I responded. You’d be surprised how rare emails like this are. If you can find the topic your target cares about and write something that shows earnest, genuine interest, they’ll respond.\n\nWith these emails, you’re asking for a conversation, not a job interview… because the conversation is what will hopefully prove to the hiring manager that you’re worth interviewing.Then, once you have a conversation, the hiring manager will walk away with the impression that you’re a competent, thoughtful human being who’s interested in this sort of work. From there, getting a job interview will feel like an afterthought.\n\nAs such, don’t talk about jobs at all in this type of email, and in this particular case, don’t attach your resume — that will feel out of place and transactional. You can and should link to your LinkedIn so they know who you are and have some context. But spend the bulk of the email building common ground and coming up with an interesting reason for the two of you to talk.\n\nThis approach is much more effective than asking for an interview out of the gate!You’re not going to land a job from one email, so, as with any seemingly insurmountable goal, it’s important to think of your outreach as a series of steps where you put one foot in front of the other. Like in sales, all you need is to get to a conversation.\n\nIf your call to action is to set up a time to talk (which it probably should be because it’s specific), we recommend providing them with a time window. \"Would you want to meet up sometime?\" puts the burden on the recipient to pose a time, while \"Can we talk next Monday at 3pm?\" is problematic because, most likely, they aren't free then. Instead, try something like the candidate above did: \"Would you be available sometime within the next two weeks for a thirty-minute call? I'm free most weekdays between X and Y and can pretty much do any time on weekends if those are better for you.\"\n\n## Two templates for you to use\n\nBelow are two templates you can use for cold outreach. The first one is ideal but requires more effort and can't always be used. The second one is weaker but more generic.You can choose what fits your needs best. We expect both of these templates to be far more effective than throwing your resume into the blackhole of online portals.\n\n### Template #1: Use this template if your target has an online presence\n\nThis template includes common ground, accomplishments/social proof, and a call to action. It will get you the highest response rates, possibly anywhere from 25-50%. However, it can be challenging to use because it requires you to 1) do a deep dive into their online presence and 2) tie what you find back to something you’re doing. Sometimes, that tie-in might be tenuous or non-existent (in which case, maybe skip it).\n\nHey {Their First Name},\n\nI’ve read your work on {insert some details about their writing}, and I {insert your thoughts on the work}.\n\n{If you can make the connection between their work and yours, talk about something similar you’ve been working on.}\n\n{If you cannot, ask them a specific, thoughtful question about your work. Don’t worry about making it “the perfect question” like you might when you attend a talk and want to sound smart. Any earnest question will do. You don’t have to use this as a chance to show off!}\n\n{Finally, close with a sentence or two about you, if you have some social proof or impressive accomplishments you can share.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that’s great. If not, a LinkedIn will do.}\n\nNote that in this template, we leave some places for you to insert some social proof and your accomplishments. Even though this email is primarily about them and their work, and your references to yourself are primarily through that lens, it never hurts to drop in a few pieces of evidence that you’re someone who’s accomplished things and/or someone who looks good on paper.\n\n### Template #2: Use this template if you don’t have anything except a LinkedIn profile for your target\n\nThe reality is that you won’t always have enough information about your target to find common ground. In this case, you’ll lead with accomplishments/social proof and a strong call to action. We expect this template will get you response rates anywhere from 5-25%, depending on the strength of your achievements and pedigree. That said, we recommend treating this template as a last resort. Using it means you’ve exhausted any possibility of writing something personal.\n\nHey {Their First Name},\n\n{List 2 things about you. They can be impressive accomplishments of yours or social proof, as above.}\n\nI’m really interested in the work you’re doing at {Company Name}. {If you know what team they’re on and are interested in that specific team or are familiar with that team’s accomplishments, great! If not, just write a few earnest sentences about why the company is interesting to you.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that’s great. If not, a LinkedIn will do.}\n\nKeep your note short. The intent here is to make your target believe you’re an entity worth paying attention to, rather than them doing the easy thing: deleting your email.\n\nRegardless of which template you use, just like you have to manage your psychology when you prepare for technical interviews, you have to manage your psychology when doing outreach like this. You have to:\n\n• Mentally prepare yourself for the slog of writing personalized emails and doing the requisite research.\n\n• Get used to rejection. If you do write good emails and target the right people, you’ll have a much better hit rate than when you apply online, but you will still get ghosted a lot, and it will sting much more because, this time, you actually tried. But you know what? If you stick with it and do this right, within a few months, you’ll have a connection to a top-tier company.\n\nNow that you’ve girded your proverbial loins, it’s time to do the work. If you follow our advice, you’ll get 1-2 orders of magnitude more responses than from applying online, and with this approach, you’ll have at least a hiring manager at that company rooting for you!\n\nFootnotes:\n\n• RocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we’ve found that it’s not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.↩\n\nRocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we’ve found that it’s not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.↩\n\n• Recruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.↩\n\nRecruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.↩\n\n• Many people think that for something to be worth mentioning, it has to have gone viral. That’s simply not correct — in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.↩\n\nMany people think that for something to be worth mentioning, it has to have gone viral. That’s simply not correct — in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Decode String\n\n### Simplify Path\n\n### Lucky Numbers in a Matrix",
      "source_url": "https://interviewing.io/blog/how-to-get-in-the-door-at-top-companies-cold-out-reach-to-hiring-managers-part-2",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "How well do LeetCode ratings predict interview performance? Here's the data.",
      "content": "• For employers\n\n• Gift mock interviews\n\n# How well do LeetCode ratings predict interview performance? Here's the data.\n\nMike Mroczka, a former senior SWE (Google, Salesforce, GE), is the primary author ofBeyond Cracking the Coding Interview—the official sequel to Gayle McDowell's original CTCI. He works as a tech consultant and has a decade of experience helping engineers land their dream jobs. He’s a top-rated mentor (interviewing.io, Karat, Pathrise, Skilled.inc) and the author of viral technical content on system design and technical interview strategies featured on HackerNews, Business Insider, and Wired. He also sometimes writes technical content for interviewing.io (like this piece) and was one of the authors of interviewing.io’sA Senior Engineer's Guide to the System Design Interview.\n\nYou can find him online atmikemroczka.com,LinkedIn, andX.\n\nHave you ever wondered if you should spend more time on LeetCode, participate in those contests, or focus on solving harder problems? Apopular Reddit postsuggests you need 700+ questions and a LeetCode rating between 1800-2000 to pass FAANG interviews. Is this really what the data supports? To answer these questions and more, we looked at our users' LeetCode ranks and ratings and tied them back to interview performance on our platform and whether those users worked at FAANG.\n\nIn this post, we’ll share what we’ve learned.\n\n## The experiment\n\ninterviewing.io is an interview practice platform and recruiting marketplace for engineers. Engineers use us for mock interviews. Companies use us to hire top performers. Hundreds of thousands of engineers have used our platform to prepare for interviews, and we have performance data for over 100k technical interviews (split between real interviews and mocks).\n\nWe surveyed almost 700 of our users and asked them to share their LeetCode and LinkedIn profiles. From those profiles, we pulled our users’ employment history, as well as their LeetCode data: number of problems worked, ratings, and, if they had it, contest performance. Finally, we cross-referenced all this data with their performance in mock and real interviews on interviewing.io.\n\nThis data set allowed us to start asking interesting questions. How much LeetCoding is useful? What kinds of problems are most useful to practice? How does LeetCode performance relate to performance in interviews with real people? Do LeetCode contest scores predict interview performance, and is a competitive coder likelier to work at a big tech company? Are hard questions worth solving or should we just stick with mediums? Let's find out!\n\nThe matrix below summarizes our findings. In addition to all LeetCode fields listed below, we also looked into global ratings and contest ratings. It was harder to find a large enough sample size to see any effect of those who did contests. Since the results were not large enough to be informative we have excluded them from the rest of this piece. All findings listed below are statistically significant, with lighter squares indicating stronger correlations.\n\nFor each profile, we looked at the following attributes:\n\n• Total questions: the total number of questions solved on LeetCode\n\n• Hard questions: the number of \"hard\" questions solved on LeetCode\n\n• Medium questions: the number of \"medium\" questions solved on LeetCode\n\n• Easy questions: the number of \"easy\" questions solved on LeetCode\n\n• Worked at FAANG: whether or not the user has ever worked at a FAANG company\n\n• interviewing.io percentile: how an interviewing.io user stacks up against other users of the platform, after having completed at least one interview\n\nThis matrix summarizes the correlations between LeetCode attributes (y axis) with 1) whether people worked at a FAANG and 2) how well they performed in interviews on interviewing.io (x axis). The higher the number (and the darker the color), the stronger the relationship.\n\nFor instance, the number of questions a user solved correlates with working at a FAANG company and a user’s percentile ranking on interviewing.io. We see that it is a stronger predictor of interview performance than it is for working at a FAANG company (0.27 and 0.17, respectively).\n\nLet's dig into the most exciting findings!\n\n### The total number of questions you have completed matters!\n\nUnsurprisingly, the total number of questions a user has completed correlates with having FAANG on their resume and doing well in technical interviews.Those who work at FAANG companies appear to have completed more questions than those who do not.\n\nDon't fret, though, as this doesn't mean you're doomed to be behind people who have started sooner and have amassed thousands of questions. The vast majority of our top users stop LeetCoding after they've hit about 500 questions. Only a fraction of top users have done more than ~500 questions, and only about 10 did more than a thousand questions.As you might expect, there are seriously diminishing returns associated with doing more than 500 questions. Those who continued past the 500 questions performed only marginally better than those who had stopped near 500.\n\nIn the zero-sum interviewing game, those who complete the most LeetCode questions generally get the highest interview scores and work at the most desirable tech companies, but completing ~500 questions will put you among the top talent in the current market.\n\n### The difficulty level you attempt matters, too!\n\nIt is common wisdom on the LeetCode discussion board and subreddits to \"do medium questions, not hard questions,\" with the argument that companies don't ask LeetCode hards. Does this advice stand up to scrutiny?Mostly no.\n\nThe data shows a clear bias towards those who solved more challenging problems, the exact point at which this matters is up for debate. At interviewing.io we find that before tackling difficult questions, you just need to first start doing problems.Getting started matters more than attempting to complete a particular question difficulty, so don't focus arbitrarily on medium/hard questions, just focus on practicing!\n\nTip 1: Start with anything. Getting started matters more than picking the perfect set of questions.For those just starting, you might think, \"I'm a straight-A student and a fast learner, so I should be able to manage hard questions.\" Don't make this mistake, or you'll burn out quickly. Instead, just focus on doing questions and getting into the habit of translating your thoughts into code efficiently.\n\nBefore tackling mediums and hards, we need to first get good at easy questions.Once we can tackle mediums, for each additional 50 questions you complete, you increase your score of passing your interviews by three percentage points.\n\nOn the other hand, a LeetCode hard carries overtwicethe benefits of a medium question. Completing 50 hard questions increases your interview score by seven percentage points!Our data shows that you'd need to complete close to 233 medium questions to get the same benefits that 100 hard questions would give. Consider these two people (fictitious but inspired by real examples in our data):\n\nThese two people are statistically likely to have similar interview scores, yet Kara completed half the number of questions Alex did. While it goes against standard advice, harder questions having a higher benefit make sense. A LeetCode medium tends to require you to do one thing (perform a DFS, scan an array, etc.) to get the correct answer. In contrast, hard questions require you to do multiple things (memoize results while performing a DFS, tally prefix sums while scanning an array, etc.).The compounding nature of multiple tasks in harder questions necessitates deeper learning in fewer questions.\n\nAdmittedly, there is a chicken-and-egg scenario going on here. Naively, one might think everyone should just do hard questions, but that doesn't work in practice. Jumping straight to hard questions is an infeasible leap for most people, and the reason many people can complete hard questions is preciselybecausethey have finished many medium questions first. Our advice is not to jump to hard questions immediately. Instead, you should be mindful and not stay at the medium difficulty level longer than necessary. It isn't that the advice to \"do medium questions\" is wrong—it is just overused. It is natural to want to be able to complete a question regularly in a short period of time. Still, if you find yourself completing LeetCode mediums quickly, it indicates that you have stagnated and would be better off moving on to hards. If you have solved 100 or more medium questions, you'll likely get more bang for your buck by transitioning to hard.\n\nTip 2: Don't ignore hard questions.Balance your medium questions with the hard ones. The compounding nature of multiple tasks in harder questions necessitates deeper learning in fewer questions.\n\nFinally, we must also acknowledge that not all hard questions are created equal. This tip is my gut feeling, and we don't have data to back it up, but intuitively, we've all done hard questions that seemimpossible, hard questions that seemed like they should have been ratedmedium, and even medium questions that seem like they should have beenhard. Question difficulty is somewhat subjective, so if you focus on hard questions, choose questions with a high acceptance rating and/or ones that are \"frequently asked.\" These questions tend to beachievable(they don't have a single impossible trick you need to just have known),realistic(they don't test nonsense algorithms no one knows like Manacher’s algorithm), andsolution-flexible(there is often more than one valid approach).\n\nTip 3: When choosing hard questions, pick popular questions.They are more likely to beachievable,realistic, andsolution-flexible, which will likely result in more learning per question.\n\n### Contests and rankings don't matter\n\nSurprisingly, we found no correlation between LeetCode ratings and their interviewing percentile. Those who were great at contests also didn't appear more likely to have FAANG on their resume.  Two confounding variables that might have caused these unexpected results are:\n\n• Small contest selection size:Despite our best efforts, we received a relatively small group of candidates that attended any number of contests, let alone several. The data set may be too small to find a correlation.\n\n• Biased candidate selection:We incentivized candidates with free interviews, so those who regularly complete contests (and therefore have a lot of practice and likely feel confident in their skills) might not be interested in the rewards and weren't studied in this experiment.\n\nTip 4: Don't worry about contests unless you enjoy them.They provide a way to practice managing your time and keep yourself honest with how fast you are moving, but they don't contribute much to your success apart from containing more questions for you to attempt.\n\n## Conclusion\n\nIn the end, LeetCode questions are a reasonable proxy for predictors of interview performance. While ratings and contest scores don't seem to matter,1questions —and question difficulty—do. Focus on tackling increasingly difficult questions until you've hit that point of diminishing returns near ~500. Don't stagnate with medium questions; pick popular and frequently asked hard questions, too. And don't stress if your friend has a higher LeetCode score than you do; turns out it doesn't mean much!\n\nFootnotes:\n\n• A caveat here is that, strictly speaking, we're reporting correlations—not necessarily causal relationships. This leaves open the possibility that what we were measuring was not exactly a return to LeetCode but rather the effect of some third variable that increases both LeetCode activity and job prospects. For example, say MIT has a course that emphasizes coding puzzles, and MIT grads also get better jobs. In that case, what might look like a LeetCode benefit is actually an MIT benefit, and controlling for that would make the apparent benefit disappear. At the very least, though, these patterns are informative about the typical profile of successful engineers, which is likely a useful thing to emulate in general. Also, remember that our data still shows solving a healthy number of questions regardless of their difficulty can boost your chances of getting through difficult interviews. By definition, many people can pass interviews with far fewer problems completed, and many will pass after doing more problems.↩\n\nA caveat here is that, strictly speaking, we're reporting correlations—not necessarily causal relationships. This leaves open the possibility that what we were measuring was not exactly a return to LeetCode but rather the effect of some third variable that increases both LeetCode activity and job prospects. For example, say MIT has a course that emphasizes coding puzzles, and MIT grads also get better jobs. In that case, what might look like a LeetCode benefit is actually an MIT benefit, and controlling for that would make the apparent benefit disappear. At the very least, though, these patterns are informative about the typical profile of successful engineers, which is likely a useful thing to emulate in general. Also, remember that our data still shows solving a healthy number of questions regardless of their difficulty can boost your chances of getting through difficult interviews. By definition, many people can pass interviews with far fewer problems completed, and many will pass after doing more problems.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Even Odd Tree\n\n### Shuffle String\n\n### K Largest Elements\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/how-well-do-leetcode-ratings-predict-interview-performance",
      "author": "Mike Mroczka",
      "user_id": "aline123"
    },
    {
      "title": "Why engineers don’t like take-homes and how companies can fix them",
      "content": "• For employers\n\n• Gift mock interviews\n\n# Why engineers don’t like take-homes – and how companies can fix them\n\n> [My experiences with take-homes] drive home the idea that this employer doesn't care if you are a carbon-based life form, as long as code comes out of one or more of your orifices.\n\n[My experiences with take-homes] drive home the idea that this employer doesn't care if you are a carbon-based life form, as long as code comes out of one or more of your orifices.\n\nTake-home assignmentscould, in theory, be great for both companies and candidates. What better, fairer way to evaluate someone’s ability to do the work… than to have them do the work?\n\nUnfortunately, in practice, take-homes typically suck for engineers.\n\nWe surveyed almost 700 of our users about their experiences with take-homes and interviewed a handful more for deeper insights. We learned a lot—mostly about candidates' poor experiences and negative feelings toward take-homes. They take a lot of time. They don’t respect candidates’ time. Candidates often get no feedback. And candidates are almost never compensated.\n\nThe good news? Turns out there are some pretty simple things companies can do to vastly improve their take-home assignments. But before we dive into that…\n\n## Why do companies use take-home assignments?\n\nTake-homes vary a ton by role and company in terms of the types of questions, subject matter, length, and intensity. At their simplest, take-homes can be the same questions as in an algorithmic interview, except done asynchronously. The other extreme is asking candidates to build an entire app and deploy it.\n\nWe were surprised to see how often companies use take-homes. About 85% of our users got one at some point in their career, independent of their experience level. Of the users who encountered them, they tended to see them as part of the process about 20% of the time, again, independent of their experience level1.\n\nWhy are take-homes relatively popular among employers? They mostly use them to save time in the hiring process. There are, however, some more noble reasons a company might use a take-home assignment:\n\n• Get better signal during the interview process, as a take-home can be more indicative of actual work\n\n• Get a candidate's best work out of them in a lower-stress environment than a live algorithmic interview and/or attract candidates who don’t like algorithmic interviews (of which there areplenty)\n\n• Broaden the candidate pool by offering a way in for candidates from non-traditional backgrounds—in lieu of a resume screen, which they’d likely fail, candidates can do choose to do an assignment\n\nAccordingly, here’s the relevant part of a great conversation between Vincent Woo of CoderPad and Patrick McKenzie (known to Hacker News folks as patio11) of Stripe, formerly ofStarfighter.\n\nVincent:What general sort of high level change do you think that recruiters at tech\ncompanies that are roughly Stripe’s size or bigger ought to make?\n\nPatrick:If I could wave a magic wand and sell the world on one concept, it would be selling the world on the desirability of work sample testing… where the way to tell if someone is good at something is to have them do the something.\n\nDespite enthusiasm for the theory of take-homes and some very well-intentioned reasons, candidates overwhelmingly don’t like take-homes. Here’s why.\n\n## Why don’t candidates like take-homes? It’s about value asymmetry.\n\nThough users expressed a lot of frustration with take-homes, we were surprised to see very few take a hard-line stance and refuse to do them. Only 6% outright refuse, and 66% of people complete take-homes all or most of the time.Surprisingly, these stats didn’t really change when we looked only at senior engineers. I was expecting that experienced engineers would do them almost never, if at all, but that’s not what the data shows. It’s possible that seniors are just louder in their disapproval.\n\nNevertheless, the more desirable a company, the more likely candidates will do the take-home and feel OK about it—70% told us they completed them because they “Really wanted to work at the company and were willing to do what it took.”\n\n> I found Weedmaps [to be] a very interesting company. They were the first marijuana related company to IPO. So you'd be on the frontier working for them. I found that exciting. So I applied and they had [a] take-home. I was like, sure, of course I’ll do this.\n\nI found Weedmaps [to be] a very interesting company. They were the first marijuana related company to IPO. So you'd be on the frontier working for them. I found that exciting. So I applied and they had [a] take-home. I was like, sure, of course I’ll do this.\n\nOther reasons our users gave for completion included: “Because the take-home would be discussed at the onsite” (38%) and “Interesting/cool assignment” (37%). However, many of those who did finish them had such a poor experience that they said they’d never apply to certain companies ever again. We’ll talk about what makes the experience poor in a little bit.\n\nOf the people who refused to do at least one take-home at some point in their career, here were their reasons.\n\nThe common thread among all of these reasons is value asymmetry.The worst take-homes feel unrewarding to candidates. Even exploitative. Take-home assignments ask a lot of candidates: a significant investment of their time, with an often unclear scope, no guarantee of progressing to the next round, often without feedback, and almost always without compensation. Meanwhile, the company has basically invested nothing, except to send the task. We heard this a lot.\n\n> When I'm interviewing, I look for things that are proxies for valuing team members… or not. If they want me to do a take-home test, and they haven't even spent 30 minutes on a phone screen, I begin to sense an asymmetry in our relationship, with their time and resources being very valuable, and mine not being valuable at all.\n\nWhen I'm interviewing, I look for things that are proxies for valuing team members… or not. If they want me to do a take-home test, and they haven't even spent 30 minutes on a phone screen, I begin to sense an asymmetry in our relationship, with their time and resources being very valuable, and mine not being valuable at all.\n\n> A divergence between how much effort they want me to put in, and how much they want to put in themselves. It signals that they are more worried about their time than mine, their costs than mine. It also means they underestimate how much effort it takes to write code, so that if I go to work for them, I am likely to face demands to work uncompensated overtime to meet their optimistic estimates.\n\nA divergence between how much effort they want me to put in, and how much they want to put in themselves. It signals that they are more worried about their time than mine, their costs than mine. It also means they underestimate how much effort it takes to write code, so that if I go to work for them, I am likely to face demands to work uncompensated overtime to meet their optimistic estimates.\n\n> Spending five hours on their one-hour test for nothing leaves hard feelings. And if they ghost me after the test, I will happily tell every developer who asks what cheapskates they are.\n\nSpending five hours on their one-hour test for nothing leaves hard feelings. And if they ghost me after the test, I will happily tell every developer who asks what cheapskates they are.\n\n## Is there any relationship between who candidates are and their willingness to do take-homes?\n\nPerhaps surprisingly, our data says no. We ran a regression to compare our survey respondents’ interview performance on our platform to how likely they were to do take-homes. The relationship was so weak as to be negligible.\n\nSimilarly, we ran a regression to see if people wholookgood on paper are more or less likely to do take-homes. The relationship there was negligible as well.\n\nIn other words, contrary to some popular opinions, you’re not necessarily weeding out your best candidates by doing take-homes, whether you define “best” in terms of how their resume looks or how they perform in interviews.\n\n## How companies can make take-homes better (and why they probably should)\n\nAfter reading the stats above, you might think that, despite their grumblings, candidates generally do take-homes, and the best candidates won’t be weeded out. So, if you’re one of the many companies that uses them, it may not make sense to invest your limited time into making them better. It’s not that simple. For some companies, like the FAANGs, who have extremely strong brands and are known to pay well, changes are probably not worth it, especially in this market, where junior and senior engineers are willing to jump through more hoops than ever before.\n\nIf you’re not a FAANG, though, listen up. Here are some questions you can ask yourself to figure out if you should indeed make some changes to your take-homes.\n\nFirst, take an honest look in the mirror and ask yourself about your brand strength. Are you a household name? Does having you on candidates’ resumes give them automatic prestige? Are you known to pay above market?If the answer toallof these questions isn’t a resounding yes, your brand strength is probably not strong enough to make people jump through hoops.\n\nHere’s a sketch to drive that point home. Unless you have a ton of brand strength, candidates’ willingness to jump through hoops drops off sharply.\n\nIf you aren’t maxing out on brand strength, there are two questions you should ask yourself:\n\n• What is my take-home completion rate?\n\n• What is my offer acceptance rate?\n\nIf your completion rate is below, say, 60% (our data shows that candidates complete take-homes around 62% of the time), then it’s DEFINITELY time to make a change.Honestly, regardless of what our data says, if people aren’t completing them at least 85% of the time, it’sprobablytime to make a change—losing more than 15% of your candidates to attrition at any given stage in the funnel is bad.\n\nWhat about your offer acceptance rate? If it’s less than 50% and you’re using a take-home already, there’s an opportunity to make some improvements.You might be wondering what this has to do with take-homes in the first place. To answer that, let’s change how we think about different parts of the interview process. At face value, every part of the process is there to vet candidates, to determine if they’re the right fit for your organization. However, when used correctly, every part of your process should become a selling vehicle as well. This isespeciallyimportant for companies who do not have a strong, well-known brand. The FAANGs can get away with using their interview processes primarily as vetting exercises because candidates are already sold on the pay or prestige or sometimes on the work and the product. When you don’t have an established brand, the candidates who come to you are, at best, open to learning more, and the interview process is the instrument that teaches them. Wield it accordingly.\n\nThough we strongly advocate coming up withgreat, unique interview questions2and making sure you havegreat interviewers, if your process does have a take-home component, it is one of the more overlooked parts of the process when it comes to selling. You have the opportunity to have someonedo the actual work that you do! This is your chance to pick the coolest stuff you’ve worked on and serve it up to someone on a platter and make it stick in their brains and make them imagine what it’d be like to work on these kinds of problems every day! Why wouldn’t you jump at this opportunity?\n\nYou may think you don’t need to sell in this market. But just because employers have all the power right now, it doesn’t mean that will always be the case. And great senior engineers still have a lot of leverage.\n\nIf, after considering your take-home completion rate and your offer acceptance rate, it looks like youdoneed to make some changes, here are some practical tips, based on what we’ve learned from talking to our users (overwhelmingly senior engineers who are targeting top-tier companies—probably the people you want). Let’s start with what we just talked about: using the take-home as a selling vehicle.\n\n### Make them interesting and relevant to the actual work\n\nYou're getting a chance to spend a couple of hours with somebody in a take-home (metaphorically). Why wouldn't you do everything you can to get them excited?Pick a problem that you've worked on, and get them hooked on it. Pick the kernel of an interesting problem that you've solved, and build something around it that will challenge candidates. Something that gets them thinking, “I could have done that better” or “This is a different or more efficient way to do it.” That's going to be more effective than the standard perks many companies offer.\n\n> [Best take-home I’ve seen was an] open-ended system design question on the type of system I would work on, was meant to simulate a team discussion on the system we needed to build, and was a great way for me to start thinking about what I'd be working on there.\n\n[Best take-home I’ve seen was an] open-ended system design question on the type of system I would work on, was meant to simulate a team discussion on the system we needed to build, and was a great way for me to start thinking about what I'd be working on there.\n\nOne way you could do this, is to have your engineering team keep a shared doc of ‘cool’ solutions they've found, or new things they've tried. These can serve as jumping-off points for creating your take-homes.\n\n> The… challenge was for an internal tooling team that specialized in incident response tools; their challenge was to create a scaled down version of a tool already in use at the company. The focus was more on understanding the domain and customer than wiring up a bunch of complicated stuff, and it was a delight. It being a greenfield also gave you an opportunity to showcase some software design skills. I did not get this job, but enjoyed the experience and still feel connected to the team.\n\nThe… challenge was for an internal tooling team that specialized in incident response tools; their challenge was to create a scaled down version of a tool already in use at the company. The focus was more on understanding the domain and customer than wiring up a bunch of complicated stuff, and it was a delight. It being a greenfield also gave you an opportunity to showcase some software design skills. I did not get this job, but enjoyed the experience and still feel connected to the team.\n\n> It was conceptually related to the sort of work the team was performing, but it was simplified and stand-alone enough to clearly not be unpaid labor for their product.\n\nIt was conceptually related to the sort of work the team was performing, but it was simplified and stand-alone enough to clearly not be unpaid labor for their product.\n\nJust be sure that when you come up with a practical problem that you strip out the annoying parts and focus only on the juicy kernel of the problem, the part that’s actually cool and lets the candidate be smart and creative. Don’t make them do grunt work or wrestle with their dev environment!\n\n> [This] was for a tooling team in Support, where they didn't have a lot of experience creating challenges or interviewing. One of the engineers took a difficult task that he had accomplished recently and just made that the take home challenge. It involved a lot of Ruby version conflict debugging. It was completely demoralizing and felt like hazing.\n\n[This] was for a tooling team in Support, where they didn't have a lot of experience creating challenges or interviewing. One of the engineers took a difficult task that he had accomplished recently and just made that the take home challenge. It involved a lot of Ruby version conflict debugging. It was completely demoralizing and felt like hazing.\n\n### Keep them short\n\nCandidates overwhelmingly favor take-homes that respect their time, i.e., short ones.\n\n> The best were short and brief, took no more than 2 hours and were directly related to what I would be doing on the job.\n\nThe best were short and brief, took no more than 2 hours and were directly related to what I would be doing on the job.\n\n> Best are realistic and time bound, i.e., low time investment required.\n\nBest are realistic and time bound, i.e., low time investment required.\n\n> Short and quick take-homes are great.\n\nShort and quick take-homes are great.\n\nOver 80% of survey respondents said that take-homes should take 4 hours or less, and a plurality thought that they should take 2 hours.\n\nTake-homes being short in theory is one thing… but we got a lot of feedback that take-homes often go far beyond how long companies tell candidates that take-homes should take.\n\n#### Have someone on your team QA the actual length of the assignment\n\nThis disconnect between actual time and expected time is another instance of value asymmetry: companies didn't even bother to have someone on their team do the take-home themselves and time it.\n\n> I've done a couple of algorithm questions as take-homes that the interviewer said should take an hour. They routinely take longer than that.\n\nI've done a couple of algorithm questions as take-homes that the interviewer said should take an hour. They routinely take longer than that.\n\n> Companies will say, ‘don’t spend more than X hours on it,’ but then it actually takes 5X that amount. It's just too much time. And most of the time they didn’t give feedback at all even though I spent so much time on it.\n\nCompanies will say, ‘don’t spend more than X hours on it,’ but then it actually takes 5X that amount. It's just too much time. And most of the time they didn’t give feedback at all even though I spent so much time on it.\n\nCompanies should clearly communicate the expected time commitment for a take-home. And they should be realistic about how much time it should take.\n\n> Best was an interesting problem with a realistic time frame. They estimated 2 hours and it took me exactly that, which was refreshing and made the process seem fair.\n\nBest was an interesting problem with a realistic time frame. They estimated 2 hours and it took me exactly that, which was refreshing and made the process seem fair.\n\n> I've done a couple of exercises where they were truly respectful of my time. The tasks were small, clearly defined, and they gave me a realistic timeframe to complete them.\n\nI've done a couple of exercises where they were truly respectful of my time. The tasks were small, clearly defined, and they gave me a realistic timeframe to complete them.\n\n> For the best take-home I did, the company told me: ‘Tell us when you're going to start, and you'll have 4 hours. We'll be available over email that whole time, and we'll answer your questions within minutes.’ That felt respectful of my time, and was a more reliable signal of my capabilities than a 20-minute algorithms exercise.\n\nFor the best take-home I did, the company told me: ‘Tell us when you're going to start, and you'll have 4 hours. We'll be available over email that whole time, and we'll answer your questions within minutes.’ That felt respectful of my time, and was a more reliable signal of my capabilities than a 20-minute algorithms exercise.\n\nTo get a realistic estimate, companies could simply QA their own take-homes—just by having someone on your team take it, and time them.\n\nStill, some candidates will spend more time anyway, because they really want to work for a certain company. And it can be easy for candidates to go down a rabbit hole and get most of a take-home done in the first few hours, then spend another day or more, perfecting it to give themselves a better chance.\n\n> Do you want me to literally only work two hours on something that's clearly going to take 10 to really be able to have a conversation with you about how I think about things? Because two hours of decisions isn't as good as 10 hours of decisions.\n\nDo you want me to literally only work two hours on something that's clearly going to take 10 to really be able to have a conversation with you about how I think about things? Because two hours of decisions isn't as good as 10 hours of decisions.\n\nIt’s okay if candidates want to put in extra time, but it should be made clear that that's not the expectation.\n\n### Set a clear scope, related to the role\n\n> The scope was poorly defined, which made the assignment not only tedious, but also seemed like a waste of time.\n\nThe scope was poorly defined, which made the assignment not only tedious, but also seemed like a waste of time.\n\nHaving clear, straightforward instructions can significantly enhance the take-home experience for candidates, making them feel purposeful and relevant. The best take-homes are those that directly align with the actual job.When candidates are asked to solve a simplified version of a real problem your company is facing, it not only tests relevant skills, but also gives a candidate insight into what work at your company would be like, which is really what selling is. (This is, of course, assuming that you believe what you’re working on is cool… If you don’t, how will you ever convince others?)\n\n> One was a great learning experience because I had to solve a problem similar to what I would face in the job. It was concise and focused.\n\nOne was a great learning experience because I had to solve a problem similar to what I would face in the job. It was concise and focused.\n\nBeing able to ask questions before or during the take-home, e.g., having a direct contact point who’s an engineer at the company, can also be a big plus.\n\n### Be thoughtful about where in your process you insert the take-home, and give candidates a choice between a take-home and something else\n\n#### For take-homes early in the process, before speaking to a human\n\nWe expect that many of the companies reading this piece have take-homes as the first step in\ntheir process, before ever talking to a human. This decision isn’t very popular.\n\n> If a company calls me for a screening interview, it means they've read my resume and cover letter, and not immediately dismissed my application as inappropriate. It also means they're putting a person on a phone call with me for the duration of the screening interview. This is symmetric, my effort matches theirs.\n\nIf a company calls me for a screening interview, it means they've read my resume and cover letter, and not immediately dismissed my application as inappropriate. It also means they're putting a person on a phone call with me for the duration of the screening interview. This is symmetric, my effort matches theirs.\n\n> [I] did a take home that was automatically sent to me after applying, before even speaking to a human. The feedback was 'you are too expensive,' no feedback on the coding.\n\n[I] did a take home that was automatically sent to me after applying, before even speaking to a human. The feedback was 'you are too expensive,' no feedback on the coding.\n\n> Company needs to build an investment with the candidate first—they shouldn't ask for it before meeting the candidate at least once.\n\nCompany needs to build an investment with the candidate first—they shouldn't ask for it before meeting the candidate at least once.\n\nThat said, take-homes can be a great way to let candidates who don’t look good on paper show what they can do, and those candidates are more likely to complete them.To prevent candidate unhappiness/attrition, give them a choice. Either submit a resume or do the take-home assignment or both. If you go this route, though, design a take-home that you trust. We’ve seen companies take this approach and then throw out perfect-scoring take-homes when they didn’t like the resume. If you use a take-home, then respect your candidates enough to follow up with the ones who’ve done well, even if they don’t look good on paper.\n\n#### For take-homes later in the process\n\nAnother way to make take-homes purposeful is to give your candidates an explicit choice about whether they’d rather do a technical interview or a take-home.Engineers are, in fact, split on which they’d prefer. Giving them a choice allows them to showcase their skills in the format they prefer and feel best prepared for. If you have good questions, you should be able to get good signal from either.\n\nOnly 10% of respondents told us that they were given the choice of take-home versus technical interview. So there is an opportunity for more companies to do this. It's a candidate-friendly gesture that shows empathy and can help candidates shine.\n\nMany candidates have spent months preparing for standard technical interviews. So it can feel anticlimactic when they find out that a company they're excited about doesn't do them. Others get so nervous in a live interview that they don’t perform.\n\n> I rarely don't pass take-home assessments, but I often fail to pass live interviews.\n\nI rarely don't pass take-home assessments, but I often fail to pass live interviews.\n\nInterestingly, one user we interviewed told us that they spend far less time on a take-home compared to preparing for a live technical interview. And because of that they prefer take-homes.\n\n> I prefer take-homes over all other assessments because I find I spend far less time on take-homes then I do preparing for live interviews. It's hard to overestimate the amount of extra time I spend preparing for a technical interview, compared to doing a take-home—for me it’s maybe 10 times as much. I've spent hundreds of hours, maybe 500 hours, over the course of my career preparing for technical interviews. And if I have one pop up, I can't just drop everything and do it right away. I have to spend a lot of extra time just ramping up for a particular interview, in addition to the hundreds of hours that I've done.\n\nI prefer take-homes over all other assessments because I find I spend far less time on take-homes then I do preparing for live interviews. It's hard to overestimate the amount of extra time I spend preparing for a technical interview, compared to doing a take-home—for me it’s maybe 10 times as much. I've spent hundreds of hours, maybe 500 hours, over the course of my career preparing for technical interviews. And if I have one pop up, I can't just drop everything and do it right away. I have to spend a lot of extra time just ramping up for a particular interview, in addition to the hundreds of hours that I've done.\n\n### Give candidates a good, rational reason to do the take-home\n\nClear communication about the purpose of a take-home in the hiring process, as well as why it’s rational to spend time on it, is important for candidates. It’s a way to make sure it feels purposeful and not like a random task.\n\nOne way to make the take-home feel deliberate is to replace some parts of your process with it. A standard process without a take-home has a recruiter call followed by a technical phone screen followed by an onsite (virtual or otherwise). The technical phone screen usually lasts about an hour. The onsite usually lasts 6 hours.\n\nLet’s say your take-home takes 2 hours to do. You can make it replace the phone screen and one of the onsite rounds, which nets out to the same number of hours spent. If you go this route, we recommend doing the mathexplicitlyfor candidates and showing them that the time they spend on the take-home is equivalent to the time they’d be spending on a process without it.\n\nAnother way to make the take-home feel deliberate is to incorporate it into the onsite, where at least one of the rounds, if not more, will include a code review and/or thoughtful discussion about tradeoffs and choices made. This should be standard practice, but isn’t always. 32% of our users said companies had told them this, and it was the reason they decided to do a take-home.\n\n> The best take-homes were ones that we discussed in the first rounds of interviews. The worst ones were ones that I submitted and we never talked about them again.\n\nThe best take-homes were ones that we discussed in the first rounds of interviews. The worst ones were ones that I submitted and we never talked about them again.\n\nIdeally, you do both of these things together, and very clearly explain to candidates both the math and how the take-home informs the content of the onsite.\n\n### Compensate candidates\n\nProbably the most striking result of our survey was that 58% of candidates think that they deserve compensation for completing take-homes. Yet only 4% reported ever receiving it. Compensation can shift candidate perceptions of the hiring process and of the company:\n\n> They compensated me for my time, which made the process feel very professional and respectful.\n\nThey compensated me for my time, which made the process feel very professional and respectful.\n\n> It was a completely open source codebase and so their process was the exact same as someone that was an employee: here's the ticket with the information to do it, set up the environment, download all the code, get everything running. They gave me a few different tasks I could choose from, I could pick two, and if I completed them I would be compensated a fixed rate, which was $100 for each task. Which in terms of the time I spent on it, is still really cheap for them.\n\nIt was a completely open source codebase and so their process was the exact same as someone that was an employee: here's the ticket with the information to do it, set up the environment, download all the code, get everything running. They gave me a few different tasks I could choose from, I could pick two, and if I completed them I would be compensated a fixed rate, which was $100 for each task. Which in terms of the time I spent on it, is still really cheap for them.\n\nIf candidates know they’re going to be paid for their work on a take-home, they’ll be more likely to complete it as well.\nCompensating candidates is a clear gesture that shows you value their time and effort, that there’s more symmetry in the relationship. It also goes hand-in-hand with time: paying also forces a company to scope the take-home to a reasonable number of hours. So it's a forcing function for good behavior—if you can’t afford much, then don't make the take-home too long!\n\n#### How much to pay?\n\nResponses about how much companies should pay for take-home assignments were split.\n\n• Fixed amounts: Just over half of respondents (52%) suggested specific and reasonable fixed amounts, ranging from $50 to $500.\n\nFixed amounts: Just over half of respondents (52%) suggested specific and reasonable fixed amounts, ranging from $50 to $500.\n\n• Hourly rates: The other almost half (47%) favored an hourly rate, with suggestions ranging from $50 an hour and upward (average of $217 an hour). Some suggested that the rate should correspond to the salary of the position being applied for, or be comparable to what an employee at that level and company would earn. As one user put it:Maybe just pay market?One antipattern when it comes to comp is NOT having a set rate, asking the candidate to name their price, and thereby putting the candidate in a position where they feel like they need to negotiate. In this scenario, the candidate has to negotiate twice: once on the take-home and once on their actual comp, with the worry that negotiating too aggressively on the take-home might count them out… or not aggressively enough anchoring the company to lower compensation down the line. No one needs these mind-games in an already stressful process. Just have a set rate, for god’s sake.\n\nHourly rates: The other almost half (47%) favored an hourly rate, with suggestions ranging from $50 an hour and upward (average of $217 an hour). Some suggested that the rate should correspond to the salary of the position being applied for, or be comparable to what an employee at that level and company would earn. As one user put it:\n\n> Maybe just pay market?\n\nMaybe just pay market?\n\nOne antipattern when it comes to comp is NOT having a set rate, asking the candidate to name their price, and thereby putting the candidate in a position where they feel like they need to negotiate. In this scenario, the candidate has to negotiate twice: once on the take-home and once on their actual comp, with the worry that negotiating too aggressively on the take-home might count them out… or not aggressively enough anchoring the company to lower compensation down the line. No one needs these mind-games in an already stressful process. Just have a set rate, for god’s sake.\n\n• Symbolic compensation: This is probably not the best option, but a handful of survey respondents (1%) did mention that a minimal symbolic compensation would do. While 1% is small, we found this interesting to include because, when we interviewed people, two of them mentioned this.I think any compensation at all has symbolic value. A $100 Amazon card would impress me. A $50 Amazon card and a company t-shirt would at least not insult me. It’s kind of a consolation prize to say, ‘No hard feelings.’I feel like a couple meal vouchers would do it these days.\n\nSymbolic compensation: This is probably not the best option, but a handful of survey respondents (1%) did mention that a minimal symbolic compensation would do. While 1% is small, we found this interesting to include because, when we interviewed people, two of them mentioned this.\n\n> I think any compensation at all has symbolic value. A $100 Amazon card would impress me. A $50 Amazon card and a company t-shirt would at least not insult me. It’s kind of a consolation prize to say, ‘No hard feelings.’\n\nI think any compensation at all has symbolic value. A $100 Amazon card would impress me. A $50 Amazon card and a company t-shirt would at least not insult me. It’s kind of a consolation prize to say, ‘No hard feelings.’\n\n> I feel like a couple meal vouchers would do it these days.\n\nI feel like a couple meal vouchers would do it these days.\n\nOf these options, we’d recommend a reasonable fixed amount based on the task, and the actual time it’s supposed to take.And of course you know how long it takes because you had one of your engineers do it themselves, right? Right??\n\n### Give feedback\n\nLack of feedback was the primary reason our survey respondents said their experience with a given company was bad.Regardless of interview type, we’re alwayspro feedback, but feedback is especially important for take-homes, because in a way they ask more of a candidate. Offering constructive feedback, regardless of the hiring decision, respects the candidate's effort on the take-home.\n\nDespite the time and effort they invested in completing take-homes, many of our survey respondents said they received no feedback at all. This was seen as demoralizing, and it deterred candidates from applying to future opportunities at those companies.\n\n> Getting rejected without having a chance to discuss the code with anyone is a terrible experience.\n\nGetting rejected without having a chance to discuss the code with anyone is a terrible experience.\n\n> It is really discouraging spending a large amount of time to find out you are rejected without explanations.\n\nIt is really discouraging spending a large amount of time to find out you are rejected without explanations.\n\n> They provided no feedback after submission, which made the whole effort feel unappreciated and one-sided.\n\nThey provided no feedback after submission, which made the whole effort feel unappreciated and one-sided.\n\nIncidentally, the main reason companies don’t give feedback is fear of getting sued. As it turns out,literally ZERO companies (at least in the US) have ever been sued by an engineerwho received constructive post-interview feedback.\n\nThanks toDan Fennessyfor all the behind-the-scenes work on this post.\n\nFootnotes:\n\n• Some users told us they’re seeing take-homes more recently, likely a function of worsening market conditions—the less leverage talent has, the more hoops companies can ask them to jump through.↩\n\nSome users told us they’re seeing take-homes more recently, likely a function of worsening market conditions—the less leverage talent has, the more hoops companies can ask them to jump through.↩\n\n• You might have to do this soon anyway, in all your interviews, toward off against AI-driven cheating.↩\n\nYou might have to do this soon anyway, in all your interviews, toward off against AI-driven cheating.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Prefix Pairs\n\n### Print Folder Structure\n\n### Partition List\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/why-engineers-dont-like-take-homes-and-how-companies-can-fix-them",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "I love meritocracy, but all the recent anti-DEI rhetoric is bad",
      "content": "# I love meritocracy, but all the recent anti-DEI rhetoric is bad\n\nI’m the founder of interviewing.io, an anonymous technical recruiting marketplace. In some ways, I’m the meritocracy hipster who waswriting about how eng hiring should be meritocraticand abouthow quotas are bad, way before saying either was cool.  At interviewing.io, my team and I have been trying to make hiring meritocratic for the last decade. Briefly, we do anonymous mock interviews. If people perform well in those interviews, they get introduced directly to decision-makers at top-tier companies, regardless of how they look on paper. 40% of the thousands of people we’ve helped were excellent engineers who did not look good on paper and would NOT have gotten in the door through traditional, “meritocratic” channels. Many of those engineers were rejected based on their resumes by the very same companies where they were later hired through us.\n\nRecently, there’s been a lot of pro-meritocracy, anti-DEI rhetoric. The most salient example isAlexandr Wang’s (CEO of Scale AI) tweet about how their hiring process has to be meritocratic(including a catchy new acronym, “MEI”).\n\n> Today we’ve formalized an important hiring policy at Scale. We hire for MEI: merit, excellence, and intelligence.This is the email I’ve shared with our@scale_AIteam.———————————————————MERITOCRACY AT SCALEIn the wake of our fundraise, I’ve been getting a lot of questions…— Alexandr Wang (@alexandr_wang)June 13, 2024\n\nToday we’ve formalized an important hiring policy at Scale. We hire for MEI: merit, excellence, and intelligence.This is the email I’ve shared with our@scale_AIteam.———————————————————MERITOCRACY AT SCALEIn the wake of our fundraise, I’ve been getting a lot of questions…\n\nThe post got a resounding “Great!” from Elon Musk a half hour later, followed by a wall of accolades from the Twitterverse. Since then, a“meritocracy board”has sprung up as well.\n\nIf you read Wang’s post carefully, you’ll see that he provides no specific examples of how Scale AI makes hiring meritocratic and doesn’t share any details about their current hiring process. I don’t know anyone from the Scale AI team personally, but after doing eng hiring in some form or another for over 15 years, I have questions. Does Scale AI’s hiring process differ substantially from other companies’? Or are they doing the same thing as everyone else: recruiters look at resumes, pick people who have top brands on their resume, and interview them?\n\nIf their process is indeed like everyone else’s, no matter what they say, they’re no more meritocratic than the companies who tout DEI hiring practices… and are just virtue signaling on Twitter.\n\nI’ll be the first to admit that DEI is ideologically flawed because of its emphasis on race and gender-based outcomes and its insistence on equality of those outcomes. In the last decade, we’ve seen some pretty bad DEI practices, the most egregious being a company looking up candidate photos on LinkedIn and rejecting qualified white, male candidates. (I talk more about the worst-offending hiring practices I’ve seen over the last decade in the section calledThe dark side of diversity… and two stories of diversity initiatives gone wrongbelow. If you just want the juicy bits, read that part.)\n\nHowever, yelling “Meritocracy!” as if it’s a fait accompli is just as harmful as the worst parts of DEI.In the last decade, we’ve seen countless companies claim to be meritocratic but refuse to talk to candidates unless they had a CS degree from one of a select few schools. There is nothing meritocratic about that. After seeing the pendulum swing back and forth a bunch in this space,I’d even go so far to say that, ironically, the DEI movement has done more for meritocracy than the loud pro-meritocracy movement is doing right now.\n\nI’m delighted that “meritocracy” is no longer a dirty word. But, just saying it isn’t enough. We have to change our hiring practices.We need to stop using meritocracy as a shield to preserve the status quo.If we could instead put into practice the best part of DEI – openness to hiring candidates from non-traditional backgrounds while eliminating the toxic hyperfocus on race and gender and the insistence on equality of outcomes, then we could create a real meritocracy, which is what most reasonable people actually want.1\n\nA quick disclaimer before we go further. To the right, DEI has come to mean mediocrity, and as such, it’s pitted, apples to apples, against meritocracy. That is not the intent here. When I talk about DEI, I’m not talking about the political side of it or how it’s often co-opted by the left as a gateway to Marxism. Similarly, meritocracy has been co-opted by the right to justify racism, eugenics, and god knows what other horrid things. Both extremes are bad. I’m trying to shed all political associations from either word and to just talk about them purely as hiring ideologies.\n\n## DEI’s outcomes problem\n\nOn its face, increasing diversity sounds great. Some groups are underrepresented in tech, likely because of inequality of opportunity. Talent is distributed uniformly, opportunity is not. Let’s fix it!\n\nTwitter threads like this one (from an engineering leader at Google) are hard to argue with. You should read the whole thing — it’s about a (white) lumberjack’s son who ended up as one of the founding employees at SpaceX.\n\n> Everyone loves SpaceX, and thinks of Elon as the genius founder that invents new types of rockets that are cheaper, faster, more efficient.It's fun to think of it as SpaceX versus NASA, or Silicon Valley vs Aerospace.But let's talk about D&I, and logs. Logs as in timber. 🌲— Mekka 💉x7 @mekkaokereke@hachyderm.io (@mekkaokerekebye)January 5, 2019\n\nEveryone loves SpaceX, and thinks of Elon as the genius founder that invents new types of rockets that are cheaper, faster, more efficient.It's fun to think of it as SpaceX versus NASA, or Silicon Valley vs Aerospace.But let's talk about D&I, and logs. Logs as in timber. 🌲\n\nAnd indeed, ostensibly, DEI is hard to argue against because it speaks to our innate desire for fairness and equal access to opportunity. Many DEI leaders honestly believe this. However, despite the good intentions, in practice, DEI tends to laser focus on race and genderoutcomes, and that is hard to arguefor.\n\nOver the years, I’ve seen claims that diverse teams perform better, as well as claims that one must have a diverse workforce if one has a diverse customer base. Though it’s often stated as fact, the former is inconclusive — there are studies with clear results for AND clear results against.2To the best of my knowledge, the latter point is unsubstantiated as well — isn’t the hallmark of a good designer that they be able to design for customers who are different than they are?3\n\nThe arguments for diversity are inconclusive, and as such, the ultimate measure of success for diversity isn’t about the performance of an organization or about customer satisfaction. Those are packaged up as obvious side benefits. The way we measure success for diversity is tautological: success is measured by the diversity of our workforce.\n\nWhat does that mean?In practice, recruiting orgs usually define success by looking at some demographic and its representation in the general population.So, in the case of women in tech, women make up half the U.S. population, so 50% of engineers in an organization should be women. Similarly, 12% of the U.S. population is Black, so for hiring to be equitable, 12% of the engineers in an organization should be Black. Likewise, 19% of the U.S. population is Hispanic, so 19% of engineers should be Hispanic, and so on.\n\nWhat’s the problem with this approach? It does not account for inputs. The most basic input is:  How many female engineers are there in the US? And how many Black or Hispanic engineers are there in the US?\n\nThe answer: not enough. Only 20% of CS graduates in the US are women. And there are also not enough engineers of color to get to race parity either. Only 6% of CS graduates in the US are Black, and only 7% are Hispanic.4\n\nThose numbers get even more grim when you pare them down to how companies usually hire: from top-ranked schools. We’ll talk more about this pedigree-based approach to hiring when we discuss the pitfalls of meritocracy. For now, suffice it to say that a few years ago,we ran the numbers to show that getting to gender parity in software engineering is mathematically impossiblegiven companies’ focus on pedigree; though it was unfashionable to admit it, we called out that there really is a pipeline problem.\n\nAnd then there’s this issue: What portion of those candidates are even applying to your company in the first place? And what portion of those applicants are actually qualified to do the work? The ONLY way to really take race and gender bias off the table is to do blind as much of the hiring process as possible and then to accept that you may not get the numbers you want but that your outcomes willactuallybe fair.\n\n## The dark side of diversity (and two stories of diversity initiatives gone wrong)\n\nIn addition to mock interviews, interviewing.io also helps companies source engineering candidates. We know how people perform in mock interviews, and that lets us reliably predict who’ll do well in real interviews. We identify the top performers from practice and introduce them to companies. We’ve been doing it for a while, and our top performers have consistently outperformed candidates from other sources by about 3X.\n\nI promised in the beginning of this post that I’d spill some juicy tidbits. Here goes.\n\nYears ago, we pitched Facebook’s university recruiting team on using us to hire for their intern class. The pitch was thatwe had thousands of college students from all over the U.S.who had done a bunch of mock interviews, and that we knew who the top performers were. Many of our students did NOT come from the handful of top-tier schools that Meta typically recruited from. If they were to recruit through us, they’d have to do way fewer interviews (we had already taken care of technical vetting), and they’d get a much more diverse slice of the population.\n\nOur only process request was that they conduct interviews with students anonymously, on our platform, so they wouldn’t be biased against top-performing students who didn’t go to top schools.\n\nWe didn’t get the gig. The main bit of pushback from Facebook was that anonymity violated guidelines set by the OFCCP.TheOFCCP(Office of Federal Contract Compliance Programs) is part of the U.S. Department of Labor and is “responsible for ensuring that employers doing business with the Federal government comply with the laws and regulations requiring nondiscrimination.” One of the many things that the OFCCP requires you to track, if you do business with the federal government, is the race and gender of your applicants. We couldn’t agree to this. While the requirement makes sense on the surface — as they say, you can’t fix what you can’t measure — in this case, it was a Kafkaesque roadblock to achieving the very thing that the OFCCP is fighting for: reducing discrimination.5\n\nMore broadly, you can’t take an outcomes-based approach unless your inputs are homogenous and the playing field is level. The biggest advocates of DEI will argue, correctly, that the playing field is not level. Given that it’s not level, focusing exclusively on outcomes creates all manners of perverse incentives — the dark side of diversity is the logical conclusion of an outcomes-based approach: incentivizing the selection of candidates based on race and gender and ultimately discriminating against non-URM candidates.\n\nWe’ve worked with companies of all sizes, from seed stage startups to FAANG, and at one point or another, we’ve worked with most FAANGs and FAANG-adjacent companies. We’ve seen it all. In 2022, at the height of diversity fever, one well-known FAANG-adjacent customer approached us with a specific request. Let’s call them AcmeCorp (name obviously changed; they’re a household name, but I don’t want to rake them over the coals publicly because they were a great partner to us until this thing happened).\n\nAcmeCorp’s recruiting team wanted us to do some pre-filtering on the candidates we introduced to them.\n\nWe already do some pre-filtering: location, years of experience, visa status, and obviously historical performance in mock interviews. Only the top few percent of our candidates get to talk to employers.\n\nBut on our platform, everything is candidate driven. We don’t have a searchable candidate database, and we don’t share candidate data with companies. Rather, we list the companies who hire through us, and our top-performing users can connect with them.\n\nOver our lifetime, plenty of companies have approached us asking if they could get access tojusttop-performing women and people of color on our platform. It makes sense. Recruiters are given marching orders to find more “diverse” candidates, and this is the result. And it’s a convenient way to pass on liability. Now, instead of their sourcers having to filter out candidates who aren’t “diverse”, we have to do it.\n\nOf course, we’ve always denied these requests. We’re not a “diversity” platform, and we can’t imagine a world where we’d block what jobs and employers our users could see based on their race and gender (information we don’t collect systematically in the first place).6\n\nEven though, on their face, these requests weren’t really OK, we got so many of them that, over time, we got desensitized and would joke internally about how yet another company wanted abinder full of women.\n\nHowever, AcmeCorp’s request was more egregious than the rest because it gave us visibility into how many companies were behaving internally when faced with diversity goals. It was common knowledge that many companies were doing diversity-specific sourcing, so we weren’t shocked when we were asked to help with that. What wasn’t common knowledge is that companies were blatantly rejecting qualified applicants who didn’t meet their diversity criteria.\n\nAcmeCorp had a fairly complex candidate filtering process in place, and they wanted us to run that same process on any of our top performers who expressed interest in working there.\n\nHere’s how their process worked. Note that AcmeCorp, like many companies, pays differently depending on where you live.\n\n• List a remote job that’s hiring all over the United States.\n\n• When candidates apply from high cost of living areas (e.g., the SF Bay Area, NYC), only consider women and people of color. Reject the rest.\n\n• When candidates apply from lower cost of living areas (e.g., small towns in the Midwest), consider everyone.\n\nIn other words, a white man from San Francisco would have no shot at getting an interview at this company — he would be auto-rejected and left to wonder what was wrong with his resume.\n\nWhy did this company take this approach? They were willing to pay top dollar for women and people of color but not for other types of engineers, and they hid behind geography to do it. Because of the geographical element, it’s not as blatant as outright rejecting people based on race and gender, but for all intents and purposes, it’s the same.\n\nOutside of this practice being questionably legal at best, it’s also unethical. You can argue that companies should be able to do outreach to any demographic groups that they want. It’s much harder to argue that it’s ok to reject applicants based on their race and gender.\n\nWe terminated the relationship.7\n\nUnfortunately, when you tie the success of your recruiting program to gender and race outcomes, these are the behaviors that inevitably arise. For all its flaws, though, the DEI movement, coupled with increasing demand for engineers, propelled companies to make deep changes to their hiring processes. For every DEI horror story, there is an equal and opposing story about a Head of Talent or investor engineering leader who persuaded their eng hiring managers to stop looking just at students from MIT and Stanford, to change their interview processes, to blind resumes, and to do a bunch of other useful things that benefitted every non-traditional candidate.\n\nBut, back to what’s happening today. You don’t just get to say “meritocracy” and be done with it. In practice, meritocratic hiring doesn’t really exist, and what companies call meritocracy is anything but.\n\n## The false promise of meritocracy\n\nFor most sane people, the concept of meritocracy is hard to argue against. Shouldn’t the most qualified person get the job?\n\nUnfortunately, because the definition of “qualified” is murky, meritocracy often becomes a justification for over-indexing on pedigree: where people went to school or where they worked previously.“We just hire the best” often means “we hire people from FAANG, MIT, and Stanford.” Unfortunately, those are proxies for ability, not actual measures of it. Our research has consistently shown that where people go to school isn’t very predictive of what they can do. Where they’ve worked issomewhatpredictive, but it’s not the most important thing.8\n\nDespite that, those are the main criteria that companies use when they decide whom to interview, and because that’s the first step in a hiring funnel, it’s the one that gets applied to the most candidates. Any attempts at making the process meritocratic after the resume review (e.g., training interviewers, doing anonymous interviews) are bound to be less impactful because they affect 10X-100X fewer candidates.\n\nFortunately, for all their flaws, at least technical interviews do focus on ability — once you get in the door, it’s not about how you look on paper but about how you perform. As a result, all other things being equal, how you decide which candidates to let into your process is the litmus test for whether your process is truly meritocratic or not.\n\nUnfortunately, the pedigree-based approach isn’t particularly meritocratic. In our 9 years, we’ve diligently tracked the backgrounds of our candidates, and as I mentioned in the intro to this post, about 40% of our top performers don’t look good on paper (but do as well as or outperform their pedigreed counterparts in interviews).\n\nOne of our users got rejected from a top-tier social network company three times… THREE TIMES… based on his resume before he got hired there through us, after doing very well in an anonymous interview. I’ve shared a few diversity horror stories, but the sad reality is that (faux) meritocracy horror stories like this one happen every day. I wish I had a real meritocracy horror story to share, but as far as I know, eng hiring has never been truly meritocratic. If you know otherwise, please do share.\n\nOur data also shows that pedigree has very little bearing on interview performance. Where people went to school has no bearing on their interview performance, and though where people have worked does carry some signal, it’s not nearly as important as other traits — in past research, we’ve found that not having typos/grammatical errors on your resume is a much stronger signal than whether they’ve worked at a top company, as is whether they’ve done a lot of autodidactic work.8\n\nMoreover, in two separate studies completed a decade apart, where recruiters had to judge resumes and try to pick out the strong candidates, we consistently saw that recruiters are only as accurate as a coin flip and largely disagree with each other about what a good candidate looks like.9\n\nThat’s why posts like the one from Scale AI get my hackles up. You don’t get to say that you’re meritocratic if you’re just scanning resumes for top brands. That’s not meritocracy. It’s co-opting a hot-button word for clout.\n\nAnd it’s not just Scale AI. This is how tech companies define being meritocratic and hiring the best. It’s just that not all of them are so self-congratulatory about it.\n\nSo how do you ensure that your hiring isactuallymeritocratic?\n\n## How to actually “do” meritocracy, if you mean it\n\nIn arecent study, we looked at how recruiters read resumes and how good they are at finding talent. As you saw above, we learned that recruiters are barely better than a coin flip. Another thing we looked at in the same study was what made them pick certain resumes over others.\n\nThe two traits that were the most predictive of whether a recruiter would pick you? First, whether you had top brands on your resume, and second, whether you were Black or Hispanic. This is how recruiters work today. If you don’t intervene and make changes, today’s competing approaches willbothbe implemented by your team simultaneously, resulting in a farcical chimera of fake meritocracy and outcomes-based diversity goals.\n\nSo what can you actually do, if you, in good faith, want to run a meritocratic hiring process? (By the way, if you believe that talent is distributed uniformly, by definition, this approach will entail being open to talent from traditionally underrepresented backgrounds.)\n\nFirst, you have to move away from identity politics and expand the definition of “underrepresented.”You have to believe, in your heart of hearts, that great talent can come from anywhere and must stop focusing arbitrarily on one marginalized group at the expense of another. Basically, you have to be open to any candidate who’s good, regardless of how they look on paper, without prioritizing race and gender. This certainly includes race and gender, but it also includes socioeconomic status, educational background (or lack thereof), and any number of other traits that have nothing to do with someone’s ability to do the job. Hell, why not just stop worrying about candidate backgrounds and have a process that welcomes all and surfaces the best? Following this path will logically require moving away from race and gender outcomes-based goals.\n\nThen, you have to accept and internalize that your current method of deciding who gets to interview, which is very likely focused on brands (where people have worked or where they’ve gone to school), is not only NOT meritocratic but also ineffective.We talked above about how pedigree is very limited in its ability to predict performance.\n\nIf you accept both of these premises — expanding the definition of “underrepresented” and moving away from focusing on brands — the hard work begins.Companies have used resumes (and brands by extension) since time immemorial because they’re easy, and as you saw in our data above, they do carrysomesignal. But even though they carry a little signal, recruiters are not very good at extracting it.\n\nHere’s what you should do to pragmatically and realistically revamp your hiring process to be more meritocratic.I challenge Scale AI and all the leaders on the “meritocracy board” to publicly commit to at least two of these — or to name the specific, actionable approaches they plan to take.\n\n• Change how you read resumes.10\n\n• Give candidates the option of submitting some writing about a past project they’re proud of.\n\n• Give candidates the option of doing a take-home or an asynchronous assessment. Put enough work into those assignments such that you’ll trust their outcome enough to not have to look at a resume.\n\n• [EXTRA CREDIT] Invest what you can in closing the gaps.\n\n### Change how you read resumes\n\nFirst, SLOW DOWN. Inthe study I mentioned above, we saw that recruiters take a median of 31 seconds to judge a resume, but spending just 15 extra seconds reading a resume could improve your accuracy by 34%.\n\nOur second piece of advice is this. More than 20 years ago, Freada Kapor Klein from Kapor Capital coined the term “distance traveled,” referring to what someone accomplished, in the context of where they started. For instance, Kapor Klein recommends that, in their admissions processes, universities should consider not just the number of AP tests a candidate has passed but the number of AP tests taken divided by the total number offered at their high school. For example, if an applicant took 5 AP tests and their school offered 27, that paints a very different picture from another applicant who also took 5 AP tests when that’s the total number offered at their school. Kapor Capital uses distance traveled as one of their metrics for determining which entrepreneurs to fund. One can easily apply this concept to hiring as well.\n\nThe data shows that slowing down is important, and as part of slowing down, when you read a resume, try to evaluate candidates’ achievements, not in a vacuum, but in the context of where they came from. Think about the denominator. But don’t think for a moment that we recommend that you lower the bar — absolutely not. On interviewing.io, we regularly see nontraditional candidates objectively outperforming their FAANG counterparts.\n\n### Give candidates the option of submitting some writing about a past project they’re proud of\n\nMy friends at KeepSafe and Iran an experiment about a decade ago where we tried replacing resumes with a writing sample about a past project. It was a huge success.\n\nEven today, when we hire at interviewing.io, we use this approach. We mostly hire off of our own platform (we just list our own open positions alongside others). However, not all of our users have done enough mock interviews to have a rating, and for those users, we have a different flow where we ask them to write about a past project. Boy, are the results telling.\n\nHere’s what our application form looks like. Steal it if you want.\n\n### Give candidates the option of doing a take-home or an asynchronous assessment\n\nTake-homes and asynchronous assessments are not well-loved by candidates, primarily because of value asymmetry. They ask a lot of the candidate but nothing of the company, and it’s not uncommon for a candidate to have to do hours of work and then never hear anything back.\n\nTo be clear, this is NOT the setup we’re advocating. Here’s what we’d advise instead:\n\nGive candidates the option of doing a take-home/assessment that takes no more than 1 hour,instead of submitting their resume. When we say option, we mean that the candidate can decide whether they want to do the take-home or not. If they choose not to, then you’ll read their resume, hopefully using our suggestions above. If they choose to complete the take-home, then you forgo their resume and make your go/no-go decision based entirely on the results of the take-home.\n\nIf you choose this route, it’s critical tocome up with an assessment whose results you trust. Many companies use a take-home in addition to getting the resume and will still not move forward with candidates who look good on paper. That’s not meritocratic. Take the time you need to come up with a question that’s hard to cheat on and that gets you the signal you need. Yes, coming up with a good assessment takes work. But no one said that making your hiring process meritocratic was easy.\n\n### [EXTRA CREDIT] Invest what you can in closing the gaps\n\nThis advice probably applies more to big companies than smaller ones, because bigger ones have more resources to effect change. Regardless,  if you believe in meritocracy, then you understand that a true meritocracy is not possible without a level playing field for your candidates. One of the best things about the DEI movement is that it’s made us aware how unlevel the playing field really is. Whether you subscribe to DEI or not, this is probably not a controversial statement, and if you want to see true, meritocratic hiring, you have some obligation to help promote equality ofopportunity.\n\nWhere to begin?\n\nAlthough I expect that it’s not level in many places, and there are plenty of opportunities to effect change, starting with elementary education11, I'll talk about the inequality I’ve observed firsthand repeatedly over the last decade:the technical interview practice gap. How much you practice is the biggest predictive factor of interview performance — not seniority, not gender, and not a CS degree. And so is socialization. After all, if you’re around people going through the same thing, like at a top-tier CS school, rather than beating yourself up after a disappointing interview, you’ll start to internalize that technical interviewing is flawed and that the outcomes are sometimes unpredictable. Fortunately, there are interventions one can make to close these gaps, and the simplest is to provide practice and community for people who don’t have access to them. Reach out to us about this, find a non-profit that helps people practice, donate to your favorite university if they have a good practice program, or any number of other things.\n\nUltimately, which gap you choose to help close and how you choose to do it is up to you. But if your company has the means, it’s your responsibility to invest in gap-closing measures. You don’t have to donate money. You can offer mock interviews to your candidates before their real interviews. You can start an apprenticeship program. You can encourage your engineers to do some tutoring. However you approach it, though, you can’t talk about meritocracy with a straight face and not dosomethingto level the playing field.\n\nFootnotes:\n\n• In fairness, the Scale AI post positioned them as symbiotic. I believe that as well.↩\n\nIn fairness, the Scale AI post positioned them as symbiotic. I believe that as well.↩\n\n• There are many sources arguing for and against diversity leading to better-performing teams. Here are some examples:For:https://www.mckinsey.com/featured-insights/diversity-and-inclusion/diversity-wins-how-inclusion-mattersAgainst:https://medium.com/the-liberators/in-depth-the-double-edged-sword-of-diversity-in-teams-765ff72a55da(except for “age diversity”) andhttps://corpgov.law.harvard.edu/2021/05/25/diversity-and-performance-in-entrepreneurial-teams/↩\n\nThere are many sources arguing for and against diversity leading to better-performing teams. Here are some examples:For:https://www.mckinsey.com/featured-insights/diversity-and-inclusion/diversity-wins-how-inclusion-mattersAgainst:https://medium.com/the-liberators/in-depth-the-double-edged-sword-of-diversity-in-teams-765ff72a55da(except for “age diversity”) andhttps://corpgov.law.harvard.edu/2021/05/25/diversity-and-performance-in-entrepreneurial-teams/↩\n\n• One of the most insulting examples of the “we need a diverse workforce to serve our diverse customer base” argument occurred  when I was pitching Amazon on using interviewing.io to hire. This was years ago, and back then, out of curiosity, I’d always ask the organizations we were pitching why they valued diversity. I don’t think I ever got a good answer, but this one was especially bad. One of the recruiters we met with went on a long diatribe about how Amazon sells lots of shoes and you need women on the eng team because women understand shoes better than men.↩\n\nOne of the most insulting examples of the “we need a diverse workforce to serve our diverse customer base” argument occurred  when I was pitching Amazon on using interviewing.io to hire. This was years ago, and back then, out of curiosity, I’d always ask the organizations we were pitching why they valued diversity. I don’t think I ever got a good answer, but this one was especially bad. One of the recruiters we met with went on a long diatribe about how Amazon sells lots of shoes and you need women on the eng team because women understand shoes better than men.↩\n\n• Getting more women and people of color to study computer science is a worthy cause. Hell, getting anyone who’s historically been marginalized to study computer science is worthwhile. It’s great for our economy, and it’s currently one of the best levers for upward social mobility available. But, while we hope more companies do these things, it is not reasonable to expect that companies can be responsible for educational interventions that often need to start at the elementary school level. Of course, companies should do what they can. But expecting them to pull off mathematical impossibilities is irrational, and the DEI movement’s stalwart refusal to acknowledge the pipeline problem undermines the movement as a whole.↩\n\nGetting more women and people of color to study computer science is a worthy cause. Hell, getting anyone who’s historically been marginalized to study computer science is worthwhile. It’s great for our economy, and it’s currently one of the best levers for upward social mobility available. But, while we hope more companies do these things, it is not reasonable to expect that companies can be responsible for educational interventions that often need to start at the elementary school level. Of course, companies should do what they can. But expecting them to pull off mathematical impossibilities is irrational, and the DEI movement’s stalwart refusal to acknowledge the pipeline problem undermines the movement as a whole.↩\n\n• I was actually able to get in touch with a former OFCCP higher-up who admitted that rejecting anonymity in hiring was against the spirit of OFCCP requirements. But they sadly wouldn’t go on the record.↩\n\nI was actually able to get in touch with a former OFCCP higher-up who admitted that rejecting anonymity in hiring was against the spirit of OFCCP requirements. But they sadly wouldn’t go on the record.↩\n\n• The closest we’ve ever come to doing this is our Fellowship program, where we gave free practice to engineers from traditionally underrepresented backgrounds. It was a great program, but what made it great was that our interviewers were eager to help these candidates. We were able to do free practice because our interviewers graciously agreed not to charge. That said, if I were to run this program again, I’d probably focus more on socioeconomic status and non-traditional credentials rather than just race and gender.↩\n\nThe closest we’ve ever come to doing this is our Fellowship program, where we gave free practice to engineers from traditionally underrepresented backgrounds. It was a great program, but what made it great was that our interviewers were eager to help these candidates. We were able to do free practice because our interviewers graciously agreed not to charge. That said, if I were to run this program again, I’d probably focus more on socioeconomic status and non-traditional credentials rather than just race and gender.↩\n\n• Here’s the email we ended the relationship with. I’m including it because it was hard to write and even harder to hit send on, but I think we did the right thing, and maybe someone else will need to write something like this in the future… in which case, please steal our copy.↩\n\nHere’s the email we ended the relationship with. I’m including it because it was hard to write and even harder to hit send on, but I think we did the right thing, and maybe someone else will need to write something like this in the future… in which case, please steal our copy.↩\n\n• Research that shows that having attended a top school isn’t very predictive and that, while experience at a top company is somewhat predictive, it’s not the most important thing:Lessons from 3,000 technical interviews… or how what you do after graduation matters way more than where you went to schoolWe looked at how a thousand college students performed in technical interviews to see if where they went to school mattered. It didn't.Lessons from a year’s worth of hiring data↩↩2\n\nResearch that shows that having attended a top school isn’t very predictive and that, while experience at a top company is somewhat predictive, it’s not the most important thing:\n\n• Lessons from 3,000 technical interviews… or how what you do after graduation matters way more than where you went to school\n\n• We looked at how a thousand college students performed in technical interviews to see if where they went to school mattered. It didn't.\n\n• Lessons from a year’s worth of hiring data\n\n• Anyone who’s read my writing for a long time will pause here and wonder why I’m OK with resumes and recommending anything about reading them. Until recently, I was stalwartly against resumes and convinced that they carried no signal whatsoever. Then, as part ofthe recruiter study I mentioned, we built some simple ML models to judge resumes and compared their performance to human recruiters. They all outperformed recruiters, and that surprising result made me reverse my stance.↩\n\nAnyone who’s read my writing for a long time will pause here and wonder why I’m OK with resumes and recommending anything about reading them. Until recently, I was stalwartly against resumes and convinced that they carried no signal whatsoever. Then, as part ofthe recruiter study I mentioned, we built some simple ML models to judge resumes and compared their performance to human recruiters. They all outperformed recruiters, and that surprising result made me reverse my stance.↩\n\n• First study (2014):https://interviewing.io/blog/resumes-suck-heres-the-dataSecond study (2024):https://interviewing.io/blog/are-recruiters-better-than-a-coin-flip-at-judging-resumes↩\n\nFirst study (2014):https://interviewing.io/blog/resumes-suck-heres-the-dataSecond study (2024):https://interviewing.io/blog/are-recruiters-better-than-a-coin-flip-at-judging-resumes↩\n\n• There are other gaps that start way before someone gets to college. Enumerating the is out of scope of this piece, butthis writeup by the National Math and Science Initiativeis a good place to start.↩\n\nThere are other gaps that start way before someone gets to college. Enumerating the is out of scope of this piece, butthis writeup by the National Math and Science Initiativeis a good place to start.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### XML Parser\n\n### Binary Tree Upside Down\n\n### Remove Nth Node from End of List",
      "source_url": "https://interviewing.io/blog/i-love-meritocracy-but-all-the-recent-anti-dei-rhetoric-is-bad",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Why resume writing is snake oil",
      "content": "• For employers\n\n• Gift mock interviews\n\n# Why resume writing is snake oil\n\nI just asked ChatGPT to size the global resume writing industry. Here’s what it had to say:\n\nThe global resume writing industry was valued at approximately $1.37 billion in 2024 and is expected to grow steadily, reaching around $1.44 billion by 2025, and about $1.59 billion by 2033... The growth is driven by increased demand for professional resume services due to heightened job market competition, coupled with advancements in technology and personalization through AI-driven resume writing tools.\n\nI don’t know if these numbers are exactly true, and I don't know what portion of that is resume writing for engineers specifically, but it doesn’t really matter. I am certain that they are directionally correct. As the market has gotten worse, I’ve heard more and more job seekers ask for resume reviews and rewrites, and I’ve seen many companies in the interview prep space start offering resume reviews.\n\nThey’re all selling snake oil, and no one should spend a dime on it. I’ll explain why in a little bit, but first let’s talk about something else I found on the internet.\n\nA few days ago, I sawthis post on Reddit. It was a leaked internal set of hiring requirements (sometimes called a “hiring spec”) that looked like this:\n\nOf course, there was the usual Reddit shock and awe and pearl clutching about whether this hiring spec could be real.\n\nYes, it’s real. As someone who’s been in hiring for over a decade, I’m certain of it. And not only is it real, but it’s routine. It’s business as usual.\n\nI’ve been a head of talent at top startups, and I used to run my own recruiting agency where I hired for a bunch of companies who have since become household names. When I worked as an agency recruiter 10 years ago, companies regularly shared documents like this one with me. The only difference between then and now is the idea of a “diversity bonus.” Everything else hasn’t changed in a decade.\n\nDocuments like this are why I quit recruiting to start interviewing.io.\n\nAnd documents like this are the reason that the entirety of the resume writing profession is a snake oil pit.\n\nThere is one notable exception to this rule, which I’ll talk about, but most people should not spend a dime on resume writers. Here’s why.\n\n## Recruiters aren’t reading your resume. They’re skimming it for very specific things.\n\nIn 2024, we ran astudywhere we asked 76 recruiters to look at resumes and indicate which candidates they’d want to interview. Recruiters are most likely to contact you if:\n\n• You look good on paper (i.e., you have top-tier companies and/or schools on your resume… just like in the “hiring spec” above)\n\n• You belong to a group that’s been traditionally underrepresented in tech (i.e., you’re a woman or a person of color… just like in the “hiring spec” above)\n\n• To some extent, if you have niche skills (e.g., ML engineering)\n\nWhat's missing? Things like, for example, having a quantifiable impact or demonstrating teamwork. Essentially, everything recruiters look for is stuff that you either have or you don't.\n\nIn this same study, we also learned that when recruiters do look at resumes, they spend an average of 30 seconds reviewing them. That's not enough time to read every bullet. Instead, they are mainly skimming for recognizable companies and schools.\n\nHere is an excellent example,also from Reddit, that makes this difference very clear.\n\nThis resume certainly passes the skim-test: good companies, appropriate roles, and a good university too. It's only when you actually spend more than 30 seconds reading the resume that you learn that not only is this resume obviously fake, but it also celebrates accomplishments like \"Spread Herpes STD to 60% of intern team.” And yet, it got a 90% callback rate. Recruiters just aren't reading the details.\n\nIn other words, either you already have what recruiters are looking for (which often may be different than what’s explicitly listed in a job description… because they certainly aren’t sharing the real “hiring spec”) or you don’t. If you have it, then you don’t need a resume writer — though it’s always smart to make it easier for recruiters to find the things they’re looking for. If you don’t have what they’re looking for, no amount of agonizing over how you present yourself is going to move the needle.\n\nSo, if recruiters aren’t reading and are just skimming for brands, why do people agonize over their resumes and give money to resume writers?\n\n## Why the resume myth persists\n\nIn interviewing.io’s Discord server, I regularly see requests for resume reviews. I also see other interview prep companies charging money for resume reviews. Presumably they charge because the demand is there. But why are people willing to pay for something that is completely useless?\n\nI think it’s a mix of misinformation and the desire for control.\n\nRecruiters rarely admit that they’re skimming primarily for brands. If you read recruiters’ advice for job seekers, it almost always includes advice about quantifying your impact, including your side projects1, and so on. These bits of advice are well-intentioned, I’m sure, but they perpetuate a harmful myth and an exploitative resume writing cottage industry.\n\nThe other reason is control. Job searches are intimidating, and putting yourself out there is hard. It’s much easier to retreat to the comfort of polishing up your bullet points because it’s something you can control. You get into a routine, rewrite your bullets, and upload your resume to a bunch of places. Then when you don’t hear back, you retreat to familiar ground, grind on your bullets some more, and rinse and repeat. Because it’s easier to believe that if you can just get your bullets right, you’ll finally hear back. That narrative sure beats out the idea that no one is reading your resume no matter how much you fine-tune it.\n\n## The notable exception: If you already look good on paper, polishing your resume CAN be useful.\n\nIf you’re fortunate enough to have top brands on your resume, cleaning it up can be a good use of your time. I still wouldn’t hire a resume writer because the details don’t matter very much. Just make sure that recruiters can easily spot the brands.\n\nHere’s an example. Take a look at the before and after screenshots of the resume below.\n\nThis resume belongs to one of our users who was kind enough to let us share it. He actually has two of the three things that recruiters look for: FAANG experience and a niche title (ML engineer). But both are buried! And the section that gets the most attention is wasted on undergraduate awards.\n\nAs you can see, he spent almost 3 years at Apple, but a recruiter skimming his resume might not notice that because it was a while ago. Instead, he showcases an undergrad award and some technologies/languages that he knows. Neither of those is nearly as useful to recruiters as FAANG experience.\n\nHis current title is also ML engineer, and one at the Principal level at that. But it wasn’t always: He went from back-end to SRE to a little bit of everything to ML, and because of that, it’s possible a recruiter would miss it as well.\n\nWe edited this candidate’s resume to put all the things recruiters look for at the very top of the resume and moved the buzzword soup to the bottom. This candidate is obviously well-positioned because he has FAANG experience, several top schools, and niche skills — but before, many recruiters didn’t spot them. After he made these changes, the number of interviews he got increased by 8X.\n\nNote that we didn’t really rewrite anything. We just moved stuff around. You can do this yourself without needing a professional writer.\n\n## For everyone else, stop working on your resume, and start doing outreach.\n\nIf you’re like most people, you don’t have top brands on their resume, so no amount of rewriting is going to move the needle much. Instead of agonizing over it, stop applying and start doing outreach to hiring managers. It’s your best shot to get noticed and to get someone to look at you as a human being, instead of a collection of brands.Here’s how to do it. For a deeper dive into both resume writing and how to get in the door, you can readBeyond Cracking the Coding Interview(bothchapters are also available for free).\n\nFootnotes:\n\n• Will side projects help you get a job? Good question and one that should be teased apart a bit. Getting a job has two components: getting in the door and doing well in interviews. In general, side projects are useless for getting in the door. Yes, every once in a while, a side project goes viral. Or if you build something really cool with your target company’s API, it can get some attention. But that’s pretty rare. Most side projects that adorn resumes go completely unnoticed.  When it comes to performing well in interviews, it depends. If the companies you’re interviewing at test you on practical skills, then they can be a great use of time. They can also be a great use of time to help you understand how APIs work, how the internet works, how clients and servers talk to each other, and so on. But if the companies you’re targeting primarily ask algorithmic questions, then side projects probably aren’t the best use of time. Finally, will side projects make you a better engineer? Absolutely. And that’s the best reason to do them. But that’s not quite the same as getting a job, is it? Once you're actively looking for a job, your time is better spent on interview prep and outreach.↩\n\nWill side projects help you get a job? Good question and one that should be teased apart a bit. Getting a job has two components: getting in the door and doing well in interviews. In general, side projects are useless for getting in the door. Yes, every once in a while, a side project goes viral. Or if you build something really cool with your target company’s API, it can get some attention. But that’s pretty rare. Most side projects that adorn resumes go completely unnoticed.  When it comes to performing well in interviews, it depends. If the companies you’re interviewing at test you on practical skills, then they can be a great use of time. They can also be a great use of time to help you understand how APIs work, how the internet works, how clients and servers talk to each other, and so on. But if the companies you’re targeting primarily ask algorithmic questions, then side projects probably aren’t the best use of time. Finally, will side projects make you a better engineer? Absolutely. And that’s the best reason to do them. But that’s not quite the same as getting a job, is it? Once you're actively looking for a job, your time is better spent on interview prep and outreach.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Partition List\n\n### Regular Expression Matching\n\n### Most Frequent Element in an Array\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/why-resume-writing-is-snake-oil",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "We co-wrote the official sequel to Cracking the Coding Interview",
      "content": "• For employers\n\n• Gift mock interviews\n\n# We co-wrote the official sequel to Cracking the Coding Interview!\n\nEDIT 2:Read 9 chapters of the book for free!These include:\n\n• The first seven chapters of the book, covering topics such as why technical interviews are broken, what recruiters won't tell you, why not to spend a lot of time on resumes, and how to get in the door at companies without a referral.\n\n• Two technical chapters: Sliding Windows and Binary Search. Our new take on Binary Search teaches one template that works for every binary search problem on LeetCode, with only a single-line change you need to remember. The Sliding Windows chapter features 6 unique sliding window templates that make off-by-one errors a thing of the past.\n\nEDIT:Beyond Cracking the Coding Interviewis out now! Here's the table of contents:\n\nI have some exciting news. Along with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I’m writing the official sequel toCracking the Coding Interview(often called the bible of technical interview prep). It's fittingly calledBeyond Cracking the Coding Interview.\n\nI’ve always wanted to write a book about technical interviewing. And this is it. And of course it'll draw on all the hiring data we've collected over the past decade at interviewing.io.\n\nTechnical interviews are much harder today than they used to be. Engineers study for months and routinely get down-leveled despite that.Beyond Cracking the Coding Interview, in addition to covering a bunch of new questions and topics, teaches you how to think instead of memorizing. Grinding and memorization isn’t the way in this market (though in fairness, it’s never really the way). With us, you’ll still have to do the work, of course, but we’ll teach you to work smarter.\n\nWe added at least thirteen new technical topics (I say “at least” because we’re still writing, and it might be more like twenty)—and over 150 new problems. Each problem includes step-by-step walkthroughs, and you can work each problem with our (actually good) AI Interviewer. And of course this book was written in partnership with interviewing.io. We’ve pulled in data from over 100k FAANG mock interviews on interviewing.io, and we include hundreds of curated interview replays from interviewing.io (shared with permission of course) – watch people make mistakes and learn so you’re not doomed to repeat them.\n\nBut it’s notjustabout interview prep. In today’s job market, the bar is higher but it’s also harder than ever to get noticed and run your job search end-to-end. My excellent co-authors killed it on the technical chapters. I focused on writing the job search stuff, including, but not limited to:\n\n• How to negotiate, exactly what to say, and how to not screw up your negotiations before they even start\n\n• How to manage your job search, end to end, and balance interview prep with applications and outreach\n\n• A worksheet to help you figure out what order you need to engage with the companies you’re targeting to ensure that all your offers come in at the same time\n\n• How to get in the door at top companies without relying on referrals, including email templates and examples of good and bad outreach\n\n• An internal look at FAANG (and other) company rubrics to help understand what interviewers really care about, no matter what company you're applying to\n\n• What you need to know about behavioral interviews, whether you want to or not, and how to avoid the mistakes that even great engineers make\n\n• A list of very specific questions to ask your interviewers (not just to look smart but to learn useful things)\n\n• How technical interviews got to be so broken and how to get over hating them so you can win\n\nI also spend some time on owning and sharing data on how flawed technical interviewing is and, most importantly,  how to manage your psychology so you can get past that. I see so many engineers opting out of this interview style, arguably for good reason. But you’re leaving a lot of good opportunities on the table, and it doesn’t have to be like that.\n\nThis book is so much of what I’ve blogged about for the last 15 years, but it’s fleshed out with much more detail and actionable advice. If you read it, let me know what you think. Technical interviewing sucks (and so does looking for a job). But this book will help you do it well and get out alive.\n\nPurchases ofBeyond Cracking the Coding Interviewget a $50 discount for interviewing.io. The book costs $45, so it’s not a bad deal. The book is  out in January of 2025, and you canget it on Amazon.\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Reverse Words in a String\n\n### Binary Tree Upside Down\n\n### Decode String\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/we-co-wrote-the-official-sequel-to-cracking-the-coding-interview-introducing-beyond-ctci",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "How to get in the door at top companies: a data-driven guide for software engineers. Part 1.",
      "content": "# How to get in the door at top companies: a data-driven, practical guide for software engineers. Part 1.\n\nIn this post (part 1 of 2), we’ll share some data about which channels are most effective for getting into the door at great companies and why. Inpart 2, we get very tactical and tell you exactly what to say and do to get responses.\n\ninterviewing.io is an anonymous mock interview platform — we help engineers prepare for technical interviews by pairing them with senior FAANG and FAANG-adjacent engineers for mock interviews and feedback. In this market, many of our users are struggling with getting in the door at companies, so we ran a survey to see what’s worked well for our users and what hasn’t, in today’s difficult climate.\n\nIn our survey, we gave people the following channels for getting into companies and asked them which were the most and least effective:\n\n• In-house recruiters contact you\n\n• Apply online\n\n• Warm referrals\n\n• Cold referrals\n\n• Cold outreach to hiring managers\n\n• Cold outreach to recruiters\n\n• Agency recruiters contact you\n\nWe also asked them which types of companies they got responses from:\n\n• FAANG-adjacent (e.g., Stripe, Dropbox, OpenAI, Uber)\n\n• Large startups\n\n• Small startups\n\nWe got ~500 responses. Among survey respondents, which channels were most effective was largely consistent, regardless of company type, but there were some twists depending on who the candidates were. More on that in a bit.\n\nBelow are the channels, ranked by effectiveness.1When more people found a channel effective than ineffective, it ended up in the first list. When more people found a channel to be ineffective than effective, it ended up on the second list.\n\nRecruiting channels that our users found to be effective (ranked from most to least effective):\n\n• Warm referrals\n\n• In-house recruiters contact you\n\n• Apply online\n\n• Cold outreach to hiring managers\n\nRecruiting channels that our users found to be ineffective (ranked from least to most ineffective):\n\n• Cold outreach to recruiters\n\n• Cold referrals (referrals from people you don’t know)\n\n• Agency recruiters contact you\n\nThis data came primarily from surveying experienced engineers (4+ years), rather than juniors (we don’t have that many juniors on our platform; average years of experience is 8). If you’re a junior engineer in this market, you already know you’re in for a tough time, and we’d advise you to take your destiny into your own hands as much as possible by reaching out directly to hiring managers (the same advice we give many of our more experienced users). More on that later in the post.\n\nInterestingly, these results were quite consistent between company types. In other words, channels that worked well for FAANGs tended to work well for startups and vice versa.\n\nOverall, the most useful channels were in-house recruiters (when they reached out to you) and warm referrals. Unfortunately, both of these channels are somewhat out of your control. You have very little control over whether internal recruiters reach out to you. There aresomethings you can do to increase the chances, but they’re all tied up in your work history and identity, neither of which you can easily change. We’ll talk more about that later on.\n\nWarm referrals (i.e., referrals from people you know), on the other hand, are very useful and are abitmore in your control, but they still depend on the quality of your network.\n\nBelow is a diagram comparing the utility of all the channels to how much control you have over them.\n\nYou might wonder why we speculatively singled out cold outreach to hiring managers as something that can be done right, versus the other channels. In our experience, that channel is both misused and underutilized and is the best bet for many candidates, provided they do it correctly. In our next post, we’ll tell you exactly what to do and what to say when you reach out to hiring managers — especially if you come from a non-traditional background and aren’t getting a lot of recruiter outreach/don’t have the network to get warm referrals, reaching out to hiring managers is your absolute best bet.\nNow let’s look at each channel in detail.\n\n### In-house recruiters contact you\n\nThis channel is one of the two where you have the least amount of control (the other is agency recruiters contacting you, though that one is way less useful).\n\nSo, how much control do you have over this channel? One bit of analysis we did on our survey data was to try to find patterns in the background of people who find in-house recruiters particularly useful. Not too surprisingly, some patterns did emerge.\n\nIn-house recruiters are most likely to contact you if:\n\n• You look good on paper, i.e., you have top-tier companies and/or schools on your resume (in our experience, companies matter more)\n\n• You belong to a group that’s been traditionally underrepresented in tech (i.e., you’re a woman or a person of color)\n\n• Tosomeextent, though less than the two bullets above, if you have niche skills (e.g., ML engineering)\n\nThese results aren’t unique to just this survey. Werecently did a studywhere we asked a bunch of recruiters to look at resumes and tell us which candidates they’d want to interview. While the intent of the study was to see if recruiters are good at identifying talent (spoiler: they were barely better than a coin flip), we learned some other interesting things, including what recruiters actually look for when they read a resume.\n\nThe two most sought-after resume traits were: 1) experience at a top-tier tech company (FAANG or FAANG-adjacent) and 2) URM (underrepresented minority) status (in tech, this means being Black or Hispanic).\n\nThis mirrored what we saw in our user survey when we looked at commonalities among candidates who got value from in-house recruiters.\n\nSo how do you use this information to your advantage? You obviously can’t magic FAANG/FAANG-adjacent experience or URM status out of thin air2, but if you do have either, our pragmatic advice is to highlight it and make it really easy for recruiters to spot. Of course, whether youwantto lead with URM status is a personal decision. We’ve heard differing opinions on this and are not here to judge. All we can do is share the data — do with it what you will.\n\nSo, how do you make sure that, say, your FAANG experience stands out to recruiters? Take a look at the before and after screenshots of the resume below3. This resume belongs to one of our users who was kind enough to let us share it. He actually has two of the three things that recruiters look for: FAANG experience and a niche title (ML engineer). But both are buried! And the section that gets the most attention is wasted on undergraduate awards.\n\nAs you can see, he spent almost 3 years at Apple, but a recruiter skimming his resume might not notice that because it was a while ago. Instead, he showcases an undergrad award and some technologies/languages that he knows. Neither of those is nearly as useful to recruiters as FAANG experience.\n\nHis current title is also ML engineer, and one at the Principal level at that. But it wasn’t always: He went from back-end to SRE to a little bit of everything to ML, and because of that, it’s possible a recruiter would miss it as well.\n\nWe edited this candidate’s resume to put all the things recruiters look for at the very top of the resume and moved the buzzword soup to the bottom. This candidate is obviously well-positioned because he has FAANG experience, several top schools, and niche skills — but before, many recruiters didn’t spot them. After he made these changes, the number of interviews he got increased by 8X.\n\n### Apply online\n\nIf you’ve ever applied to jobs online, then you know it’s kind of like screaming into a black hole. Though, according to our survey, some candidates (specifically people applying to FAANG/FAANG-adjacent companies and small startups) get some value out of this channel, it’s still a numbers game. And for large startups, it’s a losing proposition.\n\nAccording to recruiting tool Gem, applicants that come from recruiter outreach (called “outbound” in recruiter lingo) are6 - 10X more likely to get hiredthan applicants who apply online (called “inbound”).\n\nAs Lyft recruiting manager Nate Wylie put it:\n\n> Our data… showed higher pass-through rates for candidates [we reached out to] at each stage of the interview process vs. applicants via the careers page. It’s not that we want to ignore applicants; it’s just that historically we don’t get what we’re looking for — and with speed — through that channel.\n\nOur data… showed higher pass-through rates for candidates [we reached out to] at each stage of the interview process vs. applicants via the careers page. It’s not that we want to ignore applicants; it’s just that historically we don’t get what we’re looking for — and with speed — through that channel.\n\nHaving been a recruiter myself, I can confirm that many companies do indeed ignore their online careers page. Many years ago, when I first joined the recruiting team at a top-tier startup, I spent my first few days going through the resumes of people who had applied online. I found a treasure trove of candidates, including very experienced applicants from top-tier companies.4But no one had seen these applicants because no one had been monitoring inbound activity for months!\n\nThe silver lining here is that when you don’t hear back from a company (or even when you get an automatic rejection email wishing you \"the best in your future endeavors\"), it’s not because a human looked at your resume and made a deliberate, thoughtful decision about you. It’s tempting to think that way because it plays so well into our insecurities. The reality is that a human probably never saw your resume in the first place.\n\nSo why do people apply online, despite knowing in their gut that it’s not an effective strategy? Simply put, it’s predictable and easy. You get into a routine, you upload your resume, you connect your LinkedIn, and you can knock out hundreds of applications in a matter of hours.\n\nThe other encouraging thing about this channel is that, when we analyzed specifically which types of candidates had success with it, we couldn’t find any patterns — the channel worked equally well (poorly?) for people who looked good on paper vs. not, and there was no preferential treatment for traditionally underrepresented groups in tech (e.g., women and people of color).\n\nTL;DR Applying online doesn’t hurt… provided that you don’t take rejection personally. If you do, it’ll wear you down over time.\n\n### Warm referrals\n\nWarm referrals are, of course, excellent. That is, assuming it's arealreferral — someone who can actually vouch for you, and ideally your work.\n\nPer capita, referrals are most companies’ best source of candidates, and they were a great channel for our users across all company types (they were the best channel for FAANGs/FAANG-adjacents, as well as large startups, and second best for small startups, behind in-house recruiters reaching out).\n\nIf you have the network, you should absolutely use it. Of course, it’s unlikely that you’ll have meaningful connections at every company you want to work at. What do you do then?\n\n### Cold referrals\n\nShould you ask people you don't know to refer you? Our survey data says probably not. Cold referrals were net negative for both FAANG and small startups and neutral for large startups.\n\nYears ago, trying to collect cold referrals was a decent strategy. You could track down someone at the company and ask them to toss your proverbial hat into the ring\n\nEngineers were often happy to refer someone — even someone they didn't know — either to be kind, to avoid the awkwardness of declining, or to collect the potential referral bonus. They couldn't vouch for you, but the referral would ensure that a human looked at your resume.\n\nThis became so common that Blind actually spun out an entire referral marketplace calledRooftop Slushie(the link is to some press because the actual site is now defunct), where applicants would pay a small sum for a referral.\n\nThen, companies wised up and realized that these referrals weren't all that different from normal in-bound applicants. So why treat them differently?\nMany companies nowadays separate referrals into \"true referrals\" and \"leads.\" It’s great for maintaining the delicate dance of social dynamics, but it’s completely useless for getting hired — dropping someone’s resume into the “leads” pile is basically the same as throwing it into the inbound black hole.\n\nGiven that cold referrals aren’t zero effort, our advice is to expend that energy elsewhere. More on that shortly.\n\n### Agency recruiters\n\nAgency recruiters were the worst channel overall, according to our survey, and were net negative for all company types.\n\nFAANGs and FAANG-adjacent companies tend to rely less on agencies than startups, and when they do, it’s to fill some very specific need (rather than “Hey we need more SWEs”), so it’s not surprising that our users didn’t get much value from this channel when applying to FAANGs.\n\nWhile both large and small startups use agencies liberally, clearly the value to candidates is limited.5Out of all of our survey respondents, only a handful of our users said that agencies were useful to them, and of those who mentioned agencies, the majority said that they were the worst channel.\n\nWe won’t belabor the point, but it’s probably not in your best interest to spend much time on working with agency recruiters. It has opportunity cost and not much upside. And you canroutinely get screwed in salary negotiations when you work with an agency recruiter, if you even get that far.\n\n### Cold outreach (to hiring managers vs. recruiters)\n\nNot all cold outreach is created equal, for two reasons. First, there’s your audience: hiring managers vs. recruiters. And then there’s the quality of the outreach itself. We’ll come back to how to write the kinds of messages that will get you responses. First, let’s talk about the audience.\n\nYou can see in our survey results that cold outreach to hiring managers was net positive for FAANG/FAANG-adjacent companies and neutral for the other company types. Cold outreach to recruiters, on the other hand, was net negative for both FAANG/FAANG-adjacents and small startups and neutral for large startups.\n\nIgnoring the quality of the outreach for a moment, which we expect is probably comparable for both types, why does this difference exist?\n\nIf you had to answer the question of who’s the right person to reach out to about jobs, your gut instinct might be to say it’s recruiters. After all, hiring is officially their job! However, that’s not strictly true. Recruiters are not incentivized to make hires, at least not directly. Just like everyone else, recruiters’ main priority is to keep their jobs.\n\n#### Cold outreach to recruiters doesn’t work\n\nHow does a recruiter keep their job?6Bybringing in the types of candidates that their manager tasked them with. How is that different from hiring? Hiring implies that you’re evaluated on whether the people you bring in actually get hired, but most in-house recruiters aren’t evaluated this way… because it takes too long.\n\nInstead, recruiters are sometimes evaluated on what portion of their candidates get offers or get to onsite. However, because of drop-off and latency (getting an offer can still take months), your organization has to be pretty good at tracking. Many are not.\n\nAs such, many recruiting orgs prefer simpler, faster metrics:\n\n• Of the candidates you reached out to, how many responded?\n\n• Of those who responded, how many resulted in a first conversation?\n\nThe downside of measuring success in a single part of the funnel is that you don’t incentivize people to care about what happens downstream (that is, how many are hired). This would be like if marketers only paid attention to ad clicks, rather than actual purchases. But that’s how recruiting operates: individuals aren’t really incentivized to care what happens downstream.\n\nSo, if you are typically just measuring the response rates of your reports, as a recruiting manager, you have to set some guardrails for the types of candidates that you want your team to reach out to. If you don’t, they’ll end up just reaching out to people who are likely to respond instead of people who are a good fit for the job.\n\nUnfortunately, you don’t know who is a good fit for the job. You can’t just say, “Go on LinkedIn, and find me good engineers.”\n\nThat doesn’t exist. So instead, you come up with some rules that look like this:\n\n• Senior engineersJuniors and intermediate engineers would answer outreach a lot, but they already apply online in droves, so we don’t need to pay people to go out and find them. Moreover, we have a whole university department that deals with college hires once a year in September.\n\n• Juniors and intermediate engineers would answer outreach a lot, but they already apply online in droves, so we don’t need to pay people to go out and find them. Moreover, we have a whole university department that deals with college hires once a year in September.\n\n• Went to a top school (in the absence of a better filter, this works OK)\n\n• Worked at a top company\n\nThere may be a few other items on the list if the role requires specific skills (e.g., Android development), but by and large, that’s what recruiters are tasked with, and that’s what they’re focused on.\n\nIt seems counterintuitive, but if you’re either fairly junior (fewer than 4 years of experience) or you don’t have fancy brands and schools on your resume, recruiters are not incentivized to help you because you don’t meet their criteria, and they’re not incentivized to take risks on candidates because they’re not getting rewarded when the company makes hires (or punished when the company doesn’t).\n\nWhat does this mean for you? If you’re not the type of candidate that recruiters are reaching out to already (senior, well-pedigreed), they will not help you.\n\nWith that sad reality in mind, here’s the good news: thereissomeone who’s actually incentivized to make hires and is much more open-minded: the hiring manager7!\n\n#### Cold outreach to hiring managers is effective\n\nAt this point, you might be skeptical. After all, according to the graph comparing all channels, hiring manager outreach is the worst of the best. Sure, it’s net positive for FAANG/FAANG-adjacent companies, but it lags behind in-house recruiters, warm referrals, and online applications with respect to effectiveness.\n\nHere’s the thing. Hiring manager outreach is the channel with the most untapped potential for effectiveness, while also being the one where you have the most control. Because companies often ignore them, online applications can’t come close to the same level of control, and warm referrals have a low ceiling. In-house recruiter outreach is largely out of your control (except for maybe making some limited profile tweaks, as we saw above).\n\nWhy is this the right channel?\n\nUnlike recruiters, hiring managers are actually incentivized to make hires and tend to be more open-minded about candidate backgrounds, all because hiring managers are judged on results. Specifically, they’re judged on how quickly and effectively they’re able to build stuff, and are — directly or indirectly — incentivized to grow headcount. For hiring managers, it’s not about the appearance of doing the work. It’s about the cold, hard reality of whether the work got done. And because they’re judged on actually getting stuff done, hiring managers are also much more incentivized than recruiters to take risks.\n\nOutside of needing more people to build things, hiring managers are also incentivized to hire for their teams because the better they are at recruiting and filling headcount, the more likely they are to get promoted.\n\nAs such, in our minds, when people say that hiring manager outreach hasn’t worked for them, it’s because they’re not doing it right. So, how do you do it?\n\nIn our next post, we’ll get very practical about outreach, provide a bunch of examples of good and bad outreach, and share two templates that you can steal.\n\nFootnotes:\n\n• First, here’s how we got to these rankings. We asked each engineer who took our survey to rank all the channels they used to get in the door, from best to worst. Then we tallied up the points (+1 for best two channels, -1 for worst two). We didn’t do a more granular point system (e.g., +2 and -2) because the difference between the top two channels wasn’t always 2X, and generally, from talking to our users, preferences were somewhat muddy. As such, these results are directionally correct, but we didn’t feel comfortable numerically comparing them to one another. Finally, we divided the total tally by the number of times that channel came up. As a result, we were able to rank channels from most effective to least effective.↩\n\nFirst, here’s how we got to these rankings. We asked each engineer who took our survey to rank all the channels they used to get in the door, from best to worst. Then we tallied up the points (+1 for best two channels, -1 for worst two). We didn’t do a more granular point system (e.g., +2 and -2) because the difference between the top two channels wasn’t always 2X, and generally, from talking to our users, preferences were somewhat muddy. As such, these results are directionally correct, but we didn’t feel comfortable numerically comparing them to one another. Finally, we divided the total tally by the number of times that channel came up. As a result, we were able to rank channels from most effective to least effective.↩\n\n• This is why I generally view resume writers as selling snake oil. Either you have the things recruiters are looking for or you don’t. If you don’t, no amount of wordsmithing your bullet points or reorganizing the page is going to make a significant difference. Sure,check your resume for typos, and make sure that it reads decently well. Any more time invested in your resume after those basic things will have diminishing returns. Beware of anyone who tells you otherwise, and beware of any products or services who charge for resume review.↩\n\nThis is why I generally view resume writers as selling snake oil. Either you have the things recruiters are looking for or you don’t. If you don’t, no amount of wordsmithing your bullet points or reorganizing the page is going to make a significant difference. Sure,check your resume for typos, and make sure that it reads decently well. Any more time invested in your resume after those basic things will have diminishing returns. Beware of anyone who tells you otherwise, and beware of any products or services who charge for resume review.↩\n\n• We realize that recruiters won’t always have access to your resume when doing outreach and are likely looking at your LinkedIn instead. The same advice stands. Make sure that your About section has all the most important tidbits about you, front and center. Also, even though we didn’t see the same strong preference for FAANGs and URM status when applying online (more on that in the next section), making these types of changes to your resume certainly won’t hurt.↩\n\nWe realize that recruiters won’t always have access to your resume when doing outreach and are likely looking at your LinkedIn instead. The same advice stands. Make sure that your About section has all the most important tidbits about you, front and center. Also, even though we didn’t see the same strong preference for FAANGs and URM status when applying online (more on that in the next section), making these types of changes to your resume certainly won’t hurt.↩\n\n• Of course we don’t share the point of view that you can only be a good candidate if you have a brand-name company on your resume. However, many recruiters do, and they are still ignoring this channel.↩\n\nOf course we don’t share the point of view that you can only be a good candidate if you have a brand-name company on your resume. However, many recruiters do, and they are still ignoring this channel.↩\n\n• We’d argue that the value to companies is limited as well. Though there are a handful of excellent agency recruiters out there, most are terrible. The hard thing is that, as an employer, you can’t immediately tell who’s terrible, and you end up wasting a bunch of time reviewing profiles of candidates who might look promising on the surface, but because of selection bias (these are the people who decided to work with bad agency recruiters, after all) are not a fit. That or they’re not interested in your company (and have possibly never even opted in to talk to you) or both.↩\n\nWe’d argue that the value to companies is limited as well. Though there are a handful of excellent agency recruiters out there, most are terrible. The hard thing is that, as an employer, you can’t immediately tell who’s terrible, and you end up wasting a bunch of time reviewing profiles of candidates who might look promising on the surface, but because of selection bias (these are the people who decided to work with bad agency recruiters, after all) are not a fit. That or they’re not interested in your company (and have possibly never even opted in to talk to you) or both.↩\n\n• At larger companies, recruiting is usually split into two functions: sourcing (these are the people who reach out to candidates) and recruiting (these are the people who manage candidates’ journey through the process and extend offers). In this post, for simplicity, we’re lumping them together because separating them out would change some of the details but wouldn’t change the key takeaways.↩\n\nAt larger companies, recruiting is usually split into two functions: sourcing (these are the people who reach out to candidates) and recruiting (these are the people who manage candidates’ journey through the process and extend offers). In this post, for simplicity, we’re lumping them together because separating them out would change some of the details but wouldn’t change the key takeaways.↩\n\n• Note that if you’re interested in smaller startups (Series A and below), you can substitute “founder” for “hiring manager” in the steps below. Founders are the most incentivized to get shit done and take risks, regardless of company size and stage, but at larger startups, they may be less likely to read cold emails because they get bombarded with all manners of requests and sales pitches. At a Series B or C company or at public companies with fewer than, say, 3000 employees, in addition to hiring managers, you should also target Directors and VPs — they have the power to get things done and aren’t so far removed from feeling the pain of not filling roles that making an extra hire or two is out of their purview. At large public companies, targeting Directors and above doesn’t make much sense — they ARE too far removed from doing the work to make individual hires. If you do contact them, the best outcome is that they’ll pass you on to one of their direct reports.↩\n\nNote that if you’re interested in smaller startups (Series A and below), you can substitute “founder” for “hiring manager” in the steps below. Founders are the most incentivized to get shit done and take risks, regardless of company size and stage, but at larger startups, they may be less likely to read cold emails because they get bombarded with all manners of requests and sales pitches. At a Series B or C company or at public companies with fewer than, say, 3000 employees, in addition to hiring managers, you should also target Directors and VPs — they have the power to get things done and aren’t so far removed from feeling the pain of not filling roles that making an extra hire or two is out of their purview. At large public companies, targeting Directors and above doesn’t make much sense — they ARE too far removed from doing the work to make individual hires. If you do contact them, the best outcome is that they’ll pass you on to one of their direct reports.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Distributed Databases\n\n### Boundary of Binary Tree\n\n### Meeting Rooms",
      "source_url": "https://interviewing.io/blog/how-to-get-in-the-door-at-top-companies-part-1",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Exactly what to say when recruiters ask you to name the first number… and other negotiation word-for-words",
      "content": "• For employers\n\n• Gift mock interviews\n\n# Exactly what to say when recruiters ask you to name the first number… and other negotiation word-for-words\n\nThere are a lot of resources out there that talk about salary negotiation but many tend to skew a bit theoretical. In my experience, one of the hardest things about negotiating your salary is knowing what to say in tough, ambiguous situations with a power balance that’s not in your favor. What’s OK? What’s rude? What are the social norms? And so on.\n\nBefore I startedinterviewing.io, I’ve worked as a software engineer, an in-house recruiter, and an agency recruiter, so I’ve literally been on all sides of the negotiating table. For the last few years, I’ve been guest-lecturing MIT’s 6.UAT, a class about technical communication for computer science majors. Every semester, negotiation is one of the most-requested topics from students. In this post, I’m sharing the content of that lecture, which is targeted toward students, but has served seasoned industry folks just as well. You’re never too young or too old to advocate for yourself.\n\nBtw, if you don’t like reading and prefer long, rambly diatribes in front of an unsightly glass wall, I covered most of this material (and other stuff) in a webinar I did with the fine people at Udacity (where I used to run hiring) a few months ago. So, pick your poison.\n\n## Why negotiate my salary at all, especially if I’m junior?\n\nIf you’re early in your career, you might say that negotiation isn’t worth the hassle — after all, junior roles have pretty narrow salary bands. There are a few reasons this view is short-sighted and wrong. First, though it’s pretty unlikely in the grand scheme of things, if you’re applying to a startup, there might come a magical day when your equity is worth something. This is especially true if you’re an early employee — with a good exit, a delta of a few tenths of a percent might end up being worth a down payment on a home in San Francisco.\n\nBut, let’s get real, your equity is likely worthless (except interviewing.io’s equity… that’s totes gonna be worth something), so let me give you a better, more immediate reason to learn to haggle early in your career, precisely because that’s when the stakes are low. Humans are frighteningly adaptable creatures. Scared of public speaking? Give 3 talks. The first one will be gut-wrenchingly horrific, the stuff of nightmares. Your voice will crack, you’ll mumble, and the whole time, you’ll want to vomit. The next one will be nerve-wracking. The last one will mostly be OK. And after that, you’ll be just fine. Same thing applies to approach anxiety, mathematical proofs, sex, and, you guessed it, salary negotiation!\n\nSo, make all the awkward, teeth-cringing mistakes now, while it doesn’t matter, and where failure will cost you $5K or $10K a year. Because the further along you get in your career, the bigger the upside will be… and the bigger the downside will be for not negotiating. Not only will the salary bands be wider for senior roles, but as you get more senior, more of your comp comes from equity, and equity has an even wider range for negotiating. Negotiating your stock well can make 6-figure differences and beyond (especially if you apply some of these same skills to negotiating with investors over term sheets, should you ever start your own company)… so learn these skills (and fail) while you’re young, because the older you get, the harder it’s going to be to start and the more high-stakes it’s going to be.\n\nSo, below, as promised, I’ll give you a few archetypal, stress-inducing situations and what to say, word-for-word in each one. But first, let me address the elephant in the room…\n\n## Will my offer be rescinded if I try to negotiate my salary?\n\nAs I mentioned earlier, this blog post is coming out of a lecture I give at MIT. Every semester, I start the negotiation portion of the lecture with the unshakeable refrain that no one will ever rescind your offer for negotiating. Last semester was different, though. I was just starting to feel my oats and get into my talk (the negotiation piece comes about halfway through) and smugly recited the bit about offers never being rescinded, followed by my usual caveat… “unless you act like a douche while negotiating.” Then, a hand shot up in the back of the room. Ah ha, I thought to myself, one of the non-believers. Ready to placate him, I called on the gentleman in the back.\n\n“My offer got rescinded for negotiation.”\n\nThe class broke out into uproarious laughter. I laughed too. It was kind of funny… but it was also unnerving, and I wanted to get to the bottom of it.\n\n“Were you a giant jerk when you negotiated?”\n\n“Nope.” Shit, OK, what else can I come up with…\n\n“Were you applying at a really small company with maybe one open role?” I asked, praying against hope that he’d say yes.\n\n“Thank god.”\n\nSo, there’s the one exception I’ve found so far to my blanket statement. After working with hundreds and hundreds of candidates back when I was still a recruiter, I had never heard or seen an offer get rescinded (and none of my candidates acted like douches while negotiating, thank god), until then. So, if you’re talking to a super small company with one role that closes as soon as they find someone, yes, then they might rescind the offer.\n\nBut, to be honest, and I’m not just saying this because I was wrong in front of hundreds of bloodthirsty undergrads, an early startup punishing a prospective employee for being entrepreneurial is a huge red flag to me.\n\nOK, so, now onto the bit where I tell you exactly what to say.1\n\n## What to say when asked to name the first number\n\nThere will come a time in every job search where a recruiter will ask you about your compensation expectations. This will likely happen very early in said search, maybe even during the first call you’ll ever have with the company.\n\nI think this is a heinous, illaudable practice fraught with value asymmetry. Companies know their salary ranges and roughly what you’re worth to them before they ever talk to you (barring phenomenal performance in interviews which kicks you into a different band). And they know what cost of living is in your area. So they already have all the info they need about you, while you have none about them or the role or even your market value. Sure, there are some extenuating circumstances where you are too expensive, e.g. you’re like an L6 at Google and are talking to an early stage startup that can only afford to pay you 100K a year in base, but honestly even in that situation, if the job is cool enough and if you have the savings, you might take it anyway.\n\nSo, basically, telling them something will only hurt you and never help you. So don’t do it. Now, here’s exactly what to say when asked to name the first number.\n\nAt this point, I don’t feel equipped to throw out a number because I’d like to find out more about the opportunity first – right now, I simply don’t have the data to be able to say something concrete. If you end up making me an offer, I would be more than happy to iterate on it if needed and figure out something that works. I also promise not to accept other offers until I have a chance to discuss them with you.\n\n## What to say when you’re handed an exploding offer\n\nExploding offers, in my book, are the last bastion of the incompetent. The idea goes something like this… if we give a candidate an aggressive deadline, they’ll have less of a chance to talk to other companies. Game theory for the insipid.\n\nHaving been on the other side of the table, I know just how arbitrary offer deadlines often are. Deadlines make sense when there is a limited number of positions and applicants all come in at the same time (e.g. internships). They do not make any sense in this market, where companies are perpetually hiring all the time — therefore it’s an entirely artificial construct. Joel Spolsky, the creator of Trello and Stack Overflow, had something particularly biting to say on the matter of exploding offers many years ago (the full post,Exploding Offer Season, is really good):\n\n“Here’s what you’re thinking. You’re thinking, well, that’s a good company, not my first choice, but still a good offer, and I’d hate to lose this opportunity. And you don’t know for sure if your number one choice would even hire you. So you accept the offer at your second-choice company and never go to any other interviews. And now, you lost out. You’re going to spend several years of your life in some cold dark cubicle with a crazy boss who couldn’t program a twenty out of an ATM, while some recruiter somewhere gets a $1000 bonus because she was better at negotiating than you were.”\n\nEven in the case of internships, offer deadlines need not be as aggressive as they often are, and I’m happy to report that many college career centers have taken stands against exploding offers. Nevertheless, if you’re not a student or if your school hasn’t outlawed this vile practice, here’s exactly what to say if it ever happens to you.\n\nI would very much appreciate having a bit more time. I’m very excited about Company X. At the same time, choosing where I work is extremely important to me. Of course, I will not drag things out, and I will continue to keep you in the loop, but I hope you can understand my desire to make as informed of a decision as possible. How about I make a decision by…?\n\n## The reverse used car salesman… or what to say to always get more\n\nAt the end of the day, the best way to get more money is to have other offers. I know, I know, interviewing sucks and is a giant gauntlet-slog, but in many cases, having just one other offer (so, I don’t know, spending a few extra days of your time spread over a few weeks) can get you at least $10K extra. It’s a pretty rational, clear-cut argument for biting the slog-bullet and doing a few more interviews.\n\nOne anecdote I’ll share on the subject goes like this. A few years ago, a close friend of mine who’s notoriously bad at negotiation and hates it with a passion was interviewing at one of the big 4 companies. I was trying to talk him into getting out there just a little bit, for the love of god, and talk to at least one more company. I ended up introducing him to a mid-sized startup where he quickly got an onsite interview. Just mentioning that he had an onsite at this company to his recruiter from the bigco got him an extra $5K in his signing bonus.\n\nOffers are, of course, better than onsites, but in a pinch, even onsites will do… because every onsite increases your odds of not accepting the offer from the company you’re negotiating with. So, let’s say you do have some offers. Do you reveal the details?\n\nThe answer is that it depends. If the cash parts of the offers you have are worth more than the one you have in hand, then you can reveal the details. If they’re worth more in total but less in cash, it’s a bit dicier because equity at smaller companies is kind of worthless… you can still use it as leverage if you tell the story that that equity is worth more to YOU, but that’s going to take a bit more finesse, so if you’ve never negotiated before, you might want to hold off.\n\nIf the cash part of your equity is not worth more, it’s sufficient to say you have offers and when pressed, you can simply say that you’re not sharing the details (it’s ok not to share the details).\n\nBut whether you reveal details or not, here’s the basic formula for getting more. See why I call it the reverse used car salesman?\n\nI have the following onsites/offers, and I’m still interviewing at Company X and Company Y, but I’m really excited about this opportunity and will drop my other stuff andSIGN TODAYif…\n\nSo, “if” what? I propose listing 3 things you want, which will typically be:\n\n• Signing/relocation bonus\n\nThe reason I list 3 things above isn’t because I expect you’ll be able to get all 3, but this way, you’re giving the person you’re negotiating with some options. In my experience, you’ll likely get 2 out of the 3.\n\nSo, what amounts should you ask for when executing on the reverse used car salesman? It’s usually easier to get equity and bonuses than salary (signing bonus is a one-off rather than something that repeats every year). Therefore, it’s not crazy to ask for 1.5X-2X the equity and an extra 10-15% in salary. For the bonus portion, a lot depends on the size of the company, but if you’re talking to a company that’s beyond seed stage, you can safely ask for at least 20% of your base salary as a signing bonus.2\n\nWhat if the company says no to all or most of these and are a big enough brand to where you don’t have much of a leg to stand on? You can still get creative. One of our users told me about a sweet deal he came up with — he said he’d sign today if he got to choose the team he could join and had a specific team in mind.\n\n## Other negotiation resources\n\nAs I mentioned at the beginning of this post, there are plenty of blog posts and resources on the internets about negotiation, so I’ll just mention two of my favorites. The first is a riveting,first-hand account of negotiation adventuresfrom one of my favorite writers in this space, Haseeb Qureshi. In his post, Haseeb talks about how he negotiated for a 250K (total package) offer with Airbnb and what he learned along the way. It’s one of the most honest and thoughtful accounts of the negotiation process I’ve ever read.\n\nThe second post I’ll recommend is aseminal work in salary negotiation by Patrick McKenzie(patio11 on Hacker News, in case that’s more recognizable). I read it back when I was still an engineer, and it was one of those things that indelibly changed how I looked at the world. I still madly link anyone and everyone who asks me about negotiation to this piece of writing, and it’s still bookmarked in my browser.\n\nIf you’re an interviewing.io user and have a job offer or five that you’re weighing and want to know exactly what to say when negotiating in your own nuanced, unique situation, please email me, and I’ll whisper sweet, fiscal nothings in your ear like a modern-day Cyrano de Bergerac wooing the sweet mistress that is capitalism.3\n\n• If you’re interviewing at interviewing.io, USE THESE ON ME. IT'LL BE GREAT. And while you’re at it,use these on meas well.↩\n\nIf you’re interviewing at interviewing.io, USE THESE ON ME. IT'LL BE GREAT. And while you’re at it,use these on meas well.↩\n\n• Some of the larger tech companies offer huge signing bonuses to new grads (~100K-ish). Obviously this advice is not for that situation.↩\n\nSome of the larger tech companies offer huge signing bonuses to new grads (~100K-ish). Obviously this advice is not for that situation.↩\n\n• An increasing number of our customers pay us on subscription, so we don't get more money if you do.4And for the ones who don't, salary and recruiting fees typically come out of a different budget.↩\n\nAn increasing number of our customers pay us on subscription, so we don't get more money if you do.4And for the ones who don't, salary and recruiting fees typically come out of a different budget.↩\n\n• In the early days of interviewing.io, we tried to charge a flat per-hire fee in lieu of a percentage of salary, precisely for this reason -- we wanted to set ourselves up as an entirely impartial platform where lining up with our candidates' best interests was codified into our incentive structure. Companies were pretty weirded out by the flat fee, so we went back to doing percentages, but these days we're moving over as many of our customers to subscription as possible -- it's cheaper for them, better for candidates, and I won't lie that I like to see that recurring revenue.↩\n\nIn the early days of interviewing.io, we tried to charge a flat per-hire fee in lieu of a percentage of salary, precisely for this reason -- we wanted to set ourselves up as an entirely impartial platform where lining up with our candidates' best interests was codified into our incentive structure. Companies were pretty weirded out by the flat fee, so we went back to doing percentages, but these days we're moving over as many of our customers to subscription as possible -- it's cheaper for them, better for candidates, and I won't lie that I like to see that recurring revenue.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### XML Parser\n\n### Infinite Binary Print\n\n### Find the Missing Number in an Array\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/negotiate-salary-recruiter",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "The unwritten rules (till now) of negotiating with Meta",
      "content": "# The unwritten rules (till now) of negotiating with Meta\n\nIf you don't like reading, here's me presenting the contents of this blog post in a video. Pick your poison.\n\nEDIT: This post is based on stories from users who were interviewing for E4-E6 SWE and MLE roles at Meta. Other, more specialized roles may have different processes than what's described here.\n\nEDIT 2: As of Q1 2025, it looks like Meta is sometimes foregoing team matching in favor of driving candidates to their Monetization org (which apparently has a lot of open headcount). If this happens to you, after you pass the hiring committee, instead of entering team matching, your recruiter will tell you that you’ve been assigned to this particular org and, if you proceed, you’ll just get an offer. You won’t get to talk to your future manager, and you’ll find out team details a week after you join. From what we know, it’s possible to insist on team matching instead, with the downside that it’ll take an unknown amount of time rather than certainty.\n\nWhy does this matter?\n\nIf you’re looking to use your Meta offer primarily as leverage with other companies, this is a great thing because you’ll get numbers quickly. If you’re seriously interested in Meta, then this could be good or bad and depends where you are in the process and how much you want to work on monetization versus other things/how much you want to meet your manager before you work for them.\n\nSo if you’re seriously interested in Meta, whether this is good or bad depends on where you are in the process. If you need them to move quickly, it’s great because you know you won’t be stuck in team matching. However, if you need them to slow down because you aren’t as far along with other companies or because you want to work in a different org, you may want to ask your recruiter to stick with the old team matching process. In our experience, it’s ok to ask this. Your recruiter may not tell you outright that that’s an option, but if you ask, they will probably do it. Of course, you may be stuck longer than you want. But at least then you will have more of a say in what you work on.\n\nAt interviewing.io, one of the services we offer our users is salary negotiation. Even though I’m the founder, I still do many of the sessions myself because they give me an invaluable insider’s perspective on what’s actually going on in the engineering market, what different companies’ offers look like, how companies extend offers, what kinds of deadlines they give, and how much they go up in compensation, under what circumstances.\n\nAccess to this kind of data is great because it helps me make better business decisions. But sometimes I see questionable patterns of behavior among companies. Recently, I’ve observed a string of practices at Meta that I find reprehensible, and that’s what this post is about. I’ve seen the same practices with enough candidates, and across enough different titles and positions, that it’s become clear to me that they are not isolated incidents or a rogue recruiter’s doing but rather a consistent implementation of a deliberate strategy that comes from the top.\n\nI’m writing about this for two reasons. First, if you’re negotiating with Meta, you need to know how they operate and understand the unwritten rules of the game. If you do not know the rules, you will fail — long before you even start negotiating.\n\nSecond, I’m hoping that someone at Meta sees this post and that maybe it’ll spark an internal discussion about changing the rules.\n\nLastly, if you’re about to interview there or are interviewing there already, pleaseread our free, long-form guide to their interview process and questions.\n\n## Meta basically has a monopoly on FAANG hiring right now\n\nI mentioned above that we do salary negotiation, but our main business is mock interviews. We offer anonymous mock interviews in the style of a bunch of different companies (mostly FAANGs). This means we know how many people are practicing for interviews at Google vs. Meta vs. other FAANGs, and that lets us guess (pretty accurately) how much hiring is actually happening at these companies.\n\nYou can read in way more detail about how all the FAANGs are doing in ourrecent blog post where we made 2024 predictionsbased on our proprietary data. But while I was writing that post, I noticed something odd. Meta was hiring way more engineers than any of the other FAANGs. In fact, Meta hiring is up more than 10X since January of last year.You can see that more recently Amazon has picked up a bit, but it’s very recent and not enough to drive major change in other companies’ behaviors (at least not yet). And, yes, Netflix is hiring too, but Meta’s eng team is more than 10X the size of Netflix’s, so in the absolute, Netflix’s hiring volume isn’t enough to balance Meta out. For all intents and purposes, Meta’s the only FAANG that’s really hiring at scale — and they’re currently getting away with treating candidates really poorly as a result.\n\n## How Meta negotiates, given their effective monopoly on eng hiring\n\nHere’s how Meta runs their hiring process. These practices have been consistent across every negotiation client we’ve had in the past 6 months or so.\n\nMeta’s hiring is centralized, which means that you enter one big interview process that’s completely divorced from which team you might end up on and you interview with people whom you might never work with again. If you do well, there will be a team matching component after you pass the onsite but before you get an offer1. With that in mind, here’s how they run their process, once you get the green light.\n\n• Team matching. This can take days or weeks, depending on how many teams you speak to and how many conversations you have with the people on each team. You'll speak with hiring managers to gauge fit and chemistry, and if you’d like, you can also talk to peers. We've heard that sometimes you get the chance to talk to a handful of teams, and sometimes it's over 10. After your team-matching conversations, your recruiter will ask you to choose a team. In order to move forward, both you and the hiring manager have to opt in2.\n\n• Likely down-level you. Sometime during team matching, you’ll probably find out that you’ve been down-leveled. Often, your recruiter will cite your performance in the system design portion (and sometimes the behavioral portion). According to a recent survey we did, something like 55% of Meta candidates get down-leveled (more likely for generalist SWE roles, less likely for more niche roles like ML).\n\n• Make a lowball offer with just a few days to make a decision. Once you’re done with team matching, things get dicey. Your recruiter will make you a lowball offer that’s often $50k or more (!!) below the average TC on levels.fyi. Moreover, you usually just get a couple of days to make a decision. If you were down-leveled, your lowball offer may include a small signing bonus as a consolation prize.\n\n• Refuse to negotiate unless you can show them other offers from comparable companies. Your recruiter will say something like, “If you’d like to increase your offer, I can take this to the compensation committee, but I need a compelling reason [i.e., another offer].\"\n\n• If you have other offers, they will apologize for the lowball offer, citing that it’s “automatic numbers from our computer” and raise the numbers by $100K or more (in first year’s TC). If you do not, you will be stuck with a lowball offer, though you may be able to negotiate a small signing bonus if the offer didn’t come with one already.\n\n## How to negotiate with Meta\n\nBelow are the steps for negotiating with Meta in a hard climate where they have a monopoly on hiring. We hope that most of these won’t be necessary in the future. They are:\n\n• Don’t share anything with your recruiter\n\n• Make sure you have other offers\n\n• Slow-play team matching\n\n• Build rapport with every hiring manager you talk to\n\n• Actually negotiate (this is the easy part)\n\n### Don’t share anything with your recruiter\n\nWe wrote a whole post about how to avoid sharing information with your recruiter and why this is so vital. If you share where you’re interviewing or how far along you are, or if you start negotiating prematurely, the strategies below won’t work.\n\nPleaseread our post on not shooting yourself in the foot during negotiationsbefore you continue!\n\nYou should also be aware of a few tricks specific to Meta recruiters. If you're not forthcoming about where else you're interviewing, they may say a few sneaky things.\n\nFirst, they may say something like, \"Well, we just want to know where you're interviewing so we can intro you to others who interviewed at those companies but ultimately chose Meta.\" Don't fall for that early in the process. It's a trap to get information out of you. You can always ask for those intros later, when you're negotiating and it's the right time information about your other offers.\n\nThe other thing they do is fish, saying something like, \"Well, in case you're interviewing at {Google, Netflix, some other big company they don't want to lose candidates to}, just so you know, they move kind of slowly, so we may not be able to wait.\" There, the Meta recruiter's goal is to get you to say, \"Oh, no, don't worry, I'm not interviewing at Google!\"\n\nNow, you've lost leverage in their eyes because that's one less competitive company they might lose you to... and they'll be more confident about lowballing you later on.\n\n### Make sure you have other offers\n\nAs you may have guessed from reading the previous section, it’s critical to have other offers, and not just any offers but ones from top-tier companies who pay very competitively3.\n\nWe realize that saying “have other offers” doesn’t capture the blood, sweat, and tears that go into months of interview prep, applications, emails, recruiter calls, and interviews. We know it’s hard, but as you’ll see, it makes a huge difference in your compensation.\n\nGetting those offers doesn’t start when you’ve received your Meta offer. It starts months before. Make sure that you get enough initial conversations with other FAANGs, FAANG-adjacent companies, and late-stage sexy startups to end up with at least one other offer, ideally at least two. Depending on your interview performance, this might be anywhere from 4 to 10 initial conversations.4\n\n### Slow-play team matching\n\nHaving your offers come in around the same time is critical forany negotiation, but it’s especially important with Meta because they take such a hard line — without other offers, they will not meaningfully budge.\n\nObviously, you’ll want to start your conversations with other companies well in advance of your Meta interviews and do everything you can to make sure they all come in at the same time. However, even with your best efforts, it’s not guaranteed that your timing will match up.Here’s how to make sure that your offers come in at the same time: slow-play Meta’s team-matching process.\n\nTeam matching is actually the part of your Meta journey where you have the most leverage and power. Why leverage? At this point, they know they want you, but they can’t yet hold an offer deadline over you. We’ve already mentioned that once they make the offer, your recruiter is going to push very hard to have you accept, often giving you a deadline of something like two days. In your recruiter’s eyes, you’re a ticking time bomb, where for every day you don’t sign, the deal loses momentum, and your odds of signing drop off. Recruiters are also evaluated on how many candidates they close, so it’s in their interest to create a false sense of scarcity in order to rush you and to use high-pressure sales tactics to get you to seal the deal.\n\nAnd what power do you have? It turns out you can really control how long team matching takes, within reason. If you’re still wrapping phone screens with other companies, slow-playing is the best thing you can do. Here’s how to do it.\n\nWe’ve recently heard that Meta is now insisting that hiring manager conversations happen in series, but even if Meta lets you talk to multiple hiring managers concurrently, try to serialize those conversations as much as possible. For instance, if you hear from your recruiter that you’re going to start team matching on a Monday, and they offer to set up some calls for Wednesday, ask to do the first call on a Friday and the next call the following Tuesday.\nWhen we advise our users to do this, we often get pushback because they’re worried that slowing things down will make them look disinterested/not serious. We promise you that’s not the case. The biggest risk you run when you slow-play team matching scheduling like this is losing the chance to work on a specific team. If you find that your recruiter has proposed what seems like the perfect team for you, you can and should prioritize doing that call as soon as possible.\n\nIn addition to serializing your hiring manager conversations, for each team, ask to talk to a few individual contributors on teams that you’re serious about. This isn’t just a stalling tactic. These are the people you’ll be working closely with every day, and they’re the ones doing the job you may have in the future. They’re also less likely to do hard sells, and if you ask thoughtful questions, you’ll learn a lot about what to expect. We’re always surprised by how few candidates ask to speak to their future peers, out of a mistaken concern that asking for too much will make them look disinterested or unengaged.\nJust like with hiring manager calls, if you need to slow things down, we recommend scheduling calls with your peers a few days apart.\n\n### Situations where slow-playing may bite you, and how to know the difference\n\nWe have seen two instances when our advice about slow-playing could backfire. You probably remember when companies started to freeze hiring aggressively in mid-2022 — if you didn’t get matched before the ax came down, you were left out in the cold. Much more recently, we heard from some of our users that Meta put a pause on team matching for E4 roles (largely outside the Bay Area), and many candidates were stuck in a holding pattern (while Meta figured out headcount constraints, though it looks like it’s since been resolved, and picking back up in earnest. Slow-playing and then getting stuck is obviously an unfortunate situation, as is being on the wrong end of a hiring freeze, but these situations are rare, and in our humble opinion, not worth optimizing for — in most cases, you will not be dealing with an impending freeze or stalled matching. If you’re unsure about team supply or the state of hiring, you can do two things:\n\n• Always ask your recruiter up front to share the number of teams that candidates have had the chance to talk to, on average, recently.\n\n• Look at ourreal-time graph of FAANG hiring volume(as opposed to the graph above, which is a monthly snapshot). In this real-time graph, you can see what portion of our mock interview volume is dedicated to practice in the style of Meta, Amazon, and Google. Historically, our purchasing behavior has lined up very well with what’s actually going on in the market, and the rate of change in this graph should give you an idea of whether Meta is slowing down. As you can see, there was a dip in February (and one in December, but that almost always happens because hiring slows down over the holidays). If you see dips like these, you’ll want to make sure that you do (1) and ask your recruiter about the situation inside. You may also choose not to slow-play for too long.\n\nThere's one more situation where slow-playing may bite you. If you match with a team and really click well with the manager, to the point where you have your heart set on it, it may be wise to accept that team instead of trying to drag things out. We've heard of times where, even if the candidate asked the manager about open headcount and confirmed they didn't have to rush, the role got filled from under them (they were able to talk to other teams afterwards but missed the chance to be on that specific team). If a specific team feels irreplaceable to you and you'd be crushed if you didn't get it, then that may be more important than maximizing your negotiation.\n\n### Build rapport with every hiring manager you talk to\n\nOutside of using the team-matching process to control your timeline, there is one other important tactical piece of advice: Do your best to build rapport with hiring managers.\n\nAs we said above, recruiters are trying to close the deal. That’s their job. Hiring managers, on the other hand, are trying to lay the groundwork for a good working relationship with you. As a result, their interests are much more aligned with yours. Of course, they still want to close you, but it’s not worth it to them to employ high-pressure tactics, and it’s not something they’re trained in or comfortable with (in fact, many of them hated these tactics when they were on the other end of it while looking for work)5.\n\nAs such, hiring managers will generally be a lot more transparent with you about how much time you actually have to make a decision, and their answers will likely be very different from the ones you get from recruiters.\n\nWe’ve advised all of our Meta candidates to ask their prospective hiring managers about when they realistically have to make a decision by, and the differences between what the hiring manager has told them (“Take your time; you have a few weeks at least.”) and what their recruiter has told them (“We’re talking to a lot of candidates for that team. To ensure your spot, you should make a decision in the next few days.”) are stark.\n\nThere’s simply no downside to building rapport with hiring managers. At worst, you make a professional connection. At best, you get a head start on a great working relationship with your new boss.\n\nOne practical note: Always ask your hiring manager for their email address in case you have more questions later. This way, if your recruiter starts telling you that you need to make a decision by Friday, you can ping your hiring manager, explain that you’re still thinking, and ask if it’s OK to take a few more days. Almost always they will say yes.\n\n### Actually negotiate (this is the easy part)\n\nIf you’ve done everything else in this post, the negotiation is the easy part. By now, you’ve wrapped up team matching, chosen a team, and have likely gotten an aggressive offer deadline.\n\nYou have also not shared any offer details till now. As we said at the beginning of this post, the success of your strategy hinges on the recruiter not being aware of the other companies you’re interviewing with. This will be the first time they find out about it, and that will put them on their proverbial back foot.\n\nTo respond to the offer, you can send an email6that looks something like the below. The details will differ, and how much you reveal about the other offers will vary, but here’s the general idea.\n\nHey [Recruiter name],\n\nThank you so much for the offer, for working with me throughout this process, and for all your help with team matching.  I wanted to share some details with you. I currently have offers from {Company 1}, {Company 2}, and {Company 3}.\n\n{Company 1} has offered me a significantly higher base salary of $220k. {Company 2} has a comparable base but has offered me significantly more equity: $500k. I know {Company 2} is a startup, but they’re late stage and handing out RSUs. Those RSUs are as valuable to me as public company equity.\n\nFinally, {Company 3} has thrown in a meaningful signing bonus, and their performance bonus is actually at 25%, not 15%.\n\nI’m very excited about the opportunity to work at Meta and about the team. {Insert some authentic reasons why you’re excited about the company, the team, your new boss, etc.} It’d be great to see a meaningful increase in compensation to make my decision easier.\n\nThank you, and I look forward to hearing from you.\n\nIn the template above, I’ve assumed that not all of your offers are stronger than Meta’s across the board, which is why I’ve cherry-picked which pieces to share. Sometimes, if you’re lucky, you’ll have multiple offers that have a higher base, more equity, and a higher signing bonus. In that case, it’s less of a game of skill — just throw the numbers at them, and they’ll exceed the other offers without much prompting.\n\nIf you run this play, your recruiter will apologize for low-balling you, blaming the “computer” for giving them those numbers. Then, like clockwork, you will see a $50k to $150k jump in your offer (precisely how much depends on where your other offers are from and how strong they are).7\n\nNow, whether you take that offer is up to you.\n\nSome closing thoughts. I’m a capitalist. Meta’s behavior here is aggressively capitalistic, if short-sighted – once other FAANGs start meaningfully hiring again, and Meta employees figure out that there’s a $150k comp differential between people with the same job title, they’re going to pay the piper and likely see a bunch of attrition. Ultimately, the market will correct these practices. However, I also believe that individuals have the right and duty to be as informed as possible and to wield whatever weapons in their arsenal to advocate for themselves, rather than waiting on the mercy of slow, indifferent market forces.\n\nAs such, we hope this post has given you some ammunition in your negotiations and helped reduce the information asymmetry between you and Meta, a huge, aggressive player with basically a monopoly on eng hiring at the moment. And we hope that if anyone from Meta is reading this, it’ll spark some internal conversations about what’s right. And if they don’t, other FAANGs’ recruiters will swoop in soon enough.\n\nWant to know if you’re ready to interview at Meta? Do anonymous mock interviews with real Meta interviewers, and see exactly where you stack up.\n\n• How team matching works changed fairly recently. In the past, you’d get an offer before you matched with a team and do a 6-week “bootcamp” where you’d get up to speed on Meta’s tech stack, infrastructure, and systems, followed by a multi-week “speed dating”-esque team matching cycle. Bootcamp still exists, but now it's much shorter (2-4 weeks), and the focus is getting new engineers ramped up on generic tools. After that, new engineers continue to ramp up on their specific teams.↩\n\nHow team matching works changed fairly recently. In the past, you’d get an offer before you matched with a team and do a 6-week “bootcamp” where you’d get up to speed on Meta’s tech stack, infrastructure, and systems, followed by a multi-week “speed dating”-esque team matching cycle. Bootcamp still exists, but now it's much shorter (2-4 weeks), and the focus is getting new engineers ramped up on generic tools. After that, new engineers continue to ramp up on their specific teams.↩\n\n• We’ve recently heard that Meta may now be insisting that team matching conversations happen in serial, i.e., you can only do one at a time. However, this doesn’t meaningfully change our advice.↩\n\nWe’ve recently heard that Meta may now be insisting that team matching conversations happen in serial, i.e., you can only do one at a time. However, this doesn’t meaningfully change our advice.↩\n\n• You might say, “Aline, why can’t I just make up offers?” We could never, in good conscience, advise that. It’s unethical, and though I’d argue that while Meta’s negotiation practices are also unethical, that’s not the way to win. Outside of ethical considerations, while the risks of getting caught are low, they’re not zero. Lying about offers, in our mind, is the last refuge of the incompetent.↩\n\nYou might say, “Aline, why can’t I just make up offers?” We could never, in good conscience, advise that. It’s unethical, and though I’d argue that while Meta’s negotiation practices are also unethical, that’s not the way to win. Outside of ethical considerations, while the risks of getting caught are low, they’re not zero. Lying about offers, in our mind, is the last refuge of the incompetent.↩\n\n• The advice in this post is orthogonal from your career goals and what you want to work on. This blog post is about navigating an unfair system filled with opaque rules while maximizing your cash. It is not about self-actualization, though we’d argue that creating the most optionality for yourself helps with self-actualization as well. You can also talk to smaller companies and use your big-co offers as leverage to increase your startup equity. There’s nothing wrong with that, but more detail on optionality and self-actualization is outside the scope of this post.↩\n\nThe advice in this post is orthogonal from your career goals and what you want to work on. This blog post is about navigating an unfair system filled with opaque rules while maximizing your cash. It is not about self-actualization, though we’d argue that creating the most optionality for yourself helps with self-actualization as well. You can also talk to smaller companies and use your big-co offers as leverage to increase your startup equity. There’s nothing wrong with that, but more detail on optionality and self-actualization is outside the scope of this post.↩\n\n• Of course, some hiring managers will use high-pressure sales tactics or create false timelines to try to close you. But that’s the exception rather than the rule. You can decide if that’s something that you want to weigh when judging whether or not you want to work for them.↩\n\nOf course, some hiring managers will use high-pressure sales tactics or create false timelines to try to close you. But that’s the exception rather than the rule. You can decide if that’s something that you want to weigh when judging whether or not you want to work for them.↩\n\n• We strongly urge you to avoid negotiating over the phone and over text, whenever possible. Your recruiter does 5 of these calls a day. You might do one of these calls every few years. Do the hard part over email. It’s the best way to level the playing field.Read this postto learn how to avoid synchronous phone negotiations (just look for “phone”).↩\n\nWe strongly urge you to avoid negotiating over the phone and over text, whenever possible. Your recruiter does 5 of these calls a day. You might do one of these calls every few years. Do the hard part over email. It’s the best way to level the playing field.Read this postto learn how to avoid synchronous phone negotiations (just look for “phone”).↩\n\n• One advanced maneuver is to pit all your other companies against each other and raise up their initial offers BEFORE talking to Meta. We’ll likely write about how to run this play in a future post.↩\n\nOne advanced maneuver is to pit all your other companies against each other and raise up their initial offers BEFORE talking to Meta. We’ll likely write about how to run this play in a future post.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Design a Free Food App\n\n### Integer Replacement\n\n### Find the Missing Number in an Array",
      "source_url": "https://interviewing.io/blog/how-to-negotiate-with-meta",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Are recruiters better than a coin flip at judging resumes? Here's the data.",
      "content": "# Are recruiters better than a coin flip at judging resumes? Here's the data.\n\nThis post is a very exciting first for interviewing.io because it’s about a proper experiment run by a real, live academic research lab. If you’ve been reading my work for the past decade, you know that I’ve always been something of an armchair researcher. I ran some experiments before starting interviewing.io, and since then, my team and I havekept it up.\n\nOne of the experiments I ran before I founded interviewing.io was an attempt to figure out how good recruiters were at judging candidate quality based on resumes. I ran it 10 years ago and discovered that not only was everyone bad at judging resumes (about as accurate as flipping a coin),they all disagreed with each other about what a good candidate looked like.\n\nEven though these results were shocking at the time, the study had some serious limitations. First, I had no objective measures for which candidates were actually good. I was working as a recruiter at the time, so I knew whom I had been able to place, but that’s obviously not the be-all and end-all of engineering ability. Second, I had a non-representative sample of software engineers. Due to my brand, I had managed to attract a lot of excellent, non-traditional candidates — engineers who were actually very good but didn’t look good on paper. These types of resumes are the hardest for recruiters to judge, and the data was full of them. Finally, my sample size wasn’t that big: I ended up with 716 data points in total, only about half of which came from recruiters (the rest came from engineers and hiring managers — my original hypothesis was that they might be better at the task, but I was wrong… everyone was bad at judging resumes).\n\nSo, now that I’m CEO of interviewing.io, with access to a lot more data, resources, and a team of excellent academics atLearning Collider, we decided to run this study again, but with a more rigorous treatment and better conditions, to see if we could replicate the results. This time, we focused just on recruiters, given that they’re most often the gatekeepers who decide which candidates get an interview.\n\nBelow are all the details, but here’s the TL;DR: we reproduced my results from 10 years ago! Our new study showed that recruiters were only a bit better than a coin flip at making value judgments, and they still all disagreed with each other about what a good candidate looks like.\n\nIn this piece, we also talk about:\n\n• How far off recruiters were in their predictions and how much they disagreed with each other\n\n• What recruiters say they look for vs. what the data shows they actually look for\n\n• Why recruiters taking more time to parse resumes would lead to better outcomes (median parse time is just 31 seconds)\n\n• Whether AI can do a better job at judging resumes (spoiler: yes, it can)\n\nThe rest of this piece is co-authored by Peter Bergman, Tushar Kundu, and Kadeem Noray of Learning Collider.\n\nIn the real world, resumes (or LinkedIn profiles) are evaluated by recruiters in minutes — even seconds — and these evaluations are THE thing that determines who gets an interview.\n\nBut what do these word walls tell recruiters? How predictive are their evaluations of actual interview success? Ultimately, how good are recruiters at judging resumes?\n\nTo answer these questions, we designed a study approximating technical recruiters’ decisions in the real world. We asked176 technical recruiters (both agency and in-house) to review and make judgments about 30 engineers’ resumes each, just as they would in their current roles.\n\nThey answered two questions per resume:\n\n• Would you interview this candidate?2(Yes or No)\n\n• What is the likelihood this candidate will pass the technical interview (as a percentage)?\n\nWe ended up with nearly 2,200 evaluations of over 1,000 resumes.\n\nThe resumes in this study belonged to interviewing.io users (with their consent) — actual engineers currently on the job market.\n\nCollaborating on this study with interviewing.io is an ideal scenario, precisely because outcome data were available for comparison purposes. Each engineer in this study has completed multiple mock interviews on the platform. Performance in these interviews is quite predictive of performance in real interviews: top performers (roughly the top 5% of users) on interviewing.io are 3X more likely to pass technical interviews at top-tier companies than candidates from other sources. Even passing a single interview on interviewing.io is a strong predictor of outcomes; it's associated with a 32% increase in the chance of working at a FAANG company post-interview.\n\nOnce we had recruiters’ evaluations of the resumes, we compared them to how those engineers actually performed on interviewing.io: skills scores, feedback from interviewers, and ultimately, whether they passed or failed their mock interviews.\n\n## Recruiters’ resume judgments are just slightly better than a coin flip\n\n### Question #1: Would you interview this candidate?\n\nIn aggregate, recruiters in the study recommended 62% of candidates for an interview. But how did recruiter evaluations stack up against candidates’ performance on the platform?\n\nWe calculated recruiter accuracy by treating each candidate’s first interview (pass/fail) as the truth, and recruiters’ decision to interview as a prediction. It turns out that recruiters chose correctly 55% of the time, which is just slightly better than a coin flip.\n\n### Question #2: What is the likelihood this candidate will pass the technical interview?\n\nRecruiters predicted the likelihood that each candidate would pass the technical interview. In most hiring processes, the technical interview follows the recruiter call and determines whether candidates proceed to the onsite. Being able to accurately predict which candidates will succeed at this stage is important and should inform the decision about whether to interview the candidate or not.\n\nWhat we found most surprising is how far their predictions were from the truth:\n\n• When recruiters predicted the highest probability of passing (95-100%), those candidates actually passed with a 64% probability.\n\nBelow is a graph that shows recruiter predictions vs. actual performance. The x-axis is the bucketed recruiter rating. In other words, the first point is all the candidates that recruiters assigned a 0-5% likelihood of passing. The y-axis is the average interviewing.io pass rate for those candidates. The red dotted line represents 100% accuracy – in an ideal world, the higher a recruiter's ranking of a candidate, the higher their actual performance would be. The orange line represents reality – as you can see, there isn’t much correspondence between how recruiters predicted candidates would perform and their actual performance.\n\nRecruiters’ predictions below 40% underestimate these candidates by an average of 23 percentage points. Above 60%, they’re overestimating by an average of 20 percentage points.If this was predicting student performance, recruiters would be off by two full letter grades.\n\n## Recruiters can’t agree on what a good candidate looks like\n\nClearly, there is lots of noise in resume evaluations. Were recruiters’ noisy judgments at least consistent when reviewing the same resumes?\n\nNearly 500 resumes were evaluated by more than one recruiter. Based on a random selection of two evaluations per resume, the overall likelihood of two recruiters agreeing to either interview or not interview a given candidate was 64%.\n\nSince recruiters also guess the probability a candidate will pass the technical interview, we can compare how different these guesses are for a given candidate.The average differential between two randomly selected recruiters’ evaluations of the same resume was 41 percentage points. So, let’s say one recruiter predicts a 30% probability the candidate would pass; another recruiter evaluating the same resume would predict, on average, a 71% probability of passing.\n\nTo further understand just how prevalent the disagreement is, we looked at the standard deviations for across-candidate evaluations and same-candidate evaluations:\n\n• 0.34 across different candidates\n\n• 0.32 across the same candidates\n\nSo, when two recruiters are asked to judge the same candidate, their level of disagreement is nearly the same as if they evaluated two completely different candidates.\n\n## The most sought-after resume attributes\n\nDespite the noise and variability in the study’s resume evaluations, there were some characteristics that recruiters consistently favored: experience at a top-tier tech3company (FAANG or FAANG-adjacent) and URM (underrepresented minority) status (in tech, this means being Black or Hispanic).\n\nMost predictive for Question #1 (whether a recruiter would want to interview that candidate) was experience at a top company — these candidates were 35% more likely to be picked. Black or Hispanic candidates are also associated with an increased likelihood a recruiter would interview a candidate — by 21%.4\n\nWith Question #2 (how likely the candidate was to pass a technical interview), having a top company on your resume is associated with a 21% increase in the likelihood that recruiters believe the candidate will pass the interview. Compared to the actual pass rates, recruiters’ predictions of FAANG candidates are generally accurate (average 4 percentage point overestimate).5Unlike the presence of a top company, URM status didn't appear to influence recruiter decisions here.\n\n## How do recruiters’ stated reasons for rejecting candidates line up with actual rejection reasons?\n\nSo, we know what recruiters tend to favor, whether they’d admit to it or not: 1) FAANG/FAANG-adjacent experience and 2) URM status. But what’s even more interesting than why a recruiter would say yes is why they would say no.\n\nWhen we asked recruiters to judge a resume, we also asked them WHY they made that decision.6Below are recruiters’ stated reasons for rejecting candidates. As you can see, “missing skill” is the main reason by far, with “no top firm” a distant third.\n\nSo, then, we wondered… How do recruiters’ stated reasons for rejecting candidates line up with reality? To figure that out, we analyzed the resumes that ended up in the rejected pile and looked at common traits.\n\nBelow is a graph of actual rejection reasons, based on our analysis. The main rejection reason isn’t “missing skill” — it’s “no top firm.” This is followed, somewhat surprisingly, but much less reliably (note the huge error bars), by having an MBA. “No top school” and having a Master’s degree come in at third and fourth. Note that these top four rejection reasons are all based on a candidate’s background, NOT their skill set.\n\n## Slowing down is associated with better decisions\n\nAnother key piece of this study is time. In hiring settings, recruiters make decisions quickly. Moving stacks of candidates through the funnel gives little room to second-guess or even wait before determining whether or not to give a candidate the opportunity to interview.\n\nIn our study,the median time spent on resume evaluations was just 31 seconds. Broken down further by Question #1 — whether or not the recruiter would interview them — the median time spent was:\n\n• 25 seconds for those advanced to a technical interview\n\n• 44 seconds for those placed in the reject pile\n\nGiven the weight placed on single variables (e.g., experience at a top firm), how quickly recruiters make judgments isn’t surprising. But might they be more accurate if they slowed down?It turns out that spending more time on resume evaluations, notably >45 seconds, is associated with more accurate predictions — just spending 15 more seconds appears to increase accuracy by 34%.7It could be that encouraging recruiters to slow down might result in more accurate resume screening.\n\n## Can AI do better?\n\nAs a gaggle of technologists and data geeks, we tested whether algorithms could quiet the noise and inconsistencies in recruiters’ predictions.\n\nWe trained two local, off-the-rack machine-learning models.8\n\nJust like human recruiters, the models were trained to predict which candidates would pass technical interviews. The training dataset was drawn from interviewing.io and included anonymized resume data (years of experience, whether they had worked at a top firm, and whether they had attended a top 10 school for either grad or undergrad), candidates’ race and gender, and interview outcomes.9\n\nDespite the very limited types of data we input into both models, when presented with out-of-sample candidate profiles, both models made predictions more accurately than human recruiters.\n\nRandom Forest was somewhat more accurate than recruiters when predicting lower performing candidates. XGBoost, however, was more accurate across the board than both the Random Forest model AND recruiters.\n\n## Where does this leave us?\n\nIn this section, when we say “we,” we are speaking as interviewing.io, not as the researchers involved in this study. Just FYI.\n\n### Advice for candidates\n\nAt interviewing.io, we routinely get requests from our users to add resume review to our list of offerings. So far, we have declined to build it. Why? Because we suspected that recruiters, regardless of what they say publicly, primarily hunt for name brands on your resume. Therefore, highlighting your skills or acquiring new skills is unlikely to make a big difference in your outcomes.\n\nWe are sad to see the numbers back up our intuition that it mostly is about brands.10As such, here’s an actionable piece of advice: maintain a healthy skepticism when recruiters advise you to grow your skill set. Acquiring new skills will very likely make you a better engineer. But it will very likely NOT increase your marketability.\n\nIf enhancing your skill set won’t help, what can you do to get in front of companies? We’re in the midst of a brutal market, the likes of which we haven’t seen since the dot-com crash in 2000. According to anecdotes shared in our Discord community, even engineering managers from FAANGs are getting something like a 10% response rate when they apply to companies online. If that’s true, what chance do the rest of us have?\n\nWe strongly encourage anyone looking for work in this market, especially if you come from a non-traditional background, to stop spending energy on applying online, full stop. Instead, reach out to hiring managers. The numbers will be on your side there, as relatively few candidates are targeting hiring managers directly. We plan to write a full blog post on how to do this kind of outreach well, but this CliffsNotes version will get you started:\n\n• Get a LinkedIn Sales Navigator account\n\n• Make a target list of hiring managers at the companies you’re interested in\n\n• Figure out their emails (you can use a tool like RocketReach), and send them something short and personalized. Do not use LinkedIn. The same way that you don’t live in LinkedIn, eng managers don’t either. Talk about the most impressive thing you’ve built. Ask them about their work, if you can find a blog post they’ve written or a project they’ve worked on publicly. Tie those two things together, and you’ll see a much higher response rate. Writing these personalized emails takes time, of course, but in this market, it’s what you need to do to stand out.\n\n### Advice for recruiters\n\nWe know that recruiting is a tough job, especially in the current climate, where there are more applicants than ever and fewer recruiters to parse through them. So, it rationally makes sense to us that a recruiter would spend no more than 30 seconds per resume and focus primarily on looking for top brands.\n\nWe hope, though, that this piece may have given a measure of pause about your approach, and we’d like to leave you with two actionable pieces of advice. First, if you do nothing else, please slow down. As you saw above,  taking just 15 extra seconds to read a resume could improve your accuracy by 34%.11\n\nOur second piece of advice is this. Freada Kapor Klein from Kapor Capital coined the term “distance traveled” more than two decades ago. It refers to what someone accomplished, in the context of where they started. For instance, Kapor Klein recommends that, in their admissions processes, universities should consider not just the number of AP tests a candidate has passed but the number of AP tests divided by the total number offered at their high school. For example, if an applicant took 5 AP tests and their school offered 27, that paints a very different picture from another applicant who also took 5 AP tests when that’s the total number offered at their school. Kapor Capital uses distance traveled as one of their metrics for determining which entrepreneurs to fund. One can easily apply this concept to hiring as well.\n\nTake a look at the resume below. \"John\" (name has been changed; scrubbed resume shared with permission) studied chemical engineering and worked his way into software engineering by starting as a service engineer focused on pen testing. In the meantime, he completed a bootcamp, attended the Bradfield School of Computer Science (a school dedicated to teaching computer science at a depth beyond what many university programs, and certainly most bootcamps, offer), and ended up with a senior title in just three years.\n\nJohn was consistently rated poorly by recruiters but is one of the top performers on interviewing.io.\n\nIt takes just a bit more time, so please spend a little longer reading resumes, and evaluate candidates’ achievements in the context of where they came from. Think about the denominator. But don’t think for a moment that we recommend that you lower the bar — absolutely not. On interviewing.io, we regularly see candidates like John objectively outperforming their FAANG counterparts.\n\n### What this means for our industry\n\nThe last time I did this research, I wrote about how being bad at judging resumes isn’t anything to be ashamed about and that comes down to the resume itself being a low-signal and not-very-useful document.\n\nI held that same opinion for the last decade (and even wrote arecent post about how AI can’t do recruiting)… right up until we ran this study and successfully built two ML models that outperformed recruiters.\n\nSo, I stand corrected.\n\nAs you saw above, both models were limited – they were looking at the same types of features that recruiters do when they quickly scan a resume, certainly fewer features than recruiters have access to. But, despite that, the AI models still outperformed humans. What happens then, if you can build a model that behaves like a recruiter who really slows down and reads everything? These results make me believe that resumes do carry some signal, and you can uncover it if you carefully read what people write about their jobs and themselves and also analyze how they write it. Unfortunately, this takes more time and effort to uncover than most human recruiters are able to devote. And, in retrospect, that’s a good task for AI. Though we haven’t built a model like that for this post, I’m optimistic that we may be able to do it in the future.\n\nAs I said in the AI piece I linked above, in order for AI to do useful recruiting work, rather than just perpetuating the biases that human recruiters hold, it needs a data set that contains some objective measure of performance. Most recruiting AI models today do one of three things: glorified keyword matching, training on what recruiters prefer (the outcome is whether a recruiter would want to talk to the candidate, NOT whether the candidate is good), or live on top of existing tools like ChatGPT (whichwe recently showed doesn’t perform very well and is biased against non-traditional candidates). These three approaches just result in the wrong thing being done, faster.\n\nI hope that, in the not too distant future, we can use AI to make less-biased decisions, using meaningful performance data. And I hope that this type of AI solution can get adoption among the recruiting community.\n\nFootnotes:\n\n• Participating technical recruiters were paid a base rate and then received additional $$ for each accurate prediction.↩\n\nParticipating technical recruiters were paid a base rate and then received additional $$ for each accurate prediction.↩\n\n• Different roles have different requirements. To correct for that, we asked each candidate to specify which eng role they were applying for: Software Engineer (back-end or full-stack), Mobile Engineer, Front-end Engineer, ML Engineer, Data Engineer, or Engineering Manager. Then we prompted recruiters to evaluate them specifically for that role. If no role was specified by the candidate, the default role to evaluate for was Software Engineer (back-end or full-stack).↩\n\nDifferent roles have different requirements. To correct for that, we asked each candidate to specify which eng role they were applying for: Software Engineer (back-end or full-stack), Mobile Engineer, Front-end Engineer, ML Engineer, Data Engineer, or Engineering Manager. Then we prompted recruiters to evaluate them specifically for that role. If no role was specified by the candidate, the default role to evaluate for was Software Engineer (back-end or full-stack).↩\n\n• Top firms = Airbnb, Amazon, Anthropic, AWS, Apple, Asana, Atlassian, Bloomberg LP, Checkr, Coinbase, Coursera, Cruise, Dropbox, Etsy, Facebook, Flexport, GitHub, Google, Gusto, HashiCorp, Instacart, Instagram, Jane Street, Jump Trading, Khan Academy, LinkedIn, Lyft, Medium, Microsoft, Mozilla, Netflix, Oculus, OpenAI, Palantir, Peloton, Pinterest, Postmates, Quora, Reddit, Robinhood, Roblox, Salesforce, Segment, Slack, Snap, Snowflake, SpaceX, Spotify, Square, Stripe, Tesla, Thumbtack, TikTok, Twilio, Twitch, Twitter, Two Sigma, Uber, Udemy, Waymo, Whatsapp, Yelp, and Zoom.↩\n\nTop firms = Airbnb, Amazon, Anthropic, AWS, Apple, Asana, Atlassian, Bloomberg LP, Checkr, Coinbase, Coursera, Cruise, Dropbox, Etsy, Facebook, Flexport, GitHub, Google, Gusto, HashiCorp, Instacart, Instagram, Jane Street, Jump Trading, Khan Academy, LinkedIn, Lyft, Medium, Microsoft, Mozilla, Netflix, Oculus, OpenAI, Palantir, Peloton, Pinterest, Postmates, Quora, Reddit, Robinhood, Roblox, Salesforce, Segment, Slack, Snap, Snowflake, SpaceX, Spotify, Square, Stripe, Tesla, Thumbtack, TikTok, Twilio, Twitch, Twitter, Two Sigma, Uber, Udemy, Waymo, Whatsapp, Yelp, and Zoom.↩\n\n• We corrected by FAANG & FAANG-adjacent experience (and all of our other variables) before making this statement, i.e., the effect existed for engineers from underrepresented backgrounds who did not have FAANG/FAANG-adjacent companies on their resumes. We expect that recruiters favor underrepresented minority candidates because of guidelines from their employers to focus on sourcing these types of candidates, as part of DEI initiatives. Discussion about the magnitude of this effect and its implications is out of scope of this piece.↩\n\nWe corrected by FAANG & FAANG-adjacent experience (and all of our other variables) before making this statement, i.e., the effect existed for engineers from underrepresented backgrounds who did not have FAANG/FAANG-adjacent companies on their resumes. We expect that recruiters favor underrepresented minority candidates because of guidelines from their employers to focus on sourcing these types of candidates, as part of DEI initiatives. Discussion about the magnitude of this effect and its implications is out of scope of this piece.↩\n\n• Interestingly, recruiters might penalize, for example, alternative education. Candidates with only alternative education pathways post-high school — coding bootcamps or digital certifications — appeared to be penalized by recruiters in this study. However, with limited observations (n=11), it’s inconclusive without further study.↩\n\nInterestingly, recruiters might penalize, for example, alternative education. Candidates with only alternative education pathways post-high school — coding bootcamps or digital certifications — appeared to be penalized by recruiters in this study. However, with limited observations (n=11), it’s inconclusive without further study.↩\n\n• That field was optional, so most of the reasons recruiters provided were in cases when they said no — presumably because the reasons for saying yes may have seemed self-evident.↩\n\nThat field was optional, so most of the reasons recruiters provided were in cases when they said no — presumably because the reasons for saying yes may have seemed self-evident.↩\n\n• It’s not that recruiters who generally take their time make more accurate judgements. Any recruiter slowing down might make them better at judging resumes!↩\n\nIt’s not that recruiters who generally take their time make more accurate judgements. Any recruiter slowing down might make them better at judging resumes!↩\n\n• It’s important to stress that neither algorithm was custom-built. The models, one using a Random Forest algorithm and the other an XGBoost algorithm, are distinct but interrelated approaches akin toDecision Tree algorithms. Decision trees sort data into groups based on features. Random forest algorithms combine multiple decision trees to improve predictions. XGBoost builds multiple decision trees one after another, with each new tree focusing on prediction errors from the previous trees.↩\n\nIt’s important to stress that neither algorithm was custom-built. The models, one using a Random Forest algorithm and the other an XGBoost algorithm, are distinct but interrelated approaches akin toDecision Tree algorithms. Decision trees sort data into groups based on features. Random forest algorithms combine multiple decision trees to improve predictions. XGBoost builds multiple decision trees one after another, with each new tree focusing on prediction errors from the previous trees.↩\n\n• Training data excluded data in this study. We take user privacy very seriously, and we want to stress that all models were local and anonymized and that no data in this study was shared with cloud LLMs.↩\n\nTraining data excluded data in this study. We take user privacy very seriously, and we want to stress that all models were local and anonymized and that no data in this study was shared with cloud LLMs.↩\n\n• To see a particularly egregious example of recruiters favoring brands over substance, take a close look atthis fake resume that got a bunch of recruiter responses.And this one too.↩\n\nTo see a particularly egregious example of recruiters favoring brands over substance, take a close look atthis fake resume that got a bunch of recruiter responses.And this one too.↩\n\n• We haven’t proven causality here, but when we just scoped our analysis to the same person, it appeared that taking more time did help (in other words, it’s not just that recruiters who spend more time usually are more accurate; it’s the added time). Still, this is something that merits more work, and we'll try to investigate it causally in the future.↩\n\nWe haven’t proven causality here, but when we just scoped our analysis to the same person, it appeared that taking more time did help (in other words, it’s not just that recruiters who spend more time usually are more accurate; it’s the added time). Still, this is something that merits more work, and we'll try to investigate it causally in the future.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Shuffle String\n\n### K Closest Points To Origin\n\n### Remove Nth Node from End of List",
      "source_url": "https://interviewing.io/blog/are-recruiters-better-than-a-coin-flip-at-judging-resumes",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Read nine chapters of Beyond Cracking the Coding Interview for free",
      "content": "• For employers\n\n• Gift mock interviews\n\n# Read nine chapters of Beyond Cracking the Coding Interview for free\n\nAlong with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I wrote the official sequel toCracking the Coding Interview. It's fittingly calledBeyond Cracking the Coding Interview..\n\nNow, we're releasing9 chapters of the book for free! There are two PDFs in the linked folder:\n\n• The first seven chapters of the book, covering topics such as why technical interviews are broken, what recruiters won't tell you, why not to spend a lot of time on resumes, and how to get in the door at companies without a referral.\n\n• Two technical chapters: Sliding Windows and Binary Search. Our new take on Binary Search teaches one template that works for every binary search problem on LeetCode, with only a single-line change you need to remember. The Sliding Windows chapter features 6 unique sliding window templates that make off-by-one errors a thing of the past.\n\nTake a look, and let me know what you think. You can reach me ataline@interviewing.io.\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Recover Binary Search Tree\n\n### Decode String\n\n### Integer Replacement\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/nine-free-chapters-of-beyond-cracking-the-coding-interview",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "We ran an experiment to see how easy it is to cheat with ChatGPT in interviews",
      "content": "# How hard is it to cheat in technical interviews with ChatGPT? We ran an experiment.\n\nEdit: This article originally contained a TikTok video of someone cheating in an interview with ChatGPT. Videos like this still can be found online, but companies hate them, so they don't stay up for long\n\nChatGPT has revolutionized work as we know it. From helping small businesses automate their administrative tasks to coding entire React components for web developers, its usefulness is hard to overstate.\n\nAt interviewing.io, we've been thinking a lot about how ChatGPT will change technical interviewing.One big question is: Does ChatGPT make it easy to cheat in interviews?You've probably started to hear concerns about students cheating on their homework with ChatGPT, and we are certain that some people have tried to cheat in interviews with it, too!\n\nInitial responses to cheating software have been pretty much in line with what you’d expect:\n\n• Redditors state that “ChatGPT is the end of coding as we know it.”\n\n• YouTubers announce that “Software engineering is dead. ChatGPT killed it.”\n\n• X (formerly Twitter) questions if “​​ChatGPT spell(s) the end for Coding Interviews?”\n\nIt seems clear that ChatGPT can assist people during their interviews, but we wanted to know:\n\n• How much can it help?\n\n• How easy is it to cheat (and get away with it)?\n\n• Will companies that ask LeetCode questions need to make significant changes to their interview process?\n\nTo answer these questions, we recruited some of our professional interviewers and users for a cheating experiment! Below, we’ll share everything we discovered and explain what it means for you. As a little preview, just know this: companies need to change the types of interview questions they are asking—immediately.\n\n## The experiment\n\ninterviewing.io is an interview practice platform and recruiting marketplace for engineers. Engineers use us for mock interviews. Companies use us to hire top performers. We have thousands of professional interviewers in our ecosystem, and hundreds of thousands of engineers have used our platform to prepare for interviews.1\n\n### Interviewers\n\nInterviewers came from our pool of professional interviewers. They were broken into three groups, with each group asking a different type of question.The interviewers had no idea that the experiment was about ChatGPT or cheating; we told them that \"[this] research study aims to understand the trends in the predictability of an interviewer’s decisions over time – especially when asking standard vs. non-standard interview questions.\"\n\nThese were the three question types:\n\n• Verbatim LeetCode questions: questions pulled directly from LeetCode at the interviewer's discretion with no modifications to the question.\n\nExample: TheSort ColorsLeetCode question is asked exactly as it is written.\n\n• Modified LeetCode questions: questions pulled from LeetCode and then modified to be similar to the original but still notably different from it.\n\nExample: TheSort Colorsquestion above but modified to have four integers (0,1,2,3) instead of just three integers (0,1,2) in the input.\n\n• Custom questions: questions that aren’t directly tied to any question that exists online.\n\nExample: You are given a log file with the following format:\n-<username>: <text> - <contribution score>- Your task is to identify the user who represents the median level of engagement in a conversation. Only consider users with a contribution score greater than 50%. Assume that the number of such users is odd, and you need to find the one right in the middle when sorted by their contribution scores. Given the file below, the correct answer is SyntaxSorcerer.\n\nFor more information about question types and about how we designed this experiment, please read theInterviewer Experiment Guidelinesdoc that we shared with participating interviewers.\n\n### Interviewees\n\nInterviewees came from our pool of active users and were invited to participate in a short survey. We selected interviewees who:\n\n• Were actively looking for a job in today's market\n\n• Had 4+ years of experience and were applying to senior-level positions\n\n• Rated their “ChatGPT while coding” familiarity as moderate to high\n\n• Identified themselves as someone who thought they could cheat in an interview without getting caught\n\nThis selection helped us skew the candidates toward people who could feasibly cheat in an interview, had the motivation to do so, and were already reasonably familiar with ChatGPT and coding interviews.\n\nWe told interviewees that they had to use ChatGPT in the interview, and the goal was to test their ability to cheat with ChatGPT.They were also told not to try to pass the interview with their own skills — the point was to rely on ChatGPT.\n\nWe ended up conducting 37 interviews overall, 32 of which we were able to use (we had to remove 5 because participants didn’t follow directions):\n\n• 11 with the “verbatim” treatment\n\n• 9 with the “modified” treatment\n\n• 12 with the “custom” treatment\n\nA quick disclaimer. Because our platform allows for anonymity, our interviews have audio but no video. We’re anonymous because we want to create a safe space for our users to fail and learn quickly without judgment. It’s great for our users, but we acknowledge that not having video in these interviews makes our experiment less realistic. In a real interview, you will be on camera with a job on the line, which makes cheating harder — but does not eliminate it.\n\nAfter the interviews, both interviewers and interviewees had to complete an exit survey. We asked interviewees about the difficulties of using ChatGPT during the interview, and interviewers were given multiple chances to express concerns about the interview — we wanted to see how many interviewers would flag their interviews as problematic and report that they suspected cheating.\n\nWe had no idea what would happen in this experiment, but we assumed that if half the candidates that cheated got away with it and passed the interview, it would be a telling result for our industry.\n\nAfter removing interviews where participants did not follow instructions2, we got the following results. Our control was how candidates performed in interviewing.io mock interviews outside the study: 53%.3Note that most mock interviews on our platform are LeetCode-style questions, which makes sense because that's primarily what FAANG companies ask. We'll come back to this in a moment.\n\n### “Verbatim” questions\n\nPredictably, the verbatim group performed the best, passing 73% of their interviews. Interviewees reported that they got the perfect solution from ChatGPT.\n\nThe most notable comment from the post-interview survey for this group is below — we think it is particularly telling of what was going on in many of the interviewers’ minds:\n\n> “It's tough to determine if the candidate breezed through the question because they're actually good or if they've heard this question before. Normally, I add 1-2 unique twists to the problem to ascertain the difference.”\n\n“It's tough to determine if the candidate breezed through the question because they're actually good or if they've heard this question before. Normally, I add 1-2 unique twists to the problem to ascertain the difference.”\n\nNormally, this interviewer would have followed up with a modified question to get more signal, so let’s examine the “modified” group next to see if interviewers actually got more signal by adding a twist to their questions.\n\n### “Modified” questions\n\nRemember, this group may have had a LeetCode question given to them, which was standard but modified in a way that was not directly available online. This means ChatGPT couldn’t have had a direct answer to this question. Hence, the interviewees were much more dependent on ChatGPT's actual problem-solving abilities than its ability to regurgitate LeetCode tutorials.\n\nAs predicted, the results for this group weren’t too different from the “verbatim” group, with 67% of candidates passing their interviews. As it turns out, this difference was not statistically significantly different from the \"verbatim\" group, i.e., “modified” and “verbatim” are essentially the same. This result suggests that ChatGPT can handle minor modifications to questions without much trouble. Interviewees did notice, however, that it took more prompting to get ChatGPT to solve the modified questions. As one of our interviewees said:\n\n> “Questions that are lifted directly from LeetCode were no problem at all. A follow-up question that was not so much directly LeetCode-style was much harder to get ChatGPT to answer.”\n\n“Questions that are lifted directly from LeetCode were no problem at all. A follow-up question that was not so much directly LeetCode-style was much harder to get ChatGPT to answer.”\n\n### “Custom” questions\n\nAs expected, the “custom” question group had the lowest pass rate, with only 25% of candidates passing.Not only is it statistically significantly smaller than the other two treatment groups, it's significantly lower than the control! When you ask candidates fully custom questions, they perform worse than they do when they're not cheating (and getting asked LeetCode-style questions)!\n\nNote that this number, when initially calculated, was marginally higher, but after reviewing the custom questions in detail, we discovered a problem with this question type we hadn’t anticipated, which had skewed the results minorly toward a higher pass rate. Read the section below called \"Companies: Change the questions you are asking immediately!\" to find out what that problem was.\n\n## No one was caught cheating!\n\nIn our experiment, interviewers were not aware that the interviewees were being asked to cheat. As you recall, after each interview, we had interviewers complete a survey in which they had to describe how confident they were in their assessments of candidates.\n\nInterviewer confidence in the correctness of their assessments was high, with 72% saying they were confident in their hiring decision.One interviewer felt so strongly about an interviewee's performance that they concluded we should invite them to be an interviewer on the platform!\n\n> “The candidate performed very well and demonstrated knowledge of a strong Amazon L6 (Google L5) SWE... and could also be considered to be an interviewer/mentor on interviewing.io.”\n\n“The candidate performed very well and demonstrated knowledge of a strong Amazon L6 (Google L5) SWE... and could also be considered to be an interviewer/mentor on interviewing.io.”\n\nThat is a lot of confidence after just one interview — probably too much!\n\nWe’ve long known thatengineers are bad at gauging their own performance, so perhaps it shouldn’t come as a shock to find that interviewers also overestimate the effectiveness of the questions that they ask.\n\nOf the interviewers who were not confident in their hiring choice (28%), we asked them why. This was the frequency distribution of their reasons.\n\nMost interviewers concerned about their hiring decision expressed specific reasons for their lack of confidence. These issues typically included suboptimal solutions, missed edge cases, messy code, or poor communication. We specifically included an “Other Issue” category to see if they would express a concern that the interviewee was cheating, but digging deeper revealed only minor grievances like “personality issues” and “they need to speed up their coding.”\n\nIn addition to having this opportunity to call out cheating, interviewers were prompted three additional times to note any other concerns they had with the interview, including free-form text boxes and several multiple-choice questions with options to explain their concerns.\n\nWhen an interviewee bombed because they didn’t understand the ChatGPT response, the interviewer chalked up the interviewee’s odd behavior and stilted responses to a lack of practice — not cheating. One interviewer thought the candidate's problem-solving was fine but commented that they were slow and needed to consider edge cases more carefully.\n\n> “Candidate did not seem prepared for any LeetCode questions.\"\n\n“Candidate did not seem prepared for any LeetCode questions.\"\n\n> “Candidate's approach lacked clarity, and they jumped into the coding too early.”\n\n“Candidate's approach lacked clarity, and they jumped into the coding too early.”\n\n> “The candidate was not prepared to tackle even the most basic coding questions on LeetCode.”\n\n“The candidate was not prepared to tackle even the most basic coding questions on LeetCode.”\n\n> “Good problem solving in general, but the candidate needs to be faster at coding and identifying critical edge cases.”\n\n“Good problem solving in general, but the candidate needs to be faster at coding and identifying critical edge cases.”\n\nSo, who reported concerns about cheating? And who got caught?\n\nAs it turns out, not a single interviewer mentioned concerns about any of the candidates cheating!\n\nWe were stunned to discover that interviewers reported no suspicions of cheating, and interestingly, interviewees were largely confident that they were getting away with it, too. 81% reported no concerns about being caught, 13% thought they might have tipped off the interviewer, and an astonishingly small 6% of participants thought the interviewer suspected them of cheating.\n\nThe candidates who worried they were caught did have abnormal comments from the interviewers in the post-survey analysis, but they still were not suspected of cheating.To summarize, most candidates thought they were getting away with cheating — and they were right!\n\n## Companies: Change the questions you are asking immediately!\n\nThe obvious conclusion from these results is thatcompanies need to start asking custom questions immediately, or they are at serious risk of candidates cheating during interviews (and ultimately not getting useful signal from their interviews)!\n\nChatGPT has made verbatim questions obsolete; anyone relying on them will be naively leaving their hiring processes up to chance. Hiring isalready tricky enoughwithout worrying about cheating. If you’re part of a company that uses verbatim LeetCode questions, please share this post internally!\n\nUsing custom questions isn’t just a good way to prevent cheating. It filters out candidates who have memorized a bunch of LeetCode solutions (as you saw, our custom question pass rate was significantly lower than our control). It also meaningfully improves candidate experience, which makes people way more likely to want to work for you. A while ago, we did ananalysis of what makes good interviewers good. Not surprisingly, asking good questions was one of the hallmarks, and our best-rated interviewers were the ones who tended to ask custom questions! Question quality was extremely significant in our study, regarding whether the candidate wanted to move forward with the company. It was much more important than the company’s brand strength, which mattered for getting candidates in the door but didn’t matter relative to question quality once they were in process.\n\nAs some of our interviewees said…\n\n> “Always nice to get questions that are more than just plain algorithms.”\n\n“Always nice to get questions that are more than just plain algorithms.”\n\n> “I liked the question — it takes a relatively simple algorithms problem (build and traverse a tree) and adds some depth. I also liked that the interviewer connected the problem to a real product at [Redacted], which made it feel less like a toy problem and more like a pared-down version of a real problem.”\n\n“I liked the question — it takes a relatively simple algorithms problem (build and traverse a tree) and adds some depth. I also liked that the interviewer connected the problem to a real product at [Redacted], which made it feel less like a toy problem and more like a pared-down version of a real problem.”\n\n> “This is my favorite question that I’ve encountered on this site. It was one of the only ones that seemed to have real-life applicability and was drawn from a real (or potentially real) business challenge. And it also nicely wove in challenges like complexity, efficiency, and blocking.”\n\n“This is my favorite question that I’ve encountered on this site. It was one of the only ones that seemed to have real-life applicability and was drawn from a real (or potentially real) business challenge. And it also nicely wove in challenges like complexity, efficiency, and blocking.”\n\nOne more somewhat subtle piece of advice for companies who decide to move to more custom questions. You might be tempted to take verbatim LeetCode questions and change up the wording or some of the window dressing. That makes sense, because it’s certainly easier than coming up with questions from scratch. Unfortunately, that doesn’t work.\n\nAs we mentioned earlier, we discovered in this experiment that just because a question looks like a custom question, doesn’t mean it is one. Questions can appear custom and still be identical to an existing LeetCode question.When making questions to ask candidates, it isn’t enough to obscure an existing problem.You need to ensure that the problem has unique inputs and outputs to be effective at stopping ChatGPT from recognizing it!\n\nThe questions that interviewers ask are confidential, and we cannot share the exact questions that our interviewers used in the experiment. However, we can give you an indicative example.  Below is a “custom question” with this critical flaw, which is easy for ChatGPT to beat:\n\nDid you spot the issue? While this question appears “custom” at first glance, its objective is identical to the popularTwoSumquestion: finding two numbers that sum to a given target. The inputs and outputs are identical; the only thing “custom” about the question is the story added to the problem.\n\nSeeing that this is identical to known problems, it shouldn’t be a surprise to learn that ChatGPT does well on questions that have inputs and outputs identical to existing known problems — even when they have a unique story added to them.\n\n### How to actually create good custom questions\n\nOne thing we’ve found incredibly useful for coming up with good, original questions is to start a shared doc with your team where every time someone solves a problem they think is interesting, no matter how small, they jot down a quick note. These notes don’t have to be fleshed out at all, but they can be the seeds for unique interview questions that give candidates insight into the day-to-day at your company. Turning these disjointed seeds into interview questions takes thought and effort — you have to prune a lot of the details and distill the essence of the problem into something that doesn’t take the candidate a lot of work/setup to grok. You’ll also likely have to iterate on these home-grown questions a few times before you get them right — but the payoff can be huge.\n\nTo be clear, we’re not advocating the removal of data structures and algorithms from technical interviews. DS&A questions have gotten a bad reputation because of bad, unengaged interviewers and because of companies lazily rehashing LeetCode problems, many of them bad, which have nothing to do with their work. In the hands of good interviewers, those questions are powerful and useful. If you use the approach above, you’ll be able to come up with new data structure & algorithmic questions that have a practical foundation and component that will engage candidates and get them excited about the work you’re doing.\n\nYou’ll also be moving our industry forward. It’s not OK that memorizing a bunch of LeetCode questions gives candidates an edge in today’s interview process, nor is it OK that interviews have gotten to a state where cheating starts to look like a rational choice. The solution is more work on the employer’s part to come up with better questions. Let’s all do it together.\n\n## Real talk for job seekers\n\nAll right, now, for all of you who are actively looking for work, listen up! Yes, a subset of your peers will now be using ChatGPT to cheat in interviews, and at companies that ask LeetCode questions (sadly, many of them), those peers will have an edge… for a short while.\n\nRight now, we’re in a liminal state where companies’ processes have not caught up to reality. They will, soon enough, either by moving away from using verbatim LeetCode questions entirely (which will be a boon for our entire industry) or by returning to in-person onsites (which will make cheating largely impossible past the technical screen) or both.\n\nIt sucks that other candidates cheating is another thing to worry about in analready difficult climate, but we cannot, in good conscience, endorse cheating to “level the playing field.”\n\nIn addition, interviewees who used ChatGPT uniformly reported how much more difficult the interview was to complete while juggling the AI.\n\nBelow, you can view one interviewee stumbling through their time complexity analysis after giving a perfect answer to an interview question. The interviewer is confused as the interviewee scrambles to explain how they got to their incorrect time complexity (secretly provided by ChatGPT).\n\nWhile no one was caught during the study, their cameras were off, and cheating was still difficult for many of our skilled candidates, as evidenced by this clip.\n\nEthics aside, cheating is difficult, stressful, and not entirely straightforward to implement. Instead, we advise investing that effort into practice, which will serve you well once companies change their processes, which hopefully should be soon. Ultimately, we hope the advent of ChatGPT will be the catalyst that finally moves our industry’s interview standards away from grinding and memorizing to actually testing engineering ability.\n\nMike Mroczka, a former senior SWE (Google, Salesforce, GE), is the primary author ofBeyond Cracking the Coding Interview—the official sequel to Gayle McDowell's original CTCI. He works as a tech consultant and has a decade of experience helping engineers land their dream jobs. He’s a top-rated mentor (interviewing.io, Karat, Pathrise, Skilled.inc) and the author of viral technical content on system design and technical interview strategies featured on HackerNews, Business Insider, and Wired. He also sometimes writes technical content for interviewing.io (like this piece) and was one of the authors of interviewing.io’sA Senior Engineer's Guide to the System Design Interview.\n\nYou can find him online atmikemroczka.com,LinkedIn, andX.\n\nSpecial thanks to Dwight Gunning and Liz Graves for their help with this experiment. And of course a big thank you to all the interviewees and interviewers who participated!\n\n## Footnotes:\n\n• To be an interviewer on our platform, you have to have at least 4 years of experience and have conducted at least 20 interviews on behalf of a FAANG or FAANG-adjacent company).↩\n\nTo be an interviewer on our platform, you have to have at least 4 years of experience and have conducted at least 20 interviews on behalf of a FAANG or FAANG-adjacent company).↩\n\n• Five interviews needed to be removed because they did not meaningfully use ChatGPT. In two instances, the interviewee was familiar with the question and chose to solve the problem themselves. In one interview, the interviewee wanted to just try the question on their own and didn't prompt ChatGPT, ignoring our instructions. The last two interviews were \"custom\" interview questions that were problematic for reasons we’ll outline later in this article.↩\n\nFive interviews needed to be removed because they did not meaningfully use ChatGPT. In two instances, the interviewee was familiar with the question and chose to solve the problem themselves. In one interview, the interviewee wanted to just try the question on their own and didn't prompt ChatGPT, ignoring our instructions. The last two interviews were \"custom\" interview questions that were problematic for reasons we’ll outline later in this article.↩\n\n• This is a higher passthrough rate than you'd see in the wild. We think it comes down to two factors: selection bias and pre-interview prep. The users who invest in interview prep are a specific, self-selected slice of the population. Moreover, many of our users practice on their own before practicing with a human.↩\n\nThis is a higher passthrough rate than you'd see in the wild. We think it comes down to two factors: selection bias and pre-interview prep. The users who invest in interview prep are a specific, self-selected slice of the population. Moreover, many of our users practice on their own before practicing with a human.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Longest Palindromic Substring\n\n### Sum Root to Leaf Numbers\n\n### Alien Dictionary",
      "source_url": "https://interviewing.io/blog/how-hard-is-it-to-cheat-with-chatgpt-in-technical-interviews",
      "author": "Mike Mroczka",
      "user_id": "aline123"
    },
    {
      "title": "We co-wrote the official sequel to Cracking the Coding Interview",
      "content": "• For employers\n\n• Gift mock interviews\n\n# We co-wrote the official sequel to Cracking the Coding Interview!\n\nEDIT 2:Read 9 chapters of the book for free!These include:\n\n• The first seven chapters of the book, covering topics such as why technical interviews are broken, what recruiters won't tell you, why not to spend a lot of time on resumes, and how to get in the door at companies without a referral.\n\n• Two technical chapters: Sliding Windows and Binary Search. Our new take on Binary Search teaches one template that works for every binary search problem on LeetCode, with only a single-line change you need to remember. The Sliding Windows chapter features 6 unique sliding window templates that make off-by-one errors a thing of the past.\n\nEDIT:Beyond Cracking the Coding Interviewis out now! Here's the table of contents:\n\nI have some exciting news. Along with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I’m writing the official sequel toCracking the Coding Interview(often called the bible of technical interview prep). It's fittingly calledBeyond Cracking the Coding Interview.\n\nI’ve always wanted to write a book about technical interviewing. And this is it. And of course it'll draw on all the hiring data we've collected over the past decade at interviewing.io.\n\nTechnical interviews are much harder today than they used to be. Engineers study for months and routinely get down-leveled despite that.Beyond Cracking the Coding Interview, in addition to covering a bunch of new questions and topics, teaches you how to think instead of memorizing. Grinding and memorization isn’t the way in this market (though in fairness, it’s never really the way). With us, you’ll still have to do the work, of course, but we’ll teach you to work smarter.\n\nWe added at least thirteen new technical topics (I say “at least” because we’re still writing, and it might be more like twenty)—and over 150 new problems. Each problem includes step-by-step walkthroughs, and you can work each problem with our (actually good) AI Interviewer. And of course this book was written in partnership with interviewing.io. We’ve pulled in data from over 100k FAANG mock interviews on interviewing.io, and we include hundreds of curated interview replays from interviewing.io (shared with permission of course) – watch people make mistakes and learn so you’re not doomed to repeat them.\n\nBut it’s notjustabout interview prep. In today’s job market, the bar is higher but it’s also harder than ever to get noticed and run your job search end-to-end. My excellent co-authors killed it on the technical chapters. I focused on writing the job search stuff, including, but not limited to:\n\n• How to negotiate, exactly what to say, and how to not screw up your negotiations before they even start\n\n• How to manage your job search, end to end, and balance interview prep with applications and outreach\n\n• A worksheet to help you figure out what order you need to engage with the companies you’re targeting to ensure that all your offers come in at the same time\n\n• How to get in the door at top companies without relying on referrals, including email templates and examples of good and bad outreach\n\n• An internal look at FAANG (and other) company rubrics to help understand what interviewers really care about, no matter what company you're applying to\n\n• What you need to know about behavioral interviews, whether you want to or not, and how to avoid the mistakes that even great engineers make\n\n• A list of very specific questions to ask your interviewers (not just to look smart but to learn useful things)\n\n• How technical interviews got to be so broken and how to get over hating them so you can win\n\nI also spend some time on owning and sharing data on how flawed technical interviewing is and, most importantly,  how to manage your psychology so you can get past that. I see so many engineers opting out of this interview style, arguably for good reason. But you’re leaving a lot of good opportunities on the table, and it doesn’t have to be like that.\n\nThis book is so much of what I’ve blogged about for the last 15 years, but it’s fleshed out with much more detail and actionable advice. If you read it, let me know what you think. Technical interviewing sucks (and so does looking for a job). But this book will help you do it well and get out alive.\n\nPurchases ofBeyond Cracking the Coding Interviewget a $50 discount for interviewing.io. The book costs $45, so it’s not a bad deal. The book is  out in January of 2025, and you canget it on Amazon.\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Reverse Words in a String\n\n### Binary Tree Upside Down\n\n### Decode String\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/we-co-wrote-the-official-sequel-to-cracking-the-coding-interview-introducing-beyond-ctci",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.",
      "content": "# How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.\n\nInpart 1 of this post, we talked about which channels are most effective for getting in the door and did an analysis of those channels along two axes: effectiveness and how much control you actually have. Here’s a quick summary.\n\nIn the quadrant above, you can see that while getting contacted by an in-house recruiter is very effective, whether you get contacted or not is largely out of your hands. The channel that maximizes both effectiveness and control is cold outreach to hiring managers (not recruiters!) “done right”. What does “done right” mean? That’s what we’ll talk about in this post (part 2 of 2). Most people do this type of outreach incorrectly. Here, we’ll get very tactical and tell you exactly what to say and do to reach out to hiring managers at the companies you’re interested in and actually get responses.\n\nHere’s our recommended, hyper-practical approach.\n\n## Prerequisites/tooling\n\n• Buy a month or two of LinkedIn Sales Navigator. This will run you a few hundred dollars, but it’s worth it.\n\n• Get an account with an email discovery tool likeRocketReach(an excellent email discovery tool).\n\n• GetStreak, which lets you do mail merges in Gmail. You create an email template, with variables for everything from recipient name to long snippets of personalized text, and then you upload a CSV with all the values. The resulting emails feel personalized but get sent to hundreds of people at once.\n\n## Treat your job search like a sales funnel\n\nIf you’re an engineer, chances are you haven’t ever done sales (maybe you had a job in high school selling Cutco knives or magazines, in which case what we’re about to say will resonate). But if you do sales for any appreciable amount of time, you’ll start thinking about everything in life as a funnel.\n\nFunnels are wide at the top and narrow at the bottom. That’s why they’re such an apt metaphor for the sales process — you do a lot of outreach, and you don’t get many responses. Of the responses you do get, relatively few will do the thing you want them to do. And even fewer will ultimately “close” (aka, buying — or, in this case, hiring).\n\nIn your engineering career, you’ve intellectually mastered many abstract concepts that are much more complex than a funnel. Despite its simplicity, however, the funnel is one of the hardest concepts to internalize emotionally, especially for people who are used to having control over outcomes. When you write code fornhours, you can expect that you will buildmfeatures.\n\nIn sales though, you do a lot of work, very little of it will pan out, and when it does pan out, it can feel almost random; an impersonal, mediocre email gets a response while your beautifully targeted email is met with deafening silence.\n\nAnd then there’s rejection. When you apply to jobs online and don’t hear back, it stings, but the sting is softened by the possibility that a human never even saw your application. You’re not reaching out to people when you apply online; you’re dealing with a bureaucratic machine.\n\nOn the other hand, when you email a real human and they don’t respond, that hurts: you put yourself out there, someone made a value judgment about you, and you lost.\n\nThe good news is that, after a while, the pain lessens, and you build up some useful emotional calluses and acquire the thousand-yard stare of someone who’s been rejected a million times for a million reasons, ranging from soul-crushingly legitimate to incontrovertibly random.Sadly, there’s no shortcut. You’ve got to do the reps, you’ve got to get the rejections, and you’ve got to pick yourself up again. You get used to it, and then it doesn’t hurt as much, because experience has taught you that if you keep going, you will eventually get to a yes.\n\n## What to actually do\n\nFirst, come up with a target list of companies.How to do that is out of scope for this post, but we may write about it in the future. For now, we’ll assume you have a list.\n\nOnce you have your list of companies, use LinkedIn Sales Navigator to find hiring managers at those companies (or founders or directors or VPs, as above). Below is an example query where we look for Google hiring managers.\n\nYou might think that Google is so big that sifting through all their various hiring managers will be intractable. Fortunately, you can whittle down the list to a pretty manageable size by applying some filters.\n\nHere are our filters:\n\n• Just targeting managers, not directors or VPs. Google is a huge organization. You want the people who are most likely to help, and they’re the ones who are struggling to hire for their teams.\n\n• In position for less than 2 years:These are the people who are still trying to prove themselves and who are less likely to have a long-standing relationship with their recruiter to the point where they only rely on internal recruiting and overlook other sources of candidates.\n\n• Geography:Let's focus on the places we most want to work.\n\n• 1st- or 2nd-degree connection:This way, when they look you up, they’ll see some social proof. You can expand this to 3rd-degree connections, if needed.\n\nOnce you have your list, put their LinkedIn URLs into a spreadsheet. Then, do a pass through your targets’ profiles and see if any of them link to personal websites, social media accounts, blogs, or anything else that will help you find common ground with them.Add any useful links in your spreadsheet because we’ll be mining them when we actually write our emails.\n\n### Look up their email addresses\n\nOnce you have your list of LinkedIn URLs, use a tool like RocketReach to look up their emails.\n\nWhy not reach out on LinkedIn? While recruiters live on LinkedIn, managers generally do not. Possibly, they don't even like or check LinkedIn much. They live in their emails, so that's where you want to target them.\n\nRocketReach is a nice tool for email discovery because 1) it takes LinkedIn URLs as inputs and 2) its email database is generally up-to-date and correct.1\n\nIf RocketReach fails or you don't wish to pay for it, you might just be able to guess their email address, as email addresses tend to follow common forms:aline@interviewing.io(my actual email address),alerner@interviewing.io, oraline.lerner@interviewing.io.\n\nWhere possible, contact managers via their work email address.2In some cases, you won’t be able to find their work email, in which case it’s acceptable to fall back to their personal email.\n\n### Write succinct, highly personalized emails\n\nNext, compose a fairly personalized, yet short, email.All too often, candidates write a long, generic cover letter that’s obviously been sent to a ton of people. I get many emails that look like this:\n\nDon’t do this!\n\nDon’t do this either! There is nothing here about why this candidate is a good fit for interviewing.io, and the bullets aren’t compelling enough on their own. Note that this particular email is from a marketer, not an engineer, but the anti-patterns are the same.\n\nEmails like the above are impersonal, but worst of all, they have a poor signal-to-noise ratio — I want to find a reason to say yes and to invest my valuable time into this person. But they’re not giving me one, and they’re making me work for it in the process.\n\n• Don't open email with how they found you.This is a big pet peeve of ours. I don’t care how you found me! I know I’m on LinkedIn. What I care about is why talking to you will add value for me or why you’re interesting. Use the most significant real estate in the email, the first sentence, to tell me that!\n\n• Don't be overly formal in how you address the person. Use their first name.\n\n• Don't get their gender wrong(e.g., referring to a woman as \"sir\" — you’d be surprised how often this happens).\n\n• Don't paste in a generic cover letter.These are sure to get ignored immediately — if you’re not going to put in the effort to write to me personally, why would I put in the effort to read your email?\n\n• Don't forget to include a link to a LinkedIn or a personal website.We don’t recommend attaching your resume, though. It can seem overly formal/somewhat presumptuous if you're trying to build rapport.\n\nMore broadly, if you want someone to go out on a limb for you, make it dead simple for them to justify expending their social/political capital on you. Hiring managers, as a rule, want to help. Make it a no-brainer for them.\n\nThere are three components to a great cold email:\n\n• Common ground with your target\n\n• Proof that you’re worthy of their time\n\n• A strong call to action\n\nNot every cold email will have (1) because you won’t always be able to find common ground with everyone — there’s simply not enough information out there about some targets to be able to craft a compelling narrative that’s highly personalized to them.\n\nBut every cold email you write should have (2). It is your job to sell yourself quickly and succinctly. You want your target to feel like they’d be an idiot to pass up the chance to talk to you.\n\n#### Finding common ground\n\nThe email below is personal, succinct, and finds common ground. Not only that, but it conveniently finds common ground thatbenefits the candidate(a soft-spot for non-traditional candidates, like himself!).\n\nTo find common ground, reference something your target cares about. Then either show them that you care about it too or that helping you would fit into their worldview and further that cause.\n\nAs we mentioned above, finding common ground may be tough because there might not be enough information available about your target, but it’s important to do the work before you give up on this route — finding common ground is the tactic that’s going to get you the highest response rates.\n\nHere are some examples of great ways to build common ground:\n\n• Reference a project they worked on (maybe they wrote a blog post about it, mentioned it in a comment on Hacker News, or are a contributor to some open source project). Then…If possible, talk about relevant work you’ve done. It’s important not to make this connection too tenuous. If you do, this approach might backfire because they’ll start to get excited about you, only to be let down and ultimately feel tricked.If you do not have relevant work to share, ask a thoughtful question or two about theirs.\n\n• If possible, talk about relevant work you’ve done. It’s important not to make this connection too tenuous. If you do, this approach might backfire because they’ll start to get excited about you, only to be let down and ultimately feel tricked.\n\n• If you do not have relevant work to share, ask a thoughtful question or two about theirs.\n\n• Reference a controversial point of view that they hold, and affirm it in an authentic way.\n\n• In the absence of something technical, it’s okay to reference something non-technical you've seen on their public profiles. We've seen candidates connect with strangers based on a shared love of Star Wars or Hearthstone.\n\nWe understand that you won't always be able to find common ground. But if you can, it'll help you a lot, especially if you’re light on social proof or accomplishments.\n\n#### Selling yourself\n\nSelling yourself is usually about one of two things:\n\n• Accomplishments: What have you built or created?\n\n• Social proof: Have you worked at a top company or attended a top school?\n\nSome people are fortunate enough to have both, but many will have just one. That’s okay. We’ll work with what you have!\n\n#### Accomplishments\n\nWhat have you done that most other people haven’t? What have you done that, if you were to tell it to a stranger, would cause them to pause and think you're special or interesting?\n\nBelow are some examples:\n\n• You’ve had a blog post about a technical topic or a personal project do well3on Hacker News, Reddit, or social media.\n\n• Something you built at work got some great press when your company announced its last funding round.\n\n• You refactored a piece of code at work, and now it runs 100X faster.\n\n• You won a company hackathon.\n\n• You’re a core contributor to a notable open-source project.\n\n• Something you built is being used by a number of other people.\n\n#### Social proof\n\nSocial proof is more about your pedigree. If you attended a top school or worked at a company known for having a high engineering bar, you should absolutely mention it!People won't click on links or open your resume untilafterthey're interested, so you need to get them interested right away. That is: you should spoon feed them the most impressive-sounding things about you out of the gate. This may feel strange and uncomfortable, like you’re bragging. We assure you, however, that it’s necessary to get your target’s attention. They’re not thinking you’re bragging. They’re thinking, “Is this worth my time?” Your job is to convince them that it is.\n\nAlso, don’t forget to link to your LinkedIn or personal website. Attaching a resume may feel too heavy-handed for a first conversation, as we discussed above.\n\nHere's an example of a prospective intern, leveraging both social proof and accomplishments, to write a compelling email. His email isn't super personalized, but he did make some effort to say that what we do at interviewing.io is important.\n\n#### Formulating a strong call to action\n\nA call to action is an invitation for the recipient to do something. You can go one of two ways with your call to action: ask for a job interview or start a conversation.Which you do should be a function of how much firepower you have in the way of social proof and accomplishments. It’s not fair, but if you can get your target’s attention with one or both of those, being bold and asking for a job interview makes sense. This approach can be effective, but it won’t work for most people… because most people don’t have enough social proof or accomplishments to justify this type of request.\n\nIf you can’t leverage social proof or accomplishments, you’re going to have to work harder and bank entirely on building common ground, which will likely take some time and effort and involve a live conversation before they’re convinced to expend their social capital on you.\n\nIf you’re asking for an interview, just come right out and say it. You can use the intern candidate’s email from earlier as a guide. However, this isn’t our preferred way to do it, and we really recommend starting a conversation instead.\n\nTake a look at the email below.\n\nIn this email, the candidate doesn’t ask me about jobs — he just asks to meet to discuss a topic. Indeed, he’s done his research. I write atonabout judging resumes, and it’s a topic I could go on about for hours if you’ll let me. His email read like he’s genuinely interested in the subject and that we’d have a good conversation, so of course I responded. You’d be surprised how rare emails like this are. If you can find the topic your target cares about and write something that shows earnest, genuine interest, they’ll respond.\n\nWith these emails, you’re asking for a conversation, not a job interview… because the conversation is what will hopefully prove to the hiring manager that you’re worth interviewing.Then, once you have a conversation, the hiring manager will walk away with the impression that you’re a competent, thoughtful human being who’s interested in this sort of work. From there, getting a job interview will feel like an afterthought.\n\nAs such, don’t talk about jobs at all in this type of email, and in this particular case, don’t attach your resume — that will feel out of place and transactional. You can and should link to your LinkedIn so they know who you are and have some context. But spend the bulk of the email building common ground and coming up with an interesting reason for the two of you to talk.\n\nThis approach is much more effective than asking for an interview out of the gate!You’re not going to land a job from one email, so, as with any seemingly insurmountable goal, it’s important to think of your outreach as a series of steps where you put one foot in front of the other. Like in sales, all you need is to get to a conversation.\n\nIf your call to action is to set up a time to talk (which it probably should be because it’s specific), we recommend providing them with a time window. \"Would you want to meet up sometime?\" puts the burden on the recipient to pose a time, while \"Can we talk next Monday at 3pm?\" is problematic because, most likely, they aren't free then. Instead, try something like the candidate above did: \"Would you be available sometime within the next two weeks for a thirty-minute call? I'm free most weekdays between X and Y and can pretty much do any time on weekends if those are better for you.\"\n\n## Two templates for you to use\n\nBelow are two templates you can use for cold outreach. The first one is ideal but requires more effort and can't always be used. The second one is weaker but more generic.You can choose what fits your needs best. We expect both of these templates to be far more effective than throwing your resume into the blackhole of online portals.\n\n### Template #1: Use this template if your target has an online presence\n\nThis template includes common ground, accomplishments/social proof, and a call to action. It will get you the highest response rates, possibly anywhere from 25-50%. However, it can be challenging to use because it requires you to 1) do a deep dive into their online presence and 2) tie what you find back to something you’re doing. Sometimes, that tie-in might be tenuous or non-existent (in which case, maybe skip it).\n\nHey {Their First Name},\n\nI’ve read your work on {insert some details about their writing}, and I {insert your thoughts on the work}.\n\n{If you can make the connection between their work and yours, talk about something similar you’ve been working on.}\n\n{If you cannot, ask them a specific, thoughtful question about your work. Don’t worry about making it “the perfect question” like you might when you attend a talk and want to sound smart. Any earnest question will do. You don’t have to use this as a chance to show off!}\n\n{Finally, close with a sentence or two about you, if you have some social proof or impressive accomplishments you can share.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that’s great. If not, a LinkedIn will do.}\n\nNote that in this template, we leave some places for you to insert some social proof and your accomplishments. Even though this email is primarily about them and their work, and your references to yourself are primarily through that lens, it never hurts to drop in a few pieces of evidence that you’re someone who’s accomplished things and/or someone who looks good on paper.\n\n### Template #2: Use this template if you don’t have anything except a LinkedIn profile for your target\n\nThe reality is that you won’t always have enough information about your target to find common ground. In this case, you’ll lead with accomplishments/social proof and a strong call to action. We expect this template will get you response rates anywhere from 5-25%, depending on the strength of your achievements and pedigree. That said, we recommend treating this template as a last resort. Using it means you’ve exhausted any possibility of writing something personal.\n\nHey {Their First Name},\n\n{List 2 things about you. They can be impressive accomplishments of yours or social proof, as above.}\n\nI’m really interested in the work you’re doing at {Company Name}. {If you know what team they’re on and are interested in that specific team or are familiar with that team’s accomplishments, great! If not, just write a few earnest sentences about why the company is interesting to you.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that’s great. If not, a LinkedIn will do.}\n\nKeep your note short. The intent here is to make your target believe you’re an entity worth paying attention to, rather than them doing the easy thing: deleting your email.\n\nRegardless of which template you use, just like you have to manage your psychology when you prepare for technical interviews, you have to manage your psychology when doing outreach like this. You have to:\n\n• Mentally prepare yourself for the slog of writing personalized emails and doing the requisite research.\n\n• Get used to rejection. If you do write good emails and target the right people, you’ll have a much better hit rate than when you apply online, but you will still get ghosted a lot, and it will sting much more because, this time, you actually tried. But you know what? If you stick with it and do this right, within a few months, you’ll have a connection to a top-tier company.\n\nNow that you’ve girded your proverbial loins, it’s time to do the work. If you follow our advice, you’ll get 1-2 orders of magnitude more responses than from applying online, and with this approach, you’ll have at least a hiring manager at that company rooting for you!\n\nFootnotes:\n\n• RocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we’ve found that it’s not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.↩\n\nRocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we’ve found that it’s not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.↩\n\n• Recruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.↩\n\nRecruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.↩\n\n• Many people think that for something to be worth mentioning, it has to have gone viral. That’s simply not correct — in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.↩\n\nMany people think that for something to be worth mentioning, it has to have gone viral. That’s simply not correct — in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Decode String\n\n### Simplify Path\n\n### Lucky Numbers in a Matrix",
      "source_url": "https://interviewing.io/blog/how-to-get-in-the-door-at-top-companies-cold-out-reach-to-hiring-managers-part-2",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Read nine chapters of Beyond Cracking the Coding Interview for free",
      "content": "• For employers\n\n• Gift mock interviews\n\n# Read nine chapters of Beyond Cracking the Coding Interview for free\n\nAlong with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I wrote the official sequel toCracking the Coding Interview. It's fittingly calledBeyond Cracking the Coding Interview..\n\nNow, we're releasing9 chapters of the book for free! There are two PDFs in the linked folder:\n\n• The first seven chapters of the book, covering topics such as why technical interviews are broken, what recruiters won't tell you, why not to spend a lot of time on resumes, and how to get in the door at companies without a referral.\n\n• Two technical chapters: Sliding Windows and Binary Search. Our new take on Binary Search teaches one template that works for every binary search problem on LeetCode, with only a single-line change you need to remember. The Sliding Windows chapter features 6 unique sliding window templates that make off-by-one errors a thing of the past.\n\nTake a look, and let me know what you think. You can reach me ataline@interviewing.io.\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Recover Binary Search Tree\n\n### Decode String\n\n### Integer Replacement\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/nine-free-chapters-of-beyond-cracking-the-coding-interview",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "It's OK to postpone your interviews if you're not ready",
      "content": "• For employers\n\n• Gift mock interviews\n\n# It's OK to postpone your interviews if you're not ready\n\nAt interviewing.io, we’ve seen hundreds of thousands of engineers go through job searches, and the biggest mistakes we see people make are all variations on the same theme: not postponing their interview when they aren’t ready.\n\nI’ve found myself repeating that it’s OK to postpone interviews so often that I finally broke down and decided to make it a blog post. It’s very simple advice, so the bulk of this post will be spent trying to convince you that it’s fine to postpone. And then of course I’ll tell you what to say.\n\nDo any of these situations sound familiar?\n\n• A recruiter from a FAANG (or other top-tier) company contacts you out of the blue and invites you to interview. You do the recruiter call, and it goes well. The recruiter reaches out to schedule your technical phone screen. You haven’t practiced enough, and you know it, but you are scared to tell the recruiter that you want to postpone the interview by a few months (months?!) because the position may no longer be there. So, you plow ahead, do the phone screen, fail it, and then you’re frozen out for a year.\n\n• You were able to postpone your technical phone screen and take the time to study up on data structures & algorithms problems. You do well in the interview. But then your recruiter schedules your onsite the following week. Because you were so focused on DS&A prep, you haven’t had much time to study up on system design. You fumble the system design interview during the onsite, and you either get rejected or get down-leveled.\n\nBoth of these situations are extremely common, but they’re both preventable. You can just ask to postpone. There are a few edge cases where that’s not a good idea, but in most situations, it’s the right thing to do.\n\n## When postponing is OK, and when youshouldn’ttake our advice\n\nIf you’re applying to a large company with a centralized process (in other words, a process where you interview first and get matched with a team later), postponing is almost always OK. These companies are perpetually hiring, and their open roles are evergreen.1\n\nEven if you’re applying to a large company with a decentralized process (where you interview for a specific team), we recommend postponing unless you’re extremely excited about the team you’re talking to. In that scenario, it’s possible that if you postpone, the slot will be filled. But if it’s not a perfect fit and you’d be OK with another team, we recommend postponing — in the worst case, you’ll simply get slotted into a different team.\n\nThe only time when postponing isn’t a good idea is when you’re applying to a very small company that has just one open headcount. In that scenario, it is possible that postponing will cost you the opportunity because they’ll choose another candidate. However, you can ask how likely that is to happen, up front.\n\nWith that edge case out of the way, here’s a little-known fact about how timing works at large companies: Recruiters don’t really care when you interview. Though they’d prefer that you interview sooner rather than later so they can hit their numbers, at the end of the day, they’d rather be responsible for successful candidates than unsuccessful ones.\n\nEvery recruiter, in every job search, will tell you that time is of the essence because of all the other candidates in the pipeline. Most of the time, that is irrelevant and just something they say to create an artificial sense of urgency. There are always other candidates in the pipeline because the roles are evergreen. But they have nothing to do with your prospects.\n\n## Exactly what to say to postpone your interviews\n\nYou can use this text verbatim when postponing your interviews, and, with some small edits, you can even use it several times (e.g., before the phone screen and then again before the onsite).\n\n> I’m really excited about interviewing at [company name]. Unfortunately, if I’m honest, I haven’t had a chance to practice as much as I’d like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I’ll realistically need a couple of months to prepare. How about we schedule my interview for [date]?\n\nI’m really excited about interviewing at [company name]. Unfortunately, if I’m honest, I haven’t had a chance to practice as much as I’d like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I’ll realistically need a couple of months to prepare. How about we schedule my interview for [date]?\n\nOne important thing to remember is to be conservative about how long it will take. You’ve probably heard the adage about how, when you have to estimate the time an engineering task will take, you should think of a number and double it. Here, you may even want to triple it.\n\nI’ve seen many candidates ask for 2 weeks because that feels like a reasonable thing to ask for, only to have it blow up in their face when they realize they need to ask for another extension (which is still worth doing but harder because the company may think you’re taking them for a ride). If you need two months, ask for two months.\n\n## Postponing can also be a good way to control the timing of your job search\n\nThis section is extra credit, but once you get comfortable with postponing your interviews when you’re not prepared, you can use the same skills to batch your interviews and ultimately control the timing of your job search.\n\nWhat does it mean to control the timing of your job search? Ideally, you want all of your offers to come in at the same time, both because it maximizes optionality (one company that arbitrarily offers first doesn’t rush you into making a decision) and maximizes leverage (you can negotiate from a position of power).\n\nIf you want to dive deeper into this process, take a look at a book I recently co-wrote,Beyond Cracking the Coding Interview. It includes a full chapter about how to manage your job search, which covers everything from determining the order in which to approach companies to how to speed them up and slow them down once you’re in process. There’s a lot more detail than I can touch in this post, and much of it depends on your specific circumstances, but you can probably get 50% of the way there just by postponing your interviews in batches.\n\nThe big insight here is that, except for the edge cases we discussed above, a recruiting process can be paused at any point.\n\nIn other words, you can do a bunch of outreach to companies, then do a bunch of enthusiastic recruiter calls, and THEN pause all the processes until you’re prepared to do technical phone screens.\n\nThen, you batch the phone screens.\n\nFinally, if needed, you pause again to give yourself time to prepare for onsites. Onsite interviews require a different skill set than technical phone screens. The technical phone screen isn’t about depth or fit — it’s just a way to cut people who aren’t likely to pass the onsite.\n\nThe onsite, on the other hand, isn’t just meant to cut poor performers. It’s at once a deeper dive into your technical ability and a way to gauge fit. If you’ll be interviewing with your future team (typical at companies with a decentralized process), it’s also meant to assess your ability to work together, collaborate on hard things, complement the team's existing skillset, and so on. It usually has some coding (to verify that your technical phone screen wasn’t a fluke), but the focus is usually on system design and behavioral interviews2, which are also the interviews commonly used for leveling decisions.\n\nSo, onsite prep is much more about system design and getting your stories right for your behavioral interviews. Some people can pull off prepping for both coding and sys design/behavioral at the same time. For many, depending on their existing familiarity with the material, it’s a tall order. So, it’s wise to take the time you need and prepare.\n\nThen, once you’re ready, you batch the onsites.\n\nWhen your offers come in, you should ask for extensions as needed, speed companies up, and startnegotiating(which we’ve written about in the past and which, of course, is covered at great depth in the book).\n\nFootnotes:\n\n• Yes, it’s true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you’d have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze.↩\n\nYes, it’s true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you’d have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze.↩\n\n• Some companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.↩\n\nSome companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Copy List With Random Pointers\n\n### Maximum Subarray\n\n### Fruit into Baskets\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/its-ok-to-postpone-your-interviews-if-youre-not-ready",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Don't make recruiters think, or, why your resume is bad and how to fix it",
      "content": "• For employers\n\n• Gift mock interviews\n\n# Stop trying to make recruiters think, or, why your resume is bad and how to fix it\n\nYears ago, Steve Krug wrote a book about web design calledDon’t Make Me Think. It’s a classic, and the main point is that good design should make everything painfully obvious to users without demanding anything of them.\n\nResumes are just the same. Your resume shouldn’t make recruiters think. It should serve up the most important things about you on a platter that they can digest in 30 seconds or less.\n\nBefore I share some resume tips, there’s something important I want to reiterate:Don’t spend a lot of time on your resume. You can read mypiece about how resume writing is snake oil, but the TL;DR is that recruiters spend a median of 30 seconds looking at resumes, and most of that is spent looking for top-tier companies. If you don’t have top-tier companies (and in some cases niche skills), wordsmithing your bullets or rearranging your sections or changing your layout won’t help. If you do have top-tier companies, sometimes doing some wordsmithing and rearrangement will help…if your top company experience or niche skills are buried.\n\nIf you don’t have top-tier brands, the best bang for your buck is to switch from online applications to hiring manager outreach.Here’s how to do it.\n\nWith that said, I know that no matter what I say, people will still grind on their resumes instead of doing outreach. Grinding on resumes is safe. Outreach is scary and opens you up to personal (rather than impersonal) rejection. So, look, if you’re going to dosomethingto your resume, let’s make sure that that something is low-effort and high-return. Unlike the endless resume tweaking that most candidates do, these changes directly address how recruiters actually read resumes.\n\nHere we go.\n\n## Stop putting filler buzzwords in your \"About\" section. Use it to spell out the most impressive things about you.\n\nYour \"About\" or \"Summary\" section is prime real estate. Yet so many candidates fill this section with meaningless jargon like \"passionate self-starter\" or \"detail-oriented team player.\"\nInstead, use this section to explicitly tell recruiters the 2-3 most impressive things about you in plain English. This is your chance to control the narrative.Want recruiters to take something away from reading your resume?Don’t assume they’ll figure it out. They’re not reading it long enough to intuit anything. Spell it out for them verbatim in this section.\nDo this, not that:\n\n❌ Results-driven full-stack engineer with a passion for scalable systems and user-centric design✅ Senior engineer with 3 years at Amazon, promoted twice in 3 years (2X the company average)1\n\n## Don’t include your GPA if it’s under 3.8\n\nThis is simple but effective: only include your GPA if it's 3.8 or higher2. A middling GPA doesn't help your case and might inadvertently signal academic mediocrity.\n\nIf your GPA isn't stellar, focus on other academic achievements: hackathons, technical competitions, fellowships or scholarships. These provide better signals about your capabilities than a so-so GPA.\n\n## Context matters for lesser-known companies\n\nIf you've worked at Google or Facebook, recruiters instantly get what kind of company you're coming from. But when you have \"TechStartup123\" on your resume, they have no idea what they're looking at or how impressive it might be.\n\nFor lesser-known companies, include a one-line description explaining what the company does, along with any impressive metrics or investors:\n\n❌ \"Software Engineer, DevTools Inc.\"✅ \"Software Engineer, DevTools Inc. ($50M Series B from Sequoia, 2M+ active users)\"\n\nThis simple addition provides crucial context that helps recruiters evaluate your experience properly. Without it, they might discount valuable experience simply because they don't recognize the company name.\n\n## Avoid the \"job-hopper\" misperception\n\nHere's a common mistake: listing each role at the same company as if they were separate jobs. This can make recruiters think you've job-hopped, which is often seen as a red flag.\n\nInstead, group different roles under the same company heading:\n\n❌ Listing separate entries for \"Junior Developer at XYZ\" and \"Senior Developer at XYZ\"✅ \"XYZ Company - Senior Developer (2021-Present) - Junior Developer (2019-2021)Promoted in 2 years vs. company average of 3.5 years\"\n\nThe second format clearly shows growth within a single company and explicitly highlights faster-than-average promotion, which is a strong positive signal. (You may also want to carry over your promotion cadence into your “About” section, as you saw above.)\n\n## Be crystal clear about your work authorization status\n\nThis one is particularly crucial if you have a foreign-sounding name and/or education outside the US. I've seen many qualified candidates get passed over because recruiters assumed they needed visa sponsorship when they actually didn't. Don't leave this to chance.\n\nMake your work status explicit in your header or summary section:\n\n❌ No mention of work authorization (leaving recruiters to guess)✅ \"US Citizen\" or \"Green Card Holder\" or \"Authorized to work in the US without visa sponsorship\"\n\n## Career changers: provide context about the change\n\nIf you've switched careers, your resume can look confusing without proper context. Recruiters might struggle to understand why someone with your background is applying for this role, or they might not recognize how your previous experience translates to your current trajectory.\n\nAddress this head-on in your “About” section.\n\n❌ Listing previous career experience with no explanation of your transition✅ \"Transitioned from marketing to software engineering in 2021 after completing a bootcamp\" or \"Former accountant who pivoted to data science through self-study and online courses while continuing full-time work\"\n\nThis context helps recruiters understand your timeline and puts your current title and achievements in perspective. Without it, you risk serious misinterpretation:\n\n• Recruiters might think you're far more junior than you actually are in your new field (potentially ruling you out for appropriate-level positions)\n\n• Or conversely, they might assume you have years of relevant experience in your new field (and then wonder why you haven't achieved more in that time)\n\nBoth misinterpretations can be fatal to your application. By providing a clear timeline of your transition, you help recruiters accurately gauge your experience level and set appropriate expectations. This transparency also demonstrates valuable traits like adaptability and determination.\n\nAnd here's another key point for career changers: you don't need to list all your previous positions before the transition... unless they're impressive. Be selective about what pre-transition experience you include:\n\n❌ DON'T include mundane or irrelevant details from your previous career that add nothing to your current narrative. Your three years as a retail associate before becoming a developer probably won't strengthen your software engineering application.✅ DO highlight prestigious achievements from your previous career. If you were, say, a concert pianist, a lawyer who graduated from a top-tier law school, or a management consultant at McKinsey, absolutely include that. These signal that you're smart and high-achieving, regardless of domain.\n\n## In conclusion\n\nIf you do all these things, you may or may not see a return. After all, even the impact of these tweaks pales in comparison to having top brands on your resume. But, given that these will take you a few minutes to do, it doesn’t hurt. Here’s the TL;DR:\n\nFootnotes:\n\n• I have no idea what the average promotion cadence is at Amazon, and this example is meant to be illustrative rather than accurate, though maybe my readers will tell me the cadence now.↩\n\nI have no idea what the average promotion cadence is at Amazon, and this example is meant to be illustrative rather than accurate, though maybe my readers will tell me the cadence now.↩\n\n• I realize this diverges from the advice inBeyond Cracking the Coding Interview, where Gayle recommends including it if it’s 3.0 or more. This is one of the cases where the authors had differing opinions. We’re (mostly) human.↩\n\nI realize this diverges from the advice inBeyond Cracking the Coding Interview, where Gayle recommends including it if it’s 3.0 or more. This is one of the cases where the authors had differing opinions. We’re (mostly) human.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Reverse Nodes in k-Group\n\n### Alien Dictionary\n\n### Remove Nth Node from End of List\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/stop-trying-to-make-recruiters-think-or-why-your-resume-is-bad-and-how-to-fix-it",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Split Array Largest Sum",
      "content": "## Table of Contents\n\n• Introduction\n\n# How to Solve Split Array Largest Sum\n\n## Split Array Largest Sum Introduction\n\n## Split Array Largest Sum Introduction\n\nThe Split Array Largest Sum problem asks us to divide the given array into k non-empty subarrays, such that the largest sum is minimized. This problem requires us to perform a binary search while initializing an appropriate range from the largest element to the total sum of the array. We iterate through the array while progressively narrowing down our search range until we find the minimum sum that meets our requirements.\n\n## Split Array Largest Sum Problem\n\n## Split Array Largest Sum Problem\n\nGiven an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.\n\nReturn the minimized largest sum of the split.\n\nA subarray is a contiguous part of the array.\n\n### Example Inputs and Outputs\n\nInput:nums = [7,2,5,10,8], k = 3Output:14\n\nInput:nums = [1,2,3,4,5], k = 2Output:9\n\n## Split Array Largest Sum Solutions\n\n## Split Array Largest Sum Solutions\n\nTo solve the this problem, we'll use a binary search approach. By performing a binary search on the possible range of values for the minimum largest sum, we can find the solution. We initialize the search range with the left boundary as the maximum element in the input array nums and the right boundary as the sum of all elements in nums. This allows us to narrow down the search space and close in on the minimum largest sum that satisfies the splitting condition.\n\nDuring each iteration of the binary search, we calculate the mid value within the search range and check if it is a valid choice for the minimum largest sum. To determine if it's valid, we utilize the 'canSplit' helper function we created. This function iterates through nums, keeping track of the running total and the count of subarrays. If the running total exceeds the mid value, we increment the count and reset the total to the current element. If the count exceeds the given k, it let's us know that it is not possible to split nums with the current mid value. Based on this information, we adjust the search range accordingly. We progressively narrow down the search range until we find the minimum largest sum that satisfies the splitting condition. The left boundary of the search range represents this minimum largest sum, which we return as the solution to the problem.\n\nWe also add a few early checks for the edge cases where K is 1 or K is the size of array in which makes the process much simpler and we can solve it more efficiently.\n\n#### Time/Space Complexity Analysis\n\n• Time Complexity: O(N log(S)), where N is the length of the Array and S is the total sum of nums.\n\n• Space Complexity: O(1), as we only use a constant amount of additional space to store variables and perform the binary search.\n\n## Watch These Related Mock Interviews\n\n## About interviewing.io\n\ninterviewing.io is amock interview practice platform. We've hosted over 100K mock interviews, conducted by senior engineers from FAANG & other top companies. We've drawn on data from these interviews to bring you the best interview prep resource on the web.",
      "source_url": "https://interviewing.io/questions/split-array-largest-sum",
      "author": "interviewing.io team",
      "user_id": "aline123"
    },
    {
      "title": "How to Partition to K Equal Sum Subsets",
      "content": "## Table of Contents\n\n• Introduction\n\n# How to Solve the Partition to K Equal Sum Subsets Problem (With Solutions in Python, Java & JavaScript)\n\n## What is the Partition to K Equal Sum Subsets Problem?\n\n## What is the Partition to K Equal Sum Subsets Problem?\n\nThe Partition to K Equal Sum Subsets problem involves dividing an array of numbers into k subsets such that the sums of the numbers in each subset are equal. This is a commonly seen problem that tests the application of advanced algorithms like backtracking and dynamic programming.\n\n## 2 Examples of the Partition to K Equal Sum Subsets Interview Question\n\n## 2 Examples of the Partition to K Equal Sum Subsets Interview Question\n\nGiven an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.\n\nInput:nums = [4,3,2,3,5,2,1], k = 4Output:true\n\nExplanation:It is possible to dividenumsinto 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\nInput:nums = [1,2,3,4], k = 3Output:false\n\nConstraints\n\n• 1 <= k <= nums.length <= 16\n\n• 1 <= nums[i] <= 104\n\n• The frequency of each element is in the range [1, 4].\n\n## How to Partition to K Equal Sum Subsets: 2 Solutions in Python, Java & JavaScript\n\n## How to Partition to K Equal Sum Subsets: 2 Solutions in Python, Java & JavaScript\n\nTo partition the input array intokequal subsets, each subset should have a target sum oftotal_sum / k. The naive approach would be to try out all the possibilities by grouping the array elements intoksubsets with the target sum. We can start by picking the first element in the array, group it with the second element, and see if we can formk - 1equal subsets with the remaining elements. If it's not possible, we can remove the second element and try to group the first element with the third element. We can repeat this step until we can reach thekequal subsets.\n\nThis approach can be modeled with backtracking. Backtracking is arecursivetechnique that involves breaking a problem into subproblems and solving them to generate a possible decision path k. If the desired solution cannot be reached, we undo whatever decision was made in the previous subproblem and try a different choice.\n\n### Approach 1: Backtracking\n\nTo group the array intokequal subsets, firstly we need to check iftotal_sumcould be divided bykor not. If there is a remainder after the division, then it is impossible to group the array intokequal subsets; otherwise, we can get the target sum for each subset astotal_sum / k.\n\nDuring the recursion, we need to keep track of the following state for each execution context:\n\n• the number of subsets we have successfully formed\n\n• the current sum for the current subset\n\n• the current index of the element in the array we are trying\n\nIf we have formedk - 1subsets, then we will know for sure that the leftover elements can form the last subset, and the problem is solved. This is the base case where we can return True to stop the current recursion call.\n\nIf the current sum is greater than the target sum, then we know for sure this subproblem is not solvable, and we can break out from here. This is the base case where we can return False to stop the current recursion call.\n\nIf the current sum is equal to the target sum, then the current subset is complete, and we can start working on a new subset. We can then continue our recursion call with a new current sum as 0.\n\nIf the current sum is smaller than the target sum, then we can start trying to add the untaken elements into the current subset to see if we can solve the subproblem. We only need to try out the elements starting with the current index and onwards. There is no need to try out the previous elements as they have already been tried out in previous recursive calls. We will continue our recursion call by incrementing the current sum with the element we pick.\n\n#### Backtracking Solution\n\n#### Time/Space Complexity\n\n• Time Complexity -O(k * 2^n)where n is the length of the array and k is the number of subsetsFor each subset, we are trying out all the elements in the array. For each element, either pick it or skip it. So each subset takes 2^nFor k subset, it will be k * 2^n\n\n• For each subset, we are trying out all the elements in the array. For each element, either pick it or skip it. So each subset takes 2^n\n\n• For k subset, it will be k * 2^n\n\n• Space Complexity -O(n)The extra taken array of size nThe maximum size of the recursive call stack is n, to try out all the elements in the array.\n\n• The extra taken array of size n\n\n• The maximum size of the recursive call stack is n, to try out all the elements in the array.\n\n### Approach 2: Optimized backtracking\n\nIn the previous solution, we would try to solve a subproblem even if it had already been calculated before. We can improve the time complexity of the previous solution by memorizing the subproblems we have calculated before, so that we can avoid calculating them twice. This will be a tradeoff between time and space.\n\nIn our particular case, we can memorize the results for the elements that have already been taken to form a subset. For example, during our recursion, if we encounter a state where the i'th, j'th, and k'th elements are taken, and all the other elements remain untaken, we can memorize the result for this subproblem. Once we encounter the same condition again, we can just read the memorized result without re-calculating it again.\n\nFurthermore, we can break out of a particular recursive call early if we can determine that the subproblem is unsolvable. For a solvable problem, every element should be located into a subset. If, after one backtrack step, we find that we cannot fit the first element into a subset, then we will know for sure this problem is not solvable, and we can return False directly. For example, let us consider the case ofnums = [1, 6, 1, 1, 1], k = 2, where we need to split the array into 2 subsets with each subset having a sum of 5. We will start recursion on the first element, and try to group it with other elements. After trying out all the possibilities, it turns out that the first element cannot be grouped with others to form a sum of 5. We can simply break out and return False without continuing our recursion.\n\n#### Backtracking With Memorization And Early-Break Solution\n\n#### Time/Space Complexity\n\n• Time Complexity -O(n * 2^n)where n is the length of the arrayThere will be 2^n unique combinations of the taken stringEvery combination takes O(n) time\n\nTime Complexity -O(n * 2^n)where n is the length of the array\n\n• There will be 2^n unique combinations of the taken string\n\n• Every combination takes O(n) time\n\n• Space Complexity -O(n * 2^n)There will be 2^n unique combinations of the taken stringEach string takes O(n)\n\nSpace Complexity -O(n * 2^n)\n\n• There will be 2^n unique combinations of the taken string\n\n• Each string takes O(n)\n\n## Practice the Partition to K Equal Sum Subsets Problem With Our AI Interviewer\n\n## Practice the Partition to K Equal Sum Subsets Problem With Our AI Interviewer\n\n## Watch These Related Mock Interviews\n\n## About interviewing.io\n\ninterviewing.io is amock interview practice platform. We've hosted over 100K mock interviews, conducted by senior engineers from FAANG & other top companies. We've drawn on data from these interviews to bring you the best interview prep resource on the web.",
      "source_url": "https://interviewing.io/questions/partition-to-k-equal-sum-subsets",
      "author": "interviewing.io team",
      "user_id": "aline123"
    },
    {
      "title": "Recover Binary Search Tree",
      "content": "## Table of Contents\n\n• Introduction\n\n# How to Solve Recover Binary Search Tree\n\n## Recover Binary Search Tree Introduction\n\n## Recover Binary Search Tree Introduction\n\nThe Recover Binary Search Tree problem asks us to restore a binary search tree to its original form after two of its nodes have been swapped. This problem requires a strong understanding of the structure and properties of a binary search tree, namely that all nodes to the left of the root are smaller than the root and all nodes to the right are larger.\n\n## Recover Binary Search Tree Problem\n\n## Recover Binary Search Tree Problem\n\n### Example Inputs and Outputs\n\nConstraints\n\n• The number of nodes in this tree is in the range[2, 1000]\n\n• -5000 <= Node.val <= 5000\n\n## Recover Binary Search Tree Solutions\n\n## Recover Binary Search Tree Solutions\n\n#### Overview and Intuition\n\nIn this question, we are provided with the root of a binary search tree, well, analmostbinary search tree. Someone accidentally swapped two of its nodes, turning the BST into a regular binary tree. We are on a quest to find those two nodes. Once we find them, it shouldn't be difficult to swap them again to restore the original BST.\n\nLet's first understand the characteristics of this special kind of tree called a \"binary search tree\" or BST. The \"special\" part comes from the order in which it stores its nodes. As with a binary tree, each node of a BST can have at most two children, one left and one right. But each node maintains a special relationship with its children and parent.\n\nIn a BST, the value of any node is greater than the value of all nodes in its left subtree. In contrast, the value of any node is smaller than the value of all nodes in its right subtree. All nodes are related in this way to their respective left and right subtrees.\n\nNow that we have some clarity about BST, let's return to our original problem. It says that two of the nodes of the given BST have been swapped. Let's look at what a BST might look like if that were the case.\n\nHere we can see that the original tree satisfies all the properties of a BST. As soon as the nodes with values1and6are swapped, they no longer satisfy these properties.6is larger than2and4, but it is located in the left subtree of the two nodes after the swap. Similarly,1is smaller than5and4, but it is in the right subtree of5and4.\n\nWe can take advantage of another interesting property of a binary search tree, which relates to its in-order 'depth first search' traversal. In in-order traversal, the left subtree is processed first, then the current node, and then the right subtree. We continue this recursively for each node. We already know that in a BST, the left child is always smaller, while the right child is always larger than the current node. The in-order traversal thus ensures that the nodes with smaller values are processed before those with higher values, i.e., in ascending sort order.\n\nFor the given example - in-order traversal of the original configuration would produce the following array -[1, 2, 3, 4, 5, 6]. After swapping the two nodes, it changes to -[6, 2, 3, 4, 5, 1]\n\nStarting with this basic idea, we will examine three approaches to this problem.\n\n### Approach 1: Export to an Array - Two Pass Solution\n\nIn the previous section, we learned about the idea of in-order traversal. We take it further and implement it in this approach. We traverse the given tree in an in-order fashion. When we process a node, we push its reference into a list. If this were a perfect BST, the list or array would be perfectly sorted, and all nodes would be in ascending order of their values. In our case, however, there are two defectors.\n\nThe problem has now changed slightly. Given a list of almost sorted nodes, we need to find the two nodes that are not in the correct order. Eventually, we will interchange their values.\n\nThere are two possibilities -\n\n• When the defectors are next to each other in the resultant array.Example:[1, 2, 4, 3, 5, 6]We can see that4and3, which are right next to each other, have swapped positions. The ascending order is broken only at one place, namely at the pair(4, 3), which are also the two nodes we are trying to find.\n\nWhen the defectors are next to each other in the resultant array.\n\nExample:[1, 2, 4, 3, 5, 6]\n\nWe can see that4and3, which are right next to each other, have swapped positions. The ascending order is broken only at one place, namely at the pair(4, 3), which are also the two nodes we are trying to find.\n\n• When the defectors are at least one element apart in the output list.Example:[6, 2, 3, 4, 5, 1]In this case, the perfect sort is broken for two pairs of values -(6, 2)and(5, 1). It turns out that5and1are the errant nodes.\n\nWhen the defectors are at least one element apart in the output list.\n\nExample:[6, 2, 3, 4, 5, 1]\n\nIn this case, the perfect sort is broken for two pairs of values -(6, 2)and(5, 1). It turns out that5and1are the errant nodes.\n\n• We traverse the given tree in the in-order sequence, and push the processed nodes into a new listalmostSorted. In the solution here, we use the recursive DFS algorithm to simplify the implementation. We could also use the iterative version.\n\n• If there areNelements in the list, iterate the indexithroughalmostSortedfrom0tillN - 2.\n\n• For each pairalmostSorted[i]andalmostSorted[i + 1], if they are not in ascending order, we note them in a variableswapped. Ifswappedalready contains two nodes, it means that we have already encountered a pair out of order. This means thatalmostSorted[i + 1]must be the second defector.\n\n• Now that we have identified the two swapped elements, we just need to swap their values again.\n\n• Return therootof the binary tree, which has now become a perfect BST.\n\n#### Code and Implementation\n\n#### Time/Space Complexity\n\n• Time Complexity -O(n), wherenis the number of nodes in the tree. During in-order traversal, we iterate through every node in the tree to build the almost sorted list. Then once again, we iterate through all the elements. So this solution takesO(n)time. In other words, the time taken grows linearly with the size of the tree.\n\n• Space Complexity -O(n), wherenis the number of nodes in the tree. We use an auxiliary data structure, a list, to store all processed nodes. It requiresO(n)of memory.Recursionalso requires space on the implicit stack, which can be as large as the height of the recursion tree -O(n)in the worst case. So this solution requiresO(n)space on memory.\n\n### Approach 2: In-order Recursive Traversal - Single Pass\n\nA tiny optimization over the naive approach can save us a pass through all nodes. In the previous solution, we create a list of nodes resulting from in-order traversal. But do we really need it?\n\nThe only purpose of the list is to give us easy access to the pairs of nodesalmostSorted[i]andalmostSorted[i + 1]]in order. However, we could also access them during the traversal. When we traverse the tree in in-order fashion, we can treat the current node asalmostSorted[i + 1], and its predecessor (the last node processed) representsalmostSorted[i]. It turns out that it makes no sense to create an auxiliary list.\n\nIn a valid BST, the in-order predecessor should contain a smaller value than the current node. If we encounter a node that does not follow this rule, we note the predecessor and the current node. There can be, at most, two such nodes.\n\nTraverse the tree in order. We use a recursive DFS algorithm here. Each node compares its value to its in-order predecessor. The node processed last is the in-order predecessor of a node. We store it in a global variablelastProcessed.\n\nLet's make a recursive functioninOrderand passrootas the currentnode.\n\n• Termination condition / base case - when the currentnodeisnull, the function should simply return.\n\n• Recursively callinOrderwith the left child as the currentnode.\n\n• IflastProcessedis empty, it indicates that the current node is the leftmost child of the original tree, so it has no predecessor. As a result, no comparisons as well.\n\n• IflastProcessedis not empty - compare its value to the current node. IflastProcessed.value > node.value, then do the following: We store the pairlastProcessedandnodein a two cell arrayswapped. Ifswappedalready contains an element, it means the current pair is the second pair in our search. So we storenodeatswapped[1].\n\n• UpdatelastProcessedto the current node.\n\n• Make a recursive call toinOrderwith the right child as the currentnode.\n\n• At the end, we swap the values of the nodes contained inswapped.\n\n• Return therootof the tree.\n\n#### Code and Implementation\n\n#### Time/Space Complexity\n\n• Time Complexity -O(n), wherenis the number of nodes in the tree. We traverse through all nodes in the tree. So, time taken in processing the given tree increases linearly with the tree size. The time complexity isO(n).\n\nTime Complexity -O(n), wherenis the number of nodes in the tree. We traverse through all nodes in the tree. So, time taken in processing the given tree increases linearly with the tree size. The time complexity isO(n).\n\n• Space Complexity -O(n), wherenis the number of nodes in the tree. We do not create a list of processed nodes, but the recursive implementation requires memory on the implicit recursion stack. The size of the recursion stack can grow to the height of the tree. When the tree is balanced, the height islog n. In the worst case, when each node has only one child,O(n)memory is required on the recursion stack. Thus, the space complexity isO(n).\n\nSpace Complexity -O(n), wherenis the number of nodes in the tree. We do not create a list of processed nodes, but the recursive implementation requires memory on the implicit recursion stack. The size of the recursion stack can grow to the height of the tree. When the tree is balanced, the height islog n. In the worst case, when each node has only one child,O(n)memory is required on the recursion stack. Thus, the space complexity isO(n).\n\n### Approach 3: In-order Iterative Traversal - Single Pass\n\nWe have already seen a recursive implementation of the solution. By using an explicit stack in place of an implicit recursion stack, we can convert the solution to use iteration instead of recursion.\n\nWe try to mimic what happens in the recursive implementation. During in-order traversal we process the left children before the current node. So we push the current node into a stack and move to the left child. In other words, we update the current pointer to point to the left child. We repeat this process until we reach a node without a left child. At this point because the left child is empty, we can process the current element.\n\nAfter processing the current element, the order needs to move to the right side. So we update the current pointer to point to the right side node. Now, the current node cant be processed before its left children. So we push it into the stack and update the current pointer to point to its left child. We should see a pattern repeating here, which can be easily implemented using a loop.\n\nIn order to compare an element to its predecessor, we also keep track of the last processed node. The comparison happens right before the current pointer moves to the right side of a node.\n\nTraverse the tree in in-order fashion. We use iteration here. Each node compares its value to its in-order predecessor. The node processed last is the in-order predecessor of a node. We store it in a global variable,lastProcessed.\n\nInitialize an empty stackstack, and a pointercurrentpointing at the root node.\n\nInitializelastProcessedandswappedto containnullvalues.\n\nDo the following until the stack is not empty orcurrentpoints at a valid node:\n\n• Whilecurrentpoints at a valid node\na. Push the node pointed bycurrentinto the stack\nb. Updatecurrentto point to its left child\n\nWhilecurrentpoints at a valid node\na. Push the node pointed bycurrentinto the stack\nb. Updatecurrentto point to its left child\n\n• currentshould be pointing atnullat this moment. So we updatecurrentby popping the last stored node from the stack.\n\ncurrentshould be pointing atnullat this moment. So we updatecurrentby popping the last stored node from the stack.\n\n• If we have processed a node earlier, compare the current node's value with the last processed node. If we find the last processed node to have a value greater than the current node, we have found a node out of order. We put bothlastProcessedandcurrentinto the arrayswapped.\n\nIf we have processed a node earlier, compare the current node's value with the last processed node. If we find the last processed node to have a value greater than the current node, we have found a node out of order. We put bothlastProcessedandcurrentinto the arrayswapped.\n\nIfswappedalready contains a node, it means the current node must be the second of the swapped pair. So we updateswapped[1]with the current node and end the traversal here. At the end, we updatelastProcessedto point to the current node.\n\nAfter traversal, we exchange the values of the nodes contained inswappedand return therootof the tree.\n\n#### Code and Implementation\n\n#### Time/Space Complexity\n\n• Time Complexity -O(n), wherenis the number of nodes in the tree. We traverse through all nodes in the tree. So, the time taken to process the given tree increases linearly with the size of the tree. The time complexity isO(n).\n\n• Space Complexity -O(n), wherenis the number of nodes in the tree. The size of the stack used can grow to the height of the binary tree. When the tree is balanced, its height islog n. In the worst case, when each node has only one child, the tree height becomesn. Thus,O(n)memory is needed to accommodate the stack. Thus, the space complexity isO(n).\n\n#### Bonus - Morris Traversal\n\nThis approach may not be very relevant from the perspective of an interview. But it could be an interesting exercise if you want to try it out. We will not go into the details of this approach but will give you a basic idea here.\n\nIn the recursive and iterative versions described above, we consumeO(n)of space on the implicit or explicit stack.\n\nWe use a stack to temporarily store the root nodes of different subtrees and the order in which they are processed. We put a node in the stack when we go down to the left child and remove it from the stack when we go back up. Could there be a way to skip the stack and still be able to go back up once we have examined the children of a node? This is precisely what we can do with Morris traversal.\n\nAs we traverse a binary tree in order, the predecessor makes a temporary connection to the next node. Once we have explored all the nodes of the left subtree, the connection between the predecessor and its successor helps us move back up (or down) the tree. After that, the predecessor is returned to its original shape.\n\nThis particular type of tree, where the predecessor nodes maintain a connection to their successor nodes, is also called a \"threaded binary tree\".\n\n## Practice the Recover Binary Search Tree Problem With Our AI Interviewer\n\n## Practice the Recover Binary Search Tree Problem With Our AI Interviewer\n\n## Watch These Related Mock Interviews\n\n## About interviewing.io\n\ninterviewing.io is amock interview practice platform. We've hosted over 100K mock interviews, conducted by senior engineers from FAANG & other top companies. We've drawn on data from these interviews to bring you the best interview prep resource on the web.",
      "source_url": "https://interviewing.io/questions/recover-binary-search-tree",
      "author": "interviewing.io team",
      "user_id": "aline123"
    },
    {
      "title": "How to Reverse an Integer [Problem + Solution]",
      "content": "## Table of Contents\n\n• Introduction\n\n# How to Solve the Reverse Integer Problem\n\n## How to Reverse an Integer: Overview\n\n## How to Reverse an Integer: Overview\n\nThe Reverse Integer problem offers a straightforward task of taking an integer as input and returning the reverse representation of that integer. This problem can be solved naively, not unlike reversing a string, but also invites a more challenging mathematical approach, especially when considering edge cases such as handling negative numbers and overflow cases.\n\n## 3 Examples of the Reverse Integer Interview Question\n\n## 3 Examples of the Reverse Integer Interview Question\n\nGiven a 32-bit signed integerx, reverse digits of the integer. If reversing the integer causes the value to go outside the signed 32-bit integer range [-2³¹, 2³¹ - 1], then return 0.\n\n### Example 1#\n\nInput:x = 123Output:321\n\nInput:x = -123Output:-321\n\nInput:x = 1563847412Output:0 since reversing the integer would make it greater than integer max (2147483651 > 2147483647)\n\nConstraints\n\n• -2³¹ <= x <= -2³¹-1\n\n## How to Reverse an Integer (with Solutions in Java & Python)\n\n## How to Reverse an Integer (with Solutions in Java & Python)\n\nBelow we walk through two different ways to reverse an integer both using a reverse signed integer approach.\n\n### 1. String Conversion Approach\n\nWhen tackling an algorithms problem one good place to start is by thinking about what you would do if you were solving the problem manually, and for this problem that approach is fairly straightforward. For example, if I were tasked with reversing the integer321, I would flip/reverse the integer and then double-check to make sure the answer is within the 32-bit integer range.\n\nWe can translate this approach to code by taking the following steps:\n\n• Convert the input integer to a string\n\n• Reverse the string\n\n• Convert the reversed string back to a number\n\n• If the number is within 32-bit range, return0, otherwise return the number\n\n#### Reverse Signed Integer Java and Python Solutions - String Conversion Approach\n\n#### Time/Space Complexity\n\n• Time Complexity:O(log(x)). The string / number conversions and reversals in this approach result in one iteration over the number of digits of the input number.\n\nIf you applylogto the base 10 on the input number, you get the number of digits in the input number. So, the worst case time complexity isO(log(x)), wherexis the input number.\n\n• Space Complexity:O(log(x)), we utilize an additional string with size equivalent to the number of digits in the input number.\n\n### 2. Math Approach\n\nThe least significant digit of an integer can be obtained by performing a mod operation over 10. To retrieve all digits of the number except the last one, you can perform integer division by 10. You can continue to perform the mod operation on the remaining digits (until it returns zero) to capture all digits of the integer.\n\nWe will be building the result as we go and storing intermediate values in a variable namedreversed_integer.\n\nAlso note that the same approach can be applied to negative integers without issues. In order to use the same approach for negative numbers, we can take the absolute value of the initial integerxand negate the result at the end.\n\nExample:Initial values\n\nIteration 1:\n\nIteration 2:\n\nIteration 3:\n\nHowever, applying this math could also lead us to cases where the reversed integer is not within the 32-bit integer range.\n\nExample Case 1:\n\nExample Case 2:\n\nBased on the above example cases,reversed_integeris not within the 32-bit integer range if one of the below conditions are satisfied.\n\n• reversed_integer > integer_max / 10\n\n• reversed_integer == integer_max / 10 AND x > integer_max % 10\n\nFor the second case here, the inputxvalues possible are only 8463847412 and 9463847412.\n\nHowever, both of these numbers are not valid integer inputs and so the second condition is not necessary.\n\n### Reverse Signed Integer Java and Python Solutions - Math Approach\n\n#### Time/Space Complexity\n\n• Time Complexity:O(log(x)), for the same reason as Approach 1. The while loop in this solution iterates over all the digits in the input number and ifxis the input number,log(x)to the base 10 would give us the number of digits in the number. Therefore,O(log(x))would be the effective time complexity of the solution.\n\n• Space Complexity:O(1)\n\n## Practice the Reverse Integer Problem With Our AI Interviewer\n\n## Practice the Reverse Integer Problem With Our AI Interviewer\n\n## Watch These Related Mock Interviews\n\n## About interviewing.io\n\ninterviewing.io is amock interview practice platform. We've hosted over 100K mock interviews, conducted by senior engineers from FAANG & other top companies. We've drawn on data from these interviews to bring you the best interview prep resource on the web.",
      "source_url": "https://interviewing.io/questions/reverse-integer",
      "author": "interviewing.io team",
      "user_id": "aline123"
    },
    {
      "title": "Valid Palindrome (Interview Solution)",
      "content": "• For employers\n\n• Gift mock interviews\n\n• Learning Center\n\n• Valid Palindrome\n\n## Table of Contents\n\n• Introduction\n\n# How to Solve Valid Palindrome\n\n## Valid Palindrome Introduction\n\n## Valid Palindrome Introduction\n\nThe Valid Palindrome question involves determining if this string, after removing any one character, can become a palindrome, and if so returning true, otherwise returning false. The challenge in this problem designing the loop to check if removing a character from the start of the end will turn the string into a palindrome.\n\n## Valid Palindrome Problem\n\n## Valid Palindrome Problem\n\nDetermine if this string, after removing any one character, can become a palindrome. If possible return true, otherwise return false.\n\n### Example Inputs and Outputs\n\nInput:s = \"aba\"Output:True\n\nInput:s = \"abca\"Output:True\n\nInput:words = \"abc\"Output:False\n\n## Valid Palindrome Solutions\n\n## Valid Palindrome Solutions\n\nThe isPalindromeWithOneCharRemoved function takes a string input and returns True if the input string can be made into a palindrome by removing at most one character. The function first checks if the input string is empty or has a length of one or two, in which case it must already be a palindrome, and returns True in those cases. Otherwise, it usestwo pointersto traverse the string from both ends, checking if the characters at each position match. If a mismatch is found, the function checks if removing either the left or right character would make the remaining substring a palindrome by calling the isPalindrome2 helper function. If either of these substrings is a palindrome, the function returns True. If the entire string is already a palindrome, the function also returns True. Otherwise, it returns False.\n\nThe isPalindrome2 helper function takes a string and two pointers indicating the start and end positions of a substring. It then uses two pointers to traverse the substring from both ends, checking if the characters at each position match. If a mismatch is found, the function returns False. If the entire substring is traversed without finding a mismatch, the function returns True, indicating that the substring is a palindrome.\n\n#### Time/Space Complexity Analysis\n\n• Time Complexity: O(N), where N is the length of the input string, because we loop through the string only once.\n\n• Space Complexity: O(1), because we don't use any data structures that grow with the size of the input.\n\n## Watch These Related Mock Interviews\n\n## About interviewing.io\n\ninterviewing.io is amock interview practice platform. We've hosted over 100K mock interviews, conducted by senior engineers from FAANG & other top companies. We've drawn on data from these interviews to bring you the best interview prep resource on the web.\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/questions/valid-palindrome",
      "author": "interviewing.io team",
      "user_id": "aline123"
    },
    {
      "title": "Insert Delete getRandom O(1)",
      "content": "## Table of Contents\n\n• Introduction\n\n# How to Solve Insert Delete getRandom O(1)\n\n## Insert Delete getRandom O(1) Introduction\n\n## Insert Delete getRandom O(1) Introduction\n\nThe Insert Delete getRandom O(1) problem involves implementing a class that enables the insertion, deletion, and retrieval of a random element in constant time. Solving this design task requires a strong understanding of the operational time complexities for arrays and hash maps.\n\n## Insert Delete getRandom O(1) Problem\n\n## Insert Delete getRandom O(1) Problem\n\nDesign and implement an efficient sampler that can handle the following operations in constant time:\n\n• RandomizedSet()initializes the RandomizedSet object.\n\n• insert(string val)Inserts an itemvalinto the set if not already present; returnstrueif the item was not present,falseotherwise.\n\n• remove(string val)Removes an itemvalfrom the set if present; returnstrueif the item was present, false otherwise.\n\n• getRandom()Returns a random element from the current set of elements.\n\nImplement the functions of the class such that each function works in averageO(1)time complexity.\n\n## Example Inputs and Outputs\n\nInput:[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n\n[[], ['a'], ['b'], ['b'], [], ['a'], ['b'], []]\n\nOutput:[null, true, false, true, 'b', true, false, 'b']\n\nExplanation:\n\n• RandomizedSet: initialize the object\n\n• insert('a'): insertsainto the set. Returnstrueas it is inserted successfully.\n\n• remove('b'): removesbfrom the set. Returnsfalseas it does not exist in the set.\n\n• insert('b'): insertsbinto the set. Returnstrueas it is inserted successfully.\n\n• getRandom(): returns eitheraorbrandomly.\n\n• remove('a'): removesafrom the set. Returnstrueas it is removed successfully.\n\n• insert('b'): insertsbinto the set. Returnsfalseas it already exists in the set.\n\n• getRandom(): returnsbas it is the only item in the set.\n\nConstraints\n\n• At most 2 * 10^5 calls will be made toinsert,remove, andgetRandom.\n\n• There will be at least one element in the data structure when getRandom is called.\n\n## Insert Delete getRandom O(1) Solutions\n\n## Insert Delete getRandom O(1) Solutions\n\nWhen writing code to store data we have lots of data structures to choose from: arrays / lists, trees, graphs, hashmaps, linked lists, sets, etc. And different data structures have different time complexities for various operations, so depending on what we are trying to achieve, the “right” data structure to use will change. In this problem, we need to achieveO(1)forinsert,removeandgetRandom. Because of this requirement, let’s focus on two widely used data structures that have certainO(1)operations: hashmaps and arrays.\n\n• Hashmapadd a key:O(1)read a given key:O(1)delete a given key:O(1)read a random key:O(N)get all the keys in the hashmap:O(N)get a random key from the keys:O(1)\n\n• add a key:O(1)\n\n• read a given key:O(1)\n\n• delete a given key:O(1)\n\n• read a random key:O(N)get all the keys in the hashmap:O(N)get a random key from the keys:O(1)\n\n• get all the keys in the hashmap:O(N)\n\n• get a random key from the keys:O(1)\n\n• Arrayadd an item to the end of the array:O(1)read the value without providing an index:O(N)delete an item from the end of the array:O(1)delete an item from the middle of the array:O(N)need to create a new array and copy all the items from the old array (except the item to be deleted) into the new array:O(N)get a random item:O(1)get a random index within the range of the array length:O(1)read the value for the random index:O(1)\n\n• add an item to the end of the array:O(1)\n\n• read the value without providing an index:O(N)\n\n• delete an item from the end of the array:O(1)\n\n• delete an item from the middle of the array:O(N)need to create a new array and copy all the items from the old array (except the item to be deleted) into the new array:O(N)\n\n• need to create a new array and copy all the items from the old array (except the item to be deleted) into the new array:O(N)\n\n• get a random item:O(1)get a random index within the range of the array length:O(1)read the value for the random index:O(1)\n\n• get a random index within the range of the array length:O(1)\n\n• read the value for the random index:O(1)\n\nBack to our problem at hand, based on the time complexities above we can use a hashmap to achieveO(1)inserts and deletes, but a hashmap alone will not be sufficient for getting a random element. Likewise, we can use an array to get a random element but cannot use an array alone forO(1)reads and deletes. Since there is no limitation on space usage, we can combine both data structures in our implementation:\n\n• Use a hashmap to memorize the positions for all the items in the array to achieveO(1)read and delete.\n\nUse a hashmap to memorize the positions for all the items in the array to achieveO(1)read and delete.\n\n• Use an array to get a random element withO(1).\n\nUse an array to get a random element withO(1).\n\n#### Approach 1: Hashmap + Array\n\nAs shown in the diagram above, we will use two objects to store the strings:\n\n• An array to store all the strings we currently have.\n\n• A hashmap, with the key as the string and value as the index of the string in the array, so that we can keep track of the positions of the strings inside the array.\n\nForaddoperations, we can:\n\n• Check if the string exists in the hash map or not; returnfalseif we already have the string.\n\n• Append the string to the end of the array. The index of the newly-added string will bearray_length - 1. In our example, we appendfto the end of the array and the new array length is6, which meansfis stored at index5.\n\n• Add the string into the hashmap with the key as the string itself, and the value as the index. In our example, we addfinto the hashmap with a value of5.\n\nFordeleteoperations, we can:\n\n• Get the index of the string to be deleted from the hashmap. In our example, we are deletingband we retrieve the array-index ofbfrom the hashmap, which is1.\n\n• We can then swap the string to be deleted with the last element in the array. In our example, we movebto the end of the array, and move the last element (f) to index1in the array.\n\n• Next, we need to update the keys in the hashmap with their new array index values. In our example, we need to updatebto point at5andfto point at1.\n\n• Lastly, we pop the last element from the array and delete the key from the hashmap.\n\nForgetRandomoperations, we can:\n\n• Get the length of the array, knowing the last index of the array isarray_length - 1.\n\n• Generate a random number (randomIdx) in the range between0(the first index) and the last index (inclusive).\n\n• Return the element stored at the random index in the array.\n\n#### Insert Delete getRandom O(1) Python Solution - Hashmap + Array\n\n#### Time/Space Complexity\n\n• Time complexity:O(1)for all the operations.\n\nTime complexity:O(1)for all the operations.\n\n• Space complexity:O(N)The hashmap takesO(N)The array list takesO(N)\n\nSpace complexity:O(N)\n\n• The hashmap takesO(N)\n\n• The array list takesO(N)\n\n## Practice the Insert Delete getRandom O(1) Problem With Our AI Interviewer\n\n## Practice the Insert Delete getRandom O(1) Problem With Our AI Interviewer\n\n## Watch These Related Mock Interviews\n\n## About interviewing.io\n\ninterviewing.io is amock interview practice platform. We've hosted over 100K mock interviews, conducted by senior engineers from FAANG & other top companies. We've drawn on data from these interviews to bring you the best interview prep resource on the web.",
      "source_url": "https://interviewing.io/questions/insert-delete-get-random-o-1",
      "author": "interviewing.io team",
      "user_id": "aline123"
    },
    {
      "title": "How to sabotage your salary negotiation efforts before you even start",
      "content": "# How to sabotage your salary negotiations efforts before you even start\n\nNote: If you’d like a practical primer on negotiation, read myprevious post on negotiation first— it tells you exactly what to say in a bunch of situations. This post is longer and more academic, but of course I include some practical tips and teach you what to say in a few situations, as well.\n\nAt interviewing.io, we’ve coached hundreds of people through salary negotiation. We’re good at it — our average user gets $50k more in cash, and we have a 94% success rate.\n\nHaving done this a lot, we’ve seen our users make the same two mistakes, over and over, BEFORE they start working with us. These mistakes are costly and make it harder for us to do our jobs. Our advice is applicable to everyone, but I wrote this post primarily to share with interviewing.io’s user base, so that future clients of our negotiation service don’t shoot themselves in the foot.\n\nThese are the two things youmustavoid. Both involve how you talk to recruiters at the start of your job search, way before there’s an offer:\n\n• Revealing information too early in the game\n\n• Negotiating before you’re ready\n\nIn this post, I’ll explain why these two mistakes routinely sabotage salary negotiation efforts and what to say to recruiters instead. In a nutshell, if you can just be in “passive information gathering” mode (more on that later) for most of your recruiter interactions, you’ll be golden. It’s hard to not to share info about your job search with your recruiter, especially as you build more rapport with them, but we’ll tell you exactly what to say instead.\n\nBefore we get into all of that, I want to go over two foundational things about negotiation.\n\n• Recruiters are not your friend, and they don't work for you.\n\n• What negotiation is and what it’s not\n\n## Recruiters are not your friend, and they don’t work for you\n\n“It is difficult to get a man to understand something when his salary depends on his not understanding it.”-Upton Sinclair\n\nI used to be a recruiter. I ran my own agency, and I also worked in-house before starting interviewing.io. That means that I’ve had tostruggle with the tangled incentive structure that comes with being a recruiter(see the section called “You should write down your principles”). There’s always a tension — recruiters are, by and large, good human beings who genuinely want to help their candidates, but they also have an employer they’re beholden to, as well as a comp/bonus structure that rewards certain behaviors, some of which run counter to candidates’ best interests.\n\nThere’s some distinction between in-house recruiters and third-party recruiters (recruiters who work for an agency that does placement, rather than a specific company that’s hiring engineers).\n\n### Third party recruiters\n\nMy general policy with third-party recruiters is to not tell them ANYTHING and to always deal directly with the companies they introduce you, once you establish a point of contact there. You should assume that anything you tell your recruiter is going to get back to every company you’re working with. Why? Because their primary objective is to place your butt in the seat of one of the companies they’re working with, and they will do whatever they need to do to make the deal happen. Often, those things will run counter to your interests.\n\nA big misconception that many candidates labor under is the idea that because third-party recruiters get paid every time they make a placement, their interests are fundamentally aligned. At a high level, this is kind of true, but once you dig into the details you'll see a lot of nuance.\n\nA recruiter, depending on market conditions, gets anywhere from 8%-25% of the candidate’s base salary when they make a placement. In the current climate, it’s around 10%. However, that cut is going to the recruiting agency as a whole rather than to the individual recruiter — you will almost always end up working with large agencies rather than a sole-proprietor shop where the owner gets to take all of it home.\n\nLet's say that you get an offer with a base salary of $150,000. You talk to your third-party recruiter and tell them that you would like more money. The recruiter may go to the hiring manager and try to advocate for you, but they're not going to push very hard because the incremental difference in their cut is going to be pretty small and to them the thing that matters most is getting butts in seats. After all, they're evaluated on the number of hires they make, first and foremost, independent of comp. Understanding that, let's do the math anyway. Say that they’re able to risk closing the deal and get you $165k. Before, the agency would have gotten paid $15k. Now the agency gets paid $16.5k. That incremental $1.5k isn’t worth risking a deal over (even a few thousand dollars would not justify jeopardizing the deal). On top of that, the individual recruiter is only going to maybe get a few hundred dollars total from that increase. So for them the difference really isn’t worth it.Third party recruiters are incentivized to get the deal done, not to risk the deal by negotiating hard for you.\n\nMoreover, because they’re incentivized to get the deal done, you should assume that your recruiter will share anything you share with them with the company or companies they’ve introduced you to. If you tell them that a company is your first choice and that you’re tempted to accept, they will likely share that with the company and may even recommend that they not raise your comp, since you’re already so enthusiastic. If you share that you’re not very interested in a company, and the recruiter has other candidates they’re presenting, they will prioritize those candidates’ experience over yours and will possibly tell the company not to invest in you as hard.\n\n### In-house recruiters\n\nWhat about in-house recruiters? In-house recruiters may or may not get a bonus for hires that happen on their watch; it depends on the company. But if they do, that bonus is generally NOT tied to your compensation, and in some cases, they may get a bigger bonus if they’re able to negotiate you down. At big companies, in particular, in-house recruiters follow a playbook. They’re trained to make offers within specific bands, and they’re trained to mobilize such that they don’t lose candidates to other big companies — if you wave a Facebook counteroffer in front of Google, they will act. If you tell them you’re interviewing at a startup, they will not, because they know that startups don’t pay as much. They’re actually evaluated on how well they follow the playbook. Because of that, there is no reason to assume that their incentives align with yours. They’re incentivized, first and foremost, to follow the rules their head of department sets for them. This is true for how they evaluate candidates, who they let through, and how they read resumes. And it’s definitely true for how they negotiate.\n\nIf you’re interested in peeking behind the curtain on how recruiters think, I interviewed three of the best ones in the industry recently. You can watch that below:\n\n## What negotiation is and what it’s not\n\nProbably because of bad books and airplane magazine ads (for those of you old enough to remember those), people often think that negotiation is all about saying the right thing, or how firm your handshake is, or any other amount of silly nonsense.The reality is that negotiation is all about preparation and leverage.\n\nDon't forget to prepare for your technical interviews too. Sign up today for anonymous mocks with senior engineers from top companies.\n\nPreparation and leverage means doing the work to make sure that you have multiple offers, that all your offers come in at the same time, and that you don’t tip your hand too early. Laying this foundation is 80% of the work. You’ll need to slow some companies down, speed some companies up, and hold off questions from recruiters until you’re ready to negotiate, and not before. If you do this right, the actual negotiation part will be easy and almost a foregone conclusion.\n\nIs it possible to negotiate when you don’t have multiple offers and when you haven’t done the foundational work? Sure, it is, and we’ve sometimes had success with our users doing that. But it’s much harder, and the ceiling on how much more money you can get is lower.\n\nWith all that out the way, let’s talk about how the two biggest mistakes people make and how to not make them!\n\n## Mistake #1: Revealing information before you’re ready to negotiate\n\nYou’ve probably never been arrested, but if you’re like me, you’ve watched a lot of police procedurals on TV. You know the bit where they read the suspect their Miranda rights? They start like this:\n\nYou have the right to remain silent. Anything you say can and will be used against you in a court of law…\n\nTalking to recruiters is exactly the same, and one of the biggest mistakes we see our users make is sharing information too early. This is generally the only mistake we can’t walk back — once you share information, you can’t undo it, and sharing information actually has no upside, only downside. When you’re ready to negotiate, you’re doing so deliberately because you alreadyknowthe state of the world, and you’re choosing to reveal the parts that set you up for success. Before that, you’re just revealing stuff that can be used against you.\n\nSpecifically, do not share with recruiters anything about your salary history (though it’s illegal in many states to ask this directly, there are indirect ways of asking, and many still do), your salary expectations, where else you’re interviewing, and how far along in the process you are with other companies. In short, don’t share any information about money or other interviews.\n\nThe main question recruiters ask up front about money is: “What are your compensation expectations?” They claim that it’s because they want to make sure that you’re not so far off in your expectations that interviewing with that company would be a waste of time. This is a nonsense reason —very fewcompanies pay so much below market that it would be a nonstarter. Those companies know who they are, and they know to give you a heads up that they pay below market. Moreover, with the recent advent of companies sharing salary bands, you’ll have some idea if they're grossly below market before you interview. The real reason recruiters ask about compensation expectations is so that they can use it against you later in negotiations.\n\nAs such, if you answer this question with a number, you set an artificial ceiling on your offer. Do not even utter a single number to a recruiter until you’re ready to bargain. Do not go on levels.fyi and comment on the ranges listed for your level, even if you’re currently underpaid and an average offer from them would be life changing.Do not say a number first — ever.\n\nYou can see exactly what to say when you get asked about compensation expectations in the section called “How to handle recruiter calls” below.\n\nThe most obvious way to lose leverage is revealing information about money. The other way to lose leverage is by sharing information about where else you’re interviewing. If you share this information, you risk prematurely scaring off smaller companies because they don’t think they can win in a bidding war with FAANG. You also risk cornering yourself into a situation where the company knows your options are limited, and they might be inclined to lowball you as a result. Finally, you risk getting an exploding offer to try to force you to make a decision before you’re ready.\n\nBelow are some examples that I hope will drive these points home.\n\n### Example #1: You’re interviewing at Google, Meta, and two startups\n\nLet’s say that you’re currently interviewing at Google, Meta, and two startups (let’s call them A and B). You’re at the onsite stage with Google, you’re doing technical phone screens at both startups, and you’re just doing your first recruiter call with Meta. This is actually a very strong position to be in!\n\nOf course, your Meta recruiter asks you about your comp expectations and where else you’re interviewing.\n\nIf you reveal your comp expectations, it will be hard to walk them back:\n\n• Let’s say that you currently work at a startup and make $150k in cash with some amount of equity. You go to levels.fyi or a similar site and look up Facebook’s salary bands for the role you’re targeting. Let’s say those bands for total comp are $250k-$350k. Hell, that’s way more cash than you’re making now, so you decide to share that range, thinking that if those are their bands already, it does no harm. That’s reasonable, except that let’s say Google ends up making you an offer, and it’s $400k (we’ve seen this scenario happen to a bunch of our users). Now you have to walk back what you said, in which case your recruiter will invariably ask why. And now you have to reveal, before you’re ready, that you have a Google offer, which means you’ll probably end up revealing that it’s for $400k. Now you’ve set an artificial ceiling for your Facebook counteroffer to be $400k as well, when in reality that ceiling may have been closer to $450k or even $500k.\n\nIf you reveal that you’re at the onsite stage with Google and talking to some startups, here's what will happen:\n\n• Your recruiter will do the math and start asking you in a few weeks if you got to team matching.\n\n• Now Meta knows that Google is the only possible offer on the table that they should be worried about. They (and other big companies) don’t take startup offers nearly as seriously because equity is monopoly money 'til it’s not… and even if you don’t reveal the cash portion of your comp, they’ll assume it’s smaller than what they’re offering.\n\n• If you didn’t pass the onsite, it’s going to be hard to not share that when you’re persistently asked about it, unless you lie (which I absolutely do not condone). Now you’ve lost leverage because Meta knows that you cannot possibly have any other big tech company offers.\n\n• If you DO perform well in your Google onsite, that’s great, but team matching can take a while (yes, I know Google is changing their process such that you’re now interviewing for a specific team at the outset, but the broader point still stands). So now if Meta is about to make you an offer, they can set an artificially fast expiration date to run out the clock.\n\nThough you started in a strong position with multiple interviews, including at companies that are known to pay well, you’ve now weakened that position by sharing details.\n\nHere’s another thing that could happen in this scenario. Let’s say that it’s the same set of companies as above, but this time you’re talking to the recruiter from startup A. The recruiter asks you where else you’re interviewing.\n\nIf you mention that you’re interviewing at both Google and Meta, they might get spooked.\n\n• I’ve seen this happen a bunch. Dropping FAANG names can be a good power move, or it can shoot you in the foot, and which it’ll be really depends on the situation. Many small startups view FAANG candidates as risky because they know they can’t compete on comp and are worried that you’re going to walk the moment that you get a FAANG offer. This may or may not be true (not everyone is motivated just by comp!), but it’s not to your advantage to reveal it. YOU should be in control of if and when we play the FAANG card.\n\n### Example #2: You’re interviewing at one company and are also up for a promotion\n\nHere’s a different example. Let’s say that you work at a startup, and you’re up for a promotion soon. You figured it’d make sense to see what’s out there as well, so you’ve started interviewing with another startup.\n\nYour recruiter asks you in your first call about where else you’re interviewing and what your comp expectations are. You may be tempted to mention that you’re up for a promotion because that feels like it’ll give you leverage — if you get a promotion, the startup will have to work harder to entice you to leave, after all. Not so fast!\n\nIf you mention that you’re up for a promotion:\n\n• Your recruiter will start checking in consistently on whether you got it. Promotions always take longer than you think, and the increase in your comp may not be what you expect. At some point, if you haven’t gotten it yet, the recruiter will assume it’s not coming, and then you actually lose leverage because they know that you’re going to be more likely to walk.\n\nIf you mention that you’re not interviewing anywhere else, that’s just a giveaway that you have no leverage:\n\n• Promotion or not, many of our users assume that they have leverage because, “I don’t have to leave my job, so my current job is leverage.” That’s not true, though — even in this climate, and definitely in a hiring boom, an engineer having another job is table stakes. Almost every candidate you’re competing with will be currently employed. So even if having a job gives you a little bit of leverage, it gets canceled out when everyone has the same exact thing.\n\nThe details may differ in your case, but the fundamental mechanics are the same. When you reveal information before you know what hand you’ve been dealt, it can only hurt you. I’m struggling to think of a scenario where revealing something has been beneficial.\n\nI suppose the one exception to revealing information is this: Sometimes it can be useful to give your recruiter a rough estimate for when you’ll be collecting offers, e.g., “I’ve just started interviewing. I expect to get through all my interviews and onsites in the next 6 weeks and start collecting offers 2 months from now. Does that timeline work for you?”\n\nThis technique can be helpful for aligning expectations up front and then keeping recruiters off your back, as they won’t need to chronically text you to make sure you haven’t taken another offer yet (we’ll talk more about texting with recruiters in the next section). But note that even in this example, we’re not actually revealing any information about where you’re interviewing, how long it’s taking, or compensation. You’re just setting a timeline based onhypotheticalswithout giving out any details that can be used against you later. When you share the actual timeline you’re working with, you no longer control the timing of your job search, and a huge part of negotiation is controlling timing so you can make all your offers come in at the same time.\n\n## Mistake #2: Premature negotiation\n\n“Don't fire until you see the whites of their eyes!”-Unknown officer at the Battle of Bunker Hill\n\nJust like not revealing information too early, you also want to avoid negotiating too early. They’re two sides of the same coin.\n\nThink of it like a hand of cards. At the beginning, you have no idea what you’re going to draw. The longer you wait to negotiate, assuming you’ve timed things correctly, the more information you have. Then, when you’re ready to negotiate, you can look at your hand and selectively share information that puts you in the strongest position. For instance, if you have a high base salary from one company, a great equity package from a public company, and a signing bonus from a third company, you can strategically share those portions of the offers without sharing the weaker parts. Each negotiation is different, and it’s hard to give catch-all advice, but that’s generally the situation you should set yourself up to be in.\n\nWith that in mind, I’m a firm believer in negotiating when you’re ready and not before. Until you know what else is on the table, it’s really hard to 1) have the bravado that comes with actually having multiple offers (this is possible to fake, but trust me, it’s hard) and 2) negotiate effectively — you will never know as well as your recruiter what salary bands are like, what market comp is, and so on. They do this all day. This may be your first or fifth time doing it, but there’s massive experience and information asymmetry. There are two ways to combat this power imbalance: have as many of your interactions be asynchronous as possible (we discussed that earlier) and do everything you can to negotiate when you’re at the point of maximum information, and not before. Daniel Biales, one of our former negotiation clients,explained the latter really well.\n\nWhen I received a low offer, my first inclination was to start the negotiating process. Aline helped me to realize that this was not the best course of action. The problem with this approach is that I wanted to start negotiating before receiving my highest offer. If I negotiated an increase then, I would have had to renegotiate when I received the higher offer. This will cause negotiating fatigue for you and the company. They will be less likely to negotiate a second time because they don’t know how many times you will ask them for more. First, focus on strategies to draw out your decision. Then, when you have all your offers, start negotiating. There may be a couple of back and forth communications, but they will be over a short time span rather than drawn out.\n\n### Example #1 revisited: You're interviewing at Google, Meta, and two startups\n\nLet’s review our first example again. Imagine that you’re interviewing at Google, Meta, and two startups, A and B, just like before. Startup A makes you an offer: $160k base, 0.1% of the company in options over four years, no signing bonus. You react to it and say that you were hoping for a signing bonus. The recruiter comes back with a $10k signing bonus quickly and pressures you to make a decision, saying that they have other candidates waiting.\n\nYou try to stall, and then a few days later, Google makes you an offer that includes a $25k signing bonus. You’re still excited about the startup for reasons other than compensation, but now you have to go back to them and say that you actually got a $25k signing bonus at Google. They are unlikely to move again.\n\nSo, don’t negotiate until you’re ready. It’s hard to walk things back.\n\nThat doesn’t mean it’s not possible to negotiate in stages and gradually start bringing up all your offers. In my experience, however, this is a much more difficult maneuver, takes way more experience, is much more stressful for the candidate, and often ends up with the same results as laying a solid foundation and just negotiating once at the end.\n\nSo what do you say when you get asked pointed questions by your recruiter about your comp expectations or where you’re interviewing? And how do you delay negotiation until you’re ready?\n\n## How to handle recruitercalls:“passive information gathering” mode\n\nUntil you’re ready to negotiate, your default mode should be “passive information gathering.” This means that you listen rather than talk. I coach all of our negotiation clients to be in this mode when they get on a call with a recruiter.\n\n• Be polite and gracious to a fault.If it’s an offer call, thank them for the work they did to put your offer together and for advocating for you. If it’s earlier in the process, thank them for their help so far.\n\n• Express genuine enthusiasm.If it’s an early call, express excitement about the company or the interview process if there’s something idiosyncratically cool about it. If it’s an offer call, express excitement for the team, the projects, the hiring manager, whatever it is. And be genuine. Every offer will have something exciting about it.\n\n• If the recruiter is making an offer, do not react to what you’re being told beyond expressing enthusiasm.Say that you need some time to process and/or talk to your {family, partner, spouse}.Why should you not react? Because recruiters do this a lot, and you don’t. Negotiating on the phone on the fly is really hard. You’re going to need time to think, and you need a way to level the playing field. Email is the great leveler in these interactions because it’s asynchronous, and it gives you time to think and plan. No one is realistically expecting you to react to major life decisions on the fly!\n\n• Use email (not phone when possible andDEFINITELYnot texts) to interact with recruiters. We strongly advise you to leave your phone number off your resume, and if you have to fill in any required phone number fields while applying, to put a Google voice number. Also, in your first conversation with your recruiter, let them know that you are very bad at using the phone and strongly prefer email. Finally, whenever they text or call, wait a few hours, and answer with email and remind them that email is the best way to reach you (you can always say that you don’t have notifications enabled during work hours).Why does all of this matter? Phone calls are extremely disruptive, as are texts. The only way to level the playing field in negotiation is to have time to think and to possibly ask for advice. In particular, the casual nature of texting lulls you into a false sense of security. Moreover, the fact that texts or phone calls interrupt you from something else puts you at a disadvantage — when you get interrupted, your instinct is to quickly respond to make the interruption go away. But knee-jerk responses are rarely the right ones, and you’ll find yourself giving away information you shouldn’t have. You will have to get on the phone eventually, of course, but you never have to text.\n\n• If a recruiter asks you pointed questions about comp expectations or where else you’re interviewing, refer to the section called “Exactly what to say” right below!\n\n## Exactly what to say\n\nIn all the snippets below, you’ll notice that they end with the same sentence:I promise not to accept other offers until I have a chance to discuss them with you.\n\nThis is deliberate, and it’s there because it’s disarming. Fundamentally, recruiters ask you all of these questions because they don’t want to lose out on you and have you go to another company. If you can speak to that worry head-on, there’s not much they can say back.\n\nFor questions about comp expectations at the beginning of the process:At this point, I don’t feel equipped to throw out a number because I’d like to find out more about the opportunity first – right now, I simply don’t have the data to be able to say something concrete. If you end up making me an offer, I would be more than happy to iterate on it if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor questions about comp expectations at the end of the process:It sounds like there’s an offer coming, and I’m really excited about it. I’m not sure exactly what number I’m looking for, but if you’d be able to share what an offer package might look like, then I will gladly iterate on it with you if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor questions about where else you’re interviewing at the beginning of the process:I’m currently speaking with a few other companies and am at various stages with them. I’ll let you know if I get to the point where I have an exploding offer, and I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor questions about where else you’re interviewing at the end of the process:I’m wrapping things up with a few companies and in process with a few more. I promise to keep you in the loop, and I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor when a recruiter provides you a salary range and asks you to comment on it, at the beginning of the process:Thank you for sharing that with me. Right now I don’t know enough about the opportunity to value it concretely, and I honestly haven't done my market research. If you end up making me an offer, I would be more than happy to iterate on it if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor when a recruiter provides you a salary range and asks you to comment on it, at the end of the process:Thank you for sharing that with me. I haven't done my research, so I am unable to comment on that range. However, if you do make me an offer, I promise to iterate on it if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\n## Conclusion\n\nI said it in the beginning, and I’ll say it again. Negotiation isn’t about saying the right thing. It’s about laying a foundation: not revealing anything until you’re ready to negotiate, not negotiating too early, and making sure that you’ve set yourself up to have multiple offers.\n\nThen, once those offers come in, you swoop in with sharp precision, negotiate once (possibly with just your top choice company), and be done with it.\n\nIf you’ve set yourself up for success, done the foundational work, and haven’t made the mistakes in this post, the negotiation will feel like a foregone conclusion.\n\nIf you need some hands-on help navigating salary negotiation,sign up for our salary negotiation package. You don't pay anything unless you get more, and we’ll be with you every step of the way, for every recruiter call, every email you need ghostwritten, and every strategy discussion. Unlimited sessions, unlimited help, whatever we need to do to get you results.\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Generate Parentheses\n\n### Build a Max Heap From an Array\n\n### K Closest Points To Origin",
      "source_url": "https://interviewing.io/blog/sabotage-salary-negotiation-before-even-start",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.",
      "content": "# How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.\n\nInpart 1 of this post, we talked about which channels are most effective for getting in the door and did an analysis of those channels along two axes: effectiveness and how much control you actually have. Here’s a quick summary.\n\nIn the quadrant above, you can see that while getting contacted by an in-house recruiter is very effective, whether you get contacted or not is largely out of your hands. The channel that maximizes both effectiveness and control is cold outreach to hiring managers (not recruiters!) “done right”. What does “done right” mean? That’s what we’ll talk about in this post (part 2 of 2). Most people do this type of outreach incorrectly. Here, we’ll get very tactical and tell you exactly what to say and do to reach out to hiring managers at the companies you’re interested in and actually get responses.\n\nHere’s our recommended, hyper-practical approach.\n\n## Prerequisites/tooling\n\n• Buy a month or two of LinkedIn Sales Navigator. This will run you a few hundred dollars, but it’s worth it.\n\n• Get an account with an email discovery tool likeRocketReach(an excellent email discovery tool).\n\n• GetStreak, which lets you do mail merges in Gmail. You create an email template, with variables for everything from recipient name to long snippets of personalized text, and then you upload a CSV with all the values. The resulting emails feel personalized but get sent to hundreds of people at once.\n\n## Treat your job search like a sales funnel\n\nIf you’re an engineer, chances are you haven’t ever done sales (maybe you had a job in high school selling Cutco knives or magazines, in which case what we’re about to say will resonate). But if you do sales for any appreciable amount of time, you’ll start thinking about everything in life as a funnel.\n\nFunnels are wide at the top and narrow at the bottom. That’s why they’re such an apt metaphor for the sales process — you do a lot of outreach, and you don’t get many responses. Of the responses you do get, relatively few will do the thing you want them to do. And even fewer will ultimately “close” (aka, buying — or, in this case, hiring).\n\nIn your engineering career, you’ve intellectually mastered many abstract concepts that are much more complex than a funnel. Despite its simplicity, however, the funnel is one of the hardest concepts to internalize emotionally, especially for people who are used to having control over outcomes. When you write code fornhours, you can expect that you will buildmfeatures.\n\nIn sales though, you do a lot of work, very little of it will pan out, and when it does pan out, it can feel almost random; an impersonal, mediocre email gets a response while your beautifully targeted email is met with deafening silence.\n\nAnd then there’s rejection. When you apply to jobs online and don’t hear back, it stings, but the sting is softened by the possibility that a human never even saw your application. You’re not reaching out to people when you apply online; you’re dealing with a bureaucratic machine.\n\nOn the other hand, when you email a real human and they don’t respond, that hurts: you put yourself out there, someone made a value judgment about you, and you lost.\n\nThe good news is that, after a while, the pain lessens, and you build up some useful emotional calluses and acquire the thousand-yard stare of someone who’s been rejected a million times for a million reasons, ranging from soul-crushingly legitimate to incontrovertibly random.Sadly, there’s no shortcut. You’ve got to do the reps, you’ve got to get the rejections, and you’ve got to pick yourself up again. You get used to it, and then it doesn’t hurt as much, because experience has taught you that if you keep going, you will eventually get to a yes.\n\n## What to actually do\n\nFirst, come up with a target list of companies.How to do that is out of scope for this post, but we may write about it in the future. For now, we’ll assume you have a list.\n\nOnce you have your list of companies, use LinkedIn Sales Navigator to find hiring managers at those companies (or founders or directors or VPs, as above). Below is an example query where we look for Google hiring managers.\n\nYou might think that Google is so big that sifting through all their various hiring managers will be intractable. Fortunately, you can whittle down the list to a pretty manageable size by applying some filters.\n\nHere are our filters:\n\n• Just targeting managers, not directors or VPs. Google is a huge organization. You want the people who are most likely to help, and they’re the ones who are struggling to hire for their teams.\n\n• In position for less than 2 years:These are the people who are still trying to prove themselves and who are less likely to have a long-standing relationship with their recruiter to the point where they only rely on internal recruiting and overlook other sources of candidates.\n\n• Geography:Let's focus on the places we most want to work.\n\n• 1st- or 2nd-degree connection:This way, when they look you up, they’ll see some social proof. You can expand this to 3rd-degree connections, if needed.\n\nOnce you have your list, put their LinkedIn URLs into a spreadsheet. Then, do a pass through your targets’ profiles and see if any of them link to personal websites, social media accounts, blogs, or anything else that will help you find common ground with them.Add any useful links in your spreadsheet because we’ll be mining them when we actually write our emails.\n\n### Look up their email addresses\n\nOnce you have your list of LinkedIn URLs, use a tool like RocketReach to look up their emails.\n\nWhy not reach out on LinkedIn? While recruiters live on LinkedIn, managers generally do not. Possibly, they don't even like or check LinkedIn much. They live in their emails, so that's where you want to target them.\n\nRocketReach is a nice tool for email discovery because 1) it takes LinkedIn URLs as inputs and 2) its email database is generally up-to-date and correct.1\n\nIf RocketReach fails or you don't wish to pay for it, you might just be able to guess their email address, as email addresses tend to follow common forms:aline@interviewing.io(my actual email address),alerner@interviewing.io, oraline.lerner@interviewing.io.\n\nWhere possible, contact managers via their work email address.2In some cases, you won’t be able to find their work email, in which case it’s acceptable to fall back to their personal email.\n\n### Write succinct, highly personalized emails\n\nNext, compose a fairly personalized, yet short, email.All too often, candidates write a long, generic cover letter that’s obviously been sent to a ton of people. I get many emails that look like this:\n\nDon’t do this!\n\nDon’t do this either! There is nothing here about why this candidate is a good fit for interviewing.io, and the bullets aren’t compelling enough on their own. Note that this particular email is from a marketer, not an engineer, but the anti-patterns are the same.\n\nEmails like the above are impersonal, but worst of all, they have a poor signal-to-noise ratio — I want to find a reason to say yes and to invest my valuable time into this person. But they’re not giving me one, and they’re making me work for it in the process.\n\n• Don't open email with how they found you.This is a big pet peeve of ours. I don’t care how you found me! I know I’m on LinkedIn. What I care about is why talking to you will add value for me or why you’re interesting. Use the most significant real estate in the email, the first sentence, to tell me that!\n\n• Don't be overly formal in how you address the person. Use their first name.\n\n• Don't get their gender wrong(e.g., referring to a woman as \"sir\" — you’d be surprised how often this happens).\n\n• Don't paste in a generic cover letter.These are sure to get ignored immediately — if you’re not going to put in the effort to write to me personally, why would I put in the effort to read your email?\n\n• Don't forget to include a link to a LinkedIn or a personal website.We don’t recommend attaching your resume, though. It can seem overly formal/somewhat presumptuous if you're trying to build rapport.\n\nMore broadly, if you want someone to go out on a limb for you, make it dead simple for them to justify expending their social/political capital on you. Hiring managers, as a rule, want to help. Make it a no-brainer for them.\n\nThere are three components to a great cold email:\n\n• Common ground with your target\n\n• Proof that you’re worthy of their time\n\n• A strong call to action\n\nNot every cold email will have (1) because you won’t always be able to find common ground with everyone — there’s simply not enough information out there about some targets to be able to craft a compelling narrative that’s highly personalized to them.\n\nBut every cold email you write should have (2). It is your job to sell yourself quickly and succinctly. You want your target to feel like they’d be an idiot to pass up the chance to talk to you.\n\n#### Finding common ground\n\nThe email below is personal, succinct, and finds common ground. Not only that, but it conveniently finds common ground thatbenefits the candidate(a soft-spot for non-traditional candidates, like himself!).\n\nTo find common ground, reference something your target cares about. Then either show them that you care about it too or that helping you would fit into their worldview and further that cause.\n\nAs we mentioned above, finding common ground may be tough because there might not be enough information available about your target, but it’s important to do the work before you give up on this route — finding common ground is the tactic that’s going to get you the highest response rates.\n\nHere are some examples of great ways to build common ground:\n\n• Reference a project they worked on (maybe they wrote a blog post about it, mentioned it in a comment on Hacker News, or are a contributor to some open source project). Then…If possible, talk about relevant work you’ve done. It’s important not to make this connection too tenuous. If you do, this approach might backfire because they’ll start to get excited about you, only to be let down and ultimately feel tricked.If you do not have relevant work to share, ask a thoughtful question or two about theirs.\n\n• If possible, talk about relevant work you’ve done. It’s important not to make this connection too tenuous. If you do, this approach might backfire because they’ll start to get excited about you, only to be let down and ultimately feel tricked.\n\n• If you do not have relevant work to share, ask a thoughtful question or two about theirs.\n\n• Reference a controversial point of view that they hold, and affirm it in an authentic way.\n\n• In the absence of something technical, it’s okay to reference something non-technical you've seen on their public profiles. We've seen candidates connect with strangers based on a shared love of Star Wars or Hearthstone.\n\nWe understand that you won't always be able to find common ground. But if you can, it'll help you a lot, especially if you’re light on social proof or accomplishments.\n\n#### Selling yourself\n\nSelling yourself is usually about one of two things:\n\n• Accomplishments: What have you built or created?\n\n• Social proof: Have you worked at a top company or attended a top school?\n\nSome people are fortunate enough to have both, but many will have just one. That’s okay. We’ll work with what you have!\n\n#### Accomplishments\n\nWhat have you done that most other people haven’t? What have you done that, if you were to tell it to a stranger, would cause them to pause and think you're special or interesting?\n\nBelow are some examples:\n\n• You’ve had a blog post about a technical topic or a personal project do well3on Hacker News, Reddit, or social media.\n\n• Something you built at work got some great press when your company announced its last funding round.\n\n• You refactored a piece of code at work, and now it runs 100X faster.\n\n• You won a company hackathon.\n\n• You’re a core contributor to a notable open-source project.\n\n• Something you built is being used by a number of other people.\n\n#### Social proof\n\nSocial proof is more about your pedigree. If you attended a top school or worked at a company known for having a high engineering bar, you should absolutely mention it!People won't click on links or open your resume untilafterthey're interested, so you need to get them interested right away. That is: you should spoon feed them the most impressive-sounding things about you out of the gate. This may feel strange and uncomfortable, like you’re bragging. We assure you, however, that it’s necessary to get your target’s attention. They’re not thinking you’re bragging. They’re thinking, “Is this worth my time?” Your job is to convince them that it is.\n\nAlso, don’t forget to link to your LinkedIn or personal website. Attaching a resume may feel too heavy-handed for a first conversation, as we discussed above.\n\nHere's an example of a prospective intern, leveraging both social proof and accomplishments, to write a compelling email. His email isn't super personalized, but he did make some effort to say that what we do at interviewing.io is important.\n\n#### Formulating a strong call to action\n\nA call to action is an invitation for the recipient to do something. You can go one of two ways with your call to action: ask for a job interview or start a conversation.Which you do should be a function of how much firepower you have in the way of social proof and accomplishments. It’s not fair, but if you can get your target’s attention with one or both of those, being bold and asking for a job interview makes sense. This approach can be effective, but it won’t work for most people… because most people don’t have enough social proof or accomplishments to justify this type of request.\n\nIf you can’t leverage social proof or accomplishments, you’re going to have to work harder and bank entirely on building common ground, which will likely take some time and effort and involve a live conversation before they’re convinced to expend their social capital on you.\n\nIf you’re asking for an interview, just come right out and say it. You can use the intern candidate’s email from earlier as a guide. However, this isn’t our preferred way to do it, and we really recommend starting a conversation instead.\n\nTake a look at the email below.\n\nIn this email, the candidate doesn’t ask me about jobs — he just asks to meet to discuss a topic. Indeed, he’s done his research. I write atonabout judging resumes, and it’s a topic I could go on about for hours if you’ll let me. His email read like he’s genuinely interested in the subject and that we’d have a good conversation, so of course I responded. You’d be surprised how rare emails like this are. If you can find the topic your target cares about and write something that shows earnest, genuine interest, they’ll respond.\n\nWith these emails, you’re asking for a conversation, not a job interview… because the conversation is what will hopefully prove to the hiring manager that you’re worth interviewing.Then, once you have a conversation, the hiring manager will walk away with the impression that you’re a competent, thoughtful human being who’s interested in this sort of work. From there, getting a job interview will feel like an afterthought.\n\nAs such, don’t talk about jobs at all in this type of email, and in this particular case, don’t attach your resume — that will feel out of place and transactional. You can and should link to your LinkedIn so they know who you are and have some context. But spend the bulk of the email building common ground and coming up with an interesting reason for the two of you to talk.\n\nThis approach is much more effective than asking for an interview out of the gate!You’re not going to land a job from one email, so, as with any seemingly insurmountable goal, it’s important to think of your outreach as a series of steps where you put one foot in front of the other. Like in sales, all you need is to get to a conversation.\n\nIf your call to action is to set up a time to talk (which it probably should be because it’s specific), we recommend providing them with a time window. \"Would you want to meet up sometime?\" puts the burden on the recipient to pose a time, while \"Can we talk next Monday at 3pm?\" is problematic because, most likely, they aren't free then. Instead, try something like the candidate above did: \"Would you be available sometime within the next two weeks for a thirty-minute call? I'm free most weekdays between X and Y and can pretty much do any time on weekends if those are better for you.\"\n\n## Two templates for you to use\n\nBelow are two templates you can use for cold outreach. The first one is ideal but requires more effort and can't always be used. The second one is weaker but more generic.You can choose what fits your needs best. We expect both of these templates to be far more effective than throwing your resume into the blackhole of online portals.\n\n### Template #1: Use this template if your target has an online presence\n\nThis template includes common ground, accomplishments/social proof, and a call to action. It will get you the highest response rates, possibly anywhere from 25-50%. However, it can be challenging to use because it requires you to 1) do a deep dive into their online presence and 2) tie what you find back to something you’re doing. Sometimes, that tie-in might be tenuous or non-existent (in which case, maybe skip it).\n\nHey {Their First Name},\n\nI’ve read your work on {insert some details about their writing}, and I {insert your thoughts on the work}.\n\n{If you can make the connection between their work and yours, talk about something similar you’ve been working on.}\n\n{If you cannot, ask them a specific, thoughtful question about your work. Don’t worry about making it “the perfect question” like you might when you attend a talk and want to sound smart. Any earnest question will do. You don’t have to use this as a chance to show off!}\n\n{Finally, close with a sentence or two about you, if you have some social proof or impressive accomplishments you can share.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that’s great. If not, a LinkedIn will do.}\n\nNote that in this template, we leave some places for you to insert some social proof and your accomplishments. Even though this email is primarily about them and their work, and your references to yourself are primarily through that lens, it never hurts to drop in a few pieces of evidence that you’re someone who’s accomplished things and/or someone who looks good on paper.\n\n### Template #2: Use this template if you don’t have anything except a LinkedIn profile for your target\n\nThe reality is that you won’t always have enough information about your target to find common ground. In this case, you’ll lead with accomplishments/social proof and a strong call to action. We expect this template will get you response rates anywhere from 5-25%, depending on the strength of your achievements and pedigree. That said, we recommend treating this template as a last resort. Using it means you’ve exhausted any possibility of writing something personal.\n\nHey {Their First Name},\n\n{List 2 things about you. They can be impressive accomplishments of yours or social proof, as above.}\n\nI’m really interested in the work you’re doing at {Company Name}. {If you know what team they’re on and are interested in that specific team or are familiar with that team’s accomplishments, great! If not, just write a few earnest sentences about why the company is interesting to you.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that’s great. If not, a LinkedIn will do.}\n\nKeep your note short. The intent here is to make your target believe you’re an entity worth paying attention to, rather than them doing the easy thing: deleting your email.\n\nRegardless of which template you use, just like you have to manage your psychology when you prepare for technical interviews, you have to manage your psychology when doing outreach like this. You have to:\n\n• Mentally prepare yourself for the slog of writing personalized emails and doing the requisite research.\n\n• Get used to rejection. If you do write good emails and target the right people, you’ll have a much better hit rate than when you apply online, but you will still get ghosted a lot, and it will sting much more because, this time, you actually tried. But you know what? If you stick with it and do this right, within a few months, you’ll have a connection to a top-tier company.\n\nNow that you’ve girded your proverbial loins, it’s time to do the work. If you follow our advice, you’ll get 1-2 orders of magnitude more responses than from applying online, and with this approach, you’ll have at least a hiring manager at that company rooting for you!\n\nFootnotes:\n\n• RocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we’ve found that it’s not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.↩\n\nRocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we’ve found that it’s not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.↩\n\n• Recruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.↩\n\nRecruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.↩\n\n• Many people think that for something to be worth mentioning, it has to have gone viral. That’s simply not correct — in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.↩\n\nMany people think that for something to be worth mentioning, it has to have gone viral. That’s simply not correct — in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Decode String\n\n### Simplify Path\n\n### Lucky Numbers in a Matrix",
      "source_url": "https://interviewing.io/blog/how-to-get-in-the-door-at-top-companies-cold-out-reach-to-hiring-managers-part-2",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "It's OK to postpone your interviews if you're not ready",
      "content": "• For employers\n\n• Gift mock interviews\n\n# It's OK to postpone your interviews if you're not ready\n\nAt interviewing.io, we’ve seen hundreds of thousands of engineers go through job searches, and the biggest mistakes we see people make are all variations on the same theme: not postponing their interview when they aren’t ready.\n\nI’ve found myself repeating that it’s OK to postpone interviews so often that I finally broke down and decided to make it a blog post. It’s very simple advice, so the bulk of this post will be spent trying to convince you that it’s fine to postpone. And then of course I’ll tell you what to say.\n\nDo any of these situations sound familiar?\n\n• A recruiter from a FAANG (or other top-tier) company contacts you out of the blue and invites you to interview. You do the recruiter call, and it goes well. The recruiter reaches out to schedule your technical phone screen. You haven’t practiced enough, and you know it, but you are scared to tell the recruiter that you want to postpone the interview by a few months (months?!) because the position may no longer be there. So, you plow ahead, do the phone screen, fail it, and then you’re frozen out for a year.\n\n• You were able to postpone your technical phone screen and take the time to study up on data structures & algorithms problems. You do well in the interview. But then your recruiter schedules your onsite the following week. Because you were so focused on DS&A prep, you haven’t had much time to study up on system design. You fumble the system design interview during the onsite, and you either get rejected or get down-leveled.\n\nBoth of these situations are extremely common, but they’re both preventable. You can just ask to postpone. There are a few edge cases where that’s not a good idea, but in most situations, it’s the right thing to do.\n\n## When postponing is OK, and when youshouldn’ttake our advice\n\nIf you’re applying to a large company with a centralized process (in other words, a process where you interview first and get matched with a team later), postponing is almost always OK. These companies are perpetually hiring, and their open roles are evergreen.1\n\nEven if you’re applying to a large company with a decentralized process (where you interview for a specific team), we recommend postponing unless you’re extremely excited about the team you’re talking to. In that scenario, it’s possible that if you postpone, the slot will be filled. But if it’s not a perfect fit and you’d be OK with another team, we recommend postponing — in the worst case, you’ll simply get slotted into a different team.\n\nThe only time when postponing isn’t a good idea is when you’re applying to a very small company that has just one open headcount. In that scenario, it is possible that postponing will cost you the opportunity because they’ll choose another candidate. However, you can ask how likely that is to happen, up front.\n\nWith that edge case out of the way, here’s a little-known fact about how timing works at large companies: Recruiters don’t really care when you interview. Though they’d prefer that you interview sooner rather than later so they can hit their numbers, at the end of the day, they’d rather be responsible for successful candidates than unsuccessful ones.\n\nEvery recruiter, in every job search, will tell you that time is of the essence because of all the other candidates in the pipeline. Most of the time, that is irrelevant and just something they say to create an artificial sense of urgency. There are always other candidates in the pipeline because the roles are evergreen. But they have nothing to do with your prospects.\n\n## Exactly what to say to postpone your interviews\n\nYou can use this text verbatim when postponing your interviews, and, with some small edits, you can even use it several times (e.g., before the phone screen and then again before the onsite).\n\n> I’m really excited about interviewing at [company name]. Unfortunately, if I’m honest, I haven’t had a chance to practice as much as I’d like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I’ll realistically need a couple of months to prepare. How about we schedule my interview for [date]?\n\nI’m really excited about interviewing at [company name]. Unfortunately, if I’m honest, I haven’t had a chance to practice as much as I’d like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I’ll realistically need a couple of months to prepare. How about we schedule my interview for [date]?\n\nOne important thing to remember is to be conservative about how long it will take. You’ve probably heard the adage about how, when you have to estimate the time an engineering task will take, you should think of a number and double it. Here, you may even want to triple it.\n\nI’ve seen many candidates ask for 2 weeks because that feels like a reasonable thing to ask for, only to have it blow up in their face when they realize they need to ask for another extension (which is still worth doing but harder because the company may think you’re taking them for a ride). If you need two months, ask for two months.\n\n## Postponing can also be a good way to control the timing of your job search\n\nThis section is extra credit, but once you get comfortable with postponing your interviews when you’re not prepared, you can use the same skills to batch your interviews and ultimately control the timing of your job search.\n\nWhat does it mean to control the timing of your job search? Ideally, you want all of your offers to come in at the same time, both because it maximizes optionality (one company that arbitrarily offers first doesn’t rush you into making a decision) and maximizes leverage (you can negotiate from a position of power).\n\nIf you want to dive deeper into this process, take a look at a book I recently co-wrote,Beyond Cracking the Coding Interview. It includes a full chapter about how to manage your job search, which covers everything from determining the order in which to approach companies to how to speed them up and slow them down once you’re in process. There’s a lot more detail than I can touch in this post, and much of it depends on your specific circumstances, but you can probably get 50% of the way there just by postponing your interviews in batches.\n\nThe big insight here is that, except for the edge cases we discussed above, a recruiting process can be paused at any point.\n\nIn other words, you can do a bunch of outreach to companies, then do a bunch of enthusiastic recruiter calls, and THEN pause all the processes until you’re prepared to do technical phone screens.\n\nThen, you batch the phone screens.\n\nFinally, if needed, you pause again to give yourself time to prepare for onsites. Onsite interviews require a different skill set than technical phone screens. The technical phone screen isn’t about depth or fit — it’s just a way to cut people who aren’t likely to pass the onsite.\n\nThe onsite, on the other hand, isn’t just meant to cut poor performers. It’s at once a deeper dive into your technical ability and a way to gauge fit. If you’ll be interviewing with your future team (typical at companies with a decentralized process), it’s also meant to assess your ability to work together, collaborate on hard things, complement the team's existing skillset, and so on. It usually has some coding (to verify that your technical phone screen wasn’t a fluke), but the focus is usually on system design and behavioral interviews2, which are also the interviews commonly used for leveling decisions.\n\nSo, onsite prep is much more about system design and getting your stories right for your behavioral interviews. Some people can pull off prepping for both coding and sys design/behavioral at the same time. For many, depending on their existing familiarity with the material, it’s a tall order. So, it’s wise to take the time you need and prepare.\n\nThen, once you’re ready, you batch the onsites.\n\nWhen your offers come in, you should ask for extensions as needed, speed companies up, and startnegotiating(which we’ve written about in the past and which, of course, is covered at great depth in the book).\n\nFootnotes:\n\n• Yes, it’s true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you’d have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze.↩\n\nYes, it’s true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you’d have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze.↩\n\n• Some companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.↩\n\nSome companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Copy List With Random Pointers\n\n### Maximum Subarray\n\n### Fruit into Baskets\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/its-ok-to-postpone-your-interviews-if-youre-not-ready",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "The unwritten rules (till now) of negotiating with Meta",
      "content": "# The unwritten rules (till now) of negotiating with Meta\n\nIf you don't like reading, here's me presenting the contents of this blog post in a video. Pick your poison.\n\nEDIT: This post is based on stories from users who were interviewing for E4-E6 SWE and MLE roles at Meta. Other, more specialized roles may have different processes than what's described here.\n\nEDIT 2: As of Q1 2025, it looks like Meta is sometimes foregoing team matching in favor of driving candidates to their Monetization org (which apparently has a lot of open headcount). If this happens to you, after you pass the hiring committee, instead of entering team matching, your recruiter will tell you that you’ve been assigned to this particular org and, if you proceed, you’ll just get an offer. You won’t get to talk to your future manager, and you’ll find out team details a week after you join. From what we know, it’s possible to insist on team matching instead, with the downside that it’ll take an unknown amount of time rather than certainty.\n\nWhy does this matter?\n\nIf you’re looking to use your Meta offer primarily as leverage with other companies, this is a great thing because you’ll get numbers quickly. If you’re seriously interested in Meta, then this could be good or bad and depends where you are in the process and how much you want to work on monetization versus other things/how much you want to meet your manager before you work for them.\n\nSo if you’re seriously interested in Meta, whether this is good or bad depends on where you are in the process. If you need them to move quickly, it’s great because you know you won’t be stuck in team matching. However, if you need them to slow down because you aren’t as far along with other companies or because you want to work in a different org, you may want to ask your recruiter to stick with the old team matching process. In our experience, it’s ok to ask this. Your recruiter may not tell you outright that that’s an option, but if you ask, they will probably do it. Of course, you may be stuck longer than you want. But at least then you will have more of a say in what you work on.\n\nAt interviewing.io, one of the services we offer our users is salary negotiation. Even though I’m the founder, I still do many of the sessions myself because they give me an invaluable insider’s perspective on what’s actually going on in the engineering market, what different companies’ offers look like, how companies extend offers, what kinds of deadlines they give, and how much they go up in compensation, under what circumstances.\n\nAccess to this kind of data is great because it helps me make better business decisions. But sometimes I see questionable patterns of behavior among companies. Recently, I’ve observed a string of practices at Meta that I find reprehensible, and that’s what this post is about. I’ve seen the same practices with enough candidates, and across enough different titles and positions, that it’s become clear to me that they are not isolated incidents or a rogue recruiter’s doing but rather a consistent implementation of a deliberate strategy that comes from the top.\n\nI’m writing about this for two reasons. First, if you’re negotiating with Meta, you need to know how they operate and understand the unwritten rules of the game. If you do not know the rules, you will fail — long before you even start negotiating.\n\nSecond, I’m hoping that someone at Meta sees this post and that maybe it’ll spark an internal discussion about changing the rules.\n\nLastly, if you’re about to interview there or are interviewing there already, pleaseread our free, long-form guide to their interview process and questions.\n\n## Meta basically has a monopoly on FAANG hiring right now\n\nI mentioned above that we do salary negotiation, but our main business is mock interviews. We offer anonymous mock interviews in the style of a bunch of different companies (mostly FAANGs). This means we know how many people are practicing for interviews at Google vs. Meta vs. other FAANGs, and that lets us guess (pretty accurately) how much hiring is actually happening at these companies.\n\nYou can read in way more detail about how all the FAANGs are doing in ourrecent blog post where we made 2024 predictionsbased on our proprietary data. But while I was writing that post, I noticed something odd. Meta was hiring way more engineers than any of the other FAANGs. In fact, Meta hiring is up more than 10X since January of last year.You can see that more recently Amazon has picked up a bit, but it’s very recent and not enough to drive major change in other companies’ behaviors (at least not yet). And, yes, Netflix is hiring too, but Meta’s eng team is more than 10X the size of Netflix’s, so in the absolute, Netflix’s hiring volume isn’t enough to balance Meta out. For all intents and purposes, Meta’s the only FAANG that’s really hiring at scale — and they’re currently getting away with treating candidates really poorly as a result.\n\n## How Meta negotiates, given their effective monopoly on eng hiring\n\nHere’s how Meta runs their hiring process. These practices have been consistent across every negotiation client we’ve had in the past 6 months or so.\n\nMeta’s hiring is centralized, which means that you enter one big interview process that’s completely divorced from which team you might end up on and you interview with people whom you might never work with again. If you do well, there will be a team matching component after you pass the onsite but before you get an offer1. With that in mind, here’s how they run their process, once you get the green light.\n\n• Team matching. This can take days or weeks, depending on how many teams you speak to and how many conversations you have with the people on each team. You'll speak with hiring managers to gauge fit and chemistry, and if you’d like, you can also talk to peers. We've heard that sometimes you get the chance to talk to a handful of teams, and sometimes it's over 10. After your team-matching conversations, your recruiter will ask you to choose a team. In order to move forward, both you and the hiring manager have to opt in2.\n\n• Likely down-level you. Sometime during team matching, you’ll probably find out that you’ve been down-leveled. Often, your recruiter will cite your performance in the system design portion (and sometimes the behavioral portion). According to a recent survey we did, something like 55% of Meta candidates get down-leveled (more likely for generalist SWE roles, less likely for more niche roles like ML).\n\n• Make a lowball offer with just a few days to make a decision. Once you’re done with team matching, things get dicey. Your recruiter will make you a lowball offer that’s often $50k or more (!!) below the average TC on levels.fyi. Moreover, you usually just get a couple of days to make a decision. If you were down-leveled, your lowball offer may include a small signing bonus as a consolation prize.\n\n• Refuse to negotiate unless you can show them other offers from comparable companies. Your recruiter will say something like, “If you’d like to increase your offer, I can take this to the compensation committee, but I need a compelling reason [i.e., another offer].\"\n\n• If you have other offers, they will apologize for the lowball offer, citing that it’s “automatic numbers from our computer” and raise the numbers by $100K or more (in first year’s TC). If you do not, you will be stuck with a lowball offer, though you may be able to negotiate a small signing bonus if the offer didn’t come with one already.\n\n## How to negotiate with Meta\n\nBelow are the steps for negotiating with Meta in a hard climate where they have a monopoly on hiring. We hope that most of these won’t be necessary in the future. They are:\n\n• Don’t share anything with your recruiter\n\n• Make sure you have other offers\n\n• Slow-play team matching\n\n• Build rapport with every hiring manager you talk to\n\n• Actually negotiate (this is the easy part)\n\n### Don’t share anything with your recruiter\n\nWe wrote a whole post about how to avoid sharing information with your recruiter and why this is so vital. If you share where you’re interviewing or how far along you are, or if you start negotiating prematurely, the strategies below won’t work.\n\nPleaseread our post on not shooting yourself in the foot during negotiationsbefore you continue!\n\nYou should also be aware of a few tricks specific to Meta recruiters. If you're not forthcoming about where else you're interviewing, they may say a few sneaky things.\n\nFirst, they may say something like, \"Well, we just want to know where you're interviewing so we can intro you to others who interviewed at those companies but ultimately chose Meta.\" Don't fall for that early in the process. It's a trap to get information out of you. You can always ask for those intros later, when you're negotiating and it's the right time information about your other offers.\n\nThe other thing they do is fish, saying something like, \"Well, in case you're interviewing at {Google, Netflix, some other big company they don't want to lose candidates to}, just so you know, they move kind of slowly, so we may not be able to wait.\" There, the Meta recruiter's goal is to get you to say, \"Oh, no, don't worry, I'm not interviewing at Google!\"\n\nNow, you've lost leverage in their eyes because that's one less competitive company they might lose you to... and they'll be more confident about lowballing you later on.\n\n### Make sure you have other offers\n\nAs you may have guessed from reading the previous section, it’s critical to have other offers, and not just any offers but ones from top-tier companies who pay very competitively3.\n\nWe realize that saying “have other offers” doesn’t capture the blood, sweat, and tears that go into months of interview prep, applications, emails, recruiter calls, and interviews. We know it’s hard, but as you’ll see, it makes a huge difference in your compensation.\n\nGetting those offers doesn’t start when you’ve received your Meta offer. It starts months before. Make sure that you get enough initial conversations with other FAANGs, FAANG-adjacent companies, and late-stage sexy startups to end up with at least one other offer, ideally at least two. Depending on your interview performance, this might be anywhere from 4 to 10 initial conversations.4\n\n### Slow-play team matching\n\nHaving your offers come in around the same time is critical forany negotiation, but it’s especially important with Meta because they take such a hard line — without other offers, they will not meaningfully budge.\n\nObviously, you’ll want to start your conversations with other companies well in advance of your Meta interviews and do everything you can to make sure they all come in at the same time. However, even with your best efforts, it’s not guaranteed that your timing will match up.Here’s how to make sure that your offers come in at the same time: slow-play Meta’s team-matching process.\n\nTeam matching is actually the part of your Meta journey where you have the most leverage and power. Why leverage? At this point, they know they want you, but they can’t yet hold an offer deadline over you. We’ve already mentioned that once they make the offer, your recruiter is going to push very hard to have you accept, often giving you a deadline of something like two days. In your recruiter’s eyes, you’re a ticking time bomb, where for every day you don’t sign, the deal loses momentum, and your odds of signing drop off. Recruiters are also evaluated on how many candidates they close, so it’s in their interest to create a false sense of scarcity in order to rush you and to use high-pressure sales tactics to get you to seal the deal.\n\nAnd what power do you have? It turns out you can really control how long team matching takes, within reason. If you’re still wrapping phone screens with other companies, slow-playing is the best thing you can do. Here’s how to do it.\n\nWe’ve recently heard that Meta is now insisting that hiring manager conversations happen in series, but even if Meta lets you talk to multiple hiring managers concurrently, try to serialize those conversations as much as possible. For instance, if you hear from your recruiter that you’re going to start team matching on a Monday, and they offer to set up some calls for Wednesday, ask to do the first call on a Friday and the next call the following Tuesday.\nWhen we advise our users to do this, we often get pushback because they’re worried that slowing things down will make them look disinterested/not serious. We promise you that’s not the case. The biggest risk you run when you slow-play team matching scheduling like this is losing the chance to work on a specific team. If you find that your recruiter has proposed what seems like the perfect team for you, you can and should prioritize doing that call as soon as possible.\n\nIn addition to serializing your hiring manager conversations, for each team, ask to talk to a few individual contributors on teams that you’re serious about. This isn’t just a stalling tactic. These are the people you’ll be working closely with every day, and they’re the ones doing the job you may have in the future. They’re also less likely to do hard sells, and if you ask thoughtful questions, you’ll learn a lot about what to expect. We’re always surprised by how few candidates ask to speak to their future peers, out of a mistaken concern that asking for too much will make them look disinterested or unengaged.\nJust like with hiring manager calls, if you need to slow things down, we recommend scheduling calls with your peers a few days apart.\n\n### Situations where slow-playing may bite you, and how to know the difference\n\nWe have seen two instances when our advice about slow-playing could backfire. You probably remember when companies started to freeze hiring aggressively in mid-2022 — if you didn’t get matched before the ax came down, you were left out in the cold. Much more recently, we heard from some of our users that Meta put a pause on team matching for E4 roles (largely outside the Bay Area), and many candidates were stuck in a holding pattern (while Meta figured out headcount constraints, though it looks like it’s since been resolved, and picking back up in earnest. Slow-playing and then getting stuck is obviously an unfortunate situation, as is being on the wrong end of a hiring freeze, but these situations are rare, and in our humble opinion, not worth optimizing for — in most cases, you will not be dealing with an impending freeze or stalled matching. If you’re unsure about team supply or the state of hiring, you can do two things:\n\n• Always ask your recruiter up front to share the number of teams that candidates have had the chance to talk to, on average, recently.\n\n• Look at ourreal-time graph of FAANG hiring volume(as opposed to the graph above, which is a monthly snapshot). In this real-time graph, you can see what portion of our mock interview volume is dedicated to practice in the style of Meta, Amazon, and Google. Historically, our purchasing behavior has lined up very well with what’s actually going on in the market, and the rate of change in this graph should give you an idea of whether Meta is slowing down. As you can see, there was a dip in February (and one in December, but that almost always happens because hiring slows down over the holidays). If you see dips like these, you’ll want to make sure that you do (1) and ask your recruiter about the situation inside. You may also choose not to slow-play for too long.\n\nThere's one more situation where slow-playing may bite you. If you match with a team and really click well with the manager, to the point where you have your heart set on it, it may be wise to accept that team instead of trying to drag things out. We've heard of times where, even if the candidate asked the manager about open headcount and confirmed they didn't have to rush, the role got filled from under them (they were able to talk to other teams afterwards but missed the chance to be on that specific team). If a specific team feels irreplaceable to you and you'd be crushed if you didn't get it, then that may be more important than maximizing your negotiation.\n\n### Build rapport with every hiring manager you talk to\n\nOutside of using the team-matching process to control your timeline, there is one other important tactical piece of advice: Do your best to build rapport with hiring managers.\n\nAs we said above, recruiters are trying to close the deal. That’s their job. Hiring managers, on the other hand, are trying to lay the groundwork for a good working relationship with you. As a result, their interests are much more aligned with yours. Of course, they still want to close you, but it’s not worth it to them to employ high-pressure tactics, and it’s not something they’re trained in or comfortable with (in fact, many of them hated these tactics when they were on the other end of it while looking for work)5.\n\nAs such, hiring managers will generally be a lot more transparent with you about how much time you actually have to make a decision, and their answers will likely be very different from the ones you get from recruiters.\n\nWe’ve advised all of our Meta candidates to ask their prospective hiring managers about when they realistically have to make a decision by, and the differences between what the hiring manager has told them (“Take your time; you have a few weeks at least.”) and what their recruiter has told them (“We’re talking to a lot of candidates for that team. To ensure your spot, you should make a decision in the next few days.”) are stark.\n\nThere’s simply no downside to building rapport with hiring managers. At worst, you make a professional connection. At best, you get a head start on a great working relationship with your new boss.\n\nOne practical note: Always ask your hiring manager for their email address in case you have more questions later. This way, if your recruiter starts telling you that you need to make a decision by Friday, you can ping your hiring manager, explain that you’re still thinking, and ask if it’s OK to take a few more days. Almost always they will say yes.\n\n### Actually negotiate (this is the easy part)\n\nIf you’ve done everything else in this post, the negotiation is the easy part. By now, you’ve wrapped up team matching, chosen a team, and have likely gotten an aggressive offer deadline.\n\nYou have also not shared any offer details till now. As we said at the beginning of this post, the success of your strategy hinges on the recruiter not being aware of the other companies you’re interviewing with. This will be the first time they find out about it, and that will put them on their proverbial back foot.\n\nTo respond to the offer, you can send an email6that looks something like the below. The details will differ, and how much you reveal about the other offers will vary, but here’s the general idea.\n\nHey [Recruiter name],\n\nThank you so much for the offer, for working with me throughout this process, and for all your help with team matching.  I wanted to share some details with you. I currently have offers from {Company 1}, {Company 2}, and {Company 3}.\n\n{Company 1} has offered me a significantly higher base salary of $220k. {Company 2} has a comparable base but has offered me significantly more equity: $500k. I know {Company 2} is a startup, but they’re late stage and handing out RSUs. Those RSUs are as valuable to me as public company equity.\n\nFinally, {Company 3} has thrown in a meaningful signing bonus, and their performance bonus is actually at 25%, not 15%.\n\nI’m very excited about the opportunity to work at Meta and about the team. {Insert some authentic reasons why you’re excited about the company, the team, your new boss, etc.} It’d be great to see a meaningful increase in compensation to make my decision easier.\n\nThank you, and I look forward to hearing from you.\n\nIn the template above, I’ve assumed that not all of your offers are stronger than Meta’s across the board, which is why I’ve cherry-picked which pieces to share. Sometimes, if you’re lucky, you’ll have multiple offers that have a higher base, more equity, and a higher signing bonus. In that case, it’s less of a game of skill — just throw the numbers at them, and they’ll exceed the other offers without much prompting.\n\nIf you run this play, your recruiter will apologize for low-balling you, blaming the “computer” for giving them those numbers. Then, like clockwork, you will see a $50k to $150k jump in your offer (precisely how much depends on where your other offers are from and how strong they are).7\n\nNow, whether you take that offer is up to you.\n\nSome closing thoughts. I’m a capitalist. Meta’s behavior here is aggressively capitalistic, if short-sighted – once other FAANGs start meaningfully hiring again, and Meta employees figure out that there’s a $150k comp differential between people with the same job title, they’re going to pay the piper and likely see a bunch of attrition. Ultimately, the market will correct these practices. However, I also believe that individuals have the right and duty to be as informed as possible and to wield whatever weapons in their arsenal to advocate for themselves, rather than waiting on the mercy of slow, indifferent market forces.\n\nAs such, we hope this post has given you some ammunition in your negotiations and helped reduce the information asymmetry between you and Meta, a huge, aggressive player with basically a monopoly on eng hiring at the moment. And we hope that if anyone from Meta is reading this, it’ll spark some internal conversations about what’s right. And if they don’t, other FAANGs’ recruiters will swoop in soon enough.\n\nWant to know if you’re ready to interview at Meta? Do anonymous mock interviews with real Meta interviewers, and see exactly where you stack up.\n\n• How team matching works changed fairly recently. In the past, you’d get an offer before you matched with a team and do a 6-week “bootcamp” where you’d get up to speed on Meta’s tech stack, infrastructure, and systems, followed by a multi-week “speed dating”-esque team matching cycle. Bootcamp still exists, but now it's much shorter (2-4 weeks), and the focus is getting new engineers ramped up on generic tools. After that, new engineers continue to ramp up on their specific teams.↩\n\nHow team matching works changed fairly recently. In the past, you’d get an offer before you matched with a team and do a 6-week “bootcamp” where you’d get up to speed on Meta’s tech stack, infrastructure, and systems, followed by a multi-week “speed dating”-esque team matching cycle. Bootcamp still exists, but now it's much shorter (2-4 weeks), and the focus is getting new engineers ramped up on generic tools. After that, new engineers continue to ramp up on their specific teams.↩\n\n• We’ve recently heard that Meta may now be insisting that team matching conversations happen in serial, i.e., you can only do one at a time. However, this doesn’t meaningfully change our advice.↩\n\nWe’ve recently heard that Meta may now be insisting that team matching conversations happen in serial, i.e., you can only do one at a time. However, this doesn’t meaningfully change our advice.↩\n\n• You might say, “Aline, why can’t I just make up offers?” We could never, in good conscience, advise that. It’s unethical, and though I’d argue that while Meta’s negotiation practices are also unethical, that’s not the way to win. Outside of ethical considerations, while the risks of getting caught are low, they’re not zero. Lying about offers, in our mind, is the last refuge of the incompetent.↩\n\nYou might say, “Aline, why can’t I just make up offers?” We could never, in good conscience, advise that. It’s unethical, and though I’d argue that while Meta’s negotiation practices are also unethical, that’s not the way to win. Outside of ethical considerations, while the risks of getting caught are low, they’re not zero. Lying about offers, in our mind, is the last refuge of the incompetent.↩\n\n• The advice in this post is orthogonal from your career goals and what you want to work on. This blog post is about navigating an unfair system filled with opaque rules while maximizing your cash. It is not about self-actualization, though we’d argue that creating the most optionality for yourself helps with self-actualization as well. You can also talk to smaller companies and use your big-co offers as leverage to increase your startup equity. There’s nothing wrong with that, but more detail on optionality and self-actualization is outside the scope of this post.↩\n\nThe advice in this post is orthogonal from your career goals and what you want to work on. This blog post is about navigating an unfair system filled with opaque rules while maximizing your cash. It is not about self-actualization, though we’d argue that creating the most optionality for yourself helps with self-actualization as well. You can also talk to smaller companies and use your big-co offers as leverage to increase your startup equity. There’s nothing wrong with that, but more detail on optionality and self-actualization is outside the scope of this post.↩\n\n• Of course, some hiring managers will use high-pressure sales tactics or create false timelines to try to close you. But that’s the exception rather than the rule. You can decide if that’s something that you want to weigh when judging whether or not you want to work for them.↩\n\nOf course, some hiring managers will use high-pressure sales tactics or create false timelines to try to close you. But that’s the exception rather than the rule. You can decide if that’s something that you want to weigh when judging whether or not you want to work for them.↩\n\n• We strongly urge you to avoid negotiating over the phone and over text, whenever possible. Your recruiter does 5 of these calls a day. You might do one of these calls every few years. Do the hard part over email. It’s the best way to level the playing field.Read this postto learn how to avoid synchronous phone negotiations (just look for “phone”).↩\n\nWe strongly urge you to avoid negotiating over the phone and over text, whenever possible. Your recruiter does 5 of these calls a day. You might do one of these calls every few years. Do the hard part over email. It’s the best way to level the playing field.Read this postto learn how to avoid synchronous phone negotiations (just look for “phone”).↩\n\n• One advanced maneuver is to pit all your other companies against each other and raise up their initial offers BEFORE talking to Meta. We’ll likely write about how to run this play in a future post.↩\n\nOne advanced maneuver is to pit all your other companies against each other and raise up their initial offers BEFORE talking to Meta. We’ll likely write about how to run this play in a future post.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Design a Free Food App\n\n### Integer Replacement\n\n### Find the Missing Number in an Array",
      "source_url": "https://interviewing.io/blog/how-to-negotiate-with-meta",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Read nine chapters of Beyond Cracking the Coding Interview for free",
      "content": "• For employers\n\n• Gift mock interviews\n\n# Read nine chapters of Beyond Cracking the Coding Interview for free\n\nAlong with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I wrote the official sequel toCracking the Coding Interview. It's fittingly calledBeyond Cracking the Coding Interview..\n\nNow, we're releasing9 chapters of the book for free! There are two PDFs in the linked folder:\n\n• The first seven chapters of the book, covering topics such as why technical interviews are broken, what recruiters won't tell you, why not to spend a lot of time on resumes, and how to get in the door at companies without a referral.\n\n• Two technical chapters: Sliding Windows and Binary Search. Our new take on Binary Search teaches one template that works for every binary search problem on LeetCode, with only a single-line change you need to remember. The Sliding Windows chapter features 6 unique sliding window templates that make off-by-one errors a thing of the past.\n\nTake a look, and let me know what you think. You can reach me ataline@interviewing.io.\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Recover Binary Search Tree\n\n### Decode String\n\n### Integer Replacement\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/nine-free-chapters-of-beyond-cracking-the-coding-interview",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Are recruiters better than a coin flip at judging resumes? Here's the data.",
      "content": "# Are recruiters better than a coin flip at judging resumes? Here's the data.\n\nThis post is a very exciting first for interviewing.io because it’s about a proper experiment run by a real, live academic research lab. If you’ve been reading my work for the past decade, you know that I’ve always been something of an armchair researcher. I ran some experiments before starting interviewing.io, and since then, my team and I havekept it up.\n\nOne of the experiments I ran before I founded interviewing.io was an attempt to figure out how good recruiters were at judging candidate quality based on resumes. I ran it 10 years ago and discovered that not only was everyone bad at judging resumes (about as accurate as flipping a coin),they all disagreed with each other about what a good candidate looked like.\n\nEven though these results were shocking at the time, the study had some serious limitations. First, I had no objective measures for which candidates were actually good. I was working as a recruiter at the time, so I knew whom I had been able to place, but that’s obviously not the be-all and end-all of engineering ability. Second, I had a non-representative sample of software engineers. Due to my brand, I had managed to attract a lot of excellent, non-traditional candidates — engineers who were actually very good but didn’t look good on paper. These types of resumes are the hardest for recruiters to judge, and the data was full of them. Finally, my sample size wasn’t that big: I ended up with 716 data points in total, only about half of which came from recruiters (the rest came from engineers and hiring managers — my original hypothesis was that they might be better at the task, but I was wrong… everyone was bad at judging resumes).\n\nSo, now that I’m CEO of interviewing.io, with access to a lot more data, resources, and a team of excellent academics atLearning Collider, we decided to run this study again, but with a more rigorous treatment and better conditions, to see if we could replicate the results. This time, we focused just on recruiters, given that they’re most often the gatekeepers who decide which candidates get an interview.\n\nBelow are all the details, but here’s the TL;DR: we reproduced my results from 10 years ago! Our new study showed that recruiters were only a bit better than a coin flip at making value judgments, and they still all disagreed with each other about what a good candidate looks like.\n\nIn this piece, we also talk about:\n\n• How far off recruiters were in their predictions and how much they disagreed with each other\n\n• What recruiters say they look for vs. what the data shows they actually look for\n\n• Why recruiters taking more time to parse resumes would lead to better outcomes (median parse time is just 31 seconds)\n\n• Whether AI can do a better job at judging resumes (spoiler: yes, it can)\n\nThe rest of this piece is co-authored by Peter Bergman, Tushar Kundu, and Kadeem Noray of Learning Collider.\n\nIn the real world, resumes (or LinkedIn profiles) are evaluated by recruiters in minutes — even seconds — and these evaluations are THE thing that determines who gets an interview.\n\nBut what do these word walls tell recruiters? How predictive are their evaluations of actual interview success? Ultimately, how good are recruiters at judging resumes?\n\nTo answer these questions, we designed a study approximating technical recruiters’ decisions in the real world. We asked176 technical recruiters (both agency and in-house) to review and make judgments about 30 engineers’ resumes each, just as they would in their current roles.\n\nThey answered two questions per resume:\n\n• Would you interview this candidate?2(Yes or No)\n\n• What is the likelihood this candidate will pass the technical interview (as a percentage)?\n\nWe ended up with nearly 2,200 evaluations of over 1,000 resumes.\n\nThe resumes in this study belonged to interviewing.io users (with their consent) — actual engineers currently on the job market.\n\nCollaborating on this study with interviewing.io is an ideal scenario, precisely because outcome data were available for comparison purposes. Each engineer in this study has completed multiple mock interviews on the platform. Performance in these interviews is quite predictive of performance in real interviews: top performers (roughly the top 5% of users) on interviewing.io are 3X more likely to pass technical interviews at top-tier companies than candidates from other sources. Even passing a single interview on interviewing.io is a strong predictor of outcomes; it's associated with a 32% increase in the chance of working at a FAANG company post-interview.\n\nOnce we had recruiters’ evaluations of the resumes, we compared them to how those engineers actually performed on interviewing.io: skills scores, feedback from interviewers, and ultimately, whether they passed or failed their mock interviews.\n\n## Recruiters’ resume judgments are just slightly better than a coin flip\n\n### Question #1: Would you interview this candidate?\n\nIn aggregate, recruiters in the study recommended 62% of candidates for an interview. But how did recruiter evaluations stack up against candidates’ performance on the platform?\n\nWe calculated recruiter accuracy by treating each candidate’s first interview (pass/fail) as the truth, and recruiters’ decision to interview as a prediction. It turns out that recruiters chose correctly 55% of the time, which is just slightly better than a coin flip.\n\n### Question #2: What is the likelihood this candidate will pass the technical interview?\n\nRecruiters predicted the likelihood that each candidate would pass the technical interview. In most hiring processes, the technical interview follows the recruiter call and determines whether candidates proceed to the onsite. Being able to accurately predict which candidates will succeed at this stage is important and should inform the decision about whether to interview the candidate or not.\n\nWhat we found most surprising is how far their predictions were from the truth:\n\n• When recruiters predicted the highest probability of passing (95-100%), those candidates actually passed with a 64% probability.\n\nBelow is a graph that shows recruiter predictions vs. actual performance. The x-axis is the bucketed recruiter rating. In other words, the first point is all the candidates that recruiters assigned a 0-5% likelihood of passing. The y-axis is the average interviewing.io pass rate for those candidates. The red dotted line represents 100% accuracy – in an ideal world, the higher a recruiter's ranking of a candidate, the higher their actual performance would be. The orange line represents reality – as you can see, there isn’t much correspondence between how recruiters predicted candidates would perform and their actual performance.\n\nRecruiters’ predictions below 40% underestimate these candidates by an average of 23 percentage points. Above 60%, they’re overestimating by an average of 20 percentage points.If this was predicting student performance, recruiters would be off by two full letter grades.\n\n## Recruiters can’t agree on what a good candidate looks like\n\nClearly, there is lots of noise in resume evaluations. Were recruiters’ noisy judgments at least consistent when reviewing the same resumes?\n\nNearly 500 resumes were evaluated by more than one recruiter. Based on a random selection of two evaluations per resume, the overall likelihood of two recruiters agreeing to either interview or not interview a given candidate was 64%.\n\nSince recruiters also guess the probability a candidate will pass the technical interview, we can compare how different these guesses are for a given candidate.The average differential between two randomly selected recruiters’ evaluations of the same resume was 41 percentage points. So, let’s say one recruiter predicts a 30% probability the candidate would pass; another recruiter evaluating the same resume would predict, on average, a 71% probability of passing.\n\nTo further understand just how prevalent the disagreement is, we looked at the standard deviations for across-candidate evaluations and same-candidate evaluations:\n\n• 0.34 across different candidates\n\n• 0.32 across the same candidates\n\nSo, when two recruiters are asked to judge the same candidate, their level of disagreement is nearly the same as if they evaluated two completely different candidates.\n\n## The most sought-after resume attributes\n\nDespite the noise and variability in the study’s resume evaluations, there were some characteristics that recruiters consistently favored: experience at a top-tier tech3company (FAANG or FAANG-adjacent) and URM (underrepresented minority) status (in tech, this means being Black or Hispanic).\n\nMost predictive for Question #1 (whether a recruiter would want to interview that candidate) was experience at a top company — these candidates were 35% more likely to be picked. Black or Hispanic candidates are also associated with an increased likelihood a recruiter would interview a candidate — by 21%.4\n\nWith Question #2 (how likely the candidate was to pass a technical interview), having a top company on your resume is associated with a 21% increase in the likelihood that recruiters believe the candidate will pass the interview. Compared to the actual pass rates, recruiters’ predictions of FAANG candidates are generally accurate (average 4 percentage point overestimate).5Unlike the presence of a top company, URM status didn't appear to influence recruiter decisions here.\n\n## How do recruiters’ stated reasons for rejecting candidates line up with actual rejection reasons?\n\nSo, we know what recruiters tend to favor, whether they’d admit to it or not: 1) FAANG/FAANG-adjacent experience and 2) URM status. But what’s even more interesting than why a recruiter would say yes is why they would say no.\n\nWhen we asked recruiters to judge a resume, we also asked them WHY they made that decision.6Below are recruiters’ stated reasons for rejecting candidates. As you can see, “missing skill” is the main reason by far, with “no top firm” a distant third.\n\nSo, then, we wondered… How do recruiters’ stated reasons for rejecting candidates line up with reality? To figure that out, we analyzed the resumes that ended up in the rejected pile and looked at common traits.\n\nBelow is a graph of actual rejection reasons, based on our analysis. The main rejection reason isn’t “missing skill” — it’s “no top firm.” This is followed, somewhat surprisingly, but much less reliably (note the huge error bars), by having an MBA. “No top school” and having a Master’s degree come in at third and fourth. Note that these top four rejection reasons are all based on a candidate’s background, NOT their skill set.\n\n## Slowing down is associated with better decisions\n\nAnother key piece of this study is time. In hiring settings, recruiters make decisions quickly. Moving stacks of candidates through the funnel gives little room to second-guess or even wait before determining whether or not to give a candidate the opportunity to interview.\n\nIn our study,the median time spent on resume evaluations was just 31 seconds. Broken down further by Question #1 — whether or not the recruiter would interview them — the median time spent was:\n\n• 25 seconds for those advanced to a technical interview\n\n• 44 seconds for those placed in the reject pile\n\nGiven the weight placed on single variables (e.g., experience at a top firm), how quickly recruiters make judgments isn’t surprising. But might they be more accurate if they slowed down?It turns out that spending more time on resume evaluations, notably >45 seconds, is associated with more accurate predictions — just spending 15 more seconds appears to increase accuracy by 34%.7It could be that encouraging recruiters to slow down might result in more accurate resume screening.\n\n## Can AI do better?\n\nAs a gaggle of technologists and data geeks, we tested whether algorithms could quiet the noise and inconsistencies in recruiters’ predictions.\n\nWe trained two local, off-the-rack machine-learning models.8\n\nJust like human recruiters, the models were trained to predict which candidates would pass technical interviews. The training dataset was drawn from interviewing.io and included anonymized resume data (years of experience, whether they had worked at a top firm, and whether they had attended a top 10 school for either grad or undergrad), candidates’ race and gender, and interview outcomes.9\n\nDespite the very limited types of data we input into both models, when presented with out-of-sample candidate profiles, both models made predictions more accurately than human recruiters.\n\nRandom Forest was somewhat more accurate than recruiters when predicting lower performing candidates. XGBoost, however, was more accurate across the board than both the Random Forest model AND recruiters.\n\n## Where does this leave us?\n\nIn this section, when we say “we,” we are speaking as interviewing.io, not as the researchers involved in this study. Just FYI.\n\n### Advice for candidates\n\nAt interviewing.io, we routinely get requests from our users to add resume review to our list of offerings. So far, we have declined to build it. Why? Because we suspected that recruiters, regardless of what they say publicly, primarily hunt for name brands on your resume. Therefore, highlighting your skills or acquiring new skills is unlikely to make a big difference in your outcomes.\n\nWe are sad to see the numbers back up our intuition that it mostly is about brands.10As such, here’s an actionable piece of advice: maintain a healthy skepticism when recruiters advise you to grow your skill set. Acquiring new skills will very likely make you a better engineer. But it will very likely NOT increase your marketability.\n\nIf enhancing your skill set won’t help, what can you do to get in front of companies? We’re in the midst of a brutal market, the likes of which we haven’t seen since the dot-com crash in 2000. According to anecdotes shared in our Discord community, even engineering managers from FAANGs are getting something like a 10% response rate when they apply to companies online. If that’s true, what chance do the rest of us have?\n\nWe strongly encourage anyone looking for work in this market, especially if you come from a non-traditional background, to stop spending energy on applying online, full stop. Instead, reach out to hiring managers. The numbers will be on your side there, as relatively few candidates are targeting hiring managers directly. We plan to write a full blog post on how to do this kind of outreach well, but this CliffsNotes version will get you started:\n\n• Get a LinkedIn Sales Navigator account\n\n• Make a target list of hiring managers at the companies you’re interested in\n\n• Figure out their emails (you can use a tool like RocketReach), and send them something short and personalized. Do not use LinkedIn. The same way that you don’t live in LinkedIn, eng managers don’t either. Talk about the most impressive thing you’ve built. Ask them about their work, if you can find a blog post they’ve written or a project they’ve worked on publicly. Tie those two things together, and you’ll see a much higher response rate. Writing these personalized emails takes time, of course, but in this market, it’s what you need to do to stand out.\n\n### Advice for recruiters\n\nWe know that recruiting is a tough job, especially in the current climate, where there are more applicants than ever and fewer recruiters to parse through them. So, it rationally makes sense to us that a recruiter would spend no more than 30 seconds per resume and focus primarily on looking for top brands.\n\nWe hope, though, that this piece may have given a measure of pause about your approach, and we’d like to leave you with two actionable pieces of advice. First, if you do nothing else, please slow down. As you saw above,  taking just 15 extra seconds to read a resume could improve your accuracy by 34%.11\n\nOur second piece of advice is this. Freada Kapor Klein from Kapor Capital coined the term “distance traveled” more than two decades ago. It refers to what someone accomplished, in the context of where they started. For instance, Kapor Klein recommends that, in their admissions processes, universities should consider not just the number of AP tests a candidate has passed but the number of AP tests divided by the total number offered at their high school. For example, if an applicant took 5 AP tests and their school offered 27, that paints a very different picture from another applicant who also took 5 AP tests when that’s the total number offered at their school. Kapor Capital uses distance traveled as one of their metrics for determining which entrepreneurs to fund. One can easily apply this concept to hiring as well.\n\nTake a look at the resume below. \"John\" (name has been changed; scrubbed resume shared with permission) studied chemical engineering and worked his way into software engineering by starting as a service engineer focused on pen testing. In the meantime, he completed a bootcamp, attended the Bradfield School of Computer Science (a school dedicated to teaching computer science at a depth beyond what many university programs, and certainly most bootcamps, offer), and ended up with a senior title in just three years.\n\nJohn was consistently rated poorly by recruiters but is one of the top performers on interviewing.io.\n\nIt takes just a bit more time, so please spend a little longer reading resumes, and evaluate candidates’ achievements in the context of where they came from. Think about the denominator. But don’t think for a moment that we recommend that you lower the bar — absolutely not. On interviewing.io, we regularly see candidates like John objectively outperforming their FAANG counterparts.\n\n### What this means for our industry\n\nThe last time I did this research, I wrote about how being bad at judging resumes isn’t anything to be ashamed about and that comes down to the resume itself being a low-signal and not-very-useful document.\n\nI held that same opinion for the last decade (and even wrote arecent post about how AI can’t do recruiting)… right up until we ran this study and successfully built two ML models that outperformed recruiters.\n\nSo, I stand corrected.\n\nAs you saw above, both models were limited – they were looking at the same types of features that recruiters do when they quickly scan a resume, certainly fewer features than recruiters have access to. But, despite that, the AI models still outperformed humans. What happens then, if you can build a model that behaves like a recruiter who really slows down and reads everything? These results make me believe that resumes do carry some signal, and you can uncover it if you carefully read what people write about their jobs and themselves and also analyze how they write it. Unfortunately, this takes more time and effort to uncover than most human recruiters are able to devote. And, in retrospect, that’s a good task for AI. Though we haven’t built a model like that for this post, I’m optimistic that we may be able to do it in the future.\n\nAs I said in the AI piece I linked above, in order for AI to do useful recruiting work, rather than just perpetuating the biases that human recruiters hold, it needs a data set that contains some objective measure of performance. Most recruiting AI models today do one of three things: glorified keyword matching, training on what recruiters prefer (the outcome is whether a recruiter would want to talk to the candidate, NOT whether the candidate is good), or live on top of existing tools like ChatGPT (whichwe recently showed doesn’t perform very well and is biased against non-traditional candidates). These three approaches just result in the wrong thing being done, faster.\n\nI hope that, in the not too distant future, we can use AI to make less-biased decisions, using meaningful performance data. And I hope that this type of AI solution can get adoption among the recruiting community.\n\nFootnotes:\n\n• Participating technical recruiters were paid a base rate and then received additional $$ for each accurate prediction.↩\n\nParticipating technical recruiters were paid a base rate and then received additional $$ for each accurate prediction.↩\n\n• Different roles have different requirements. To correct for that, we asked each candidate to specify which eng role they were applying for: Software Engineer (back-end or full-stack), Mobile Engineer, Front-end Engineer, ML Engineer, Data Engineer, or Engineering Manager. Then we prompted recruiters to evaluate them specifically for that role. If no role was specified by the candidate, the default role to evaluate for was Software Engineer (back-end or full-stack).↩\n\nDifferent roles have different requirements. To correct for that, we asked each candidate to specify which eng role they were applying for: Software Engineer (back-end or full-stack), Mobile Engineer, Front-end Engineer, ML Engineer, Data Engineer, or Engineering Manager. Then we prompted recruiters to evaluate them specifically for that role. If no role was specified by the candidate, the default role to evaluate for was Software Engineer (back-end or full-stack).↩\n\n• Top firms = Airbnb, Amazon, Anthropic, AWS, Apple, Asana, Atlassian, Bloomberg LP, Checkr, Coinbase, Coursera, Cruise, Dropbox, Etsy, Facebook, Flexport, GitHub, Google, Gusto, HashiCorp, Instacart, Instagram, Jane Street, Jump Trading, Khan Academy, LinkedIn, Lyft, Medium, Microsoft, Mozilla, Netflix, Oculus, OpenAI, Palantir, Peloton, Pinterest, Postmates, Quora, Reddit, Robinhood, Roblox, Salesforce, Segment, Slack, Snap, Snowflake, SpaceX, Spotify, Square, Stripe, Tesla, Thumbtack, TikTok, Twilio, Twitch, Twitter, Two Sigma, Uber, Udemy, Waymo, Whatsapp, Yelp, and Zoom.↩\n\nTop firms = Airbnb, Amazon, Anthropic, AWS, Apple, Asana, Atlassian, Bloomberg LP, Checkr, Coinbase, Coursera, Cruise, Dropbox, Etsy, Facebook, Flexport, GitHub, Google, Gusto, HashiCorp, Instacart, Instagram, Jane Street, Jump Trading, Khan Academy, LinkedIn, Lyft, Medium, Microsoft, Mozilla, Netflix, Oculus, OpenAI, Palantir, Peloton, Pinterest, Postmates, Quora, Reddit, Robinhood, Roblox, Salesforce, Segment, Slack, Snap, Snowflake, SpaceX, Spotify, Square, Stripe, Tesla, Thumbtack, TikTok, Twilio, Twitch, Twitter, Two Sigma, Uber, Udemy, Waymo, Whatsapp, Yelp, and Zoom.↩\n\n• We corrected by FAANG & FAANG-adjacent experience (and all of our other variables) before making this statement, i.e., the effect existed for engineers from underrepresented backgrounds who did not have FAANG/FAANG-adjacent companies on their resumes. We expect that recruiters favor underrepresented minority candidates because of guidelines from their employers to focus on sourcing these types of candidates, as part of DEI initiatives. Discussion about the magnitude of this effect and its implications is out of scope of this piece.↩\n\nWe corrected by FAANG & FAANG-adjacent experience (and all of our other variables) before making this statement, i.e., the effect existed for engineers from underrepresented backgrounds who did not have FAANG/FAANG-adjacent companies on their resumes. We expect that recruiters favor underrepresented minority candidates because of guidelines from their employers to focus on sourcing these types of candidates, as part of DEI initiatives. Discussion about the magnitude of this effect and its implications is out of scope of this piece.↩\n\n• Interestingly, recruiters might penalize, for example, alternative education. Candidates with only alternative education pathways post-high school — coding bootcamps or digital certifications — appeared to be penalized by recruiters in this study. However, with limited observations (n=11), it’s inconclusive without further study.↩\n\nInterestingly, recruiters might penalize, for example, alternative education. Candidates with only alternative education pathways post-high school — coding bootcamps or digital certifications — appeared to be penalized by recruiters in this study. However, with limited observations (n=11), it’s inconclusive without further study.↩\n\n• That field was optional, so most of the reasons recruiters provided were in cases when they said no — presumably because the reasons for saying yes may have seemed self-evident.↩\n\nThat field was optional, so most of the reasons recruiters provided were in cases when they said no — presumably because the reasons for saying yes may have seemed self-evident.↩\n\n• It’s not that recruiters who generally take their time make more accurate judgements. Any recruiter slowing down might make them better at judging resumes!↩\n\nIt’s not that recruiters who generally take their time make more accurate judgements. Any recruiter slowing down might make them better at judging resumes!↩\n\n• It’s important to stress that neither algorithm was custom-built. The models, one using a Random Forest algorithm and the other an XGBoost algorithm, are distinct but interrelated approaches akin toDecision Tree algorithms. Decision trees sort data into groups based on features. Random forest algorithms combine multiple decision trees to improve predictions. XGBoost builds multiple decision trees one after another, with each new tree focusing on prediction errors from the previous trees.↩\n\nIt’s important to stress that neither algorithm was custom-built. The models, one using a Random Forest algorithm and the other an XGBoost algorithm, are distinct but interrelated approaches akin toDecision Tree algorithms. Decision trees sort data into groups based on features. Random forest algorithms combine multiple decision trees to improve predictions. XGBoost builds multiple decision trees one after another, with each new tree focusing on prediction errors from the previous trees.↩\n\n• Training data excluded data in this study. We take user privacy very seriously, and we want to stress that all models were local and anonymized and that no data in this study was shared with cloud LLMs.↩\n\nTraining data excluded data in this study. We take user privacy very seriously, and we want to stress that all models were local and anonymized and that no data in this study was shared with cloud LLMs.↩\n\n• To see a particularly egregious example of recruiters favoring brands over substance, take a close look atthis fake resume that got a bunch of recruiter responses.And this one too.↩\n\nTo see a particularly egregious example of recruiters favoring brands over substance, take a close look atthis fake resume that got a bunch of recruiter responses.And this one too.↩\n\n• We haven’t proven causality here, but when we just scoped our analysis to the same person, it appeared that taking more time did help (in other words, it’s not just that recruiters who spend more time usually are more accurate; it’s the added time). Still, this is something that merits more work, and we'll try to investigate it causally in the future.↩\n\nWe haven’t proven causality here, but when we just scoped our analysis to the same person, it appeared that taking more time did help (in other words, it’s not just that recruiters who spend more time usually are more accurate; it’s the added time). Still, this is something that merits more work, and we'll try to investigate it causally in the future.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Shuffle String\n\n### K Closest Points To Origin\n\n### Remove Nth Node from End of List",
      "source_url": "https://interviewing.io/blog/are-recruiters-better-than-a-coin-flip-at-judging-resumes",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Are recruiters better than a coin flip at judging resumes? Here's the data.",
      "content": "# Are recruiters better than a coin flip at judging resumes? Here's the data.\n\nThis post is a very exciting first for interviewing.io because it’s about a proper experiment run by a real, live academic research lab. If you’ve been reading my work for the past decade, you know that I’ve always been something of an armchair researcher. I ran some experiments before starting interviewing.io, and since then, my team and I havekept it up.\n\nOne of the experiments I ran before I founded interviewing.io was an attempt to figure out how good recruiters were at judging candidate quality based on resumes. I ran it 10 years ago and discovered that not only was everyone bad at judging resumes (about as accurate as flipping a coin),they all disagreed with each other about what a good candidate looked like.\n\nEven though these results were shocking at the time, the study had some serious limitations. First, I had no objective measures for which candidates were actually good. I was working as a recruiter at the time, so I knew whom I had been able to place, but that’s obviously not the be-all and end-all of engineering ability. Second, I had a non-representative sample of software engineers. Due to my brand, I had managed to attract a lot of excellent, non-traditional candidates — engineers who were actually very good but didn’t look good on paper. These types of resumes are the hardest for recruiters to judge, and the data was full of them. Finally, my sample size wasn’t that big: I ended up with 716 data points in total, only about half of which came from recruiters (the rest came from engineers and hiring managers — my original hypothesis was that they might be better at the task, but I was wrong… everyone was bad at judging resumes).\n\nSo, now that I’m CEO of interviewing.io, with access to a lot more data, resources, and a team of excellent academics atLearning Collider, we decided to run this study again, but with a more rigorous treatment and better conditions, to see if we could replicate the results. This time, we focused just on recruiters, given that they’re most often the gatekeepers who decide which candidates get an interview.\n\nBelow are all the details, but here’s the TL;DR: we reproduced my results from 10 years ago! Our new study showed that recruiters were only a bit better than a coin flip at making value judgments, and they still all disagreed with each other about what a good candidate looks like.\n\nIn this piece, we also talk about:\n\n• How far off recruiters were in their predictions and how much they disagreed with each other\n\n• What recruiters say they look for vs. what the data shows they actually look for\n\n• Why recruiters taking more time to parse resumes would lead to better outcomes (median parse time is just 31 seconds)\n\n• Whether AI can do a better job at judging resumes (spoiler: yes, it can)\n\nThe rest of this piece is co-authored by Peter Bergman, Tushar Kundu, and Kadeem Noray of Learning Collider.\n\nIn the real world, resumes (or LinkedIn profiles) are evaluated by recruiters in minutes — even seconds — and these evaluations are THE thing that determines who gets an interview.\n\nBut what do these word walls tell recruiters? How predictive are their evaluations of actual interview success? Ultimately, how good are recruiters at judging resumes?\n\nTo answer these questions, we designed a study approximating technical recruiters’ decisions in the real world. We asked176 technical recruiters (both agency and in-house) to review and make judgments about 30 engineers’ resumes each, just as they would in their current roles.\n\nThey answered two questions per resume:\n\n• Would you interview this candidate?2(Yes or No)\n\n• What is the likelihood this candidate will pass the technical interview (as a percentage)?\n\nWe ended up with nearly 2,200 evaluations of over 1,000 resumes.\n\nThe resumes in this study belonged to interviewing.io users (with their consent) — actual engineers currently on the job market.\n\nCollaborating on this study with interviewing.io is an ideal scenario, precisely because outcome data were available for comparison purposes. Each engineer in this study has completed multiple mock interviews on the platform. Performance in these interviews is quite predictive of performance in real interviews: top performers (roughly the top 5% of users) on interviewing.io are 3X more likely to pass technical interviews at top-tier companies than candidates from other sources. Even passing a single interview on interviewing.io is a strong predictor of outcomes; it's associated with a 32% increase in the chance of working at a FAANG company post-interview.\n\nOnce we had recruiters’ evaluations of the resumes, we compared them to how those engineers actually performed on interviewing.io: skills scores, feedback from interviewers, and ultimately, whether they passed or failed their mock interviews.\n\n## Recruiters’ resume judgments are just slightly better than a coin flip\n\n### Question #1: Would you interview this candidate?\n\nIn aggregate, recruiters in the study recommended 62% of candidates for an interview. But how did recruiter evaluations stack up against candidates’ performance on the platform?\n\nWe calculated recruiter accuracy by treating each candidate’s first interview (pass/fail) as the truth, and recruiters’ decision to interview as a prediction. It turns out that recruiters chose correctly 55% of the time, which is just slightly better than a coin flip.\n\n### Question #2: What is the likelihood this candidate will pass the technical interview?\n\nRecruiters predicted the likelihood that each candidate would pass the technical interview. In most hiring processes, the technical interview follows the recruiter call and determines whether candidates proceed to the onsite. Being able to accurately predict which candidates will succeed at this stage is important and should inform the decision about whether to interview the candidate or not.\n\nWhat we found most surprising is how far their predictions were from the truth:\n\n• When recruiters predicted the highest probability of passing (95-100%), those candidates actually passed with a 64% probability.\n\nBelow is a graph that shows recruiter predictions vs. actual performance. The x-axis is the bucketed recruiter rating. In other words, the first point is all the candidates that recruiters assigned a 0-5% likelihood of passing. The y-axis is the average interviewing.io pass rate for those candidates. The red dotted line represents 100% accuracy – in an ideal world, the higher a recruiter's ranking of a candidate, the higher their actual performance would be. The orange line represents reality – as you can see, there isn’t much correspondence between how recruiters predicted candidates would perform and their actual performance.\n\nRecruiters’ predictions below 40% underestimate these candidates by an average of 23 percentage points. Above 60%, they’re overestimating by an average of 20 percentage points.If this was predicting student performance, recruiters would be off by two full letter grades.\n\n## Recruiters can’t agree on what a good candidate looks like\n\nClearly, there is lots of noise in resume evaluations. Were recruiters’ noisy judgments at least consistent when reviewing the same resumes?\n\nNearly 500 resumes were evaluated by more than one recruiter. Based on a random selection of two evaluations per resume, the overall likelihood of two recruiters agreeing to either interview or not interview a given candidate was 64%.\n\nSince recruiters also guess the probability a candidate will pass the technical interview, we can compare how different these guesses are for a given candidate.The average differential between two randomly selected recruiters’ evaluations of the same resume was 41 percentage points. So, let’s say one recruiter predicts a 30% probability the candidate would pass; another recruiter evaluating the same resume would predict, on average, a 71% probability of passing.\n\nTo further understand just how prevalent the disagreement is, we looked at the standard deviations for across-candidate evaluations and same-candidate evaluations:\n\n• 0.34 across different candidates\n\n• 0.32 across the same candidates\n\nSo, when two recruiters are asked to judge the same candidate, their level of disagreement is nearly the same as if they evaluated two completely different candidates.\n\n## The most sought-after resume attributes\n\nDespite the noise and variability in the study’s resume evaluations, there were some characteristics that recruiters consistently favored: experience at a top-tier tech3company (FAANG or FAANG-adjacent) and URM (underrepresented minority) status (in tech, this means being Black or Hispanic).\n\nMost predictive for Question #1 (whether a recruiter would want to interview that candidate) was experience at a top company — these candidates were 35% more likely to be picked. Black or Hispanic candidates are also associated with an increased likelihood a recruiter would interview a candidate — by 21%.4\n\nWith Question #2 (how likely the candidate was to pass a technical interview), having a top company on your resume is associated with a 21% increase in the likelihood that recruiters believe the candidate will pass the interview. Compared to the actual pass rates, recruiters’ predictions of FAANG candidates are generally accurate (average 4 percentage point overestimate).5Unlike the presence of a top company, URM status didn't appear to influence recruiter decisions here.\n\n## How do recruiters’ stated reasons for rejecting candidates line up with actual rejection reasons?\n\nSo, we know what recruiters tend to favor, whether they’d admit to it or not: 1) FAANG/FAANG-adjacent experience and 2) URM status. But what’s even more interesting than why a recruiter would say yes is why they would say no.\n\nWhen we asked recruiters to judge a resume, we also asked them WHY they made that decision.6Below are recruiters’ stated reasons for rejecting candidates. As you can see, “missing skill” is the main reason by far, with “no top firm” a distant third.\n\nSo, then, we wondered… How do recruiters’ stated reasons for rejecting candidates line up with reality? To figure that out, we analyzed the resumes that ended up in the rejected pile and looked at common traits.\n\nBelow is a graph of actual rejection reasons, based on our analysis. The main rejection reason isn’t “missing skill” — it’s “no top firm.” This is followed, somewhat surprisingly, but much less reliably (note the huge error bars), by having an MBA. “No top school” and having a Master’s degree come in at third and fourth. Note that these top four rejection reasons are all based on a candidate’s background, NOT their skill set.\n\n## Slowing down is associated with better decisions\n\nAnother key piece of this study is time. In hiring settings, recruiters make decisions quickly. Moving stacks of candidates through the funnel gives little room to second-guess or even wait before determining whether or not to give a candidate the opportunity to interview.\n\nIn our study,the median time spent on resume evaluations was just 31 seconds. Broken down further by Question #1 — whether or not the recruiter would interview them — the median time spent was:\n\n• 25 seconds for those advanced to a technical interview\n\n• 44 seconds for those placed in the reject pile\n\nGiven the weight placed on single variables (e.g., experience at a top firm), how quickly recruiters make judgments isn’t surprising. But might they be more accurate if they slowed down?It turns out that spending more time on resume evaluations, notably >45 seconds, is associated with more accurate predictions — just spending 15 more seconds appears to increase accuracy by 34%.7It could be that encouraging recruiters to slow down might result in more accurate resume screening.\n\n## Can AI do better?\n\nAs a gaggle of technologists and data geeks, we tested whether algorithms could quiet the noise and inconsistencies in recruiters’ predictions.\n\nWe trained two local, off-the-rack machine-learning models.8\n\nJust like human recruiters, the models were trained to predict which candidates would pass technical interviews. The training dataset was drawn from interviewing.io and included anonymized resume data (years of experience, whether they had worked at a top firm, and whether they had attended a top 10 school for either grad or undergrad), candidates’ race and gender, and interview outcomes.9\n\nDespite the very limited types of data we input into both models, when presented with out-of-sample candidate profiles, both models made predictions more accurately than human recruiters.\n\nRandom Forest was somewhat more accurate than recruiters when predicting lower performing candidates. XGBoost, however, was more accurate across the board than both the Random Forest model AND recruiters.\n\n## Where does this leave us?\n\nIn this section, when we say “we,” we are speaking as interviewing.io, not as the researchers involved in this study. Just FYI.\n\n### Advice for candidates\n\nAt interviewing.io, we routinely get requests from our users to add resume review to our list of offerings. So far, we have declined to build it. Why? Because we suspected that recruiters, regardless of what they say publicly, primarily hunt for name brands on your resume. Therefore, highlighting your skills or acquiring new skills is unlikely to make a big difference in your outcomes.\n\nWe are sad to see the numbers back up our intuition that it mostly is about brands.10As such, here’s an actionable piece of advice: maintain a healthy skepticism when recruiters advise you to grow your skill set. Acquiring new skills will very likely make you a better engineer. But it will very likely NOT increase your marketability.\n\nIf enhancing your skill set won’t help, what can you do to get in front of companies? We’re in the midst of a brutal market, the likes of which we haven’t seen since the dot-com crash in 2000. According to anecdotes shared in our Discord community, even engineering managers from FAANGs are getting something like a 10% response rate when they apply to companies online. If that’s true, what chance do the rest of us have?\n\nWe strongly encourage anyone looking for work in this market, especially if you come from a non-traditional background, to stop spending energy on applying online, full stop. Instead, reach out to hiring managers. The numbers will be on your side there, as relatively few candidates are targeting hiring managers directly. We plan to write a full blog post on how to do this kind of outreach well, but this CliffsNotes version will get you started:\n\n• Get a LinkedIn Sales Navigator account\n\n• Make a target list of hiring managers at the companies you’re interested in\n\n• Figure out their emails (you can use a tool like RocketReach), and send them something short and personalized. Do not use LinkedIn. The same way that you don’t live in LinkedIn, eng managers don’t either. Talk about the most impressive thing you’ve built. Ask them about their work, if you can find a blog post they’ve written or a project they’ve worked on publicly. Tie those two things together, and you’ll see a much higher response rate. Writing these personalized emails takes time, of course, but in this market, it’s what you need to do to stand out.\n\n### Advice for recruiters\n\nWe know that recruiting is a tough job, especially in the current climate, where there are more applicants than ever and fewer recruiters to parse through them. So, it rationally makes sense to us that a recruiter would spend no more than 30 seconds per resume and focus primarily on looking for top brands.\n\nWe hope, though, that this piece may have given a measure of pause about your approach, and we’d like to leave you with two actionable pieces of advice. First, if you do nothing else, please slow down. As you saw above,  taking just 15 extra seconds to read a resume could improve your accuracy by 34%.11\n\nOur second piece of advice is this. Freada Kapor Klein from Kapor Capital coined the term “distance traveled” more than two decades ago. It refers to what someone accomplished, in the context of where they started. For instance, Kapor Klein recommends that, in their admissions processes, universities should consider not just the number of AP tests a candidate has passed but the number of AP tests divided by the total number offered at their high school. For example, if an applicant took 5 AP tests and their school offered 27, that paints a very different picture from another applicant who also took 5 AP tests when that’s the total number offered at their school. Kapor Capital uses distance traveled as one of their metrics for determining which entrepreneurs to fund. One can easily apply this concept to hiring as well.\n\nTake a look at the resume below. \"John\" (name has been changed; scrubbed resume shared with permission) studied chemical engineering and worked his way into software engineering by starting as a service engineer focused on pen testing. In the meantime, he completed a bootcamp, attended the Bradfield School of Computer Science (a school dedicated to teaching computer science at a depth beyond what many university programs, and certainly most bootcamps, offer), and ended up with a senior title in just three years.\n\nJohn was consistently rated poorly by recruiters but is one of the top performers on interviewing.io.\n\nIt takes just a bit more time, so please spend a little longer reading resumes, and evaluate candidates’ achievements in the context of where they came from. Think about the denominator. But don’t think for a moment that we recommend that you lower the bar — absolutely not. On interviewing.io, we regularly see candidates like John objectively outperforming their FAANG counterparts.\n\n### What this means for our industry\n\nThe last time I did this research, I wrote about how being bad at judging resumes isn’t anything to be ashamed about and that comes down to the resume itself being a low-signal and not-very-useful document.\n\nI held that same opinion for the last decade (and even wrote arecent post about how AI can’t do recruiting)… right up until we ran this study and successfully built two ML models that outperformed recruiters.\n\nSo, I stand corrected.\n\nAs you saw above, both models were limited – they were looking at the same types of features that recruiters do when they quickly scan a resume, certainly fewer features than recruiters have access to. But, despite that, the AI models still outperformed humans. What happens then, if you can build a model that behaves like a recruiter who really slows down and reads everything? These results make me believe that resumes do carry some signal, and you can uncover it if you carefully read what people write about their jobs and themselves and also analyze how they write it. Unfortunately, this takes more time and effort to uncover than most human recruiters are able to devote. And, in retrospect, that’s a good task for AI. Though we haven’t built a model like that for this post, I’m optimistic that we may be able to do it in the future.\n\nAs I said in the AI piece I linked above, in order for AI to do useful recruiting work, rather than just perpetuating the biases that human recruiters hold, it needs a data set that contains some objective measure of performance. Most recruiting AI models today do one of three things: glorified keyword matching, training on what recruiters prefer (the outcome is whether a recruiter would want to talk to the candidate, NOT whether the candidate is good), or live on top of existing tools like ChatGPT (whichwe recently showed doesn’t perform very well and is biased against non-traditional candidates). These three approaches just result in the wrong thing being done, faster.\n\nI hope that, in the not too distant future, we can use AI to make less-biased decisions, using meaningful performance data. And I hope that this type of AI solution can get adoption among the recruiting community.\n\nFootnotes:\n\n• Participating technical recruiters were paid a base rate and then received additional $$ for each accurate prediction.↩\n\nParticipating technical recruiters were paid a base rate and then received additional $$ for each accurate prediction.↩\n\n• Different roles have different requirements. To correct for that, we asked each candidate to specify which eng role they were applying for: Software Engineer (back-end or full-stack), Mobile Engineer, Front-end Engineer, ML Engineer, Data Engineer, or Engineering Manager. Then we prompted recruiters to evaluate them specifically for that role. If no role was specified by the candidate, the default role to evaluate for was Software Engineer (back-end or full-stack).↩\n\nDifferent roles have different requirements. To correct for that, we asked each candidate to specify which eng role they were applying for: Software Engineer (back-end or full-stack), Mobile Engineer, Front-end Engineer, ML Engineer, Data Engineer, or Engineering Manager. Then we prompted recruiters to evaluate them specifically for that role. If no role was specified by the candidate, the default role to evaluate for was Software Engineer (back-end or full-stack).↩\n\n• Top firms = Airbnb, Amazon, Anthropic, AWS, Apple, Asana, Atlassian, Bloomberg LP, Checkr, Coinbase, Coursera, Cruise, Dropbox, Etsy, Facebook, Flexport, GitHub, Google, Gusto, HashiCorp, Instacart, Instagram, Jane Street, Jump Trading, Khan Academy, LinkedIn, Lyft, Medium, Microsoft, Mozilla, Netflix, Oculus, OpenAI, Palantir, Peloton, Pinterest, Postmates, Quora, Reddit, Robinhood, Roblox, Salesforce, Segment, Slack, Snap, Snowflake, SpaceX, Spotify, Square, Stripe, Tesla, Thumbtack, TikTok, Twilio, Twitch, Twitter, Two Sigma, Uber, Udemy, Waymo, Whatsapp, Yelp, and Zoom.↩\n\nTop firms = Airbnb, Amazon, Anthropic, AWS, Apple, Asana, Atlassian, Bloomberg LP, Checkr, Coinbase, Coursera, Cruise, Dropbox, Etsy, Facebook, Flexport, GitHub, Google, Gusto, HashiCorp, Instacart, Instagram, Jane Street, Jump Trading, Khan Academy, LinkedIn, Lyft, Medium, Microsoft, Mozilla, Netflix, Oculus, OpenAI, Palantir, Peloton, Pinterest, Postmates, Quora, Reddit, Robinhood, Roblox, Salesforce, Segment, Slack, Snap, Snowflake, SpaceX, Spotify, Square, Stripe, Tesla, Thumbtack, TikTok, Twilio, Twitch, Twitter, Two Sigma, Uber, Udemy, Waymo, Whatsapp, Yelp, and Zoom.↩\n\n• We corrected by FAANG & FAANG-adjacent experience (and all of our other variables) before making this statement, i.e., the effect existed for engineers from underrepresented backgrounds who did not have FAANG/FAANG-adjacent companies on their resumes. We expect that recruiters favor underrepresented minority candidates because of guidelines from their employers to focus on sourcing these types of candidates, as part of DEI initiatives. Discussion about the magnitude of this effect and its implications is out of scope of this piece.↩\n\nWe corrected by FAANG & FAANG-adjacent experience (and all of our other variables) before making this statement, i.e., the effect existed for engineers from underrepresented backgrounds who did not have FAANG/FAANG-adjacent companies on their resumes. We expect that recruiters favor underrepresented minority candidates because of guidelines from their employers to focus on sourcing these types of candidates, as part of DEI initiatives. Discussion about the magnitude of this effect and its implications is out of scope of this piece.↩\n\n• Interestingly, recruiters might penalize, for example, alternative education. Candidates with only alternative education pathways post-high school — coding bootcamps or digital certifications — appeared to be penalized by recruiters in this study. However, with limited observations (n=11), it’s inconclusive without further study.↩\n\nInterestingly, recruiters might penalize, for example, alternative education. Candidates with only alternative education pathways post-high school — coding bootcamps or digital certifications — appeared to be penalized by recruiters in this study. However, with limited observations (n=11), it’s inconclusive without further study.↩\n\n• That field was optional, so most of the reasons recruiters provided were in cases when they said no — presumably because the reasons for saying yes may have seemed self-evident.↩\n\nThat field was optional, so most of the reasons recruiters provided were in cases when they said no — presumably because the reasons for saying yes may have seemed self-evident.↩\n\n• It’s not that recruiters who generally take their time make more accurate judgements. Any recruiter slowing down might make them better at judging resumes!↩\n\nIt’s not that recruiters who generally take their time make more accurate judgements. Any recruiter slowing down might make them better at judging resumes!↩\n\n• It’s important to stress that neither algorithm was custom-built. The models, one using a Random Forest algorithm and the other an XGBoost algorithm, are distinct but interrelated approaches akin toDecision Tree algorithms. Decision trees sort data into groups based on features. Random forest algorithms combine multiple decision trees to improve predictions. XGBoost builds multiple decision trees one after another, with each new tree focusing on prediction errors from the previous trees.↩\n\nIt’s important to stress that neither algorithm was custom-built. The models, one using a Random Forest algorithm and the other an XGBoost algorithm, are distinct but interrelated approaches akin toDecision Tree algorithms. Decision trees sort data into groups based on features. Random forest algorithms combine multiple decision trees to improve predictions. XGBoost builds multiple decision trees one after another, with each new tree focusing on prediction errors from the previous trees.↩\n\n• Training data excluded data in this study. We take user privacy very seriously, and we want to stress that all models were local and anonymized and that no data in this study was shared with cloud LLMs.↩\n\nTraining data excluded data in this study. We take user privacy very seriously, and we want to stress that all models were local and anonymized and that no data in this study was shared with cloud LLMs.↩\n\n• To see a particularly egregious example of recruiters favoring brands over substance, take a close look atthis fake resume that got a bunch of recruiter responses.And this one too.↩\n\nTo see a particularly egregious example of recruiters favoring brands over substance, take a close look atthis fake resume that got a bunch of recruiter responses.And this one too.↩\n\n• We haven’t proven causality here, but when we just scoped our analysis to the same person, it appeared that taking more time did help (in other words, it’s not just that recruiters who spend more time usually are more accurate; it’s the added time). Still, this is something that merits more work, and we'll try to investigate it causally in the future.↩\n\nWe haven’t proven causality here, but when we just scoped our analysis to the same person, it appeared that taking more time did help (in other words, it’s not just that recruiters who spend more time usually are more accurate; it’s the added time). Still, this is something that merits more work, and we'll try to investigate it causally in the future.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Shuffle String\n\n### K Closest Points To Origin\n\n### Remove Nth Node from End of List",
      "source_url": "https://interviewing.io/blog/are-recruiters-better-than-a-coin-flip-at-judging-resumes",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.",
      "content": "# How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.\n\nInpart 1 of this post, we talked about which channels are most effective for getting in the door and did an analysis of those channels along two axes: effectiveness and how much control you actually have. Here’s a quick summary.\n\nIn the quadrant above, you can see that while getting contacted by an in-house recruiter is very effective, whether you get contacted or not is largely out of your hands. The channel that maximizes both effectiveness and control is cold outreach to hiring managers (not recruiters!) “done right”. What does “done right” mean? That’s what we’ll talk about in this post (part 2 of 2). Most people do this type of outreach incorrectly. Here, we’ll get very tactical and tell you exactly what to say and do to reach out to hiring managers at the companies you’re interested in and actually get responses.\n\nHere’s our recommended, hyper-practical approach.\n\n## Prerequisites/tooling\n\n• Buy a month or two of LinkedIn Sales Navigator. This will run you a few hundred dollars, but it’s worth it.\n\n• Get an account with an email discovery tool likeRocketReach(an excellent email discovery tool).\n\n• GetStreak, which lets you do mail merges in Gmail. You create an email template, with variables for everything from recipient name to long snippets of personalized text, and then you upload a CSV with all the values. The resulting emails feel personalized but get sent to hundreds of people at once.\n\n## Treat your job search like a sales funnel\n\nIf you’re an engineer, chances are you haven’t ever done sales (maybe you had a job in high school selling Cutco knives or magazines, in which case what we’re about to say will resonate). But if you do sales for any appreciable amount of time, you’ll start thinking about everything in life as a funnel.\n\nFunnels are wide at the top and narrow at the bottom. That’s why they’re such an apt metaphor for the sales process — you do a lot of outreach, and you don’t get many responses. Of the responses you do get, relatively few will do the thing you want them to do. And even fewer will ultimately “close” (aka, buying — or, in this case, hiring).\n\nIn your engineering career, you’ve intellectually mastered many abstract concepts that are much more complex than a funnel. Despite its simplicity, however, the funnel is one of the hardest concepts to internalize emotionally, especially for people who are used to having control over outcomes. When you write code fornhours, you can expect that you will buildmfeatures.\n\nIn sales though, you do a lot of work, very little of it will pan out, and when it does pan out, it can feel almost random; an impersonal, mediocre email gets a response while your beautifully targeted email is met with deafening silence.\n\nAnd then there’s rejection. When you apply to jobs online and don’t hear back, it stings, but the sting is softened by the possibility that a human never even saw your application. You’re not reaching out to people when you apply online; you’re dealing with a bureaucratic machine.\n\nOn the other hand, when you email a real human and they don’t respond, that hurts: you put yourself out there, someone made a value judgment about you, and you lost.\n\nThe good news is that, after a while, the pain lessens, and you build up some useful emotional calluses and acquire the thousand-yard stare of someone who’s been rejected a million times for a million reasons, ranging from soul-crushingly legitimate to incontrovertibly random.Sadly, there’s no shortcut. You’ve got to do the reps, you’ve got to get the rejections, and you’ve got to pick yourself up again. You get used to it, and then it doesn’t hurt as much, because experience has taught you that if you keep going, you will eventually get to a yes.\n\n## What to actually do\n\nFirst, come up with a target list of companies.How to do that is out of scope for this post, but we may write about it in the future. For now, we’ll assume you have a list.\n\nOnce you have your list of companies, use LinkedIn Sales Navigator to find hiring managers at those companies (or founders or directors or VPs, as above). Below is an example query where we look for Google hiring managers.\n\nYou might think that Google is so big that sifting through all their various hiring managers will be intractable. Fortunately, you can whittle down the list to a pretty manageable size by applying some filters.\n\nHere are our filters:\n\n• Just targeting managers, not directors or VPs. Google is a huge organization. You want the people who are most likely to help, and they’re the ones who are struggling to hire for their teams.\n\n• In position for less than 2 years:These are the people who are still trying to prove themselves and who are less likely to have a long-standing relationship with their recruiter to the point where they only rely on internal recruiting and overlook other sources of candidates.\n\n• Geography:Let's focus on the places we most want to work.\n\n• 1st- or 2nd-degree connection:This way, when they look you up, they’ll see some social proof. You can expand this to 3rd-degree connections, if needed.\n\nOnce you have your list, put their LinkedIn URLs into a spreadsheet. Then, do a pass through your targets’ profiles and see if any of them link to personal websites, social media accounts, blogs, or anything else that will help you find common ground with them.Add any useful links in your spreadsheet because we’ll be mining them when we actually write our emails.\n\n### Look up their email addresses\n\nOnce you have your list of LinkedIn URLs, use a tool like RocketReach to look up their emails.\n\nWhy not reach out on LinkedIn? While recruiters live on LinkedIn, managers generally do not. Possibly, they don't even like or check LinkedIn much. They live in their emails, so that's where you want to target them.\n\nRocketReach is a nice tool for email discovery because 1) it takes LinkedIn URLs as inputs and 2) its email database is generally up-to-date and correct.1\n\nIf RocketReach fails or you don't wish to pay for it, you might just be able to guess their email address, as email addresses tend to follow common forms:aline@interviewing.io(my actual email address),alerner@interviewing.io, oraline.lerner@interviewing.io.\n\nWhere possible, contact managers via their work email address.2In some cases, you won’t be able to find their work email, in which case it’s acceptable to fall back to their personal email.\n\n### Write succinct, highly personalized emails\n\nNext, compose a fairly personalized, yet short, email.All too often, candidates write a long, generic cover letter that’s obviously been sent to a ton of people. I get many emails that look like this:\n\nDon’t do this!\n\nDon’t do this either! There is nothing here about why this candidate is a good fit for interviewing.io, and the bullets aren’t compelling enough on their own. Note that this particular email is from a marketer, not an engineer, but the anti-patterns are the same.\n\nEmails like the above are impersonal, but worst of all, they have a poor signal-to-noise ratio — I want to find a reason to say yes and to invest my valuable time into this person. But they’re not giving me one, and they’re making me work for it in the process.\n\n• Don't open email with how they found you.This is a big pet peeve of ours. I don’t care how you found me! I know I’m on LinkedIn. What I care about is why talking to you will add value for me or why you’re interesting. Use the most significant real estate in the email, the first sentence, to tell me that!\n\n• Don't be overly formal in how you address the person. Use their first name.\n\n• Don't get their gender wrong(e.g., referring to a woman as \"sir\" — you’d be surprised how often this happens).\n\n• Don't paste in a generic cover letter.These are sure to get ignored immediately — if you’re not going to put in the effort to write to me personally, why would I put in the effort to read your email?\n\n• Don't forget to include a link to a LinkedIn or a personal website.We don’t recommend attaching your resume, though. It can seem overly formal/somewhat presumptuous if you're trying to build rapport.\n\nMore broadly, if you want someone to go out on a limb for you, make it dead simple for them to justify expending their social/political capital on you. Hiring managers, as a rule, want to help. Make it a no-brainer for them.\n\nThere are three components to a great cold email:\n\n• Common ground with your target\n\n• Proof that you’re worthy of their time\n\n• A strong call to action\n\nNot every cold email will have (1) because you won’t always be able to find common ground with everyone — there’s simply not enough information out there about some targets to be able to craft a compelling narrative that’s highly personalized to them.\n\nBut every cold email you write should have (2). It is your job to sell yourself quickly and succinctly. You want your target to feel like they’d be an idiot to pass up the chance to talk to you.\n\n#### Finding common ground\n\nThe email below is personal, succinct, and finds common ground. Not only that, but it conveniently finds common ground thatbenefits the candidate(a soft-spot for non-traditional candidates, like himself!).\n\nTo find common ground, reference something your target cares about. Then either show them that you care about it too or that helping you would fit into their worldview and further that cause.\n\nAs we mentioned above, finding common ground may be tough because there might not be enough information available about your target, but it’s important to do the work before you give up on this route — finding common ground is the tactic that’s going to get you the highest response rates.\n\nHere are some examples of great ways to build common ground:\n\n• Reference a project they worked on (maybe they wrote a blog post about it, mentioned it in a comment on Hacker News, or are a contributor to some open source project). Then…If possible, talk about relevant work you’ve done. It’s important not to make this connection too tenuous. If you do, this approach might backfire because they’ll start to get excited about you, only to be let down and ultimately feel tricked.If you do not have relevant work to share, ask a thoughtful question or two about theirs.\n\n• If possible, talk about relevant work you’ve done. It’s important not to make this connection too tenuous. If you do, this approach might backfire because they’ll start to get excited about you, only to be let down and ultimately feel tricked.\n\n• If you do not have relevant work to share, ask a thoughtful question or two about theirs.\n\n• Reference a controversial point of view that they hold, and affirm it in an authentic way.\n\n• In the absence of something technical, it’s okay to reference something non-technical you've seen on their public profiles. We've seen candidates connect with strangers based on a shared love of Star Wars or Hearthstone.\n\nWe understand that you won't always be able to find common ground. But if you can, it'll help you a lot, especially if you’re light on social proof or accomplishments.\n\n#### Selling yourself\n\nSelling yourself is usually about one of two things:\n\n• Accomplishments: What have you built or created?\n\n• Social proof: Have you worked at a top company or attended a top school?\n\nSome people are fortunate enough to have both, but many will have just one. That’s okay. We’ll work with what you have!\n\n#### Accomplishments\n\nWhat have you done that most other people haven’t? What have you done that, if you were to tell it to a stranger, would cause them to pause and think you're special or interesting?\n\nBelow are some examples:\n\n• You’ve had a blog post about a technical topic or a personal project do well3on Hacker News, Reddit, or social media.\n\n• Something you built at work got some great press when your company announced its last funding round.\n\n• You refactored a piece of code at work, and now it runs 100X faster.\n\n• You won a company hackathon.\n\n• You’re a core contributor to a notable open-source project.\n\n• Something you built is being used by a number of other people.\n\n#### Social proof\n\nSocial proof is more about your pedigree. If you attended a top school or worked at a company known for having a high engineering bar, you should absolutely mention it!People won't click on links or open your resume untilafterthey're interested, so you need to get them interested right away. That is: you should spoon feed them the most impressive-sounding things about you out of the gate. This may feel strange and uncomfortable, like you’re bragging. We assure you, however, that it’s necessary to get your target’s attention. They’re not thinking you’re bragging. They’re thinking, “Is this worth my time?” Your job is to convince them that it is.\n\nAlso, don’t forget to link to your LinkedIn or personal website. Attaching a resume may feel too heavy-handed for a first conversation, as we discussed above.\n\nHere's an example of a prospective intern, leveraging both social proof and accomplishments, to write a compelling email. His email isn't super personalized, but he did make some effort to say that what we do at interviewing.io is important.\n\n#### Formulating a strong call to action\n\nA call to action is an invitation for the recipient to do something. You can go one of two ways with your call to action: ask for a job interview or start a conversation.Which you do should be a function of how much firepower you have in the way of social proof and accomplishments. It’s not fair, but if you can get your target’s attention with one or both of those, being bold and asking for a job interview makes sense. This approach can be effective, but it won’t work for most people… because most people don’t have enough social proof or accomplishments to justify this type of request.\n\nIf you can’t leverage social proof or accomplishments, you’re going to have to work harder and bank entirely on building common ground, which will likely take some time and effort and involve a live conversation before they’re convinced to expend their social capital on you.\n\nIf you’re asking for an interview, just come right out and say it. You can use the intern candidate’s email from earlier as a guide. However, this isn’t our preferred way to do it, and we really recommend starting a conversation instead.\n\nTake a look at the email below.\n\nIn this email, the candidate doesn’t ask me about jobs — he just asks to meet to discuss a topic. Indeed, he’s done his research. I write atonabout judging resumes, and it’s a topic I could go on about for hours if you’ll let me. His email read like he’s genuinely interested in the subject and that we’d have a good conversation, so of course I responded. You’d be surprised how rare emails like this are. If you can find the topic your target cares about and write something that shows earnest, genuine interest, they’ll respond.\n\nWith these emails, you’re asking for a conversation, not a job interview… because the conversation is what will hopefully prove to the hiring manager that you’re worth interviewing.Then, once you have a conversation, the hiring manager will walk away with the impression that you’re a competent, thoughtful human being who’s interested in this sort of work. From there, getting a job interview will feel like an afterthought.\n\nAs such, don’t talk about jobs at all in this type of email, and in this particular case, don’t attach your resume — that will feel out of place and transactional. You can and should link to your LinkedIn so they know who you are and have some context. But spend the bulk of the email building common ground and coming up with an interesting reason for the two of you to talk.\n\nThis approach is much more effective than asking for an interview out of the gate!You’re not going to land a job from one email, so, as with any seemingly insurmountable goal, it’s important to think of your outreach as a series of steps where you put one foot in front of the other. Like in sales, all you need is to get to a conversation.\n\nIf your call to action is to set up a time to talk (which it probably should be because it’s specific), we recommend providing them with a time window. \"Would you want to meet up sometime?\" puts the burden on the recipient to pose a time, while \"Can we talk next Monday at 3pm?\" is problematic because, most likely, they aren't free then. Instead, try something like the candidate above did: \"Would you be available sometime within the next two weeks for a thirty-minute call? I'm free most weekdays between X and Y and can pretty much do any time on weekends if those are better for you.\"\n\n## Two templates for you to use\n\nBelow are two templates you can use for cold outreach. The first one is ideal but requires more effort and can't always be used. The second one is weaker but more generic.You can choose what fits your needs best. We expect both of these templates to be far more effective than throwing your resume into the blackhole of online portals.\n\n### Template #1: Use this template if your target has an online presence\n\nThis template includes common ground, accomplishments/social proof, and a call to action. It will get you the highest response rates, possibly anywhere from 25-50%. However, it can be challenging to use because it requires you to 1) do a deep dive into their online presence and 2) tie what you find back to something you’re doing. Sometimes, that tie-in might be tenuous or non-existent (in which case, maybe skip it).\n\nHey {Their First Name},\n\nI’ve read your work on {insert some details about their writing}, and I {insert your thoughts on the work}.\n\n{If you can make the connection between their work and yours, talk about something similar you’ve been working on.}\n\n{If you cannot, ask them a specific, thoughtful question about your work. Don’t worry about making it “the perfect question” like you might when you attend a talk and want to sound smart. Any earnest question will do. You don’t have to use this as a chance to show off!}\n\n{Finally, close with a sentence or two about you, if you have some social proof or impressive accomplishments you can share.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that’s great. If not, a LinkedIn will do.}\n\nNote that in this template, we leave some places for you to insert some social proof and your accomplishments. Even though this email is primarily about them and their work, and your references to yourself are primarily through that lens, it never hurts to drop in a few pieces of evidence that you’re someone who’s accomplished things and/or someone who looks good on paper.\n\n### Template #2: Use this template if you don’t have anything except a LinkedIn profile for your target\n\nThe reality is that you won’t always have enough information about your target to find common ground. In this case, you’ll lead with accomplishments/social proof and a strong call to action. We expect this template will get you response rates anywhere from 5-25%, depending on the strength of your achievements and pedigree. That said, we recommend treating this template as a last resort. Using it means you’ve exhausted any possibility of writing something personal.\n\nHey {Their First Name},\n\n{List 2 things about you. They can be impressive accomplishments of yours or social proof, as above.}\n\nI’m really interested in the work you’re doing at {Company Name}. {If you know what team they’re on and are interested in that specific team or are familiar with that team’s accomplishments, great! If not, just write a few earnest sentences about why the company is interesting to you.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that’s great. If not, a LinkedIn will do.}\n\nKeep your note short. The intent here is to make your target believe you’re an entity worth paying attention to, rather than them doing the easy thing: deleting your email.\n\nRegardless of which template you use, just like you have to manage your psychology when you prepare for technical interviews, you have to manage your psychology when doing outreach like this. You have to:\n\n• Mentally prepare yourself for the slog of writing personalized emails and doing the requisite research.\n\n• Get used to rejection. If you do write good emails and target the right people, you’ll have a much better hit rate than when you apply online, but you will still get ghosted a lot, and it will sting much more because, this time, you actually tried. But you know what? If you stick with it and do this right, within a few months, you’ll have a connection to a top-tier company.\n\nNow that you’ve girded your proverbial loins, it’s time to do the work. If you follow our advice, you’ll get 1-2 orders of magnitude more responses than from applying online, and with this approach, you’ll have at least a hiring manager at that company rooting for you!\n\nFootnotes:\n\n• RocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we’ve found that it’s not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.↩\n\nRocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we’ve found that it’s not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.↩\n\n• Recruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.↩\n\nRecruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.↩\n\n• Many people think that for something to be worth mentioning, it has to have gone viral. That’s simply not correct — in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.↩\n\nMany people think that for something to be worth mentioning, it has to have gone viral. That’s simply not correct — in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Decode String\n\n### Simplify Path\n\n### Lucky Numbers in a Matrix",
      "source_url": "https://interviewing.io/blog/how-to-get-in-the-door-at-top-companies-cold-out-reach-to-hiring-managers-part-2",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "How to sabotage your salary negotiation efforts before you even start",
      "content": "# How to sabotage your salary negotiations efforts before you even start\n\nNote: If you’d like a practical primer on negotiation, read myprevious post on negotiation first— it tells you exactly what to say in a bunch of situations. This post is longer and more academic, but of course I include some practical tips and teach you what to say in a few situations, as well.\n\nAt interviewing.io, we’ve coached hundreds of people through salary negotiation. We’re good at it — our average user gets $50k more in cash, and we have a 94% success rate.\n\nHaving done this a lot, we’ve seen our users make the same two mistakes, over and over, BEFORE they start working with us. These mistakes are costly and make it harder for us to do our jobs. Our advice is applicable to everyone, but I wrote this post primarily to share with interviewing.io’s user base, so that future clients of our negotiation service don’t shoot themselves in the foot.\n\nThese are the two things youmustavoid. Both involve how you talk to recruiters at the start of your job search, way before there’s an offer:\n\n• Revealing information too early in the game\n\n• Negotiating before you’re ready\n\nIn this post, I’ll explain why these two mistakes routinely sabotage salary negotiation efforts and what to say to recruiters instead. In a nutshell, if you can just be in “passive information gathering” mode (more on that later) for most of your recruiter interactions, you’ll be golden. It’s hard to not to share info about your job search with your recruiter, especially as you build more rapport with them, but we’ll tell you exactly what to say instead.\n\nBefore we get into all of that, I want to go over two foundational things about negotiation.\n\n• Recruiters are not your friend, and they don't work for you.\n\n• What negotiation is and what it’s not\n\n## Recruiters are not your friend, and they don’t work for you\n\n“It is difficult to get a man to understand something when his salary depends on his not understanding it.”-Upton Sinclair\n\nI used to be a recruiter. I ran my own agency, and I also worked in-house before starting interviewing.io. That means that I’ve had tostruggle with the tangled incentive structure that comes with being a recruiter(see the section called “You should write down your principles”). There’s always a tension — recruiters are, by and large, good human beings who genuinely want to help their candidates, but they also have an employer they’re beholden to, as well as a comp/bonus structure that rewards certain behaviors, some of which run counter to candidates’ best interests.\n\nThere’s some distinction between in-house recruiters and third-party recruiters (recruiters who work for an agency that does placement, rather than a specific company that’s hiring engineers).\n\n### Third party recruiters\n\nMy general policy with third-party recruiters is to not tell them ANYTHING and to always deal directly with the companies they introduce you, once you establish a point of contact there. You should assume that anything you tell your recruiter is going to get back to every company you’re working with. Why? Because their primary objective is to place your butt in the seat of one of the companies they’re working with, and they will do whatever they need to do to make the deal happen. Often, those things will run counter to your interests.\n\nA big misconception that many candidates labor under is the idea that because third-party recruiters get paid every time they make a placement, their interests are fundamentally aligned. At a high level, this is kind of true, but once you dig into the details you'll see a lot of nuance.\n\nA recruiter, depending on market conditions, gets anywhere from 8%-25% of the candidate’s base salary when they make a placement. In the current climate, it’s around 10%. However, that cut is going to the recruiting agency as a whole rather than to the individual recruiter — you will almost always end up working with large agencies rather than a sole-proprietor shop where the owner gets to take all of it home.\n\nLet's say that you get an offer with a base salary of $150,000. You talk to your third-party recruiter and tell them that you would like more money. The recruiter may go to the hiring manager and try to advocate for you, but they're not going to push very hard because the incremental difference in their cut is going to be pretty small and to them the thing that matters most is getting butts in seats. After all, they're evaluated on the number of hires they make, first and foremost, independent of comp. Understanding that, let's do the math anyway. Say that they’re able to risk closing the deal and get you $165k. Before, the agency would have gotten paid $15k. Now the agency gets paid $16.5k. That incremental $1.5k isn’t worth risking a deal over (even a few thousand dollars would not justify jeopardizing the deal). On top of that, the individual recruiter is only going to maybe get a few hundred dollars total from that increase. So for them the difference really isn’t worth it.Third party recruiters are incentivized to get the deal done, not to risk the deal by negotiating hard for you.\n\nMoreover, because they’re incentivized to get the deal done, you should assume that your recruiter will share anything you share with them with the company or companies they’ve introduced you to. If you tell them that a company is your first choice and that you’re tempted to accept, they will likely share that with the company and may even recommend that they not raise your comp, since you’re already so enthusiastic. If you share that you’re not very interested in a company, and the recruiter has other candidates they’re presenting, they will prioritize those candidates’ experience over yours and will possibly tell the company not to invest in you as hard.\n\n### In-house recruiters\n\nWhat about in-house recruiters? In-house recruiters may or may not get a bonus for hires that happen on their watch; it depends on the company. But if they do, that bonus is generally NOT tied to your compensation, and in some cases, they may get a bigger bonus if they’re able to negotiate you down. At big companies, in particular, in-house recruiters follow a playbook. They’re trained to make offers within specific bands, and they’re trained to mobilize such that they don’t lose candidates to other big companies — if you wave a Facebook counteroffer in front of Google, they will act. If you tell them you’re interviewing at a startup, they will not, because they know that startups don’t pay as much. They’re actually evaluated on how well they follow the playbook. Because of that, there is no reason to assume that their incentives align with yours. They’re incentivized, first and foremost, to follow the rules their head of department sets for them. This is true for how they evaluate candidates, who they let through, and how they read resumes. And it’s definitely true for how they negotiate.\n\nIf you’re interested in peeking behind the curtain on how recruiters think, I interviewed three of the best ones in the industry recently. You can watch that below:\n\n## What negotiation is and what it’s not\n\nProbably because of bad books and airplane magazine ads (for those of you old enough to remember those), people often think that negotiation is all about saying the right thing, or how firm your handshake is, or any other amount of silly nonsense.The reality is that negotiation is all about preparation and leverage.\n\nDon't forget to prepare for your technical interviews too. Sign up today for anonymous mocks with senior engineers from top companies.\n\nPreparation and leverage means doing the work to make sure that you have multiple offers, that all your offers come in at the same time, and that you don’t tip your hand too early. Laying this foundation is 80% of the work. You’ll need to slow some companies down, speed some companies up, and hold off questions from recruiters until you’re ready to negotiate, and not before. If you do this right, the actual negotiation part will be easy and almost a foregone conclusion.\n\nIs it possible to negotiate when you don’t have multiple offers and when you haven’t done the foundational work? Sure, it is, and we’ve sometimes had success with our users doing that. But it’s much harder, and the ceiling on how much more money you can get is lower.\n\nWith all that out the way, let’s talk about how the two biggest mistakes people make and how to not make them!\n\n## Mistake #1: Revealing information before you’re ready to negotiate\n\nYou’ve probably never been arrested, but if you’re like me, you’ve watched a lot of police procedurals on TV. You know the bit where they read the suspect their Miranda rights? They start like this:\n\nYou have the right to remain silent. Anything you say can and will be used against you in a court of law…\n\nTalking to recruiters is exactly the same, and one of the biggest mistakes we see our users make is sharing information too early. This is generally the only mistake we can’t walk back — once you share information, you can’t undo it, and sharing information actually has no upside, only downside. When you’re ready to negotiate, you’re doing so deliberately because you alreadyknowthe state of the world, and you’re choosing to reveal the parts that set you up for success. Before that, you’re just revealing stuff that can be used against you.\n\nSpecifically, do not share with recruiters anything about your salary history (though it’s illegal in many states to ask this directly, there are indirect ways of asking, and many still do), your salary expectations, where else you’re interviewing, and how far along in the process you are with other companies. In short, don’t share any information about money or other interviews.\n\nThe main question recruiters ask up front about money is: “What are your compensation expectations?” They claim that it’s because they want to make sure that you’re not so far off in your expectations that interviewing with that company would be a waste of time. This is a nonsense reason —very fewcompanies pay so much below market that it would be a nonstarter. Those companies know who they are, and they know to give you a heads up that they pay below market. Moreover, with the recent advent of companies sharing salary bands, you’ll have some idea if they're grossly below market before you interview. The real reason recruiters ask about compensation expectations is so that they can use it against you later in negotiations.\n\nAs such, if you answer this question with a number, you set an artificial ceiling on your offer. Do not even utter a single number to a recruiter until you’re ready to bargain. Do not go on levels.fyi and comment on the ranges listed for your level, even if you’re currently underpaid and an average offer from them would be life changing.Do not say a number first — ever.\n\nYou can see exactly what to say when you get asked about compensation expectations in the section called “How to handle recruiter calls” below.\n\nThe most obvious way to lose leverage is revealing information about money. The other way to lose leverage is by sharing information about where else you’re interviewing. If you share this information, you risk prematurely scaring off smaller companies because they don’t think they can win in a bidding war with FAANG. You also risk cornering yourself into a situation where the company knows your options are limited, and they might be inclined to lowball you as a result. Finally, you risk getting an exploding offer to try to force you to make a decision before you’re ready.\n\nBelow are some examples that I hope will drive these points home.\n\n### Example #1: You’re interviewing at Google, Meta, and two startups\n\nLet’s say that you’re currently interviewing at Google, Meta, and two startups (let’s call them A and B). You’re at the onsite stage with Google, you’re doing technical phone screens at both startups, and you’re just doing your first recruiter call with Meta. This is actually a very strong position to be in!\n\nOf course, your Meta recruiter asks you about your comp expectations and where else you’re interviewing.\n\nIf you reveal your comp expectations, it will be hard to walk them back:\n\n• Let’s say that you currently work at a startup and make $150k in cash with some amount of equity. You go to levels.fyi or a similar site and look up Facebook’s salary bands for the role you’re targeting. Let’s say those bands for total comp are $250k-$350k. Hell, that’s way more cash than you’re making now, so you decide to share that range, thinking that if those are their bands already, it does no harm. That’s reasonable, except that let’s say Google ends up making you an offer, and it’s $400k (we’ve seen this scenario happen to a bunch of our users). Now you have to walk back what you said, in which case your recruiter will invariably ask why. And now you have to reveal, before you’re ready, that you have a Google offer, which means you’ll probably end up revealing that it’s for $400k. Now you’ve set an artificial ceiling for your Facebook counteroffer to be $400k as well, when in reality that ceiling may have been closer to $450k or even $500k.\n\nIf you reveal that you’re at the onsite stage with Google and talking to some startups, here's what will happen:\n\n• Your recruiter will do the math and start asking you in a few weeks if you got to team matching.\n\n• Now Meta knows that Google is the only possible offer on the table that they should be worried about. They (and other big companies) don’t take startup offers nearly as seriously because equity is monopoly money 'til it’s not… and even if you don’t reveal the cash portion of your comp, they’ll assume it’s smaller than what they’re offering.\n\n• If you didn’t pass the onsite, it’s going to be hard to not share that when you’re persistently asked about it, unless you lie (which I absolutely do not condone). Now you’ve lost leverage because Meta knows that you cannot possibly have any other big tech company offers.\n\n• If you DO perform well in your Google onsite, that’s great, but team matching can take a while (yes, I know Google is changing their process such that you’re now interviewing for a specific team at the outset, but the broader point still stands). So now if Meta is about to make you an offer, they can set an artificially fast expiration date to run out the clock.\n\nThough you started in a strong position with multiple interviews, including at companies that are known to pay well, you’ve now weakened that position by sharing details.\n\nHere’s another thing that could happen in this scenario. Let’s say that it’s the same set of companies as above, but this time you’re talking to the recruiter from startup A. The recruiter asks you where else you’re interviewing.\n\nIf you mention that you’re interviewing at both Google and Meta, they might get spooked.\n\n• I’ve seen this happen a bunch. Dropping FAANG names can be a good power move, or it can shoot you in the foot, and which it’ll be really depends on the situation. Many small startups view FAANG candidates as risky because they know they can’t compete on comp and are worried that you’re going to walk the moment that you get a FAANG offer. This may or may not be true (not everyone is motivated just by comp!), but it’s not to your advantage to reveal it. YOU should be in control of if and when we play the FAANG card.\n\n### Example #2: You’re interviewing at one company and are also up for a promotion\n\nHere’s a different example. Let’s say that you work at a startup, and you’re up for a promotion soon. You figured it’d make sense to see what’s out there as well, so you’ve started interviewing with another startup.\n\nYour recruiter asks you in your first call about where else you’re interviewing and what your comp expectations are. You may be tempted to mention that you’re up for a promotion because that feels like it’ll give you leverage — if you get a promotion, the startup will have to work harder to entice you to leave, after all. Not so fast!\n\nIf you mention that you’re up for a promotion:\n\n• Your recruiter will start checking in consistently on whether you got it. Promotions always take longer than you think, and the increase in your comp may not be what you expect. At some point, if you haven’t gotten it yet, the recruiter will assume it’s not coming, and then you actually lose leverage because they know that you’re going to be more likely to walk.\n\nIf you mention that you’re not interviewing anywhere else, that’s just a giveaway that you have no leverage:\n\n• Promotion or not, many of our users assume that they have leverage because, “I don’t have to leave my job, so my current job is leverage.” That’s not true, though — even in this climate, and definitely in a hiring boom, an engineer having another job is table stakes. Almost every candidate you’re competing with will be currently employed. So even if having a job gives you a little bit of leverage, it gets canceled out when everyone has the same exact thing.\n\nThe details may differ in your case, but the fundamental mechanics are the same. When you reveal information before you know what hand you’ve been dealt, it can only hurt you. I’m struggling to think of a scenario where revealing something has been beneficial.\n\nI suppose the one exception to revealing information is this: Sometimes it can be useful to give your recruiter a rough estimate for when you’ll be collecting offers, e.g., “I’ve just started interviewing. I expect to get through all my interviews and onsites in the next 6 weeks and start collecting offers 2 months from now. Does that timeline work for you?”\n\nThis technique can be helpful for aligning expectations up front and then keeping recruiters off your back, as they won’t need to chronically text you to make sure you haven’t taken another offer yet (we’ll talk more about texting with recruiters in the next section). But note that even in this example, we’re not actually revealing any information about where you’re interviewing, how long it’s taking, or compensation. You’re just setting a timeline based onhypotheticalswithout giving out any details that can be used against you later. When you share the actual timeline you’re working with, you no longer control the timing of your job search, and a huge part of negotiation is controlling timing so you can make all your offers come in at the same time.\n\n## Mistake #2: Premature negotiation\n\n“Don't fire until you see the whites of their eyes!”-Unknown officer at the Battle of Bunker Hill\n\nJust like not revealing information too early, you also want to avoid negotiating too early. They’re two sides of the same coin.\n\nThink of it like a hand of cards. At the beginning, you have no idea what you’re going to draw. The longer you wait to negotiate, assuming you’ve timed things correctly, the more information you have. Then, when you’re ready to negotiate, you can look at your hand and selectively share information that puts you in the strongest position. For instance, if you have a high base salary from one company, a great equity package from a public company, and a signing bonus from a third company, you can strategically share those portions of the offers without sharing the weaker parts. Each negotiation is different, and it’s hard to give catch-all advice, but that’s generally the situation you should set yourself up to be in.\n\nWith that in mind, I’m a firm believer in negotiating when you’re ready and not before. Until you know what else is on the table, it’s really hard to 1) have the bravado that comes with actually having multiple offers (this is possible to fake, but trust me, it’s hard) and 2) negotiate effectively — you will never know as well as your recruiter what salary bands are like, what market comp is, and so on. They do this all day. This may be your first or fifth time doing it, but there’s massive experience and information asymmetry. There are two ways to combat this power imbalance: have as many of your interactions be asynchronous as possible (we discussed that earlier) and do everything you can to negotiate when you’re at the point of maximum information, and not before. Daniel Biales, one of our former negotiation clients,explained the latter really well.\n\nWhen I received a low offer, my first inclination was to start the negotiating process. Aline helped me to realize that this was not the best course of action. The problem with this approach is that I wanted to start negotiating before receiving my highest offer. If I negotiated an increase then, I would have had to renegotiate when I received the higher offer. This will cause negotiating fatigue for you and the company. They will be less likely to negotiate a second time because they don’t know how many times you will ask them for more. First, focus on strategies to draw out your decision. Then, when you have all your offers, start negotiating. There may be a couple of back and forth communications, but they will be over a short time span rather than drawn out.\n\n### Example #1 revisited: You're interviewing at Google, Meta, and two startups\n\nLet’s review our first example again. Imagine that you’re interviewing at Google, Meta, and two startups, A and B, just like before. Startup A makes you an offer: $160k base, 0.1% of the company in options over four years, no signing bonus. You react to it and say that you were hoping for a signing bonus. The recruiter comes back with a $10k signing bonus quickly and pressures you to make a decision, saying that they have other candidates waiting.\n\nYou try to stall, and then a few days later, Google makes you an offer that includes a $25k signing bonus. You’re still excited about the startup for reasons other than compensation, but now you have to go back to them and say that you actually got a $25k signing bonus at Google. They are unlikely to move again.\n\nSo, don’t negotiate until you’re ready. It’s hard to walk things back.\n\nThat doesn’t mean it’s not possible to negotiate in stages and gradually start bringing up all your offers. In my experience, however, this is a much more difficult maneuver, takes way more experience, is much more stressful for the candidate, and often ends up with the same results as laying a solid foundation and just negotiating once at the end.\n\nSo what do you say when you get asked pointed questions by your recruiter about your comp expectations or where you’re interviewing? And how do you delay negotiation until you’re ready?\n\n## How to handle recruitercalls:“passive information gathering” mode\n\nUntil you’re ready to negotiate, your default mode should be “passive information gathering.” This means that you listen rather than talk. I coach all of our negotiation clients to be in this mode when they get on a call with a recruiter.\n\n• Be polite and gracious to a fault.If it’s an offer call, thank them for the work they did to put your offer together and for advocating for you. If it’s earlier in the process, thank them for their help so far.\n\n• Express genuine enthusiasm.If it’s an early call, express excitement about the company or the interview process if there’s something idiosyncratically cool about it. If it’s an offer call, express excitement for the team, the projects, the hiring manager, whatever it is. And be genuine. Every offer will have something exciting about it.\n\n• If the recruiter is making an offer, do not react to what you’re being told beyond expressing enthusiasm.Say that you need some time to process and/or talk to your {family, partner, spouse}.Why should you not react? Because recruiters do this a lot, and you don’t. Negotiating on the phone on the fly is really hard. You’re going to need time to think, and you need a way to level the playing field. Email is the great leveler in these interactions because it’s asynchronous, and it gives you time to think and plan. No one is realistically expecting you to react to major life decisions on the fly!\n\n• Use email (not phone when possible andDEFINITELYnot texts) to interact with recruiters. We strongly advise you to leave your phone number off your resume, and if you have to fill in any required phone number fields while applying, to put a Google voice number. Also, in your first conversation with your recruiter, let them know that you are very bad at using the phone and strongly prefer email. Finally, whenever they text or call, wait a few hours, and answer with email and remind them that email is the best way to reach you (you can always say that you don’t have notifications enabled during work hours).Why does all of this matter? Phone calls are extremely disruptive, as are texts. The only way to level the playing field in negotiation is to have time to think and to possibly ask for advice. In particular, the casual nature of texting lulls you into a false sense of security. Moreover, the fact that texts or phone calls interrupt you from something else puts you at a disadvantage — when you get interrupted, your instinct is to quickly respond to make the interruption go away. But knee-jerk responses are rarely the right ones, and you’ll find yourself giving away information you shouldn’t have. You will have to get on the phone eventually, of course, but you never have to text.\n\n• If a recruiter asks you pointed questions about comp expectations or where else you’re interviewing, refer to the section called “Exactly what to say” right below!\n\n## Exactly what to say\n\nIn all the snippets below, you’ll notice that they end with the same sentence:I promise not to accept other offers until I have a chance to discuss them with you.\n\nThis is deliberate, and it’s there because it’s disarming. Fundamentally, recruiters ask you all of these questions because they don’t want to lose out on you and have you go to another company. If you can speak to that worry head-on, there’s not much they can say back.\n\nFor questions about comp expectations at the beginning of the process:At this point, I don’t feel equipped to throw out a number because I’d like to find out more about the opportunity first – right now, I simply don’t have the data to be able to say something concrete. If you end up making me an offer, I would be more than happy to iterate on it if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor questions about comp expectations at the end of the process:It sounds like there’s an offer coming, and I’m really excited about it. I’m not sure exactly what number I’m looking for, but if you’d be able to share what an offer package might look like, then I will gladly iterate on it with you if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor questions about where else you’re interviewing at the beginning of the process:I’m currently speaking with a few other companies and am at various stages with them. I’ll let you know if I get to the point where I have an exploding offer, and I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor questions about where else you’re interviewing at the end of the process:I’m wrapping things up with a few companies and in process with a few more. I promise to keep you in the loop, and I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor when a recruiter provides you a salary range and asks you to comment on it, at the beginning of the process:Thank you for sharing that with me. Right now I don’t know enough about the opportunity to value it concretely, and I honestly haven't done my market research. If you end up making me an offer, I would be more than happy to iterate on it if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor when a recruiter provides you a salary range and asks you to comment on it, at the end of the process:Thank you for sharing that with me. I haven't done my research, so I am unable to comment on that range. However, if you do make me an offer, I promise to iterate on it if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\n## Conclusion\n\nI said it in the beginning, and I’ll say it again. Negotiation isn’t about saying the right thing. It’s about laying a foundation: not revealing anything until you’re ready to negotiate, not negotiating too early, and making sure that you’ve set yourself up to have multiple offers.\n\nThen, once those offers come in, you swoop in with sharp precision, negotiate once (possibly with just your top choice company), and be done with it.\n\nIf you’ve set yourself up for success, done the foundational work, and haven’t made the mistakes in this post, the negotiation will feel like a foregone conclusion.\n\nIf you need some hands-on help navigating salary negotiation,sign up for our salary negotiation package. You don't pay anything unless you get more, and we’ll be with you every step of the way, for every recruiter call, every email you need ghostwritten, and every strategy discussion. Unlimited sessions, unlimited help, whatever we need to do to get you results.\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Generate Parentheses\n\n### Build a Max Heap From an Array\n\n### K Closest Points To Origin",
      "source_url": "https://interviewing.io/blog/sabotage-salary-negotiation-before-even-start",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "It's OK to postpone your interviews if you're not ready",
      "content": "• For employers\n\n• Gift mock interviews\n\n# It's OK to postpone your interviews if you're not ready\n\nAt interviewing.io, we’ve seen hundreds of thousands of engineers go through job searches, and the biggest mistakes we see people make are all variations on the same theme: not postponing their interview when they aren’t ready.\n\nI’ve found myself repeating that it’s OK to postpone interviews so often that I finally broke down and decided to make it a blog post. It’s very simple advice, so the bulk of this post will be spent trying to convince you that it’s fine to postpone. And then of course I’ll tell you what to say.\n\nDo any of these situations sound familiar?\n\n• A recruiter from a FAANG (or other top-tier) company contacts you out of the blue and invites you to interview. You do the recruiter call, and it goes well. The recruiter reaches out to schedule your technical phone screen. You haven’t practiced enough, and you know it, but you are scared to tell the recruiter that you want to postpone the interview by a few months (months?!) because the position may no longer be there. So, you plow ahead, do the phone screen, fail it, and then you’re frozen out for a year.\n\n• You were able to postpone your technical phone screen and take the time to study up on data structures & algorithms problems. You do well in the interview. But then your recruiter schedules your onsite the following week. Because you were so focused on DS&A prep, you haven’t had much time to study up on system design. You fumble the system design interview during the onsite, and you either get rejected or get down-leveled.\n\nBoth of these situations are extremely common, but they’re both preventable. You can just ask to postpone. There are a few edge cases where that’s not a good idea, but in most situations, it’s the right thing to do.\n\n## When postponing is OK, and when youshouldn’ttake our advice\n\nIf you’re applying to a large company with a centralized process (in other words, a process where you interview first and get matched with a team later), postponing is almost always OK. These companies are perpetually hiring, and their open roles are evergreen.1\n\nEven if you’re applying to a large company with a decentralized process (where you interview for a specific team), we recommend postponing unless you’re extremely excited about the team you’re talking to. In that scenario, it’s possible that if you postpone, the slot will be filled. But if it’s not a perfect fit and you’d be OK with another team, we recommend postponing — in the worst case, you’ll simply get slotted into a different team.\n\nThe only time when postponing isn’t a good idea is when you’re applying to a very small company that has just one open headcount. In that scenario, it is possible that postponing will cost you the opportunity because they’ll choose another candidate. However, you can ask how likely that is to happen, up front.\n\nWith that edge case out of the way, here’s a little-known fact about how timing works at large companies: Recruiters don’t really care when you interview. Though they’d prefer that you interview sooner rather than later so they can hit their numbers, at the end of the day, they’d rather be responsible for successful candidates than unsuccessful ones.\n\nEvery recruiter, in every job search, will tell you that time is of the essence because of all the other candidates in the pipeline. Most of the time, that is irrelevant and just something they say to create an artificial sense of urgency. There are always other candidates in the pipeline because the roles are evergreen. But they have nothing to do with your prospects.\n\n## Exactly what to say to postpone your interviews\n\nYou can use this text verbatim when postponing your interviews, and, with some small edits, you can even use it several times (e.g., before the phone screen and then again before the onsite).\n\n> I’m really excited about interviewing at [company name]. Unfortunately, if I’m honest, I haven’t had a chance to practice as much as I’d like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I’ll realistically need a couple of months to prepare. How about we schedule my interview for [date]?\n\nI’m really excited about interviewing at [company name]. Unfortunately, if I’m honest, I haven’t had a chance to practice as much as I’d like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I’ll realistically need a couple of months to prepare. How about we schedule my interview for [date]?\n\nOne important thing to remember is to be conservative about how long it will take. You’ve probably heard the adage about how, when you have to estimate the time an engineering task will take, you should think of a number and double it. Here, you may even want to triple it.\n\nI’ve seen many candidates ask for 2 weeks because that feels like a reasonable thing to ask for, only to have it blow up in their face when they realize they need to ask for another extension (which is still worth doing but harder because the company may think you’re taking them for a ride). If you need two months, ask for two months.\n\n## Postponing can also be a good way to control the timing of your job search\n\nThis section is extra credit, but once you get comfortable with postponing your interviews when you’re not prepared, you can use the same skills to batch your interviews and ultimately control the timing of your job search.\n\nWhat does it mean to control the timing of your job search? Ideally, you want all of your offers to come in at the same time, both because it maximizes optionality (one company that arbitrarily offers first doesn’t rush you into making a decision) and maximizes leverage (you can negotiate from a position of power).\n\nIf you want to dive deeper into this process, take a look at a book I recently co-wrote,Beyond Cracking the Coding Interview. It includes a full chapter about how to manage your job search, which covers everything from determining the order in which to approach companies to how to speed them up and slow them down once you’re in process. There’s a lot more detail than I can touch in this post, and much of it depends on your specific circumstances, but you can probably get 50% of the way there just by postponing your interviews in batches.\n\nThe big insight here is that, except for the edge cases we discussed above, a recruiting process can be paused at any point.\n\nIn other words, you can do a bunch of outreach to companies, then do a bunch of enthusiastic recruiter calls, and THEN pause all the processes until you’re prepared to do technical phone screens.\n\nThen, you batch the phone screens.\n\nFinally, if needed, you pause again to give yourself time to prepare for onsites. Onsite interviews require a different skill set than technical phone screens. The technical phone screen isn’t about depth or fit — it’s just a way to cut people who aren’t likely to pass the onsite.\n\nThe onsite, on the other hand, isn’t just meant to cut poor performers. It’s at once a deeper dive into your technical ability and a way to gauge fit. If you’ll be interviewing with your future team (typical at companies with a decentralized process), it’s also meant to assess your ability to work together, collaborate on hard things, complement the team's existing skillset, and so on. It usually has some coding (to verify that your technical phone screen wasn’t a fluke), but the focus is usually on system design and behavioral interviews2, which are also the interviews commonly used for leveling decisions.\n\nSo, onsite prep is much more about system design and getting your stories right for your behavioral interviews. Some people can pull off prepping for both coding and sys design/behavioral at the same time. For many, depending on their existing familiarity with the material, it’s a tall order. So, it’s wise to take the time you need and prepare.\n\nThen, once you’re ready, you batch the onsites.\n\nWhen your offers come in, you should ask for extensions as needed, speed companies up, and startnegotiating(which we’ve written about in the past and which, of course, is covered at great depth in the book).\n\nFootnotes:\n\n• Yes, it’s true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you’d have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze.↩\n\nYes, it’s true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you’d have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze.↩\n\n• Some companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.↩\n\nSome companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Copy List With Random Pointers\n\n### Maximum Subarray\n\n### Fruit into Baskets\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/its-ok-to-postpone-your-interviews-if-youre-not-ready",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "The unwritten rules (till now) of negotiating with Meta",
      "content": "# The unwritten rules (till now) of negotiating with Meta\n\nIf you don't like reading, here's me presenting the contents of this blog post in a video. Pick your poison.\n\nEDIT: This post is based on stories from users who were interviewing for E4-E6 SWE and MLE roles at Meta. Other, more specialized roles may have different processes than what's described here.\n\nEDIT 2: As of Q1 2025, it looks like Meta is sometimes foregoing team matching in favor of driving candidates to their Monetization org (which apparently has a lot of open headcount). If this happens to you, after you pass the hiring committee, instead of entering team matching, your recruiter will tell you that you’ve been assigned to this particular org and, if you proceed, you’ll just get an offer. You won’t get to talk to your future manager, and you’ll find out team details a week after you join. From what we know, it’s possible to insist on team matching instead, with the downside that it’ll take an unknown amount of time rather than certainty.\n\nWhy does this matter?\n\nIf you’re looking to use your Meta offer primarily as leverage with other companies, this is a great thing because you’ll get numbers quickly. If you’re seriously interested in Meta, then this could be good or bad and depends where you are in the process and how much you want to work on monetization versus other things/how much you want to meet your manager before you work for them.\n\nSo if you’re seriously interested in Meta, whether this is good or bad depends on where you are in the process. If you need them to move quickly, it’s great because you know you won’t be stuck in team matching. However, if you need them to slow down because you aren’t as far along with other companies or because you want to work in a different org, you may want to ask your recruiter to stick with the old team matching process. In our experience, it’s ok to ask this. Your recruiter may not tell you outright that that’s an option, but if you ask, they will probably do it. Of course, you may be stuck longer than you want. But at least then you will have more of a say in what you work on.\n\nAt interviewing.io, one of the services we offer our users is salary negotiation. Even though I’m the founder, I still do many of the sessions myself because they give me an invaluable insider’s perspective on what’s actually going on in the engineering market, what different companies’ offers look like, how companies extend offers, what kinds of deadlines they give, and how much they go up in compensation, under what circumstances.\n\nAccess to this kind of data is great because it helps me make better business decisions. But sometimes I see questionable patterns of behavior among companies. Recently, I’ve observed a string of practices at Meta that I find reprehensible, and that’s what this post is about. I’ve seen the same practices with enough candidates, and across enough different titles and positions, that it’s become clear to me that they are not isolated incidents or a rogue recruiter’s doing but rather a consistent implementation of a deliberate strategy that comes from the top.\n\nI’m writing about this for two reasons. First, if you’re negotiating with Meta, you need to know how they operate and understand the unwritten rules of the game. If you do not know the rules, you will fail — long before you even start negotiating.\n\nSecond, I’m hoping that someone at Meta sees this post and that maybe it’ll spark an internal discussion about changing the rules.\n\nLastly, if you’re about to interview there or are interviewing there already, pleaseread our free, long-form guide to their interview process and questions.\n\n## Meta basically has a monopoly on FAANG hiring right now\n\nI mentioned above that we do salary negotiation, but our main business is mock interviews. We offer anonymous mock interviews in the style of a bunch of different companies (mostly FAANGs). This means we know how many people are practicing for interviews at Google vs. Meta vs. other FAANGs, and that lets us guess (pretty accurately) how much hiring is actually happening at these companies.\n\nYou can read in way more detail about how all the FAANGs are doing in ourrecent blog post where we made 2024 predictionsbased on our proprietary data. But while I was writing that post, I noticed something odd. Meta was hiring way more engineers than any of the other FAANGs. In fact, Meta hiring is up more than 10X since January of last year.You can see that more recently Amazon has picked up a bit, but it’s very recent and not enough to drive major change in other companies’ behaviors (at least not yet). And, yes, Netflix is hiring too, but Meta’s eng team is more than 10X the size of Netflix’s, so in the absolute, Netflix’s hiring volume isn’t enough to balance Meta out. For all intents and purposes, Meta’s the only FAANG that’s really hiring at scale — and they’re currently getting away with treating candidates really poorly as a result.\n\n## How Meta negotiates, given their effective monopoly on eng hiring\n\nHere’s how Meta runs their hiring process. These practices have been consistent across every negotiation client we’ve had in the past 6 months or so.\n\nMeta’s hiring is centralized, which means that you enter one big interview process that’s completely divorced from which team you might end up on and you interview with people whom you might never work with again. If you do well, there will be a team matching component after you pass the onsite but before you get an offer1. With that in mind, here’s how they run their process, once you get the green light.\n\n• Team matching. This can take days or weeks, depending on how many teams you speak to and how many conversations you have with the people on each team. You'll speak with hiring managers to gauge fit and chemistry, and if you’d like, you can also talk to peers. We've heard that sometimes you get the chance to talk to a handful of teams, and sometimes it's over 10. After your team-matching conversations, your recruiter will ask you to choose a team. In order to move forward, both you and the hiring manager have to opt in2.\n\n• Likely down-level you. Sometime during team matching, you’ll probably find out that you’ve been down-leveled. Often, your recruiter will cite your performance in the system design portion (and sometimes the behavioral portion). According to a recent survey we did, something like 55% of Meta candidates get down-leveled (more likely for generalist SWE roles, less likely for more niche roles like ML).\n\n• Make a lowball offer with just a few days to make a decision. Once you’re done with team matching, things get dicey. Your recruiter will make you a lowball offer that’s often $50k or more (!!) below the average TC on levels.fyi. Moreover, you usually just get a couple of days to make a decision. If you were down-leveled, your lowball offer may include a small signing bonus as a consolation prize.\n\n• Refuse to negotiate unless you can show them other offers from comparable companies. Your recruiter will say something like, “If you’d like to increase your offer, I can take this to the compensation committee, but I need a compelling reason [i.e., another offer].\"\n\n• If you have other offers, they will apologize for the lowball offer, citing that it’s “automatic numbers from our computer” and raise the numbers by $100K or more (in first year’s TC). If you do not, you will be stuck with a lowball offer, though you may be able to negotiate a small signing bonus if the offer didn’t come with one already.\n\n## How to negotiate with Meta\n\nBelow are the steps for negotiating with Meta in a hard climate where they have a monopoly on hiring. We hope that most of these won’t be necessary in the future. They are:\n\n• Don’t share anything with your recruiter\n\n• Make sure you have other offers\n\n• Slow-play team matching\n\n• Build rapport with every hiring manager you talk to\n\n• Actually negotiate (this is the easy part)\n\n### Don’t share anything with your recruiter\n\nWe wrote a whole post about how to avoid sharing information with your recruiter and why this is so vital. If you share where you’re interviewing or how far along you are, or if you start negotiating prematurely, the strategies below won’t work.\n\nPleaseread our post on not shooting yourself in the foot during negotiationsbefore you continue!\n\nYou should also be aware of a few tricks specific to Meta recruiters. If you're not forthcoming about where else you're interviewing, they may say a few sneaky things.\n\nFirst, they may say something like, \"Well, we just want to know where you're interviewing so we can intro you to others who interviewed at those companies but ultimately chose Meta.\" Don't fall for that early in the process. It's a trap to get information out of you. You can always ask for those intros later, when you're negotiating and it's the right time information about your other offers.\n\nThe other thing they do is fish, saying something like, \"Well, in case you're interviewing at {Google, Netflix, some other big company they don't want to lose candidates to}, just so you know, they move kind of slowly, so we may not be able to wait.\" There, the Meta recruiter's goal is to get you to say, \"Oh, no, don't worry, I'm not interviewing at Google!\"\n\nNow, you've lost leverage in their eyes because that's one less competitive company they might lose you to... and they'll be more confident about lowballing you later on.\n\n### Make sure you have other offers\n\nAs you may have guessed from reading the previous section, it’s critical to have other offers, and not just any offers but ones from top-tier companies who pay very competitively3.\n\nWe realize that saying “have other offers” doesn’t capture the blood, sweat, and tears that go into months of interview prep, applications, emails, recruiter calls, and interviews. We know it’s hard, but as you’ll see, it makes a huge difference in your compensation.\n\nGetting those offers doesn’t start when you’ve received your Meta offer. It starts months before. Make sure that you get enough initial conversations with other FAANGs, FAANG-adjacent companies, and late-stage sexy startups to end up with at least one other offer, ideally at least two. Depending on your interview performance, this might be anywhere from 4 to 10 initial conversations.4\n\n### Slow-play team matching\n\nHaving your offers come in around the same time is critical forany negotiation, but it’s especially important with Meta because they take such a hard line — without other offers, they will not meaningfully budge.\n\nObviously, you’ll want to start your conversations with other companies well in advance of your Meta interviews and do everything you can to make sure they all come in at the same time. However, even with your best efforts, it’s not guaranteed that your timing will match up.Here’s how to make sure that your offers come in at the same time: slow-play Meta’s team-matching process.\n\nTeam matching is actually the part of your Meta journey where you have the most leverage and power. Why leverage? At this point, they know they want you, but they can’t yet hold an offer deadline over you. We’ve already mentioned that once they make the offer, your recruiter is going to push very hard to have you accept, often giving you a deadline of something like two days. In your recruiter’s eyes, you’re a ticking time bomb, where for every day you don’t sign, the deal loses momentum, and your odds of signing drop off. Recruiters are also evaluated on how many candidates they close, so it’s in their interest to create a false sense of scarcity in order to rush you and to use high-pressure sales tactics to get you to seal the deal.\n\nAnd what power do you have? It turns out you can really control how long team matching takes, within reason. If you’re still wrapping phone screens with other companies, slow-playing is the best thing you can do. Here’s how to do it.\n\nWe’ve recently heard that Meta is now insisting that hiring manager conversations happen in series, but even if Meta lets you talk to multiple hiring managers concurrently, try to serialize those conversations as much as possible. For instance, if you hear from your recruiter that you’re going to start team matching on a Monday, and they offer to set up some calls for Wednesday, ask to do the first call on a Friday and the next call the following Tuesday.\nWhen we advise our users to do this, we often get pushback because they’re worried that slowing things down will make them look disinterested/not serious. We promise you that’s not the case. The biggest risk you run when you slow-play team matching scheduling like this is losing the chance to work on a specific team. If you find that your recruiter has proposed what seems like the perfect team for you, you can and should prioritize doing that call as soon as possible.\n\nIn addition to serializing your hiring manager conversations, for each team, ask to talk to a few individual contributors on teams that you’re serious about. This isn’t just a stalling tactic. These are the people you’ll be working closely with every day, and they’re the ones doing the job you may have in the future. They’re also less likely to do hard sells, and if you ask thoughtful questions, you’ll learn a lot about what to expect. We’re always surprised by how few candidates ask to speak to their future peers, out of a mistaken concern that asking for too much will make them look disinterested or unengaged.\nJust like with hiring manager calls, if you need to slow things down, we recommend scheduling calls with your peers a few days apart.\n\n### Situations where slow-playing may bite you, and how to know the difference\n\nWe have seen two instances when our advice about slow-playing could backfire. You probably remember when companies started to freeze hiring aggressively in mid-2022 — if you didn’t get matched before the ax came down, you were left out in the cold. Much more recently, we heard from some of our users that Meta put a pause on team matching for E4 roles (largely outside the Bay Area), and many candidates were stuck in a holding pattern (while Meta figured out headcount constraints, though it looks like it’s since been resolved, and picking back up in earnest. Slow-playing and then getting stuck is obviously an unfortunate situation, as is being on the wrong end of a hiring freeze, but these situations are rare, and in our humble opinion, not worth optimizing for — in most cases, you will not be dealing with an impending freeze or stalled matching. If you’re unsure about team supply or the state of hiring, you can do two things:\n\n• Always ask your recruiter up front to share the number of teams that candidates have had the chance to talk to, on average, recently.\n\n• Look at ourreal-time graph of FAANG hiring volume(as opposed to the graph above, which is a monthly snapshot). In this real-time graph, you can see what portion of our mock interview volume is dedicated to practice in the style of Meta, Amazon, and Google. Historically, our purchasing behavior has lined up very well with what’s actually going on in the market, and the rate of change in this graph should give you an idea of whether Meta is slowing down. As you can see, there was a dip in February (and one in December, but that almost always happens because hiring slows down over the holidays). If you see dips like these, you’ll want to make sure that you do (1) and ask your recruiter about the situation inside. You may also choose not to slow-play for too long.\n\nThere's one more situation where slow-playing may bite you. If you match with a team and really click well with the manager, to the point where you have your heart set on it, it may be wise to accept that team instead of trying to drag things out. We've heard of times where, even if the candidate asked the manager about open headcount and confirmed they didn't have to rush, the role got filled from under them (they were able to talk to other teams afterwards but missed the chance to be on that specific team). If a specific team feels irreplaceable to you and you'd be crushed if you didn't get it, then that may be more important than maximizing your negotiation.\n\n### Build rapport with every hiring manager you talk to\n\nOutside of using the team-matching process to control your timeline, there is one other important tactical piece of advice: Do your best to build rapport with hiring managers.\n\nAs we said above, recruiters are trying to close the deal. That’s their job. Hiring managers, on the other hand, are trying to lay the groundwork for a good working relationship with you. As a result, their interests are much more aligned with yours. Of course, they still want to close you, but it’s not worth it to them to employ high-pressure tactics, and it’s not something they’re trained in or comfortable with (in fact, many of them hated these tactics when they were on the other end of it while looking for work)5.\n\nAs such, hiring managers will generally be a lot more transparent with you about how much time you actually have to make a decision, and their answers will likely be very different from the ones you get from recruiters.\n\nWe’ve advised all of our Meta candidates to ask their prospective hiring managers about when they realistically have to make a decision by, and the differences between what the hiring manager has told them (“Take your time; you have a few weeks at least.”) and what their recruiter has told them (“We’re talking to a lot of candidates for that team. To ensure your spot, you should make a decision in the next few days.”) are stark.\n\nThere’s simply no downside to building rapport with hiring managers. At worst, you make a professional connection. At best, you get a head start on a great working relationship with your new boss.\n\nOne practical note: Always ask your hiring manager for their email address in case you have more questions later. This way, if your recruiter starts telling you that you need to make a decision by Friday, you can ping your hiring manager, explain that you’re still thinking, and ask if it’s OK to take a few more days. Almost always they will say yes.\n\n### Actually negotiate (this is the easy part)\n\nIf you’ve done everything else in this post, the negotiation is the easy part. By now, you’ve wrapped up team matching, chosen a team, and have likely gotten an aggressive offer deadline.\n\nYou have also not shared any offer details till now. As we said at the beginning of this post, the success of your strategy hinges on the recruiter not being aware of the other companies you’re interviewing with. This will be the first time they find out about it, and that will put them on their proverbial back foot.\n\nTo respond to the offer, you can send an email6that looks something like the below. The details will differ, and how much you reveal about the other offers will vary, but here’s the general idea.\n\nHey [Recruiter name],\n\nThank you so much for the offer, for working with me throughout this process, and for all your help with team matching.  I wanted to share some details with you. I currently have offers from {Company 1}, {Company 2}, and {Company 3}.\n\n{Company 1} has offered me a significantly higher base salary of $220k. {Company 2} has a comparable base but has offered me significantly more equity: $500k. I know {Company 2} is a startup, but they’re late stage and handing out RSUs. Those RSUs are as valuable to me as public company equity.\n\nFinally, {Company 3} has thrown in a meaningful signing bonus, and their performance bonus is actually at 25%, not 15%.\n\nI’m very excited about the opportunity to work at Meta and about the team. {Insert some authentic reasons why you’re excited about the company, the team, your new boss, etc.} It’d be great to see a meaningful increase in compensation to make my decision easier.\n\nThank you, and I look forward to hearing from you.\n\nIn the template above, I’ve assumed that not all of your offers are stronger than Meta’s across the board, which is why I’ve cherry-picked which pieces to share. Sometimes, if you’re lucky, you’ll have multiple offers that have a higher base, more equity, and a higher signing bonus. In that case, it’s less of a game of skill — just throw the numbers at them, and they’ll exceed the other offers without much prompting.\n\nIf you run this play, your recruiter will apologize for low-balling you, blaming the “computer” for giving them those numbers. Then, like clockwork, you will see a $50k to $150k jump in your offer (precisely how much depends on where your other offers are from and how strong they are).7\n\nNow, whether you take that offer is up to you.\n\nSome closing thoughts. I’m a capitalist. Meta’s behavior here is aggressively capitalistic, if short-sighted – once other FAANGs start meaningfully hiring again, and Meta employees figure out that there’s a $150k comp differential between people with the same job title, they’re going to pay the piper and likely see a bunch of attrition. Ultimately, the market will correct these practices. However, I also believe that individuals have the right and duty to be as informed as possible and to wield whatever weapons in their arsenal to advocate for themselves, rather than waiting on the mercy of slow, indifferent market forces.\n\nAs such, we hope this post has given you some ammunition in your negotiations and helped reduce the information asymmetry between you and Meta, a huge, aggressive player with basically a monopoly on eng hiring at the moment. And we hope that if anyone from Meta is reading this, it’ll spark some internal conversations about what’s right. And if they don’t, other FAANGs’ recruiters will swoop in soon enough.\n\nWant to know if you’re ready to interview at Meta? Do anonymous mock interviews with real Meta interviewers, and see exactly where you stack up.\n\n• How team matching works changed fairly recently. In the past, you’d get an offer before you matched with a team and do a 6-week “bootcamp” where you’d get up to speed on Meta’s tech stack, infrastructure, and systems, followed by a multi-week “speed dating”-esque team matching cycle. Bootcamp still exists, but now it's much shorter (2-4 weeks), and the focus is getting new engineers ramped up on generic tools. After that, new engineers continue to ramp up on their specific teams.↩\n\nHow team matching works changed fairly recently. In the past, you’d get an offer before you matched with a team and do a 6-week “bootcamp” where you’d get up to speed on Meta’s tech stack, infrastructure, and systems, followed by a multi-week “speed dating”-esque team matching cycle. Bootcamp still exists, but now it's much shorter (2-4 weeks), and the focus is getting new engineers ramped up on generic tools. After that, new engineers continue to ramp up on their specific teams.↩\n\n• We’ve recently heard that Meta may now be insisting that team matching conversations happen in serial, i.e., you can only do one at a time. However, this doesn’t meaningfully change our advice.↩\n\nWe’ve recently heard that Meta may now be insisting that team matching conversations happen in serial, i.e., you can only do one at a time. However, this doesn’t meaningfully change our advice.↩\n\n• You might say, “Aline, why can’t I just make up offers?” We could never, in good conscience, advise that. It’s unethical, and though I’d argue that while Meta’s negotiation practices are also unethical, that’s not the way to win. Outside of ethical considerations, while the risks of getting caught are low, they’re not zero. Lying about offers, in our mind, is the last refuge of the incompetent.↩\n\nYou might say, “Aline, why can’t I just make up offers?” We could never, in good conscience, advise that. It’s unethical, and though I’d argue that while Meta’s negotiation practices are also unethical, that’s not the way to win. Outside of ethical considerations, while the risks of getting caught are low, they’re not zero. Lying about offers, in our mind, is the last refuge of the incompetent.↩\n\n• The advice in this post is orthogonal from your career goals and what you want to work on. This blog post is about navigating an unfair system filled with opaque rules while maximizing your cash. It is not about self-actualization, though we’d argue that creating the most optionality for yourself helps with self-actualization as well. You can also talk to smaller companies and use your big-co offers as leverage to increase your startup equity. There’s nothing wrong with that, but more detail on optionality and self-actualization is outside the scope of this post.↩\n\nThe advice in this post is orthogonal from your career goals and what you want to work on. This blog post is about navigating an unfair system filled with opaque rules while maximizing your cash. It is not about self-actualization, though we’d argue that creating the most optionality for yourself helps with self-actualization as well. You can also talk to smaller companies and use your big-co offers as leverage to increase your startup equity. There’s nothing wrong with that, but more detail on optionality and self-actualization is outside the scope of this post.↩\n\n• Of course, some hiring managers will use high-pressure sales tactics or create false timelines to try to close you. But that’s the exception rather than the rule. You can decide if that’s something that you want to weigh when judging whether or not you want to work for them.↩\n\nOf course, some hiring managers will use high-pressure sales tactics or create false timelines to try to close you. But that’s the exception rather than the rule. You can decide if that’s something that you want to weigh when judging whether or not you want to work for them.↩\n\n• We strongly urge you to avoid negotiating over the phone and over text, whenever possible. Your recruiter does 5 of these calls a day. You might do one of these calls every few years. Do the hard part over email. It’s the best way to level the playing field.Read this postto learn how to avoid synchronous phone negotiations (just look for “phone”).↩\n\nWe strongly urge you to avoid negotiating over the phone and over text, whenever possible. Your recruiter does 5 of these calls a day. You might do one of these calls every few years. Do the hard part over email. It’s the best way to level the playing field.Read this postto learn how to avoid synchronous phone negotiations (just look for “phone”).↩\n\n• One advanced maneuver is to pit all your other companies against each other and raise up their initial offers BEFORE talking to Meta. We’ll likely write about how to run this play in a future post.↩\n\nOne advanced maneuver is to pit all your other companies against each other and raise up their initial offers BEFORE talking to Meta. We’ll likely write about how to run this play in a future post.↩\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Design a Free Food App\n\n### Integer Replacement\n\n### Find the Missing Number in an Array",
      "source_url": "https://interviewing.io/blog/how-to-negotiate-with-meta",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Read nine chapters of Beyond Cracking the Coding Interview for free",
      "content": "• For employers\n\n• Gift mock interviews\n\n# Read nine chapters of Beyond Cracking the Coding Interview for free\n\nAlong with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I wrote the official sequel toCracking the Coding Interview. It's fittingly calledBeyond Cracking the Coding Interview..\n\nNow, we're releasing9 chapters of the book for free! There are two PDFs in the linked folder:\n\n• The first seven chapters of the book, covering topics such as why technical interviews are broken, what recruiters won't tell you, why not to spend a lot of time on resumes, and how to get in the door at companies without a referral.\n\n• Two technical chapters: Sliding Windows and Binary Search. Our new take on Binary Search teaches one template that works for every binary search problem on LeetCode, with only a single-line change you need to remember. The Sliding Windows chapter features 6 unique sliding window templates that make off-by-one errors a thing of the past.\n\nTake a look, and let me know what you think. You can reach me ataline@interviewing.io.\n\n#### Related posts\n\n#### Stuff we write about\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Recover Binary Search Tree\n\n### Decode String\n\n### Integer Replacement\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/blog/nine-free-chapters-of-beyond-cracking-the-coding-interview",
      "author": "Aline Lerner",
      "user_id": "aline123"
    },
    {
      "title": "Amazon Leadership Principles Interview (questions + tips)",
      "content": "• For employers\n\n• Gift mock interviews\n\n# A Senior Engineer's Guide to the Amazon Leadership Principles Interview\n\n## How to approach an Amazon Leadership Principles interview\n\n#### Table of Contents\n\n#### Part 1: Amazon Leadership Principles Explained\n\n#### Part 2: What to expect, what to avoid, and what to do during an Amazon Leadership Principles interview\n\n#### Amazon Leadership Principles interview question examples\n\n• Learning Center\n\n• Amazon Leadership Principles\n\n## Creating the Amazon Leadership Principles guide\n\n## About interviewing.io\n\n## How to use the Amazon Leadership Principles guide\n\n## Amazon Leadership Principles Explained\n\n## What Amazon Likes\n\n• Direct challenges\n\n• Showing customer obsession (all the time)\n\n• Big losses\n\n• No answer (more so than a bad answer)\n\n• Stories that go in a perfect full circle\n\n## What Amazon Dislikes\n\n• Conflict rabbit holes\n\n• Not enough impact and metrics\n\n• Not enough focus on individual contribution\n\n• Saying LPs out loud\n\n• Misunderstanding\"Have Backbone; Disagree and Commit\"\n\n## What are Amazon’s Leadership Principles (LPs)?\n\n## In a nutshell, Leadership Principles (LPs) are the 16 values Amazon cares the most about.\n\n### 1. Customer Obsession\n\n• Tell me about a time when you strongly disagreed with your manager or peer on something you considered very important to the business.\n\n• To try to meet the high expectations of our customers, we sometimes promise more than we can deliver. Tell me about a time when you overcommitted yourself or your company.\n\n### 2. Invent and Simplify\n\n• Tell me about a time when you didn’t meet customer’s needs.\n\n• Give me an example of a complex problem you solved with a simple solution.\n\n### 3. Learn and Be Curious\n\n• Give me an example of a mission or goal you didn’t think                 was achievable. We all have things about ourselves we'd                 like to improve on at work. Give me an example of                 something that you've worked on to improve your overall                 work effectiveness.\n\n### 4. Insist on the Highest Standards\n\n• Tell me about a time when you had to work with a difficult customer or user.\n\n• Tell me about a time when you used external trends to                 improve your own company's products or services.\n\n### 5. Deliver Results\n\n• Could you tell me about a time where you were working on a project where you were working with another person. Over time, that person lessened their involvement in the project and you had to take on more responsibility.\n\n• Tell me about a strategic decision you had to make without clear data or benchmarks.\n\n### 6. Strive to be the Earth’s Best Employer\n\n### 7. Dive Deep\n\n• Tell me about a time when you had to communicate a change in direction that you anticipated people would have concerns with.\n\n• Tell me about a time where you were thrown into a project where you had no experience in.\n\n### 8. Have Backbone; Disagree and Commit\n\n• Often, we must make decisions as a group. Give me an example of a time you committed to a group decision even though you disagreed.\n\n• Tell me about a time where you disagreed with a coworker or PM or manager because you believed the decision they wanted to make was wrong for the customer.\n\n### 9. Success and Scale Bring Broad Responsibility\n\n### 10. Ownership\n\n• Describe a time when you took on work outside of your comfort area.\n\n• Describe a situation where you made an important business decision without consulting your manager.\n\n### 11. Are Right, A Lot\n\n• Tell me about a time when you did not effectively manage your projects and something did not get completed on time.\n\n• Tell me about a time you wouldn’t compromise on achieving a great outcome when others felt something was good enough.\n\n### 12. Hire and Develop the Best\n\n• Tell me about a time when you received negative feedback.\n\n• Describe a time when you improved morale and productivity on your team.\n\n### 13. Think Big\n\n• Give an example of a creative idea you had that proved really difficult to implement.\n\n• Tell me about a time when you encouraged a team member or organization to take a big risk.\n\n### 14. Bias for Action\n\n• Give me an example of a calculated risk that you have taken where speed was critical.\n\n• Tell me about a time where you were the first one to take action on something.\n\n### 15. Frugality\n\n• Tell me about a time you pushed back on a deadline.\n\n• Give me an example of how you have helped save costs or eliminate waste within your role or organization.\n\n### 16. Earn Trust\n\n• Tell me about a time when you had a disagreement with a colleague or manager.\n\n• Describe a time when you needed to influence a peer who had a differing opinion about a shared goal.\n\n> \"There is no clear rubric for what type of answer ‘meets or raises\n      the bar.' The evaluation is subjective, and it relies on the\n      interviewer's interpretation of the problem and solution.\"interviewing.io interviewer from Amazon\n\n## How to approach the Amazon Leadership Principles interview\n\n> \"25% of SDEs who pass the technical bar are disqualified due to\n    behavioral concerns.\"interviewing.io interviewer from Amazon\n\n### Why interview preparation matters\n\n> \"I wish more candidates would prepare well in advance for our behavioral questions. I wish they knew the questions' patterns and were prepared to speak about their experience in an effective way.\"interviewing.io interviewer from Amazon\n\n## High-level strategy to frame your Leadership Principles interview\n\n### The most common pitfall to avoid\n\n### Put Customer Obsession above all else\n\n## What to expect, what to avoid, and what to do during an Amazon Leadership Principles interview\n\n## What to expect when answering questions about Amazon Leadership Principles\n\n## Four common mistakes to avoid when answering Amazon interview questions\n\n## Most Common Mistakes in Terms of Content\n\n### Not enough impact or metrics\n\n### Falling down rabbit holes when asked about conflict\n\n### Not focusing on individual contribution\n\n> \"When talking about your projects, most of your words should be about ‘I' not ‘We.' Your answer should mainly be about your individual contribution.\"interviewing.io interviewer from Amazon\n\n### Saying Leadership Principles out loud\n\n• Saying “customer obsession”\n\n• Saying “deliver results”\n\n• Saying “delighting users is important”\n\n• Saying “get stuff done”\n\n## Tips for a successful Amazon behavioral interview\n\n### Beat the drum with customer obsession—the most important Leadership Principle\n\n## ANSWER AWithout customer obsession framing\n\n• I had to organize and refactor the codebase. And I thought object-oriented programming was the best approach. But one of my teammates did not buy in. I tried to explain the benefits but did not sway him. I wanted to get the work done, so I ended up going ahead with the approach he proposed. At the end of the day, delivering the feature was more important than proving my point to stick with the object-oriented approach. I made peace with my teammate and went ahead with his approach.\n\n## ANSWER AWith customer obsession framing\n\n• I had to reorganize the codebase and refactor the codebase. And I thought object-oriented programming was the best approach. But my teammate didn't buy in. For the sake of pushing something to prod quicker, we ended up going with his approach.But looking back on it, I wish I would have fought more for the object-oriented approach, and the reason is because user experience is really important to me. If we had the codebase nicely structured with object-oriented design and patterns and hierarchy, it'd make it way easier to maintain and more robust and less buggy. So later on we could develop cool new features for customers and push them out quicker.\n\n### No answer is often better than a bad answer\n\n> \"It's better to share no example than a bar-lowering example. For instance, if the interviewer asks you to share a time you ‘Insisted on the Highest Standards,' and you talk about code formatting one source file, that is almost definitely a negative mark against you. It would be better to share nothing at all.\"interviewing.io interviewer from Amazon\n\n### The most misunderstood Amazon leadership principle\n\n> \"Hey, I don't agree. And I don't agree for these reasons. I think it's not going to work. However, for the sake of getting the work done, I'm on board. And down the road, if things aren't going as planned, then we can circle back and revisit this discussion.\"\n\n### Follow four rules when speaking about conflict\n\n#### Clearly articulate the conflict in the first few seconds of your answer.\n\n> EXAMPLE:\"In my current role, a conflict occurred over choosing how to integrate a third-party software. The conflict was: my manager and I couldn't agree on an approach.\"\n\n#### Make sure the topic of a conflict is relevant to your level.\n\n#### Choose actual conflicts, not potential conflicts.\n\n## Example of a potential conflict that got resolved quickly\n\n• “They said X. I said Y. And then they said, ‘Oh, you're right. Actually, Y is better.' And then we did Y.”\n\n## Example of an actual conflict\n\n• “They said X. I said Y. And then time passed. They still said X and I still said Y. So, I did research on X and Y. More time passes. I showed this research to get buy-in from some Important People. Then I showed my research to the People Who Said X. More time passes. The People Who Said X weren't convinced until Z happened. Then the People Who Said X got on board and said Y.”\n\n#### Focus on what happened and stick to the facts.\n\n> EXAMPLE:\"One conflict I had with my manager was about integrating a third-party API. They thought this service would improve performance. My research showed it improved performance marginally but complicated maintenance significantly. After gaining support from the team lead, I walked my manager through the data flows. They weren't convinced; however, they were more open to the idea. At the urging of myself and the team lead, the manager took it to one of their stakeholders who agreed that the long-term maintenance costs were too high to justify using this service. This led to us not integrating the third-party service that had been proposed.\"\n\n### Share experiences where you took a big loss\n\n### Questions the candidate asks the interviewer are an opportunity to show signal\n\n> Question from the candidate:\"Let's say you have a user who used to use the Alexa services when they were a new user, but now they don't use the Alexa services anymore. How do you collect the data to understand what went wrong, so you can improve user experience? Most users are going to ignore surveys, so how do you learn about stuff like what features they didn't like?\"\n\n## How to practice for a Leadership Principles interview in six steps\n\n### 1Extract the raw data\n\n> \"Interviewers may spend 10-15 minutes on a single point, asking multiple follow-up questions and going deep into the point.\"interviewing.io interviewer from Amazon\n\n### 2Frame the data\n\n### 4Refine the stuff that works\n\n### 5Go from good to great\n\n### 6Adopt the Amazon mindset\n\n## Amazon Leadership Principles interview question examples\n\n## Amazon Leadership Principles interview question examples\n\n## Bucket #1: Technical problem solving\n\n## Bucket #2: Learning (and failure)\n\n## Bucket #3: Getting stuff (for the business) done\n\n## Bucket #4: Interpersonal conflict\n\n## Bucket #5: Ambiguity\n\n###### Creator and Contributing Author\n\n###### Core Consultants\n\n###### Special thanks\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/guides/amazon-leadership-principles",
      "author": "Kevin Landucci",
      "user_id": "aline123"
    },
    {
      "title": "System Design Interview Guide for Senior Engineers",
      "content": "# A Senior Engineer's Guide to the System Design Interview\n\n## How To Prepare For a System Design Interview\n\n#### Table of Contents\n\n#### Part 1: How to approach a system design interview\n\n#### Part 2: 15 fundamental system design concepts\n\n#### Part 3: A 3-step framework to crush any system design interview\n\n#### Part 4: Watch us design simple systems from scratch, and learn how to get unstuck\n\n• Learning Center\n\n• System Design\n\n### Who we are\n\ninterviewing.io is your trusted advisor for every stage of your job search. In our lifetime, we've hosted close to 100k mock interviews, conducted primarily by senior engineers from FAANG. We have the recordings from these interviews, as well as feedback and outcomes, which lets us perform cool and useful analysis, like the kind in this guide. We’ve also helped thousands of engineers get jobs and negotiate their salaries, and along the way we’ve built a community of people dedicated to helping each other get better.\n\nYouTube: Watch \"How interviewing.io Helps Engineers Land Jobs\"\n\n## What this guide is and whom it's for\n\nCandidates often get overwhelmed with system design. We don’t blame them. There are literally hundreds of topics you can study when preparing for an interview. But does that mean that you should drop everything and go study all of them? Absolutely not. It’s vital to master the basic principles first.\n\nMastering the fundamentals will go a long way in system design. When you’re new to a subject, there can be diminishing returns by studying too much over a short period of time, and this can actually hurt you in a real interview. Early in your preparation, it can help to know more and have more options, but this can also cause you to feel overwhelmed by the sheer number of potential answers, possibly leading you toward overcomplicated solutions.\n\nOur experience has shown us that 80% percent of system design interviews involve only 20% of the concepts. This guide will teach you those key concepts in depth to increase your odds of excelling during an interview.\n\nOur primary audience is backend-leaning engineers who are interviewing for mid-level to senior-level roles. Whether you’re new to system design interviews or you’re a seasoned system design interviewer looking to refresh or hone your skills, this guide is for you.\n\n## How we made this guide\n\nWe began by listening to 30+ hours of system design interviews and system design lessons. We then performed data analysis to identify 50+ of our highest rated interviewers.\n\nCollectively, the interviewers who worked on this guide have conducted thousands of system design interviews in the wild, and we stress-tested this material by asking engineers who were new to system design to take our ideas for a spin.\n\nOur unique data set (the collective knowledge of our interviewers and our database of recorded interviews) makes us well equipped to tell you exactly what to expect in an interview. If we discuss something in this guide, it’s likely to appear in 80% of mid-level / senior interviews.\n\nRead on to gain insight from the people on the other side of the table, who will give you unique access to the only thing separating you from the high-TC job you seek: the minds of your interviewers.\n\n## How to use this guide\n\n### This guide is structured into 4 parts.\n\n• How to approach a system design interview\n\n• Key topics to understand\n\n• A 3-step framework to crush any system design interview\n\n• Watch us design popular systems from scratch, and learn how to get unstuck\n\nNew to system design interviews? We recommend reading Parts 1-4 in order. The first two sections will introduce you to the high-level theories that will help you ease into the practical exercises and advanced strategies found in Parts 3 and 4.\n\nIf you have completed several system design interviews, feel free to begin with Part 4, which includes advanced techniques and practical tips to help you pass your interview. Afterward, you can quickly review Parts 1-3 by focusing on topics that seem helpful to you.\n\nWe created this guide because we want to provide you with a shortcut to interview success. At the same time, we don’t want you to take any shortcuts in your preparation. So we’ve got a bit of a paradox, because on one hand, we want to teach you the cheat codes that will help you beat the game, but on the other hand, we want you to put in the sweat equity required to learn the intricacies of system design yourself. The truth is that there are no royal roads, and a good interviewer will be able to recognize if you haven’t put in the work. By reading this guide and really thinking about it, you’ll learn enough to be prepared for your interview, and along the way we will provide you with a collection of tricks that will make everything easier. So here’s your shortcut, but don’t take any shortcuts.\n\n### Editor’s note\n\nWe use the terms “machine,” “server,” and “node” interchangeably throughout the guide.\n\n### Table of Contents\n\nThe “Table of Contents,” located on the left side of the screen, is designed to help you find and navigate the stuff you need. Use it. That way you can revisit conceptual sections to get a refresher and fast forward to sections you’re most interested in.\n\nTo give you a heads up, it will take about 6 hours (3.5 reading and 2.5 watching videos) to consume all 4 parts of this guide. We promise those hours will be incredibly well spent!\n\n### Rule of thumb\n\nIf you have an upcoming system design interview and you're vastly unprepared,the best thing you can do is reschedule your interview.The bigger the company, the less they care about rescheduling.\n\nExceptions to this Rule of thumb: you have an extenuating circumstance that requires you to get a job fast (e.g., visa issues).\n\n## Introduction to System Design\n\nYou may be reading this guide because you recently failed a system design interview. Or you watched a YouTube video that made system design seem like an overwhelming topic you’ll never fully grasp. Or perhaps you have years of experience working in the field, yet you struggle to demonstrate your technical prowess in the brief span of a system design interview.\n\n### Do not panic!\n\nProfessional experience with distributed systems isn’t needed to pass system design interviews.And even if you do have that experience, keep in mind that many talented distributed systems engineers still struggle with the system design interview format. How you perform in an interview is not a measure of your worth as a software engineer—it is a measure of your ability to do system design interviews. The two are related but not equal; being a good programmer has a surprisingly small role in passing interviews.\n\nOne of our experts was asked: “As an experienced engineer without any scalable systems experience, how can I go into something like a FAANG system design interview when I have never designed those systems before?” Here’s the expert’s reply:\n\n\"I worked at Facebook for five and a half years. I learned more about system design from reading the internal interviewing wiki than I ever got from working at Facebook. They've got all kinds of distributed systems knowledge there, and it’s concentrated in a handful of infrastructure teams who build really great libraries and really great backend systems. That means that the rest of us never have to think about distributed systems. We get to say, 'I'm gonna make a new data type, and if I dump a billion records in it tomorrow, it doesn't matter. The systems folks have my back.' I worked at Facebook for a really long time, but I learned almost nothing about designing systems from experience.\"\n\nYou can pass system design interviews even if you’ve never designed distributed systems before. If you have copied files between machines with drag-and-drop, you are halfway there. If you implemented clients or servers or have opened network connections, you’ve got this. This guide will teach you the most important 20% of information that will appear 80% of the time in system design interviews. By the end of this guide you won’t be an expert, but you’ll be well on your way to being a better engineer and a much better interview candidate.\n\n## The difference between engineering problems and design problems\n\nIn this excerpt taken from Design Your Life, written by two Stanford professors and engineers, you’ll get a better understanding of how different problems require different approaches. We bolded to emphasize the parts that are most important to note.\n\n“There’s a difference between design problems and engineering problems...Engineering is a good approach to solving a problem when you can get a great deal of data and you’re sure there is one best solution.Bill [one of the authors] worked on the problem of engineering the hinges on Apple’s first laptops, and the solution he and his team came up with made those laptops some of the most reliable on the market. The solution required many prototypes and lots and lots of testing, similar to the design process, but the goal of creating hinges that would last five years (or opening and closing ten thousand times) was fixed, and his team tested many different mechanical solutions until they met their goal.Once this goal was met, the solution could be reproduced millions of times. It was a good engineering problem.\n\n“Compare this with the problem of designing the first laptop that had a ‘built in mouse’. Because Apple’s computers relied on the mouse to do almost everything, building a laptop that required you to be wired up to a regular mouse was unacceptable.This was a design problem. There was no precedent to design toward, there was no fixed or predetermined outcome;there were plenty of ideas floating around the lab, and a number of different designs were tested, but nothing was working. Then along came an engineer named Jon Krakower. Jon had been tinkering around with miniaturized trackballs, and had the crazy idea to push the keyboard to the back of the unit, leaving just enough room to squeeze in this tiny pointing device. This turned out to be the big breakthrough everyone had been looking for, and has been part of the signature look of Apple laptops ever since.\n\n“When you have a desired outcome (a truly portable laptop computer) but no clear solution in sight, that’s when you brainstorm, try crazy stuff, improvise, and keep ‘building your way forward’ until you come up with something that works. You know it when you see it.A great design comes together in a way that can’t be solved with equations and spreadsheets and data analysis. It has a look and feel all of its own - a beautiful aesthetic that speaks to you.”\n\nThis is one reason engineers new to system design can bomb their first couple of system design interviews spectacularly: They approach a design problem as if it’s an engineering problem. There is not a single “best” solution to a system design problem. There are no predetermined outcomes. The less code you write in a system design interview, the better.\n\nTo succeed in a system design interview, you want to collaborate with your interviewer, try crazy stuff, and try more crazy stuff until the design “feels right.”\n\n## How approaching a system design interview is different than a coding interview\n\nThe difference between coding and system design is the difference between retrieving and creating.\n\nInstead of finding (or “retrieving”) a solution, you are creating a solution. In this way, coding is akin to a science, while system design is more like an art.\n\nHere’s another way to think about it. You aren’t solving a problem—you’re creating a map to help someone else find the solution. Instead of coloring inside some lines, you’ll need to draw the lines for someone else to color in. In a system design interview, there are no correct answers—though there are certainly incorrect ones—so there is nothing to solve. Instead, you’ll ask questions, make stuff, and explain how and why the stuff you made was reasonable.\n\n##### Don’t think like a coder. Think like a Tech Lead.\n\nDuring the interview, you’ll spend an hour playing the role of a Tech Lead, so just pretend that the interviewer is a junior engineer who will be implementing your design. Juniors will have lots of questions, and since you’re the Tech Lead, you want to welcome these questions.\n\n“Pretend it’s 1999, so a lot of the stuff we have access to today simply doesn’t exist. You and a group of your schoolmates are in your garage, hoping to make something. You're the most senior one there. You will design it and your friends will code it up, and the thing is: the Minimum Viable Product has to be completed by tomorrow. So, there’s no time to prep and no need to worry about the intricacies of system architecture that you don’t know. Just answer this: How would you design this system so your friends could code it up today, right now? It doesn’t have to be pretty. It doesn’t have to be complicated. It doesn’t have to impress anyone. It just has to get done.”\n\n##### What you do is important, but how you communicate is even more important.\n\nThe value of communication in coding interviews is controversial (source). But without communication in a system design interview, nothing happens. By necessity, it’s more conversational in nature than a coding interview and will have more back and forth between interviewer and candidate.\n\nWith that said, sometimes you’ll have an interviewer who is cold or not very collaborative. Dealing with these interviewers requires practice. The more senior you become, the more important it is to learn how to adjust your communication style to match your audience. We recommend completing mock interviews with a variety of interviewers to help you become a seasoned, fearless veteran of system design interviews.\n\n##### There are no optimal solutions in system design interviews.\n\nThere’s no “right” way to design a system. If two experts designed the same system, you would see two different designs, beautiful and aesthetic in their own way and both as “correct” as the other (and with the accompanying justifications to support them).\n\nInpart 2, two experts will show you how they would each design the same system, providing you with a practical lesson on this topic.\n\n##### Lean towards your strengths.\n\n“If you want to be a great interview candidate you’ve gotta know… It’s your responsibility to leave breadcrumbs for the interviewer to go where you want them to go. That way you have them walk you down the road where you are at your best. And then the Jedi mind trick is to get them to think it was their idea to get you there.”\n\nWhat if your measurement of success in an interview isn’t what you say, but instead it’s what you get the interviewer to say? Imagine you say something that engages the interviewer’s curiosity so much that they have no choice but to follow up with a “tell me more about that.” If the areas you get them to dig into the deepest, are things you’re good at: congratulations you are doing the Jedi mind trick.\n\nA candidate doing a system design interview will usually experience confusion. The interview format is so open-ended, you cannot know about everything they'll ask you. However, there will be opportunities to strut your stuff. There will be moments when they ask you about something you know very well, and when this happens put your shoulders back and flex your muscles on this topic.\n\n## What it’s like to walk into a system design interview\n\nWhen beginning an interview, try to imagine what the interviewer is looking for. What are their goals for the session? How can you help them achieve those goals in a way that persuades them that you’ll be a strong hire?\n\nPut simply, the interviewer's goal is to find enough data to hire you.Given the limited time available to them, an interviewer has to try to get enough positive signal about your ability so they can justify giving you a “hire” rating. In one hour you have to show your interviewer that you understand the fundamentals of a system (end to end). You also should be able to name and explain (at least at a high level) each part of the system, describe the tradeoffs you make, and find a solution.\n\nThe best way to accomplish this is to imagine that you’re explaining a design doc to a group of more junior engineers. They will ask you questions about your decisions and want to know what you’re trying to solve. Anticipating these questions and your responses will set you up for success in the interview.\n\nWant to know exactly what a FAANG System Design interviewer looks for?\n        Get detailed feedback on your system design skills from our professional\n        interviewers.\n\n## What your interviewer looks for, and what they don't\n\nWith this basic model in mind, let's consider the main elements that system design interviewers look for, and the elements that don’t matter.\n\n### What your interviewer wants to see\n\n• a broad, base-level understanding of system design fundamentals.\n\n• back-and-forth about problem constraints and parameters.\n\n• well-reasoned, qualified decisions based on engineering trade-offs.\n\n• the unique direction your experience and decisions take them.\n\n• a holistic view of a system and its users.\n\n### What your interviewer is not looking for\n\n• deep expertise in the given problem domain.\n\n• assumptions about the prompt.\n\n• specific answers with ironclad certainty.\n\n• a predefined path from the beginning to end of the problem.\n\n• strictly technical considerations.\n\n##### You do not need to display deep expertise in the given problem domain. Interviewers want to see that you have a broad, base-level understanding of system design fundamentals.\n\nYour interviewer will expect you to have knowledge of a wide range of basic topics, but they won't expect you to be an expert in any of them. For instance, you should understand the difference between SQL and NoSQL databases, their broad performance characteristics, and the types of applications each might be useful for (which we’ll teach you later in this guide). But you would not need to know how the internals of either type of database work at any kind of detailed level.\n\nIn spite of this, you still might be asked to design those internals! Keep in mind, though, that your answer doesn't need to be optimal or reflect real-world implementations. For example, if an interviewer asks you to design a database/SQL query engine, they're not trying to discern if you're familiar with the academic literature on query engines or discover how much time you've spent working on database internals.\n\nInstead, they want to see how you would approach the problem based on what you do know, starting from first principles and collaborating with them. Your answer will probably not be anywhere near optimal, and that's OK! The interviewer will focus on the process, not the result.\n\n##### Interviewers want to engage you in a back-and-forth conversation about problem constraints and parameters, so avoid making assumptions about the prompt.\n\nInitial prompts to system design problems tend to be intentionally light on detail. Many candidates make a mistake by extrapolating details from the initial prompt and crafting a solution based on those assumptions.\n\nFor example, imagine that the interviewer instructs you to design a \"photo sharing service\" with some minimally defined capabilities. This may cause some candidates to imagine that they're rebuilding Instagram and start designing around the assumption that all images will be relatively small, not examined closely, and that extensive compression to save storage and bandwidth is acceptable.\n\nBut the interviewer didn’t tell you to rebuild Instagram, so you’ll need to keep in mind that there are many different types of photo sharing services. The interviewer may have had in mind something like Imgur or Photobucket, sites that cater more to basic image hosting for the web. Or they could be thinking about something like Flickr or 500px, services built for photographers to show off their work in high resolution.\n\nSo how do you figure out what type of service the interviewer wants you to build? Ask them! A basic prompt leaves room for you to start a conversation with your interviewer about the system you're designing—what type of users does it serve, what type of traffic can it expect, what limits will it have? Demonstrating that you can think critically about the parameters of your service is the first step in any system design interview.\n\n##### Interviewers are not looking for specific answers with ironclad certainty. They want to see well-reasoned, qualified decisions based on engineering trade-offs.\n\nBe very careful any time you find yourself responding immediately to a prompt in a system design interview. Even aspects of your design that seem insignificant need at least cursory consideration. Let’s use IDs as an example.\n\nA candidate will often start a discussion of a data model with a statement like, \"I'll use auto incrementing IDs,\" or \"I'll use GUID here\" as kind of a default approach to assigning IDs to data. In many applications, however, the type of ID you assign to your data has practical consequences.\n\nIs this ID going to be exposed to users? If so, how long does it need to be to avoid collisions? If we auto-increment it, are we worried about the visibility that will give third parties into our traffic patterns or the possibilities of users guessing the IDs to each others' data? If it's intended to be shared, is it convenient to type? If you print it on a business card or a flier, does it contain characters that you could confuse for each other (e.g., “1” and “I”, “0” and “O”)?\n\nYou don't need to hold an inquiry for every minor detail, but always be sure to give some justification for the decisions you make and let your interviewer know how your decisions would change in different circumstances. System design problems don't have a single definitive answer, so interviewers just want to see that you can justify your answers.\n\n##### Interviewers are not looking for a predefined path from the beginning to end of the problem. They want to see the unique direction your experience and decisions take them.\n\nCoding problems usually have an expected path. Typically you'll begin with an obvious but inefficient solution, and then the interviewer will prompt you for a series of improvements. Those improvements lead you to increasingly efficient solutions until you finally arrive at the optimal implementation.\n\nSystem design problems, on the other hand, resemble a Choose Your Own Adventure book rather than a linear novel. A complex system contains a multitude of sub-components, each one of which could serve as a design problem on its own. After you've sketched the overall layout of your system, an interviewer may decide to keep your focus on the big picture or dive into a deeper examination of one particular component.\n\nThe path your interview takes will be steered by your interviewer, but they're likely to take cues from the sub-problems in which you display interest or aptitude. In some cases they may explicitly ask you which part of the problem you'd prefer to focus on.\n\nEven if you're not choosing directly, you can still influence an interview's direction. As you talk your way through a solution, it’s OK to specifically note the parts that you have experience in and explain when you're making educated guesses. Your interviewer won't expect you to know everything, but giving them a better idea of what you do know will help them steer the interview in ways that reveal your strengths and problem-solving ability.\n\n##### Interviewers seek a holistic view of a system and its users.\n\nWhen faced with a choice in a design interview, it's easy to focus on the technical details, but remember that computer systems serve human users, so you’ll want to anchor your technical decisions to the user experience they enable.\n\nSuppose, for instance, that the image sharing service you're designing will require users to log in before uploading an image. In technical terms, you might want to avoid login to keep the database schema simpler, or you could introduce login to gather better metrics. An anonymous experience may be best for a public image-hosting site intended for quick turnaround and low interaction, while a logged-in experience offers the possibility of community features like commenting and sharing, personalized metrics, and the ability to restrict an upload to authorized viewers. You may want to take either approach or even both, allowing a limited anonymous experience with extra features for logged-in users.\n\nThe important thing is to discuss the possible approaches and their consequences for the user experience with your interviewer before making a decision. You can never go wrong by making the end user the driving force in your design.\n\n## Green Flags, Red Flags, and other signposts\n\nThink of red and green flags as signposts you can use to orient yourself in the interview. Green flags indicate that things are going well, that you're engaging with the interviewer and making a positive impression. Red flags warn you that you may be going astray and should try to get the interview back on track.\n\n### Red Flag #1: You believe that to pass a system design interview, you should just “play the game, keep talking, and make sure nobody explodes.”\n\nFollowing this quote’s advice has steered many interviewees in the wrong direction. There is no game, and talking for the sake of talking is one way to hang yourself with the rope the interviewer gives you. Also, if the goal is to not explode, well, you’re wasting your and your interviewer’s time.\n\n### Green Flag #1: You communicate honestly about what you know and what you don’t.\n\nAs we mentioned earlier, this guide will teach you the basic information that you’ll be asked about in 80% of system design interviews. Although these are great odds, you still may encounter a scenario that’s beyond your level of understanding. If this happens to you, don’t worry! Just engage in an honest dialogue with your interviewer, explaining when you lack certain knowledge or have gaps in your understanding. When you do have a sense of how to proceed, but you’re uncertain, you should communicate from first principles. Later in this guide, we will explain how to overcome that uncertainty and still score points with your interviewer.\n\n### Red Flag #2: You find yourself pushing against interviewer feedback.\n\nKeep in mind that your interviewers use the same problems over and over again, and they frequently see candidates make the same mistakes. If they try to divert you from a course of action, it's likely because they've seen others flounder when using the same approach. You may be the one candidate in a hundred who finds a unique and better solution—we've had this happen before!—but carefully consider the odds before proceeding with a solution against the interviewer's advice.\n\nWith that said, there is an art to pushing back against your interviewer when the situation calls for it, and later in this guide we’ll teach you how and when to employ this strategy .\n\n### Green Flag #2: The interview feels like a collaboration between you and the interviewer.\n\nWhen the interviewer offers feedback, you integrate it into your design. You ask probing questions and receive useful answers about the system you're designing, its users, and its traffic.Try to establish a tone as if you were working through a problem with a coworker rather than proving yourself to an interviewer.In the real world, when you’re assigned a project, you’ll have to ask a variety of people several questions to ensure that you fully understand the problem before making decisions. That’s what interviewers want to see.\n\n### Red Flag #3: You skip over questions and ignore interviewer prompts, trying to move the interview ahead without addressing their concerns.\n\nIt's OK to not know things—no one will have every answer—but it's better to admit that to your interviewer than to avoid the questions altogether. Your interviewer may be able to offer you a hint or help you reason about alternatives if they know you're struggling, but if you skip right ahead you'll miss the opportunity to provide them with any positive signal from that portion.\n\n### Green Flag #3: Your role determines who should drive the focus and pace of the interview.\n\nIf you’re looking for a mid-level position or below, your interviewer should determine the direction and speed of the interview. Given an initial overview of your design, they may ask you for clarification on some aspects of it. They may ask you to produce a more detailed design for one or more components. And they may also change the requirements and ask how you could adapt your solution to accommodate this new view of the world. Wherever they take the interview, follow along and focus on the areas they direct you to.\n\nIf you’re applying for a senior role (or above), it’s a good sign if you direct more of the interview. In junior system design interviews, the interviewer expects to drive the interview, but as you reach senior levels the expectation shifts to the interviewee.\n\n### Anecdote from a seasoned interviewer\n\n​​Being overly confident and talking too much might count against a mid-level candidate. Some interviewers (especially off-script ones) love giving candidates more rope to hang themselves with, and then they ask specific questions that focus on what the candidate struggles with.\n\nIf your goal is to maximize a mid-level offer, not improve your \"average passing rate\" (i.e., if you are comfortable sacrificing some senior-plus chances to increase your mid-level chances), then you might be better off consciously \"giving control away\" to your interviewer.\n\nSimply put, at the above-senior level an awkward pause will be held against you—that’s basically guaranteed. But at mid-level, most of your attempts to fill in an awkward pause may hurt you more than keeping silent.\n\nAnother way to think of it: when you are not leading the conversation, you signal that you’re not really far above mid-level. (But if you are comfortable at mid-level, this is not a downside!)The saying, ‘Better to remain silent and be thought a fool than to speak out and remove all doubt’ can be true for mid-level interviews but not for seniors or above-senior.”\n\nThe saying, ‘Better to remain silent and be thought a fool than to speak out and remove all doubt’ can be true for mid-level interviews but not for seniors or above-senior.”\n\n### Red Flag #4: You leave long stretches (several minutes) of silence multiple times throughout the interview.\n\nIf you're struggling to provide an answer, give yourself a little bit of time to come up with something. If you're truly stuck, however, you should ask your interviewer for help. They can't tell that you're at an impasse unless you tell them, and you may waste valuable interview time while they debate whether it's been long enough to interrupt you.\n\n### Green Flag #4: You take time to collect your thoughts and refine solutions before offering them up out loud/on the board.\n\nAn interview doesn't need to be a continuous stream of consciousness, and it never hurts to sanity check your ideas before verbalizing them.\n\nIn Part 4 of this guide, we’ll teach you how to get unstuck and exactly what to say when you’re stuck.\n\n### A few more signposts\n\n##### A common failure point occurs when candidates don’t make decisions\n\nOften, candidates will say things like: “we could use this type of DB, or this other, or that other, and these are some pros and cons…” and then they move on to another component. It’s a good practice to talk about benefits and tradeoffs, but then you have to make a decision. In the real world you have to make decisions—the same thing applies to the interview. If the interviewer challenges you with some questions, it’s totally fine to change your mind and alter the component (if you think there are better choices).\n\nWe could use this type of DB, or this other, or that other, and these are some pros and cons…\n\n\"We could use this type of DB, or this other, or that other, and these are some pros and cons…And based on all these tradeoffs, I’ll use THAT type of DB.\"\n\n##### Interviewers want to identify “impostors”: people who just learned a few words and try to pass the interview.\n\nDon’t say things because you think you’re supposed to say them.This often occurs when candidates name specific brands of technologies (e.g., “Kafka” or “Cassandra”). Not being familiar with specific databases or other components is fine. Be smart and don’t say brand names just for the sake of saying them.\n\nI’m going to use Cassandra...” unless you are VERY familiar with that, because the next question will be: “Why Cassandra and not some_other_db?\n\nI’m going to use a NoSQL db because of [insert brief rationale].\n\nI will use Kafka…” unless you’re prepared to explain how Kafka works. Don’t say “I will use Kafka” unless you are prepared to talk about other types of queues, because they may ask you: “Oh, Kafka, interesting choice. Why that instead of [some other queue]?\n\nI will use a queue because of [insert brief rationale].\n\nSay the generic name of the component, not the brand name unless you are very familiar with it. Don’t say Kafka. Instead, say “a queue.\n\nYou finished Part 1! We hope you gained a basic understanding of the system design interview and learned some tips and tricks you can use to excel in it. As you continue reading Parts 2-4, these “glimmers” of understanding will become more and more the default system of your interviewing skills.\n\nIn Part 2 we’ll teach you the 15 fundamental system design concepts. You’ll also get to watch our long form video of two system design experts designing the same system. They’re tasked with designing interviewing.io, which in this challenge is actually three systems in one: “Design google docs, a remote compiler, and a recording service… in 30 minutes or less.”\n\n###### Creator and author\n\n###### Contributing authors\n\n###### Core consultants\n\n###### Technical reviewer\n\n###### Additional consultants\n\n###### Special thanks",
      "source_url": "https://interviewing.io/guides/system-design-interview",
      "author": "Kevin Landucci",
      "user_id": "aline123"
    },
    {
      "title": "Topics",
      "content": "• Interview ResourcesCompaniesLanguagesTechnical Topics\n\n• Technical Topics\n\n# Interview Resources",
      "source_url": "https://interviewing.io/topics#companies",
      "author": "interviewing.io team",
      "user_id": "aline123"
    },
    {
      "title": "Learning Center | interviewing.io",
      "content": "• For employers\n\n• Gift mock interviews\n\n• Learning Center\n\n• Interview Guides\n\n• Interview ResourcesBy CompanyBy Programming LanguageBy Technical Topic\n\n• In-depth Solutions\n\n• Videos & Webinars\n\nSee ourup-to-date-list of companieswho are actually hiring right now (confirmed by our users that are actively interviewing).\n\n# Learning Center\n\n## Interview Guides\n\n## Technical Interview Resources\n\n## In-depth Solutions to Interview Questions\n\n### Valid Palindrome\n\n### Reverse Integer\n\n### Recover Binary Search Tree\n\n### Split Array Largest Sum\n\n### Insert Delete getRandom O(1)\n\n### Partition to K Equal Sum Subsets\n\n## Videos & Webinars\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "source_url": "https://interviewing.io/learn#interview-guides",
      "author": "Amaz",
      "user_id": "aline123"
    },
    {
      "title": "Iterative Tree Traversals: A Practical Guide",
      "content": "# Iterative Tree Traversals: A Practical Guide\n\n## Introduction\n\nI don't know how often tree traversals come up in actual software projects, but they are popular in coding interviews and competitive programming.\nIn this article, I share an approach for implementing tree traversal algorithms iteratively that I found to be simple to remember and implement, while being flexible enough to do anything that a recursive algorithm can (I also didn't like most suggestions I saw online). The main technique is given in section\"Iterative Postorder and Inorder Traversal\", but first I give some context. I also link to practice problems onleetcode.comfor the reader to play with. I provide some solutions, but I suggest trying the problems out first. The code snippets are in C++, but leetcode accepts most languages.\n\n## What are Tree Traversals\n\nMathematically, trees are just connected acyclic graphs. However, in the context of tree traversals, we are usually working withrooted treesrepresented with a recursive structure such as the following (which is the default definition in Leetcode for binary trees). A leaf is a node with two null pointers as children:\n\nA tree traversal is an algorithm that visits every node in a tree in a specific order (and does some computation with them, depending on the problem). For binary trees specifically, there are three important orders:\n\n• Preorder:root before children. As we will see, this is the simplest to implement.\n\n• Inorder:left child, then root, then right child. This traversal is most often used onbinary search trees(BST). A BST is a rooted binary tree with the additional property that every node in the left subtree has a smaller value than the root, and every node in the right subtree has a larger value than the root. This traversal is called \"inorder\" because, when used on a BST, it will visit the nodes from smallest to largest.\n\n• Postorder:children before root. It comes up in problems where we have to aggregate information about the entire subtree rooted at each node. Classic examples are computing the size, the height, or the sum of values of the tree.\n\nBecause rooted trees are recursive data structures, algorithms on trees are most naturally expressed recursively. Here are the three traversals. I use the functionprocess(node)as a placeholder for whatever computation the problem calls for.\n\nSide-note: in C++, pointers are implicitly converted to booleans: a pointer evaluates to true if and only if it is not null. So, in the code above, \"if (!root)\" is equivalent to \"if (root == NULL)\".\n\n### Traversal problems on leetcode\n\n• https://leetcode.com/problems/binary-tree-preorder-traversal/\n\n• https://leetcode.com/problems/binary-tree-inorder-traversal/\n\n• https://leetcode.com/problems/binary-tree-postorder-traversal/\n\n## Why / When to Use an Iterative Traversal\n\nIf the recursive implementation is so simple, why bother with an iterative one? Of course, to avoid stack overflow. Most runtime engines/compilers set a limit on how many nested calls a program can make. For example, according tothis article:\n\n> Default stack size varies between 320k and 1024k depending on the version of Java and the system used. For a 64 bits Java 8 program with minimal stack usage, the maximum number of nested method calls is about 7000.\n\nDefault stack size varies between 320k and 1024k depending on the version of Java and the system used. For a 64 bits Java 8 program with minimal stack usage, the maximum number of nested method calls is about 7000.\n\nIf the height of the tree is larger than this limit, the program will crash with astack overflow error. A recursive implementation is safe to use if:\n\n• Somehow we know that the input trees will be small enough.\n\n• The tree isbalanced, which means that, for each node, the left and right subtrees have roughly the same height. In a balanced tree, the height is guaranteed to belogarithmicon the number of nodes (indeed, that is why balanced BSTs guaranteeO(log n)search time), so any tree that fits in RAM (or even disk) will require a tiny number of recursive calls.\n\nHowever, if we are not in either of the cases above, an iterative solution is safer.\n\nRecursive and iterative traversals have the same runtime complexity, so this is not a concern when choosing either (all the problems shown in this article can be solved in linear time using either).\n\nThe main approach for converting recursive implementations to iterative ones is to \"simulate\" the call stack with an actual stack where we push and pop the nodes explicitly. This works great \"out-of-the-box\" with preorder traversal.\n\nIncidentally, when implementing tree traversals we need to make an implementation choice about how to handle NULL pointers. We can be eager and filter them out before adding them to the stack, or we can be lazy and detect them once we extract them from the stack. Both are fine—what matters is to be deliberate and consistent about which approach we are using. I prefer the latter as it yields slightly shorter code, so I will use it in all the following examples. For comparison, here is the iterative preorder traversal with both approaches:\n\nNote thatthe right child is pushed to the stack before the left one. This is because we want the left child to be above in the stack so that it is processed first.\n\n### Preorder traversal practice problems\n\n• https://leetcode.com/problems/invert-binary-tree/\n\n• https://leetcode.com/problems/maximum-depth-of-binary-tree/\n\nThis problem asks to find the depth of a binary tree (follow the link for the description and examples). It requires passing information from each node to its children. We can do this by changing the stack tostack<pair<TreeNode*, int>>, so that we can pass anintto each child, as in the solution below:\n\nIn the code above, the{}notation is used to create pairs (e.g.,{root, 0}). If one is not familiar with pairs in C++, or is using a language without the equivalent, a simple alternative is to use two separate stacks, one for the nodes and one for the info.\n\nThe next two problems are similar:\n\n• https://leetcode.com/problems/minimum-depth-of-binary-tree/\n\n• https://leetcode.com/problems/path-sum/\n\n• https://leetcode.com/problems/symmetric-tree/\n\nA solution for the last one, this time using a stack with a pair of nodes:\n\n## Iterative Postorder and Inorder Traversal\n\nWhile iterative preorder traversal is straightforward, with postorder and inorder we run into a complication: we cannot simply swap the order of the lines as with the recursive implementation. In other words, the following doesnotyield a postorder traversal:\n\nThe node is still processed before its children, which is not what we want.\n\nThe workaround, once again emulating the recursive implementation, is to visit each node twice.We consider postorder traversal first. In the first visit, we only push the children onto the stack. In the second visit, we do the actual processing.\nThe simplest way to do this is to enhance the stack with a\"visit number flag\". Implementation-wise, we change the stack tostack<pair<TreeNode*, int>>so that we can pass the flag along with each node. The iterative postorder looks like this:\n\nNote the order in which the nodes are added to the stack whenvisit == 0. The parent ends up under its children, with the left child on top. Since it is the first time that the children are added to the stack, their visit-number flag is 0. For the parent, it is 1.\nFor simplicity, I also follow the convention to always immediately call pop after extracting the top element from the stack.\n\nThe same approach also works for inorder traversal (that's the point). Here is a version where we visit each node three times: one to push the left child, one to process the node, and one to push the right child.\n\nIn fact, the second and third visits can be merged together: processing the node does not modify the stack, so the two visits are followed one after the other anyway. Here is my preferred version:\n\nFor completeness, here is the version found in most of my top Google hits (seethisfor a nice explanation):\n\nWhile it is shorter, it cannot be easily converted to postorder traversal, so it is not as flexible. Also, I find it easier to follow the execution flow with the visit-number flag.\n\n### Inorder traversal practice problems\n\n• https://leetcode.com/problems/kth-smallest-element-in-a-bst/\n\nA solution (follow the link for the statement and examples):\n\n• https://leetcode.com/problems/validate-binary-search-tree/\n\nA solution:\n\n### Postorder traversal practice problems\n\n• https://leetcode.com/problems/balanced-binary-tree/\n\nThis problem asks to check if a binary tree is balanced. It requires passing information back from the children to the parent node in a postorder traversal. Passing information from the children to the parent is easy with recursion. It can be done both with return values or with parameters passed by reference. For this problem we need to pass two things: aboolindicating if the subtree is balanced, and anintindicating its height. I use a reference parameter for the latter (returning apair<bool,int>would be cleaner).\n\nPassing information from the children to the parent in an iterative implementation is more intricate. There are three general approaches:\n\n• Use a hash table mapping each node to the information.\n\nThis is the easiest way, but also the most expensive.\nWhile the asymptotic runtime is still linear, hash tables generally have significant constant factors.\n\n• Add a field to the definition of the node structure for the information needed.\n\nThen, we can read it from the parent node by traversing the children's pointers.\nIn Leetcode we cannot modify theTreeNodedata structure so, to illustrate this approach, I build a new tree first with a new struct:\n\n• Pass the information through an additional stack.\n\nThis is the most efficient, but one must be careful to keep both stacks in synch. When processing a node, that node first pops the information from its children, and then pushes its own info for its parent. Here is a solution (with eager NULL-pointer detection):\n\n• https://leetcode.com/problems/diameter-of-binary-tree/\n\nThis problem also requires passing information from the children to the parent in a postorder traversal. Here is a solution using the third approach again, but this time with lazy NULL-pointer detection. Note that we push a 0 to thedepthsstack when we extract a NULL pointer from the main stack, and during processing we always do two pops regardless of the number of non-NULL children:\n\n• https://leetcode.com/problems/binary-tree-tilt/\n\n• https://leetcode.com/problems/most-frequent-subtree-sum/\n\n• https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/\n\n## Traversals in n-ary Trees\n\nSo far, we have looked at binary trees. In an n-ary tree, each node has an arbitrary number of children.\n\nFor n-ary trees, preorder traversal is also straightforward, and inorder traversal is not defined.\n\nFor postorder traversal, we can use a visit-number flag again. Two visits suffice for each node: one to push all the children into the stack, and another to process the node itself. I do not include the code here because it is very similar to the binary tree case.\n\nConsider a more complicated setting where we need to compute something at the node after visiting each child. Let's call this \"interleaved traversal\". I useprocess(node, i)as placeholder for the computation done before visiting the i-th child. Here is the recursive implementation and the corresponding iterative one using visit-number flags.\n\n### N-ary tree practice problems\n\n• https://leetcode.com/problems/n-ary-tree-preorder-traversal/\n\n• https://leetcode.com/problems/n-ary-tree-postorder-traversal/\n\n## An Alternative Way of Passing the Visit Flag\n\nThe common framework to all our solutions has been to pass a visit-number flag along with the nodes on the stack. User \"heiswyd\" on leetcode postedherean alternative way to pass the flag implicitly: initially, it pushes each node on the stack twice. Then, it can distinguish between the first visit and the second visit by checking whether the node that has just been extracted from the stack matches the node on top of the stack. This happens only when we extract the first of the two occurrences. Post-order traversal looks like this:\n\nIt is cool, but I prefer passing the flag explicitly for clarity.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Wall Game DB Design\n\nDesigning the DB for the Wall Game.\n\n## The Wall Game Project\n\nAn introduction to the Wall Game, my new project.\n\n## Lazy vs Eager Algorithms\n\nExploring the tradeoffs between lazy and eager implementations of common algorithms.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/iterativetreetraversal?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Breaking Down Dynamic Programming",
      "content": "# Breaking Down Dynamic Programming\n\nNote: the approach in this guide later became the foundation for the dynamic programming chapter inBeyond Cracking the Coding Interview.\n\n## Introduction\n\nWhen I was a TA for \"Algorithm Design and Analysis\", the students struggled with dynamic programming. To simplify/demystify it, I tried to break it down into a logical sequence of steps, each of which should not feel too intimidating on its own. This is explained in detail here. To complement the explanations, there are links to problems onleetcode.com, in case the reader wants to practice. The code snippets are in Python, but Leetcode accepts most popular languages.\n\n## Overview: Recursive vs Iterative DP\n\nIn short, dynamic programming (DP) is a technique for problems that seem hard to solve as a whole, but become easy if we know the solution to smaller subproblems. More technically, we can use it in problems where the (value of the) solution can be expressed as an equation which is a function of the input, and is expressed in terms of itself with smaller inputs. This is called arecurrence equation. The classic example is the Fibonacci recurrence:Fib(n) = Fib(n-1) + Fib(n-2).\n\n• https://leetcode.com/problems/fibonacci-number/\n\nA recurrence equation can be translated into code:\n\nHowever, the above function has an exponential runtime. A recursive function becomes exponential when it is possible to reach the same subcall through different execution paths. In the Fibonacci case, we have the following nested calls:Fib(n) -> Fib(n-1) -> Fib(n-2), andFib(n) -> Fib(n-2). SinceFib(n-2)is called twice all the work from this call is duplicated, which in turn means that subcalls made fromFib(n-2)will start to duplicate and grow exponentially.\n\nDynamic programming is simply a workaround to this duplication issue. Instead of recomputing the solutions of the subproblems, we store them and then we recall them as needed. This guarantees that each subproblem is computed only once.\n\nThere are two main approaches for DP.\n\n### Recursive / Top-down DP\n\nWe start with the code which is a literal translation of the recurrence equation, but then we add a dictionary / hash table to store results.\n\nThere are three changes in the code above:\n\n• declaring our dictionary for storing results,memooutside the recursive function (memo comes \"memorization\" or \"memoization\", a name used in the literature).\n\n• before computing the result, we check if the solution has already been computed. This check can be done before or after the base case.\n\n• before returning, we save the result in thememotable.\n\nUsing a memoization table in this way solves the inefficiency (we will go deeper into the analysis part later).\n\n### Iterative / Bottom-up DP\n\nInstead of starting from the largest input and recursively reaching smaller subproblems, we can directly compute the subproblems from smallest to largest. This way, we already have the solutions to the subproblems when we need them. For this approach, we change the dictionary for an array/vector, and we change recursive calls for a for loop.\n\nMost problems can be solved with both recursive and iterative DP. Here are some considerations for how to choose:\n\n• Recursive DP matches the recurrence equation more directly, so it can be easier to implement.\n\n• Both have the same runtime complexity, but the recursive version will generally have larger constant factors due to all the recursive function calling and due to using a hash table instead of an array.\n\n• Iterative DP often allows for an optimization to reduce the space complexity (discussed later).\n\n## Recursive DP in 5 Steps\n\n• Choose what your subproblems are.\n\n• Find the recurrence equation.\n\n• Translate the recurrence equation into recursive code.\n\n• Add memoization.\n\n• (Optional) Reconstruct the solution.\n\nWe already saw steps 1–4 with the Fibonacci example. Now, we will walk through all the steps in more detail using a more complicated example, thelongest common subsequence problem:\n\nGiven two stringss1ands2, find the length of the longest string which is a subsequence of boths1ands2. A stringtis asubsequenceof a stringsif every char intappearsin orderins, but arenot necessarily contiguous. For example,abcis a subsequence ofaxbyz, butbais not (do not confuse subsequence with substring or subset).\n\n• https://leetcode.com/problems/longest-common-subsequence/\n\nStep 1: choose our subproblems. This varies from problem to problem, but when the input to the problem is a string, a natural way to obtain smaller problems is to look at shorter strings. Here we can use as a subproblem aprefixofs1and a prefix ofs2.\n\nSome notation: letnbe the length ofs1andmthe length ofs2. LetLCS(i,j)be the solution for the LCS problem for the prefix ofs1of lengthn(s1[0..i-1]) and the prefix ofs2of lengthm(s2[0..j-1]). Then, our goal is to findLCS(n, m).\n\nStep 2: find the recurrence equation. Now we need to come up with an expression forLCS(i,j)as a function ofLCSwith smaller indices (as well as a base case). This is the hardest step of DP, and often it is here that we realize that we chose bad subproblems in Step 1. If that happens, hopefully we will discover some hint for what our subproblems should be.\n\nIn order to derive the recurrence equation for LCS, we need the following observation: if the two strings end with the same characterc, then, to maximize the length of the subsequence, it is \"safe\" to addcto the subsequence. In contrast, if both strings end with different characters, thenat leastone of them cannot appear in the subsequence. The complication is that we do not know which one. Thus, instead of guessing, we can simply consider both options.\n\nThis observation yields the recurrence equation (excluding base case):\n\nThis step is not intuitive at first, and requires practice. After having done a few problems, one starts to recognize the typical patterns in DP. For instance, usingmaxamong a set of options of which we do not know which one is the best is easily the most common pattern in DP.\n\nStep 3. Translate the recurrence equation into recursive code. This step is a very simple programming task. Pay attention to the base case.\n\nIf we draw the few first steps of the call graph, we will see that the same subproblem is reached twice. Thus, call graph blows up, leading to an exponential runtime.\n\nStep 4. Add memo table. This step should be automatic: one does not even need to understand the previous code in order to add the memo table.\n\nThe base case corresponds to when one of the strings is empty. The LCS of an empty string with another string is clearly an empty string.\n\nIncidentally, if we flip the check on the memo table, the code becomes a bit more streamlined (fewer lines + merging the two returns). I prefer this form (it does the same):\n\nWe have eliminated the exponential blowup. In general, DP algorithms can be analyzed as follows: # of distinct subproblems times time per subproblem excluding recursive calls. For LCS, we getO(nm)*O(1)=O(nm).\n\nStep 5. Reconstruct the solution.\n\nWe used DP to compute the length of the LCS. What if we want to find the LCS itself?\nA naive way to do it would be to store the entire result of each subproblem in the memoization table instead of just its length. While this works, it is clear that it will require a lot of memory to storeO(nm)strings of lengthO(min(n,m))each. We can do better.\n\nStep 5, \"Reconstruct the solution\", is how to reuse the table that we constructed in Step 4 to find the actual solution instead of just its length. I said that this step is optional because sometimes we just need thevalueof the solution, so there is no reconstruction needed.\n\nThe good news is that we do not need to modify the code that we already wrote in Step 4. The reconstruction is a separate step that comes after. In addition, the reconstruction step is very similar (follows the same set of cases) as the step of building the memo table. In short, we use the memo table as an \"oracle\" to guide us in our choices. Based on the values in the memo table, we know which option is better, so we know how to reconstruct the solution.\n\nIn the code above, first we runLCS(n,m)to fill the memo table. Then, we use it in the reconstruction. The conditionmemo[(i-1,j)] >= memo[(i,j-1)]tells us that we can obtain a longer or equal LCS by discarding a char froms1instead of froms2.\n\nNote that there is a single recursive call in the reconstruction function, so the complexity is justO(n+m).\n\n## Iterative DP in 6 Steps\n\n• Choose what your subproblems are.\n\n• Find the recurrence equation.\n\n• Design the memo table.\n\n• Fill the memo table.\n\n• (Optional) Reconstruct the solution.\n\n• (Optional) Space optimization.\n\nThe new/different steps are highlighted. Step 3. is to design the layout of the table/matrix where we are going to store the subproblem solutions. There is no coding in this step. By \"design\", I mean making the following choices:\n\n• what are the dimensions of the table, and what does each index mean. Generally speaking, the table should have one dimension for each parameter of the recurrence equation. In the case of LCS, it will be a 2-dimensional table.\n\n• where are the base cases.\n\n• where is the cell with the final solution.\n\n• what is the ``dependence relationship'' between cells (which cells do you need in order to compute each cell).\n\n• which cells do not need to be filled (in the case of LCS, we need them all).\n\nHere is how I would lay out the table for LCS (you can find a different layout in the problems below):\n\nNext (Step 4), we fill the memo table with a nested for loop. If the layout is good, this should be easy. Before the main loop, we fill the base case entries. Then, we must make sure to iterate through the table in an order that respects the dependencies between cells. In the case of LCS, we can iterate both by rows or by columns.\n\nWe obtain the following algorithm:\n\nIn the code above, the base case entries are filled implicitly when we initialize the table with zeros everywhere.\n\nIf we need to reconstruct the solution, we can do it in the same way as for the recursive DP. The only difference is that memo is a matrix instead of dictionary.\n\n### Space optimization\n\nClearly, the space complexity of iterative DP is the size of the DP table. Often, we can do better. The idea is to only store the already-computed table entries that we will use to compute future entries. For instance, in the case of Fibonacci, we do not need to create an entire array -- keeping the last two numbers suffice. In the case of a 2-dimensional DP table, if we are filling the DP table by rows and each cell only depends on the previous row, we only need to keep the last row (and similarly if we iterated by columns). Here is the final version for LCS where we improve the space complexity fromO(nm)toO(n+m):\n\nNote: this optimization is incompatible with reconstructing the solution, because that uses the entire table as an \"oracle\".\n\n## DP Patterns\n\nHere are some typical patterns:\n\n### For Step 1. The subproblems.\n\n• If the input is a string or a list, the subproblems are usually prefixes or substrings/sublists, which can be specified as a pair of indices.\n\n• If the input is a number, the subproblems are usually smaller numbers.\n\n• Generally speaking, the number of subproblems will be linear or quadratic on the input size.\n\n### For Step 2. The recurrence equation.\n\n• Often, we usemaxorminto choose between options, or sum to aggregate subsolutions.\n\n• The number of subproblems is most often constant, but sometimes it is linear on the subproblem size. In the latter case, we use an inner loop to aggregate/choose the best solution.\n\n• Sometimes, the recurrence equation is not exactly for the original problem, but for a related but more constrained problem. See an example below, \"Longest Increasing Subsequence\".\n\n## Practice Problems\n\nHere are some practice problems showcasing the patterns mentioned above. Follow the Leetcode links for the statements and example inputs. I jump directly to the solutions. I'd recommend trying to solve the problems before checking them.\n\n• https://leetcode.com/problems/palindromic-substrings/\n\nHere, the goal is to count the number of substrings of a stringswhich are palindromic. There is a trivialO(n³)time solution without DP:\n\nWe can improve this toO(n²)with DP. The subproblems are all the substrings ofs. LetPal(i, j)be true iffs[i..j]is a palindrome. We have the following recurrence equation (excluding base cases):\n\nBased on this recurrence equation, we can design the following DP table:\n\nThis type of \"diagonal\" DP tables are very common when the subproblems are substrings/sublists. In this case, the base cases are substrings of length 1 or 2. The goal isPal(0,n-1).\n\nGiven the dependency, the table can be filled by rows (starting from the last row), by columns (starting each column from the bottom), or by diagonals (i.e., from shortest to longest substrings). In the code below, I illustrate how to fill the table by diagonals.\n\n• https://leetcode.com/problems/minimum-path-sum/\n\nHere, a subproblem can be a grid with reduced width and height. LetT[i][j]be the cheapest cost to reach cell(i,j). The goal is to findT[n-1][m-1], wherenandmare the dimensions of the grid. The base case is when eitheriorjare zero, in which case we do not have any choices for how to get there. In the general case, we have the recurrence equationT[i][j] = grid[i][j] + min(T[i-1][j], T[i][j-1]): to get to(i,j), we first need to get to either(i-1,j)or to(i,j-1). We useminto choose the best of the two. We convert this into an iterative solution:\n\n• https://leetcode.com/problems/unique-paths-ii/\n\nThis is similar to the previous problem, but we need to accumulate the solutions to the subproblems, instead of choosing between them. Problems aboutcountingsolutions can often be solved with DP.\n\n• https://leetcode.com/problems/longest-increasing-subsequence/\n\nThis problem will illustrate a new trick: if you cannot find a recurrence equation for the original problem, try to find one for a more restricted version of the problem which nevertheless you enough information to compute the original problem.\n\nHere, the input is a listLof numbers, and we need to find the length of the longest increasing subsequence (a subsequence does not need to be contiguous). Again, the subproblems correspond to prefixes of the list.\nLetLIS(i)be the solution for the prefix of lengthi(L[0..i]). The goal is to findLIS(n-1), wherenis the length ofL.\nHowever, it is not easy to give a recurrence equation forLIS(i)as a function of smaller prefixes. In particular,the following is wrong(I will let the reader think why):\n\nThus, we actually give a recurrence equation for a slightly modified type of subproblems: letLIS2(i)be the length of the LISending at index i. This constraint makes it easier to give a recurrence equation:\n\nIn short, since we know that the LIS ends atL[i], we consider all candidate predecessors, which are the numbers smaller than it, and get the best one by usingmax. Crucially, this recurrence works forLIS2(i)but not forLIS(i).\nHere is a full solution:\n\nAt the end, we do not simply returnT[n-1]becauseTis the table forLCS2, notLCS. We returnmax(T)because the LCS must endsomewhere, soLCS(n-1) = LCS2(j)for somej < n.\n\nNote that the runtime isO(n²)even though the table has linear size. This is because we take linear time per subproblem.\n\n• https://leetcode.com/problems/number-of-longest-increasing-subsequence/\n\nA harder version of the previous problem. A similar approach works. First solve the LIS problem as before, and then do a second pass to count the solutions.\n\n• https://leetcode.com/problems/shortest-common-supersequence/\n\nThis problem is similar to LCS, and it requires reconstruction.\n\nI should mention that noteveryproblem that can be solved with DP fits into the mold discussed above. Despite that, it should be a useful starting framework. Here are many more practice problems:\n\n• https://leetcode.com/tag/dynamic-programming/\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Double-Edge Cut Problem\n\nAn optimal solution for a graph problem that comes up in the Wall Game.\n\n## Lifecycle of a CS research paper: my knight's tour paper\n\nThe backstory and thought process behind a fun paper from my PhD.\n\n## Heapify Analysis Without Math\n\nA proof that heapify takes linear time without using complex equations.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/breaking-down-dynamic-programming?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Actually Implementing Dijkstra's Algorithm",
      "content": "# Actually Implementing Dijkstra's Algorithm\n\n## Introduction\n\nDijkstra's algorithm for the shortest-path problem is one of the most important graph algorithms, so it is often covered in algorithm classes. However, going from the pseudocode to an actual implementation is made difficult by the fact that it relies on a priority queue with a \"decrease key\" operation. While most programming languages offer a priority queue data structure as part of their standard library, this operation is generally not supported (e.g., in C++, Java or Python). In this blog, we go over the different ways to implement Dijkstra's algorithm with and without this operation, and the implications of using each. All in all, we consider 5 versions of Dijkstra (names mostly made up by me):\n\n• Textbook Dijkstra: the version commonly taught in textbooks where we assume that we have a priority queue with the \"decrease key\" operation. As we said, this often does not hold true in reality.\n\n• Linear-search Dijkstra: the most naive implementation, but which is actually optimal for dense graphs.\n\n• Lazy Dijkstra: practical version which does not use the \"decrease key\" operation at all, at the cost of using some extra space.\n\n• BST Dijkstra: version which uses a self-balancing binary search tree to implement the priority queue functionality, including the \"decrease key\" operation.\n\n• Theoretical Dijkstra: version that uses a Fibonacci heap for the priority queue in order to achieve the fastest possible runtime in terms of big-O notation. This is actually impractical due to the complexity and high constant factors of the Fibonacci heap.\n\nRoughly, each of the 5 versions corresponds to a different data structure used to implement the priority queue. Throughout the post, letnbe the number of nodes andmthe number of edges. Here is summary of the resulting runtime and space complexities:\n\n• Textbook Dijkstra: indexed binary heap. Runtime:O(m*log n); space:O(n).\n\n• Linear-search Dijkstra: unordered array. Runtime:O(n²); space:O(n).\n\n• Lazy Dijkstra: binary heap. Runtime:O(m*log n); space:O(m).\n\n• BST Dijkstra: self-balancing BST. Runtime:O(m*log n); space:O(n).\n\n• Theoretical Dijkstra: Fibonacci heap. Runtime:O(m + n*log n); space:O(n).\n\nWe provide implementations in Python and C++. The initial sections are mostly background. If you are already familiar with Dijkstra's algorithm, you can skip to the code snippets.\n\n## The shortest-path problem\n\nThe input consists of a graphGand a special nodes. The edges ofGare directed and have non-negative weights. The edge weights represent the \"lengths\" of the edges. The goal is to find the distance fromsto every other node inG. The distance fromsto another node is the length of the shortest path fromsto that node, and the length of a path is the sum of the lengths of its edges. If a node is unreachable froms, then we say that the distance is infinite.\n\nMore precisely, this is known as the \"single-source shortest-path\" (SSSP) problem, because we find the distance from one node to every other node. Related problems include the \"all-pairs shortest paths\" problem and the single-source single-destination problem. Dijkstra's algorithm is a really efficient algorithm for the SSSP problem when the edges are non-negative. Dijkstra's algorithm does not work in the presence of negative edges (zero-weight edges are fine). IfGcontains negative edges, we should use the Bellman-Ford algorithm instead.\n\nThe constraint that the edges are directed is not important: ifGis undirected, we can simply replace every undirected edge{u,v}with a pair of directed edges(u,v)and(v,u)in opposite directions and with the weight of the original edge.\n\nTo simplify things, we make a couple of assumptions that do not make any actual difference:\n\n• Nodes not reachable bysplay no role in the algorithm, so we assume thatscan reach every node. This is so that, in the analysis, we can assume thatn=O(m).\n\n• We assume that the distance fromsto every node is unique. This allows us to talk about \"the\" shortest path to a node, when in general there could be many.\n\n## The graph's representation\n\nA graph is a mathematical concept. In the context of graph algorithms, we need to specify how the graph is represented as a data structure. For Dijkstra's algorithm, the most convenient representation is the adjacency list. The valuable thing about the adjacency list representation is that it allows us to iterate through the out-going edges of a node efficiently.\n\nIn the version of the adjacency list that we use, each node is identified with an index from0ton-1. The adjacency list contains one list for each node. For each nodeubetween0andn-1, the listG[u]contains one entry for each neighbor ofu. In a directed graph, if we have an edge(u,v)fromutov, we say thatvis a neighbor ofu, butuis not a neighbor ofv. Since the graph is weighted, the entry for each neighborvconsists of a pair of values,(v, l): the destination nodev, and the lengthlof the edge(u,v).\n\n## Dijkstra's algorithm idea\n\nOne of the data structures that we maintain is a listdistwheredist[u]is the best distance known foruso far. At the beginning,dist[s] = 0, and for every other nodedist[u] = infinity. These distances improve during the algorithm as we consider new paths. Our goal is to get to the point wheredistcontains the correct distance for every node.\n\nDuring the algorithm, thedistlist is only updated through an operation called \"relaxing\" an edge.\n\nIn words, relaxing an edge(u,v)means checking if going toufirst and then using the edge(u,v)is shorter than the best distance known forv. If it is shorter, then we updatedist[v]to the new, better value.\n\nDijkstra's algorithm is based on the following observations:\n\n• ifdist[u]is correctandthe shortest path fromstovends in the edge(u,v), then if we relax the edge(u,v), we will find the correct distance tov. If either of the conditions are not satisfied, relaxing(u,v)may improvedist[v], but it will not be the correct distance.\n\n• To find the correct distance tov, we need to relax all the edges in the shortest path fromstov, in order. If we do it in order, each node in the path will have the correct distance when we relax the edge to the next node, satisfying the conditions.\n\nDijkstra's algorithm is efficient because every edge is relaxed only once (unlike other algorithms like Bellman-Ford, which relaxes the edges multiple times). To relax every edge only once, we must relax the out-going edges of each node only after we have found the correct distance for that node.\n\nAt the beginning, onlyshas the correct distance, so we relax its edges. This updates the entries indistfor its neighbors. The neighbor ofsthat is closest tos, say,x, has the correct distance at this point. This is because every other path fromstoxstarts with a longer edge, and, since the graph does not have negative-weight edges, additional edges can only increase the distance. Next, sincexhas the correct distance, we can relax its out-going edges. After that, the nodeywith the 3rd smallest distance indist(aftersandx) has the correct distance because the node beforeyin the shortest path fromstoymust be eithersorx. It cannot be any other node because simply reaching any node that is notsorxis already more expensive than the distance we have found fory. We continue relaxing the out-going edges of nodes, always taking the next node with the smallest found distance. By generalizing the argument above, when we relax the out-going edges of each node, that node already has the correct distance. We finish after we have gone through all the nodes. At that point,distcontains the correct distance for every node.\n\nIn order to implement Dijkstra's algorithm, we need to decide the data structures used to find the unvisited node with the smallest distance at each iteration.\n\n## Priority queues\n\nPriority queues are data structures that are useful in many applications, including Dijkstra's algorithm.\n\nIn a normal queue, we can insert new elements and extract the oldest element. A priority queue is similar, but we can associate a priority with each element. Then, instead of extracting the oldest element, we extract the one with highest priority. Depending on the context, \"highest priority\" can mean the element with the smallest or largest priority value. In this context, we will consider that the highest priority is the element with the smallest priority value.\n\nA priority queue is anabstractdata structure. That means that it only specifies which operations it supports, but not how they are implemented. There actually exist many ways to implement a priority queue. To make matters more confusing, different priority queues implementations support different sets of operations. The only agreed part is that they must support two basic operations:\n\n• insert(e, k): insert elementewith priorityk.\n\n• extract_min(): remove and return the element with the smallest priority value.\n\nFor Dijkstra's algorithm, we can use a priority queue to maintain the nodes, usingdist[u]as the priority for a nodeu. Then, at each iteration we can extract the unvisited node with the smallest distance. However, there is a problem: when we relax an edge, the valuedist[u]may decrease. Thus, we need the priority queue to support a third operation which is not commonly supported:\n\n• change_priority(e, k): set the priority ofetok(assuming thateis in the priority queue).\n\nA related operation is removing elements that are not the most prioritary:\n\n• remove(e): removee(assuming thateis in the priority queue).\n\nIf a priority queue implements remove, we can use it to obtain the same functionality aschange-priority(e, k): we can first callremove(e)and then reinsert the element with the new key by callinginsert(e, k).\n\n## Pseudocode with a priority queue\n\nAssuming that we have a priority queue data structure that supportsinsert,extract-min, andchange-priority, Dijkstra's pseudocode would be as follows.\n\nThe priority queue contains the unvisited nodes, prioritized by distance froms. At the beginning, the priority queue contains all the nodes, and they are removed as they are visited.\n\nA common variation is to add them to the priority queue when they are reached for the first time, instead of adding all the nodes at the beginning. The only change is how the priority queue is initialized and the if-else cases at the end:\n\nIt does not change the runtime or space complexity, but there is also no downside to deferring insertions to the PQ. On average, the PQ will contains fewer elements.\n\n## Analysis of Dijkstra's algorithm\n\nUsually, we analyze the algorithmsafterimplementing them. However, in order to choose the best data structure for the priority queue, we need to analyze how much we use each type of operation.\nThus, it is convenient to define the runtime in terms of the priority queue operations, without specifying yet how they are done. LetT_ins,T_min, andT_changebe the time perinsert,extract_min, andchange_priorityoperation, respectively, on a priority queue containingnelements.\n\nThe mainwhileloop hasniterations, and the total number of iterations of the innerforloop, across allniterations, ism. This is because each edge is relaxed once.\n\nThe runtime is dominated by the priority queue operations, so it isO(n*T_ins + n*T_min + m*T_change). These operations dominate the runtime because everything else combined (like updating thedistlist) takesO(n+m)time.\n\n## Linear-search Dijkstra for dense graphs\n\nThe simplest way to simulate theextract_minfunctionality of a priority queue is to iterate through the entiredistlist to find the smallest value among the non-visited entries. If we do this, we don't need a priority queue. We call thislinear-search Dijkstra. We getT_ins = O(1),T_min = O(n), andT_change = O(1). Plugging those in, the total runtime of linear-search Dijkstra isO(n + n*n + m) = O(n²), where we simplify out themterm becausen² > min any graph. More precisely, a directed graph withnnodes has at mostn*(n-1)=O(n²)edges.\n\nA graph with \"close to\"n*(n-1)edges is called dense.Linear-search Dijkstra is actually optimal for dense graphs.This is because Dijkstra's algorithm must takeO(m)time just to relax all edges, so it cannot be faster thanO(m), and, in dense graphs that is already proportional toO(n²).\n\nHere is a Python implementation:\n\nAnd C++. We omit the includes and \"using namespace std;\".\n\n## Priority queues for sparse graphs\n\nTheO(n²)time from the implementation above is slow if the graphGis sparse, meaning that the number of edges is small relative toO(n²). Recall that the time isO(n*T_ins + n*T_min + m*T_change). Ifmis more similar tonthan ton², then we would be happy to trade a slowerchange_prioritytime for a fasterextract_mintime.\n\nThe best possible answer in terms of big-O notation is to use a priority queue implementation based on a data structure known as aFibonacci Heap. A Fibonacci heap containing at mostnelements achieves the following times:\n\n• insert:O(log n)amortized time.\n\n• extract_min:O(log n)amortized time.\n\n• change_priority:O(1)amortized time.\n\nAmortized time means that it could take more time, but, if we average out the times for that operation across the execution of an algorithm, each one takes that time on average.\n\nUsing a Fibonacci heap, we get a total time ofO(n*log n + m)for Dijkstra's algorithm. This is really fast in terms of big-O notation, but Fibonacci heaps have larger constant factors than other data structures, making them slower in practice.\n\nThe most common way to implement a priority queue is with abinary heap. It is simple and fast in practice. Binary heaps supportinsertandextract_mininO(log n)like a Fibonacci heap. However, they do not support thechange_priorityoperation.\n\nIt is possible to modify a binary heap to to support thechange_priorityoperation inO(log n)time. The result is sometimes called an \"indexed priority queue\". Using an indexed priority queue, we would get a total runtime ofO(n*log n + m*log n) = O(m*log n). This is slightly worse than with a Fibonacci heap, and faster in practice.\n\nIn any case, the priority queues provided by languages like C++, Python, and Java, do not support thechange_priorityoperation. This creates a disconnect between the pseudocode taught in classrooms and the actual code that we can write.\n\nThe goal of this post is to illustrate the options to deal with this issue. There are 3:\n\n• Textbook Dijkstra: find or implement our own indexed priority queue.\n\n• Lazy Dijkstra: we implement Dijkstra without using thechange_priorityoperation at all.\n\n• BST Dijkstra: we use a self-balancing binary search tree as the priority queue.\n\nWe will cover the latter two options. The first option is an interesting exercise in data structures (Iimplementedit once for a project), but it is more about the inner workings of binary heaps than it is about Dijkstra's algorithm.\n\nAll three options have a runtime ofO(m*log n). Note that for dense graphs, this becomesO(n² log n)time, so they are all worse than the naive linear-search Dijkstra. In terms of space, lazy Dijkstra is worse than the others, as it needsO(m)space, as opposed toO(n)for the other options.\n\n## Lazy Dijkstra\n\nWe implement Dijkstra using a priority queue that does not support the change-priority operation. We need the following change: when we find a shorter distance to a node that is already in the priority-queue, instead of using the \"change-priority\" operation, we simply use an \"insert\" operation and add a copy of the node in the priority queue with the new distance. Then, when we extract a node from the priority queue, we ignore it if it is not the first time we extract that node. We call this version of Dijkstra \"lazy Dijkstra\" because we \"postpone\" the removal of the pre-existing copy of the node.\n\nHere is a Python version. The logical structure of a binary heap is a binary tree, but, internallythe tree is represented as an arrayfor efficiency reasons. Python is a bit whack because, instead of having a priority queue module that encapsulates the implementation, we have theheapqmodule, which provides priority queue operations that can be used directly on a list representing a binary heap.heapqoffers functionsheappop(equivalent toextract_min) andheappush(equivalent toinsert). These functions receive a normal Python list as a parameter, and this list is assumed to represent a binary heap. In Python, if the priority queue contains tuples, then the first element in the tuple is the priority. Thus, in the implementation we insert tuples to the priority queue with the distance first and the node second.\n\nHere is a C++ version:\n\nAnalysis: since nodes can be added to the priority queue multiple times, in lazy Dijkstra the maximum number of elements in the priority queue increases fromO(n)toO(m). As a result, we doO(m)extract_minandinsertoperations. The total runtime isO(m*log m). This can be simplified toO(m*log n), becauselog m < log (n²) = 2 log n = O(log n). Thus, in terms of big-O notation,lazy Dijkstra is equally fast as textbook Dijkstra(Dijkstra with an indexed priority queue). The only thing that got worse is the space used by the priority queue.\n\n## BST Dijkstra\n\nSelf-balancing binary search trees, like red-black trees or AVL trees, are a type of data structure that maintains a set of elements ordered according to values associated with the elements, known as the elements' keys. They support a few operations, all inO(log n)time. For our use case, we are interested in the following ones:\n\n• Insert an element with a given key.\n\n• Find the element with the smallest/largest key.\n\n• Given a key, find if there is an element with that key, and optionally remove it.\n\nThese operations allow us to use a self-balancing BST to implement a priority queue. With the third operation, we can even implement thechange_priorityoperation, as we mentioned.\n\nPython does not actually have a self-balancing binary search tree module (why?!), so we cannot implement this version of Dijkstra either without finding or implementing our own self-balancing BST.\n\nHere is a C++ version. In C++, the set data structure is implemented as a self-balancing BST:\n\nAnalysis: in a sense, BST Dijkstra combines the best of both worlds: it has the same runtime and space complexity as textbook Dijkstra, without needing the extra space of Lazy Dijkstra, but it uses a much more ubiquitous data structure, a self-balancing BST. However, in practice, self-balancing BSTs are slower than binary heaps. This has to do with the fact that heaps can be implemented on top of an array, while BSTs use recursive tree data structures with child pointers. The array has much betterlocality of reference. For sparse graphs, I'd expect the performance of the different versions to be ordered as follows:\n\nTextbook Dijkstra > Lazy Dijkstra > BST Dijkstra > Theoretical Dijkstra > Linear-search Dijkstra\n\n## Practice problems\n\nHere are some problems on leetcode:\n\n• Network Delay Time\n\n• Find the City With the Smallest Number of Neighbors at a Threshold Distance\n\n• Reachable Nodes In Subdivided Graph\n\n• Path with Maximum Minimum Value(Premium only)\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Lazy vs Eager Algorithms\n\nExploring the tradeoffs between lazy and eager implementations of common algorithms.\n\n## Negative Binary Search and Choir Rehearsal\n\nA curious application of binary search.\n\n## Wall Game DB Design\n\nDesigning the DB for the Wall Game.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/implementing-dijkstra?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Get Binary Search Right Every Time, Explained Without Code",
      "content": "# Get Binary Search Right Every Time, Explained Without Code\n\nOne of the things that makes binary search tricky to implement is that you usually need to tweak the pointer manipulation logic in subtle ways based on the specifics of the problem.\n\nE.g., an implementation that works for finding a target in a sorted array when the target is present, may not work if the target is missing. Or, it may not be clear how to tweak the code to find the last occurrence of the target instead of the first one. And of course, there are plenty of less conventional applications of binary search where the input is not an array, likecatching bike thieves.\n\nInBeyond Cracking the Coding Interview, we wanted to simplify this, so we went looking for a general binary search template. Going into it, I thought we might need at least two templates, but we ended up with just one, which we called the \"transition point recipe\", and which works for every problem we tried, including the 17 problems in the binary search chapter of the book. If you find one where it doesn't work, let me know!\n\n## The transition point problem\n\nHere is the thesis of the transition point recipe:\n\nEvery binary search problem can be reduced to the 'transition point problem'.\n\nIn the 'transition point problem', you are given an array with just two values, say1and2, where all the1s come before the2s, and you need to point where it changes.\n\nE.g., in the array[1, 1, 1, 1, 1, 2, 2, 2], the last1is at index4and the first2is at index5.\n\nKnowing how to solve this specific problem is key to our recipe. The specific binary search implementation is not important, but there is an invariant we can follow that makes it quite easy: ensure that the left pointer is always at a1and the right pointer is always at a2.\n\nWe give code in the book, but remembering exact code in an interview is error prone. Instead, the four bullet points below are all Ipersonallyremember, and I feel confident that I can derive the rest easily.\n\n• Start by handling some edge cases:The array is emptyEvery value is1Every value is2\n\n• The array is empty\n\n• Every value is1\n\n• Every value is2\n\n• Initialize two pointers,leftandright, to the first and last indices, respectively.\n\n• For the main binary search loop, always maintain theinvariantthat the value atleftis1and the value atrightis2. Let this invariant guide your pointer manipulation logic, so that you don't need to memorize any code.\n\n• Stop when theleftandrightpointers are next to each other (i.e.,left + 1 == right).\n\nCombining the invariant with the stopping condition, we get that, at the end,leftwill be at the last1andrightwill be at the first2.\n\nThese bullet points rely on two ideas to make binary search easier: (1) handling edge cases upfront, and (2) letting strong invariants guide the implementation. Notice how the invariant even guides the edge cases at the beginning, as they are the necessary ones to be able to initializeleftandrightin a way that satisfies it.\n\n## The reduction\n\nOk, so now, let's take for granted that we can solve the transition point problem. How does this help us solve other binary search problems?\n\nThe idea is to come up with a (problem-specific)predicate, like< target,>= target, orx % 2 == 0, which splits the search range into two regions, the \"before\" region and the \"after\" region.\n\nThis predicate is a function that takes an element of the search range and returns a boolean, and -- as you probably saw coming -- it is key that all the elements withtruevalues come before the elements withfalsevalues (or the other way around).\n\nThen, we can use the solution to the transition point problem to find the transition point between the 'before' and 'after' regions. The only difference is that, instead of checking boolean values directly, we check the result of the predicate.\n\nYou can even wrap the predicate in a function, which we calledis_before(x)in the book, which tells you whether a given element is in the 'before' region. Then, it's really obvious that we are just solving the transition point problem every time.\n\nThe only part that requires some thinking is choosing the right transition point. For example:\n\n• if we want to find thefirstoccurrence oftargetin a sorted array, we can useis_before(x) = x < target, which means that, iftargetis present, the first occurrence is the first element in the 'after' region (so, we can check/return therightpointer at the end).\n\n• if we want to find thelastoccurrence oftargetin a sorted array, we can useis_before(x) = x <= target, which means that, iftargetis present, the last occurrence is the last element in the 'before' region (so, we can check/return theleftpointer at the end).\n\nAnd so on for other problems.\n\nYou can try the transition-point recipe on all the problems from the binary search chapter of the book online atstart.interviewing.io/beyond-ctci/part-vii-catalog/binary-search, even if you don't have the book. There, you can also find all our solutions using the recipe, in Python, JS, Java, and C++.\n\nWant to leave a comment? You can post under thelinkedin postor theX post.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## What Vibe Coding Actually Looks Like (prompts included)\n\nThe exact prompts used to create an interactive 3D torus visualization app with vibe coding.\n\n## Choosing a tech stack in 2025\n\nHow would you build a Lichess clone in 2025? My process for picking a tech stack.\n\n## Wall Game DB Design\n\nDesigning the DB for the Wall Game.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/binary-search?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "In Defense of Coding Interviews",
      "content": "# In Defense of Coding Interviews\n\nThere is already a lot of discourse about everything wrong with coding interviews. Indeed, one of the first chapters inBeyond Cracking the Coding InterviewisWhat's Broken About Coding Interviews?(it's one of the sneak peek free chapters inbctci.co/free-chapters).\n\nHere, I want tocollect all the arguments for the contrary view: that there are no clear better alternatives to coding interviews at Big Tech companies.\n\nDisclaimers:\n\n• I am one of the authors ofBeyond Cracking the Coding Interview, a prep book for coding interviews. Thus, I am vested in coding interviews not going away.\n\n• I love leetcoding and specialized in DS&A for my PhD, so I haven't personally experienced thedreadthat most people feel grinding it.\n\n• I've been an interviewer at Google in the past, but I'm not currently working for Big Tech, and I don't have any inside knowledge. This is just my assessment.\n\n• This post is only about Big Tech. I don't think coding interviews are a good idea for startups.\n\n• This post contains \"Strong Opinions, Weakly Held\". I believe everything here, but I'm very receptive to pushback and opposing data.\n\n## The rationale for coding interviews\n\nI think Big Tech companies understand that being cracked at DS&A is not really necessary to be a good SWE. I don't think coding interviews are about that at all.\n\nImagine you are a Big Tech company, like Google. You receive a massive stream of applications, and you have to trim that down to a still large number of hires. Your hiring system needs to bescalable:\n\n• you need to quickly train many interviewers\n\n• you need a way to evaluate candidates that minimizes interviewer bias (notyourbias, or a specific person's bias, but all the biases of a large, heterogeneous group)\n\nSo, the first thing you do to scale--in true engineering fashion--is decoupling hiring and team matching. But that means you cannot hire for specific tech or domain experience: You don't know in what team candidates will end up, and your teams use a bunch of different languages and tech stacks (and a lot of it is internal anyway, so you definitely can't hire for that).\n\nSo, you need acompetence assessmentthat is independent of any particulars about the job, much like the role the SAT plays for college admissions. How do you do that?\n\nIf you are a Big Tech company, what you actually want is candidates who can take any complex software system (that's not part of the candidate's previous expertise) and answer hard questions about it, like what's the best way to add a feature, how to optimize it, or how it should be refactored. In other words, the competence you want to assess is general problem-solving skills, and that's what coding interviews are designed for: you are given a tough problem that you haveideallynever seen before (more on this later), and asked to showcase your thought process on how you approach it. When working as intended, I believe it gives moresignalabout your problem-solving skills and is easier to evaluate impartially than other popular interview formats, like talking about previous experience or take-home assignments. And there's an impartial way to evaluate them, by looking at the optimality of the solution.\n\nYes, there's a lot more to being a SWE than problem-solving skills--and that's why Google also does system design and behavioral interviews, but you still want to hire for this trait.\n\n## The two crucial flaws: memorization and cheating\n\nHopefully, the rationale above covered one of the most common criticisms of coding interviews: that they do not reflect the day-to-day work of an engineer. Instead, I want to focus on whatIthink are the two biggest issues with coding interviews:\n\n• Memorizing an absurd amount of leetcode problems gives you an edge.This is the classic reason why peoplehatecoding interviews with a passion. It has led to an \"arms race\" where candidates have to memorize more and more problems to improve their odds, and interviewers keep asking about more niche topics. At the extreme, coding interviews end up feeling like a lottery, and candidates find prep a soul-sucking waste of time.\n\nMemorizing an absurd amount of leetcode problems gives you an edge.This is the classic reason why peoplehatecoding interviews with a passion. It has led to an \"arms race\" where candidates have to memorize more and more problems to improve their odds, and interviewers keep asking about more niche topics. At the extreme, coding interviews end up feeling like a lottery, and candidates find prep a soul-sucking waste of time.\n\n• Cheating has become easy with AI.This is a newer issue that's becoming more prevalent due to the fact that LLMs are pretty good at leetcoding. In real time, a cheater can feed the problem statement to an LLM (without obvious tales like \"select all\"), get a solution, and even a script for what to say.\n\nCheating has become easy with AI.This is a newer issue that's becoming more prevalent due to the fact that LLMs are pretty good at leetcoding. In real time, a cheater can feed the problem statement to an LLM (without obvious tales like \"select all\"), get a solution, and even a script for what to say.\n\nFrom the company's side, Issue (1) is not much of an issue. It definitely undermines the \"problem-solving\" part of the interview if a candidate is just recalling the question, but, statistically, if they do enough rounds, it's unlikely to happen every round. Some people (not me) also argue that the memorization is even good for the companies because it rewards hard work and dedication.\n\nFor what it's worth, one thing we hoped to change about the interview prep\ndiscourse with BCtCI is that candidates should focus on improving their\nproblem-solving skills rather than memorizing. See, for instance, how weteach binary searchor how weapproach hard\nproblems. But yes,\ngrinding is still necessary.\n\nIssue (1) also means that they'll lose a big chunk of candidates who are great SWEs but won't put up with grinding leetcode or that simply don't perform well under pressure (and, from personal experience, many great developers fall in this group). This sucks from the candidate's perspective, but if you are Google, you receive an overwhelming amount of applications from qualified candidates, so you are more OK with rejecting good candidates than accepting bad ones.\n\nIssue (2), on the other hand, has the potential to completely ruin coding interviews from the company's side. I'm seeing a quick rise of stories from frustrated interviewers who interviewed or even hired cheaters who could then not do the job (ExhibitA).\n\nI expect to see some kind of systematic response to this from Big Tech, but it's not clear what as of April 2025.This articleincludes some internal comments from Google execs:\n\n> [Brian] Ong [Google’s vice president of recruiting] said candidates and Google employees have said they prefer virtual job interviews because scheduling a video call is easier than finding a time to meet in available conference rooms. The virtual interview process is about two weeks faster, he added.He said interviewers are instructed to probe candidates on their answers as a way to decipher whether they actually know what they’re talking about.“We definitely have more work to do to integrate how AI is now more prevalent in the interview process,” said Ong. He said his recruiting organization is working with Google’s software engineer steering committee to figure out how the company can refine its interviewing process.“Given we all work hybrid, I think it’s worth thinking about some fraction of the interviews being in person,” Pichai responded. “I think it’ll help both the candidates understand Google’s culture and I think it’s good for both sides.”\n\n[Brian] Ong [Google’s vice president of recruiting] said candidates and Google employees have said they prefer virtual job interviews because scheduling a video call is easier than finding a time to meet in available conference rooms. The virtual interview process is about two weeks faster, he added.\n\nHe said interviewers are instructed to probe candidates on their answers as a way to decipher whether they actually know what they’re talking about.\n\n“We definitely have more work to do to integrate how AI is now more prevalent in the interview process,” said Ong. He said his recruiting organization is working with Google’s software engineer steering committee to figure out how the company can refine its interviewing process.\n\n“Given we all work hybrid, I think it’s worth thinking about some fraction of the interviews being in person,” Pichai responded. “I think it’ll help both the candidates understand Google’s culture and I think it’s good for both sides.”\n\nI thought going back to in-person interviews would be ano-brainerfor a company like Google, but my reading of these comments is that they don't seem too bothered for now. ~shrug~\n\nDisclaimer: I haven't worked for a Big Tech company since before AI cheating\nwent viral, so I don't have internal insight into what people in charge of\nhiring are actually thinking.\n\nTwo related arguments that I don't subscribe to are (1) that leetcode-style interviews are no longer relevant because AI can solve them, and (2) that LLMs should be allowed during coding interviews because they are allowed on the job. The fact that AI can solve coding questions doesn't change that it still gives you the important signal that you want from humans: algorithmic thinking and general problem-solving skills. We just need humans to not cheat.\n\nI'll share my thoughts on how to improve coding interviews to address these issues. First, let's see why I think the alternatives are not better.\n\n## The problems with the alternatives\n\n### Take-home assignments\n\nTake-home assignments are even more subject to cheating, so that can't be the answer to cheating. Never mind LLMs, you don't even know who did the assignment. But take-home assignments have other flaws:\n\n• They create an asymmetry between company and candidate, where the company asks for a ton of work from the candidate without putting any effort in. \"Oh, we have way too many candidates we need to filter down to a shortlist? Send all of them a complex task to do over the weekend.\" I prefer a model where both company and candidate have to put in time. I'm more OK with take-home assignments as the final stage of the process.\n\n• They favor people who are unemployed and/or have a lot of free time to polish the assignment.\n\n### Previous experience\n\nI find this too subjective to give signal about problem-solving skills, and it's more about being a good \"salesperson\". I also think it's more subject to bias:people with a similar background as yours are probably more likely to have similar interests, and thus you may find their side-projects more interesting.\n\n## Trial periods\n\nThis makes sense to me in smaller companies, where you find a candidate with the perfect profile for the task at hand. It doesn't scale to Big Tech companies.\n\n### Other alternatives\n\nIf there are other alternatives that fulfill the same purpose as coding interviews but don't suffer from the same issues, I'd love to hear about them.\n\nOne idea I liked is going through a code review during the interview, but it's not clear that (1) it offers as much signal about problem-solving skills, and (2) it is easy to evaluate impartially.\n\n## How to improve coding interviews\n\nRight now, FAANG interviewers focus too much on \"Did they solve the question or not?\" That's because they don't get much training on how to interview well (if at all), and it's the most straightforward way to pass on a hire/no hire recommendation to the hiring committee. This leads to many interviewers just pasting the prompt in and mostly sitting in silence. This is the ideal scenario for cheaters.\n\n### The obvious things\n\nThere are obvious ways to improve this situation:\n\n• In-person interviews. These have other benefits, like allowing the candidate to get a better sense of the company culture.\n\n• Not using publicly available questions, and actively scanning for leaks.\n\n• Cheating detection software (privacy is a concern here -- would it be too crazy for a company to ship a laptop to the candidate just for the interview?).\n\n• Stop asking questions that require knowing some niche trick that a normal person wouldn't be able to figure out on the spot. Those reinforce a focus on memorization.\n\n### Low effort ways of countering cheating\n\nI also think that measures designed to throw LLMs off could be effective (at least in the short term) and require minimal effort, such as:\n\n• Stating the question, or part of it, instead of writing the whole thing down\n\n• Including a 'decoy' question and telling the candidate, \"Ignore that line, it is part of our anti-cheating measures.\"\n\nSeeLinkedIn discussion.\n\n### A fundamental tradeoff\n\nPerhaps the most effective way to counter both memorization and cheating is to make coding interviews more open ended and conversational. To use a chess analogy, a cheater may make a great move, but if you ask them to explain why they did it, they may not be able to.\n\nThe interviewer can use a coding question as a launching point, but then drill down on technical topics as they come up. So, e.g., if a candidate chooses to use a heap, the interviewer could go into:\n\n• What made you think of using a heap? What properties are important for this problem?\n\n• What are the tradeoffs of using a heap vs binary search trees?\n\n• How would you go about implementing a heap that supports arbitrary priorities?\n\n• Why isheapify faster than inserting one by one?\n\nIf interviewers did that, it wouldn't even be necessary to ask tricky questions. They could evenaskFibonacci.\n\nThe problem is that, the more open ended the interview is, the more difficult\nit is to evaluate candidates systematically. To start, you'd need better\ninterviewers and better interviewer training. However, it seems to me that\nthere isa fundamental tradeoff between how objective the evaluation is and\nhowgameablethe interview is by memorizing or cheating.\n\nI don't have a good solution to this--I would love to hear yours.\n\n## More good things about coding interviews\n\n### Only one thing to study\n\nAn underrated upside of leetcode interviews is that you only need to study one thing for all the big companies. I feel like if every company asked different things, interview prep time would decrease for any specific company but increase overall.\n\nIn fact, a likely outcome of the push for fewer leetcode-style interviews is an even worse compromise: coding interviews won't completely go away, so you'll still need to grind leetcode, but you'll also have to prep a bunch of specialized stuff for each company on top of that.\n\nSeeLinkedIn discussion.\n\n### They are not based on pedigree\n\nCoding interviews act as a form of standardized testing, similar to the role of SAT for college admissions in the US. And, much like the SAT allows high-school students from all backgrounds to attend top colleges, coding interviews allow candidates from all backgrounds to get at the top companies. The leetcode grind is the same for everyone.\n\nIf we kill coding interviews without a good alternative, it seems inevitable that Big Tech companies will give more weight to resume and referrals. We all agree that's a bad thing.\n\n## Final thoughts\n\nThe best question we got in ourReddit AMAfor BCtCI was whetherwe'd use coding interviews ourselves if we were in charge of hiring. You can see Gayle's, Mike's (mikemroczka.com), and my answers. We all saidnoin its current form, but yes with caveats/improvements.\n\nMy favorite answer was Mike's. He's less of a proponent of leetcode-style interviews than I am, but I think he strikes a thoughtful balance between DS&A and practical stuff:\n\n> Best question so far. Yes, I would ask DS&A questions still, but not exclusively and not difficult ones. Many startups shouldn't ask them though, because most people are bad at discerning what a reasonable question is.I would do 4-5 rounds of interviews because less than that is hard to be significant, but more than that and you're wasting too much of a candidate's time (Netflix has a whopping 8 rounds!!). For a senior engineer role, I'd do something like this.Round 1: An online DS&A assessment to filter out people that can't do the simple things (easy & very simple medium questions only, not hard)Round 2: Live interview of DS&A (simple medium, not hard. essentially just making sure you didn't cheat on the previous round by asking you to explain your answers and code something new from scratch)Round 3: System design (no need for perfect answers, but I'd ask an uncommon question to ensure it was something they hadn't memorized)Round 4: Behavioral, with a focus on cross-team impact. This would just be a simple pass/fail and just a vibe check. It might also be skipped if the prior two rounds had good signal for emotional intelligenceRound 5: Remote logging into a server and working on an actual bug that was fixed in our codebase before. There would be no time limit, but time on the server would be logged to weed people out who needed days to complete a simple task.This ends up testing a little bit of theory, practical knowledge, emotional intelligence, and the generalized SWE skillset.Full disclosure. This is my answer. Not the answer of every author. Again, I'd stress that the average startup wouldn't benefit from DS&A and shouldn't be asking them\n\nBest question so far. Yes, I would ask DS&A questions still, but not exclusively and not difficult ones. Many startups shouldn't ask them though, because most people are bad at discerning what a reasonable question is.\n\nI would do 4-5 rounds of interviews because less than that is hard to be significant, but more than that and you're wasting too much of a candidate's time (Netflix has a whopping 8 rounds!!). For a senior engineer role, I'd do something like this.\n\nRound 1: An online DS&A assessment to filter out people that can't do the simple things (easy & very simple medium questions only, not hard)\n\nRound 2: Live interview of DS&A (simple medium, not hard. essentially just making sure you didn't cheat on the previous round by asking you to explain your answers and code something new from scratch)\n\nRound 3: System design (no need for perfect answers, but I'd ask an uncommon question to ensure it was something they hadn't memorized)\n\nRound 4: Behavioral, with a focus on cross-team impact. This would just be a simple pass/fail and just a vibe check. It might also be skipped if the prior two rounds had good signal for emotional intelligence\n\nRound 5: Remote logging into a server and working on an actual bug that was fixed in our codebase before. There would be no time limit, but time on the server would be logged to weed people out who needed days to complete a simple task.\n\nThis ends up testing a little bit of theory, practical knowledge, emotional intelligence, and the generalized SWE skillset.\n\nFull disclosure. This is my answer. Not the answer of every author. Again, I'd stress that the average startup wouldn't benefit from DS&A and shouldn't be asking them\n\nWant to leave a comment? You can post under thelinkedin postor theX post.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Wall Game DB Design\n\nDesigning the DB for the Wall Game.\n\n## Heapify Analysis Without Math\n\nA proof that heapify takes linear time without using complex equations.\n\n## Lifecycle of a CS research paper: my knight's tour paper\n\nThe backstory and thought process behind a fun paper from my PhD.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/in-defense-of-coding-interviews?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Heapify Analysis Without Math",
      "content": "# Heapify Analysis Without Math\n\nI'm writing about heaps for Beyond Cracking the Coding Interview (beyondctci.com), and the most technical part is the analysis ofheapify. It's easy to show that it takesO(n log n)time, wherenis the number of nodes in the heap, but it's not straightforward to show that this is not tight and the method actually takesO(n). time.\n\nEvery proof I have found online involves a summation over the levels of the heap that ends up looking something like the one inWikipedia heap page:\n\nwhich is more math than I want to put in this book (the bulk of the audience consists of people trying to land a SWE job, not math enthusiasts).\n\nBelow is the proof \"without complicated math\" I came up with that heapify takesO(n)time. If you are familiar with the classic proof, let me know if you find it easier - I might use it for the book. Also, please let me know if you've seen someone else proving it in a similar way.\n\nIf you already know what heapify is, you can jump directly to theProof.\n\n## Heap Recap\n\nHeaps are binary trees with two special properties:\n\n• They arecompletebinary trees: all the levels except the last one have the maximum number of nodes; the last level may not be full, but all the nodes are aligned to the left. (In particular, this implies that heaps have logarithmic height, which is key to the big O analysis.)\n\n• Theheap property:every node is smaller than its children (this is assuming a min-heap - it would be the opposite for a max-heap).\n\nI will focus on the heapify operation and its analysis, but if you want to learn heaps from scratch, the Algorithms with Attitude Youtube channel has agreat videoon it. He also covered theclassic linear-time prooffor heapify, if you want to compare it to mine.\n\nIn any case, I left a full Python heap implementation at the bottom of this post.\n\n## What's Heapify?\n\nHeapify (invented byRobert W. Floyd) converts a binary tree which is already complete, but may not have the heap property, into a proper heap.\n\nHeapify uses the \"bubble-down\" procedure, which starts at a node that may not satisfy the heap property, and recursively swaps it with the smallest of its two children until the heap property is restored:\n\nHeapify works by \"bubbling down\" every non-leaf (internal) node, from bottom to top:\n\nThis figure shows the heapify steps for a min-heap. The first tree is the initial state, which doesn't yet have the min-heap property. Leaves are already at the bottom, so bubbling them down has no effect. The next 3 trees show the evolution after bubbling down the two nodes at depth 1 and then the node at depth 0.\n\nIn the array-based heap implementation,heapify()looks like this:\n\nThe reason why we start bubbling down from the middle of the heap is that, in a complete tree, at least half the nodes are leaves, and we don't need to bubble those down.\n\nHere, we won't prove that itworks, only that its analysis isO(n).\n\nI'll start with a definition and a fact we'll use later:\n\nAperfectbinary tree is a complete tree where the last level is full:\n\nFact 1: In a perfect tree, the number of leaves is 1 more than the number of internal nodes.\n\nFor instance:\n\nFact 1 is true because the number of nodes at each level is a power of 2, so:\n\n• the number of leaves is a power of 2, and\n\n• the number of internal nodes is the sum of all the previous powers of 2.\n\nThe sum of the first few powers of 2 add up to one less than the next power of 2. You can see that if you line them up like this:\n\nIt's a bit likeZeno's paradox, where each power of 2 in the sum halves the remaining distance, but never quite gets to 64.\n\nWith that out of the way, back to heapify:\n\nIn the worst case, each node will get bubbled down all the way to a leaf. Thus, each node needs to move downO(log n)levels, so one might reasonably expect heapify to takeO(n log n)time. This is correct in the 'upper bound' sense, but not tight: the total time is actuallyO(n). The intuition for why that is the case is that most nodes are in the deeper levels of the tree, where they don't need to travel a lot to get to the bottom.\n\nWe'll actually prove astrongerclaim:\n\nMain Claim: If you heapify a perfect tree, the number of 'bubble-down' swaps is smaller thann, the number of nodes.\n\n• We'll assume the worst case, in which every node is bubbled down to a leaf position.\n\n• If the claim is true and heapify does<nswaps, then it takesO(n)time, since most bubble-down iterations involve a swap.\n\n• We make the claim about perfect trees (rather than complete trees in general) to keep things simple.\n\nThe proof goes like this:\n\n• When the height is 1, the claim is true because the tree has 1 node and requires 0 swaps to heapify.\n\n• Every time we add a new level,the number of nodes increases more than the number of swaps(by one, to be exact).\n\nIf we can prove (2), together with (1) it implies the Main Claim because, as we add levels, the number of swaps can never catch up to the number of nodes.\n\nTo see why (2) is true, imagine we add a new level to a perfect tree:\n\nEvery preexisting node needs to bubble down one additional level, while the new leaves do not need to do to be bubbled down. Thus, the number of swaps increases by the number of preexisting nodes.\nBut, another way of saying Fact 1 is that if you take a perfect tree and add a new level, the number of new/leaf nodes is 1 more than the number of preexisting/internal nodes.\n\nAnd that's the proof!\n\n## Appendix: The Proof in Numbers\n\nWe can compute the actual number of swaps needed, in the worst case, for concrete heights:\n\nWe can see that the number of swaps never catches up with the root, per the Main Claim.\n\nWe can also show how the number of nodes grows vs the number of swaps:\n\n## Appendix: Full heap implementation\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Actually Implementing Dijkstra's Algorithm\n\nA comprehensive guide to different implementations of Dijkstra's algorithm, with code.\n\n## Double-Edge Cut Problem\n\nAn optimal solution for a graph problem that comes up in the Wall Game.\n\n## Single-Edge Cut Problem\n\nA linear-time algorithm for a graph problem that comes up in the Wall Game.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/heapify-analysis?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Problem Solving BCtCI Style",
      "content": "# Problem Solving BCtCI Style\n\nHere's a thought: You don't want the first time you think about the question\"What should I do if I get stuck in a coding interview?\"to be when you are stuck in a coding interview.\n\nIn a way, getting stuck in a coding interview is an opportunity. The main goal of the interview is to see your problem-solving thought process, and being stuck is the ideal time to showcase it.\n\nBut you want to be prepared. It's valuable to have a plan for this exact scenario. We all dread blanking out in an interview, but having a plan makes it easy to simply focus on executing it. So, let's talk about what such a plan could look like in this blog post.\n\nInBeyond Cracking the Coding Interview, we go over all the steps in an interview, and our best tips to do well in each of them:\n\nIn this blog post, I'll zoom in on the problem-solving step, \"Design the Algorithm,\" and illustrate the thought process with a problem.\n\nAs you can see, we break it down into four steps:\n\n• Minimally sketch the naive solutionto establish a baseline.\n\n• Identify upper and lower boundsusing big O analysis to narrow down the range of possible solutions.\n\n• Look for triggers (Keywords)that point to a specific approach.\n\n• Employ boosters: problem-solving strategies that give you the \"boost\" you need when you are stuck.\n\nThese are not revolutionary ideas -- it's what good problem solvers do and think about instinctively. One of the main goals of the book, and of this blog post, is to spell out the thought process of people who are really good at this in a relatable way so that anyone can reproduce it.\n\nWe playfully call this theMIKE template(Minimally sketch brute force,Identify bounds,Keywords (triggers),Employ boosters) afterMike Mroczka, one of the authors of BCtCI.\n\nRather than expanding on these now, we'll see them in action with the following problem.\n\n## Problem Statement\n\nThe problem is based onLeetCode 3458, which appeared in a recent contest. You can go and give it a try before reading on (it's labeled as medium, but I think it's on the harder end of medium). The thought process I'll walk through here is based on how I solved it during the contest.\n\nGiven a strings, a substring ofsisspecialif any character in it does not appear outside it.\n\nFor example, ifsis\"abcba\":\n\n• \"bcb\"is a special substring because'b'and'c'do not appear insoutside\"bcb\".\n\n• \"abc\"is not a special substring because'a'appears insoutside\"abc\".\n\nGiven a stringsconsisting ofnlowercase English letters, determine the maximum number of disjointspecialsubstrings. Two substrings are disjoint if they do not overlap.\n\nConstraints:\n\n• 2 <= n <= 10^5\n\n• sconsists only of lowercase English letters.\n\n## Digesting the problem\n\nFirst, we need to digest what the problem is asking. This problem follows a common pattern: it introduces a kind of esoteric definition, \"special substring\", and then asks us to do something with it.\n\nTo make sure we understand what a special substring is, it's good to look at a few examples, starting with the provided ones. For instance, in\"abcba\", do you understand why\"a\"is not special but\"c\"is?\n\nTake some time to come up with your own examples. Rushing to solving a problem before understanding it well is a common but often costly mistake.\n\nSometimes, it helps to tackle just one part of the problem first, so we can start making progress.\n\nWe can think of an algorithm with 2 parts:\n\n• Part A: Find all the special substrings.\n\n• Part B: Find the most non-overlapping special substrings.\n\nLet's start with part A.\n\n## Part A: Find all the special substrings\n\nWe'll walk through the MIKE template.\n\n## M: Minimally sketch brute force\n\nThe key here is to not overthink it. We just want to get the ball rolling and have a baseline we can improve upon.\n\nSince we don't want to spend too much time in an interview, you could even just describe the idea in a sentence and move on. But we prefer to briefly sketch it in very high-level pseudocode. We call it 'intended English': it's written like English, but with indentation to show the code structure:\n\nInterviews often involve considering trade offs between algorithms, so it's a\ngood habit to give them names and list their time/space complexity.\n\nIn this case, the space complexity depends on how many special substrings we might find, which is not clear yet, so we'll leave it out for now.\n\nSketching the brute force solution helps us ensure we understand the problem\n(and if we are solving for the wrong thing, we give the interviewer a chance\nto let us know).\n\n## I: Identify upper and lower bounds\n\nWe can use big O analysis to narrow down the range of possible solutions. An upper bound means \"we don't have to consider any solution that takes longer than this\", and a lower bound means the opposite: \"we don't have to consider any solution that takes less time than this\". In the book, we go over two ways of establishing an upper bound and two ways of establishing a lower bound:\n\nUpper bounds:\n\n• Brute force upper bound: we just saw that we can find all special substrings inO(n^4)time, so we don't have to consider any solution that takes longer than that.\n\n• TLE (Time Limit Exceeded) upper bound: here is where we use the problem constraints to establish an upper bound. The problem says thatn <= 10^5, which usually means thatO(n^2)solutions are too slow, butO(n log n)or faster solutions are fine.\n\nLower bounds:\n\n• Output-size lower bound: thespacetaken by the output is a lower bound for the time complexity, because that's how long it takes just to write the output. In our case, the output of the overall problem is just a number, so this lower bound is trivial:O(1). Bounds are not always useful!\n\n• Task-based lower bound: some problems involve an inherent task thatanysolution must fulfill. The runtime of this task is a lower bound. In this case, we know weat leastneed to read every letter in the input, so we have a lower bound ofO(n). In other words, we can rule out solutions that takeO(log n)orO(1)time.\n\nCombining our findings, we can narrow down our search range toO(n log n)orO(n)algorithms (something likeO(n log^2 n)would also be fine, it's just less common).\n\n## K: Keywords (triggers)\n\nThere are certain properties of problems that point to a specific approach. Here are some triggers we can identify for this problem:\n\n• finding substrings->sliding windows\n\n• O(n log n)possible target complexity->sorting or heaps\n\nUnfortunately, triggers are not a guarantee, and these triggers don't seem to help for this problem:\n\n• In sliding windows, once you move past a character, you don't later go back. So, in Example 1, it would be impossible to find both\"abcba\"and\"bcb\": if you find\"abcba\"first, therightpointer would have to go back to find\"bcb\". But if you find\"bcb\"first, theleftpointer would have to go back to find\"abcba\".\n\n• Sorting doesn't seem like a good fit because the input order is important.\n\nDo you think I missed any other triggers?\n\n## E: Employ boosters\n\nSo, triggers didn't help, and brute force is still far from the target complexity. It's time to employ boosters.\n\nHere's an overview:\n\nThe boosters are roughly ordered, but we don't always have to use them in order. In fact, here's a plot twist: what we did at the beginning, splitting the problem into two parts, is the third booster:Decrease the Difficulty->Break Down the Problem.\n\n## Booster 1: Brute force optimization\n\nThe first booster is straightforward: take the brute force pseudocode we already have and try to optimize it.\n\nIn the boosters diagram, we list three ways to go about it. One of them is theData structure pattern. Many bottlenecks come from having to do some calculation inside a loop. In those situations, ask yourself,\n\n\"Do I know of any data structure which makes this type of operation faster?\"\n\nFor this problem, we can use a hash set to optimize the innermost loop:\n\nIf you have working code or pseudocode but think of an optimization or better\napproach, do NOT edit your code. Copy-paste it and work on a separate copy.\nThis way, if you don't have time to finish or realize it's wrong, you'll still\nhave the previous working version.\n\n## Booster 2: Hunting for properties\n\nWe got down toO(n^3)time, but we know we still need to bring this down to the target complexity.\n\nLet's say we don't know how to optimize the code further. Often, the breakthrough comes from uncovering some \"hidden\" observation orpropertynot explicitly mentioned in the statement. Our second booster is to go hunting for those.\n\nIn the book, we discuss a bunch of ways of doing this, but the most basic and effective one is to try to solve the problem manually with a non-trivial example. By non-trivial, we mean that is is not some weird edge case, which would not be helpful for figuring out a general algorithm.\n\nLet's actually do that: takes = \"mississippi\"andmanuallytry to find all the special substrings.\n\nDon't overthink it. Don't think about algorithms yet. Just write them down.\n\nDone? Ok,nowtry to reverse-engineer what shortcuts your brain took. This is one property you may have noticed:\n\n### Property 1\n\nProperty 1:a special substring must start at the first occurrence of a letter.\n\nYou may have noticed this property when your brain skipped over the second, third, or fourth'i's inmississippiand intuitively realized that there is no special substring starting at those. Writing down the propertyformalizesthis instinct and ropes in the interviewer.\n\nNow that we have a property, we have to find a way to use it.Property 1allows us to optimize the outer loop: it means we only have26 = O(1)possible starts to check (problems where the input consists of only lowercase letters often have optimizations like this).\n\nAs we iterate through the possible starts, we can track letters seen so far (e.g., in a hash set):\n\nWe like to write down the big O simplification (O(26 * n^2) = O(n^2)), so\nthe interviewer doesn't think we missed steps.\n\nWe haven't hit our target time complexity yet, so let's keep hunting for properties. Here is another one:\n\n### Property 2\n\nProperty 2:of all the special substrings that start at a given letter, we only care about the shortest one.\n\nOur ultimate goal is to find the most non-overlapping special substrings. If we can choose between two special substrings, one of which contains the other, it is always \"optimal\" or, at least, \"safe\" to pick the smaller one.\n\nFor instance, ifsis\"baa\", we have two choices for special substrings starting at'b':\"baa\"and\"b\". We should pick\"b\"so that the\"aa\"part can be in another disjoint special substring.\n\nAgain, when we find a property, we need to think of how to apply it.Property 2means that, for each starting pointi, we can grow a substring one letter at a time, and stop as we find the first special substring.\n\nLet's break this down a bit more: say you start at indexi.\n\n• If you find a lettercthat appears at some later point, we need to grow the substring up to that index.\n\n• If you find a lettercthat appears beforei, we can stop the search. No substring starting atican be special.\n\nFor example, imagineistarts at the first'b'in the following string:\n\nThat means we need to grow the substring at least up to the last'b'in the string:\n\nAs we grow the substring, we hit an'a', which appears beforei, and we realize that no substring starting atican be special.\n\nWe can now add this logic to our algorithm. We can start the algorithm by computing the first and last index of each letter (this is an example of thepreprocessing patternin the boosters diagram -- it's common for properties from Booster 2 to enable optimizations from Booster 1).\n\nThen, as we grow each substring, we keep track of the farthest index we need to reach. (This is actually a common pattern in sliding window algorithms, where we maintain information about the window as it 'slides', rather than computing it from scratch every time the window moves. So, the 'sliding windows' trigger wasn't completely off).\n\nWe got the time down toO(n). Since we hit the lower bound, we can be confident Part A is as good as it can be, and we can move on to Part B.\n\n## Part B: Find the most non-overlapping special substrings\n\nLet's be honest: even if in the book we reallyemphasizedeveloping your problem-solving skills by using the MIKE template and the boosters, knowing a bunch of leetcode questions DOES give you an edge in coding interviews. So, I'll tell you how I actually solved this problem in the contest. I realized that Part B is just a variation of a classic greedy problem: most non-overlapping intervals. Indeed, a substring can be seen as an interval of the string.\n\nThe \"most non-overlapping intervals\" problem is in BCtCI, so I already knew that it can be solved with a greedy algorithm that sorts the intervals by their end time and then iterates through them, picking the ones that don't overlap with the previous one (hereis a similar problem on leetcode). This algorithm fits within our target time complexity, so I didn't have to think beyond that.\n\nIf I didn't already know the solution, I would have walked through the MIKE template again for Part B.\n\n## Full implementation\n\nHere is a full implementation:\n\nYou may think that the bottleneck is the sorting, but it's not. Recall that there are only up to 26 special substrings (by Property 1). Sorting26intervals takesO(26 log 26) = O(1)time.\n\n## Conclusion\n\nI wanted to give an overview of all the high-level ideas for problem-solving in leetcode-style interviews. We could dive a lot deeper into any of those ideas, so this blog post may feel a bit rushed, but the meta-point is thatyou should have a plan for when you are stuck in an interview(and you should be following it during your practice sessions so it becomes second nature). It's not important that you use the MIKE template --yourplan should work foryou. But the ideas covered in this post should probably be part of it.\n\nIf you have any comments, let me know onlinkedinorX.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Wall Game DB Design\n\nDesigning the DB for the Wall Game.\n\n## What Vibe Coding Actually Looks Like (prompts included)\n\nThe exact prompts used to create an interactive 3D torus visualization app with vibe coding.\n\n## Actually Implementing Dijkstra's Algorithm\n\nA comprehensive guide to different implementations of Dijkstra's algorithm, with code.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/problem-solving-bctci-style?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Reachability Problems and DFS",
      "content": "# Reachability Problems and DFS\n\n## Introduction\n\nDepth-first search, or DFS, is a fundamental graph algorithm that can be used to solvereachabilityproblems. This post shows how to adapt the basic DFS template to solve several problems of this kind. Reachability problems are often easier in undirected graphs. Below, we specify if the algorithm works for undirected graphs, directed graphs, or both.\n\n### Prerequisites\n\nWe assume that the reader is already familiar with the concept of DFS.Hereis an excellent video introducing DFS with step-by-step animations. We also assume that the reader is familiar with the adjacency list representation of a graph, and we use big-O notation in the analysis.\n\n### Coding conventions\n\nThe algorithms below are in Python.ndenotes the number of nodes. Nodes are identified with integers in the range0..n-1. The graphGis a graph stored as an adjacency list:Gis a list ofnlists. For eachvbetween0andn-1,G[v]is the list of neighbors ofG.\n\nIf the graph is given as an edge list instead, we can initialize it as follows:\n\nIf the graph is given as an adjacency matrix, we can iterate through the rows of the adjacency matrix instead of through the adjacency lists. To iterate through the neighbors of a nodev, instead of\n\nNote that using an adjacency matrix affects the runtime analysis of DFS:O(n²)instead ofO(m).\n\n## Which nodes can be reached from node s?\n\nThis is the simplest question that can be answered with DFS. The primary data structure in DFS is a list of booleans to keep track of already visited nodes (we call itvis). If we start a DFS search from a nodes, the reachable nodes will be the ones for whichvisis true.\n\nFor this,Gcan be directed or undirected. We make use of a nested function in Python so that we do not need to passGandvisas parameters (in Python nested functions have visibility over the variables in the scope where they are defined).\n\nDFS runs inO(m)time andO(n)space, wheremis the number of edges. This is because each edge is considered twice, once from each endpoint, if the endpoints end up being visited, or zero times if the endpoints are not visited.\n\n### Iterative version\n\nThe iterative version takesO(m)space instead ofO(n)because nodes can be inserted into the stack multiple times (up to one time for each incident edge). Alternatively, we can mark the nodes as visited when we add them to the stack instead of when we remove them. This change reduces the space usage to the usualO(n). However, with this change, the algorithm is no longer DFS. It still works for answering reachability questions because the set visited nodes is the same, but the order in which they are visited is no longer consistent with a depth-first search order (it is closer to a BFS (breath-first search) order, but also not exactly a BFS order).\n\nThe difference between marking nodes when they added vs removed from the stack is discussed in detailhere. Since the recursive version is shorter and optimal in terms of space, we favor it from now on. That said, it should be easy to adapt the iterative version above to the problems below.\n\n## Can node s reach node t?\n\nWe use the same code from before, but we add early termination as soon as we seet. Now, the recursive function has a return value.\n\nAdding the early termination can make the DFS faster, but in the worst-case the time/space complexity is the same.\n\n### Practice problems\n\n• https://leetcode.com/problems/the-maze/\n\nThe hardest part on this problem is constructing the graph in the first place.\n\n## Find a path from s to t\n\nThe edges \"traversed\" in a DFS search form a tree called the \"DFS tree\". The DFS tree changes depending on where we start the search. The starting node is called the root. We can construct the DFS tree by keeping track of the predecessor of each node in the search (the root has no predecessor). If we construct the DFS tree rooted ats, we can follow the sequence of predecessors fromttosto find a path fromstotin reverse order.\n\nInstead of using the listvisto keep track of visited nodes, we know a node is unvisited if it has no predecessor yet. We indicate that a node has no predecessor with the special value-1.\n\nNote that DFS doesnotfind the shortest path formstot. For that, we can use BFS (breath-first search). It just returns any path without repeated nodes.\n\n## Is the graph connected?\n\nFor undirected graphs, this is almost the same question as the first question (\"which nodes can be reached bys?\") because of the following property:\n\nAn undirected graph is connected if and only if every node can be reached froms, wheresis any of the nodes.\n\nThus, the code is exactly the same as for the first question, with two differences: 1) we choosesto be0(could be anything), and 2) we change the last line to check if every entry invisis true.\n\nFor directed graphs, we need to take into account the direction of the edges. A directed graph isstrongly connectedif every node can reach every other node. We can use the following property:\n\nA directed graph is strongly connected if and only ifscan reach every node and every node can reachs, wheresis any of the nodes.\n\nWe already know how to use DFS to check ifscan reach every node. To check if every node can reachs, we can do a DFS starting froms,but in the reverse graph of G. The reverse graph ofGis likeGbut reversing the directions of all the edges.\n\nThe runtime is stillO(m), but the space is nowO(m)because we need to create and store the reverse graph. There are alternative algorithms (like Tarjan's algorithm) which can do this inO(n)space.\n\n## How many connected components are there?\n\nWe can use the typical DFS to answer this question for undirected graphs. We use a common pattern in DFS algorithms: an outer loop through all the nodes where we launch a search for every yet-unvisited node.\n\nThe runtime is nowO(n+m)because, ifm < n, we still spendO(n)time iterating through the loop at the end.\n\nFor directed graphs, instead of connected components, we talk aboutstrongly connected components. A strongly connected component is a maximal subset of nodes where every node can reach every other node.\n\nIf we want to find the number of strongly connected components, we can use something likeTarjan's algorithm, a DFS-based algorithm that requires some additional data structures.\n\n### Practice problems\n\n• https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/(Premium only)\n\n• https://leetcode.com/problems/number-of-islands/\n\n• https://leetcode.com/problems/friend-circles/\n\n## Which nodes are in the same connected components?\n\nThis question is more general than the previous two. We label each nodevwith a numberCC[v]so that nodes with the same number belong to the same CC. Instead of having a listCCin addition tovis, we use the CC number-1to indicate unvisited nodes. This way, we do not needvis\n\nFor directed graphs, again we need Tarjan's algorithm or an equivalent algorithm.\n\n### Practice problems\n\n• https://leetcode.com/problems/max-area-of-island/\n\n• https://leetcode.com/problems/sentence-similarity-ii/\n\nIn the second problem, nodes are given by names, not indices, so they need to be converted.\n\n## Is the graph acyclic?\n\nFor undirected graphs, this question is simple. First, we consider the problem in each CC independently. This is very common pattern in graph problems. We do this with an outer loop through all the nodes where we launch a search for every yet-unvisited node.\n\nDuring the DFS search in each CC, if we find an edge to an already visited node that is not the predecessor in the search (the node we just came from), there is a cycle. Such edges in a DFS search are calledback edges. We add one parameter to the recursive functionvisitto know the predecessor node.\n\nFor directed graphs, it is not as simple: the fact that a neighbornbris already visited during the DFS search does not mean thatnbrcan reach the current node. To check if a directed graph is acyclic, we can use the linear-timepeel-off algorithmfor finding a topological ordering. This algorithm detects if the graph is acyclic and finds a topological ordering if so, though we are only interested in the first part.\n\n### Practice problems\n\n• https://leetcode.com/problems/redundant-connection/\n\nThis problem is easier to solve using union-find, but it can be done with DFS.\n\n## Is the graph a tree?\n\nUsually, we ask this question for undirected graphs. We can use this characterization of trees:\n\nAn undirected graph is a tree if and only if it is connected and has exactlyn-1edges.\n\nWe already saw how to check if the graph is connected with DFS, and counting the number of edges is straightforward:\n\n### Practice problems\n\n• https://leetcode.com/problems/graph-valid-tree/\n\n## Is the graph bipartite?\n\nThis is exactly the same question as whether the graph can be two-colored, so see the next section.\n\n## Can the graph be two-colored?\n\nTwo-coloring a graph means assigning colors to the nodes such that no two adjacent nodes have the same color, using only two colors. Usually, we consider coloring question for undirected graphs.\n\nWe consider whether each CC can be colored independently from the others. We can color each CC using DFS. We use values0and1for the colors. The color of the start node can be anything, so we set it to0. For the remaining nodes, the color has to be different from the parent, so we only have one option.\n\nInstead of having avisarray, we use the special color-1to denote unvisited nodes.\n\nWith 3 or more colors, the problem becomesa lot harder.\n\n### Practice problems\n\n• https://leetcode.com/problems/is-graph-bipartite/\n\n## What is the distance from a node s to every other node in a tree?\n\nWe cannot use DFS to find the distance between nodes in a graph which can have cycles, because DFS is not guaranteed to follow the shortest path from the root to the other nodes. For that, BFS is more suitable (if the graph is unweighted). However, since trees are acyclic, there is a unique path between any two nodes, so DFS must use the unique path, which, by necessity, is the shortest path. Thus, we can use DFS to find distances in a tree.\n\n### Practice problems\n\n• https://leetcode.com/problems/time-needed-to-inform-all-employees/\n\n## Find a spanning tree\n\nA spanning tree of a connected, undirected graphGis a subgraph which has the same nodes asGthat is a tree.\nThe edges traversed by a DFS search on a connected graph form a spanning tree (sometimes called a DFS tree). Thus, we do DFS and add the traversed edges to the resulting tree.\n\n## Conclusions\n\nDFS has many uses. We showed how to make minor modifications to the DFS template to answer reachability and connectivity questions.\n\nAfter DFS, the next algorithm to learn would be BFS (breath-first search). Like DFS, it can answer reachability questions. On top of that, it can also answer questions about distance in undirected graphs.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Why Many Greedy Algorithms Are Pickier Than They Need To Be\n\nMany greedy algorithms can be modified to make local rather than global choices while still producing the same solutions.\n\n## The Wall Game Project\n\nAn introduction to the Wall Game, my new project.\n\n## Problem Solving BCtCI Style\n\nA problem walkthrough using the concepts from Beyond Cracking the Coding Interview.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/reachability-problems-and-dfs?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Lazy vs Eager Algorithms",
      "content": "# Lazy vs Eager Algorithms\n\nWarning: I have not tested any code snippet below. Please let me know if you find a bug.\n\n## Introduction\n\nMost algorithms have multiple valid implementations. For instance, in a binay tree problem, you have multiple ways of handling NULL nodes. I'm currently writingBeyond Cracking the Coding Interview(beyondctci.com), which means that my co-authors and I need to take a stance on what version of each algorithm to use. Ideally, we want to show the simplest version of each algorithm:\n\n• Easy to recall for interview,\n\n• Easy to explain to interviewers,\n\n• Easy to debug by hand,\n\n• Short, so that it is quick to code.\n\nIn the book, we don't claim that the version we show is \"the best\" - we say to use the one that works best for you. But showing one in the book is an implicit endorsement.\n\nOne particular decision that comes up again and again with recursive algorithms is choosing between thelazyversion and theeagerversion of an algorithm.\n\n• Aneagerrecursive function expects 'valid' inputs and ensures to only call the recursive function with 'valid' inputs. We can also call it aclean(call)stackalgorithm.\n\n• Alazyrecursive algorithm allows 'invalid' inputs, so it starts by validating the input. Then, it calls the recursive function without validating the inputs passed to it. We can also call it adirty stackalgorithm.\n\nWhat 'valid' means depends on the algorithm--we'll see plenty of examples. We'll also translate the concept of eager vs lazy to iterative algorithms.\n\n## Lazy vs Eager Tree Traversals\n\nAneagertree traversal eagerly validates that the children are not NULL before passing them to the recursive function. Alazytree traversal doesn't, so it needs to check if the current node is NULL before accessing it.\n\nFor instance, here is eager vs lazy preorder traversal:\n\nBoth have the same runtime and space analysis. Even the constant factors probably don't change much, so it comes down to style preference. Which one do you prefer?\n\n## Lazy vs Eager graph DFS\n\nAneagergraph DFS eagerly checks that the neighbors are not already visited before passing them to the recursive function. Alazygraph DFS doesn't, so it needs to check if the current node is already visited.\n\nFor a graph DFS, we can also do a mix between lazy and eager: we can eagerly check if nodes are already visited, and lazily mark them as visited:\n\nAgain, they all have the same analysis. Which one do you prefer?\n\n## Lazy vs Eager grid algorithms\n\nConsider the same DFS algorithm but on a grid of 0's and 1's. The 0's are walkable cells, the 1's are obstacles, and\nwalkable cells next to each other are connected. This time, we need to check that the neighbors are not out of bounds, which we can do lazily or greedily.\n\n## Lazy vs Eager Memoization DP\n\nIn alazymemoization DP (Dynamic Programming) algorithm, we call the recursive function for a subproblem without checking first if we have already computed that subproblem. In aneageralgorithm, we only call the recursive function for subproblems that we still need to compute.\n\nFor memoization DP, I thinklazyis cleaner and more conventional.\n\n## Lazy vs Eager Iterative Tree traversals\n\nConsider a level-order traversal on a binary tree. A level-order traversal is an iterative algorithm that uses a queue data structure.\n\n• Alazyversion puts children in the queue without checking if they are NULL first. We can call it adirty queuealgorithm.\n\n• Aneagerversion checks for NULL nodes and avoids putting them in the queue. We can call it aclean queuealgorithm.\n\n## Eager Graph BFS is better than lazy Graph BFS\n\nThis is the first exception where one is better than the other in terms of big O analysis. ThelazyBFS allows adding already-visited nodes to the queue, while theeagerone does not. We'll first look at the two versions, and then analyze them.\n\nIt may come as a surprise that these two arenotequivalent like all the other examples.\n\nLet's sayVis the number of nodes andEis the number of edges. To keep things simple, consider that the graph is connected, meaning thatEis at leastV-1and at mostO(V²).\n\nBoth versions takeO(E)time. The difference is in the space complexity: the eager version takesO(V)space because we never have the same node twice in the queue. The lazy version takesO(E)space because we allow the same nodes multiple times in the queue.\n\nTo see this, consider a complete graph:\n\n• When we visit start, we add A, B, C, D, E to the queue. Now the queue is:[A, B, C, D, E]\n\n• When we visit A, we add start, B, C, D, E to the queue. Now the queue is:[B, C, D, E, start, B, C, D, E]\n\n• When we visit B, we add start, A, C, D, E to the queue. Now the queue is:[C, D, E, start, B, C, D, E, start, A, C, D, E]\n\n• And so on.\n\nSo, why didn't this happen for other lazy algorithms we have seen?\n\n• For tree traversals, each tree node has a single parent that it can be reached from, so we don't need to worry about the same node appearing twice in the call stack or in the level-order traversal queue.\n\n• For graph DFS,every node in the call stackis marked visited, so if we callvisit()on a node that is already in the call stack, we'll immediately return as we'll see it is marked as visited.\n\n## Eager Dijkstra is better than Lazy Dijkstra, but harder to implement\n\nI wrote extensively about different Dijktsra implementations inthis Dijkstra blog post.\n\nDijkstra is similar to BFS, with the main difference that it uses a priority queue (PQ) instead of a queue to visit the nodes that are closer first (in terms of shortest paths).\n\nIn BFS, when a node is added to the queue, its distance from the starting node is already established and there is never a reason to add it again to the queue. In Dijkstra, when a node is added to the PQ, we might later find a shorter path while it is still in the PQ. When that happens, we can do two things:\n\n• Lazy Dijkstra: just add the node again with the new, improved distance. It will get popped before the previous occurrence because it has higher priority in the PQ. When a node with a \"stale\" distance gets popped off from the queue, we just ignore it.\n\n• Eager Dijkstra(called textbook Dijkstra in the other blog post): instead of adding the node again, find the existing occurrence of it in the PQ, and update it with the new found distance. This guarantees that the same node never appears twice in the PQ.\n\nBoth versions takeO(E*log V)time, but eager is more space efficient, analogously to eager BFS:O(V)for eager Dijkstra vsO(E)for lazy Dijkstra.\n\nHere is lazy Dijkstra:\n\nUnfortunately, eager Dijkstra is not so easy to implement in Python because we are missing thedecrease_key()operation in a heap (and Python does have a self-balancing BST data structure, which can also be used for eager Dijkstra). You can see a BST-based C++ implementation in my other blog post.\n\nThedijkstra_lazy()algorithm above is more or less standard and it has been known as \"lazy Dijkstra\" for a while. However, it is possible to make an even lazier version which has the same runtime and space analysis (but likely bigger constant factors). The idea is that instead of only adding to the PQ the neighbors for whom we find an improved distance, we can simply add all of them, and discard duplicates once we extract them from the PQ:\n\n## So, Lazy or Eager?\n\nWe could keep looking at lazy vs eager algorithms, but I'll stop here. In aggregate, these are the pros and cons that I see:\n\n### Pros of lazy algorithms\n\n• Lazy algorithms require less code.This is because you only need to validate the parameters of the recursive function once at the beginning, instead of validating what you pass to each recursive call. This is specially true in binary tree problems, where you usually have two recursive calls. It doesn't apply as much for graphs.\n\n• Lazy algorithms require less indentation.For instance, in graph problems, we don't need to do checks inside the for loop over the neighbors.\n\n• Lazy algorithms do not require special handling for the first recursive call.You don't need to worry about things like checking if the root is NULL or marking the start node as visited.\n\n• Lazy recursive functions have simpler preconditions.You can just pass anything to them, and they work.\n\n### Pros of eager algorithms\n\n• For a graph BFS, eager has a better space complexity.This is a case where eager is objectively better. (Eager Dijkstra is also better but it is not expected to be implemented in interviews. Your interviewer is probably expecting lazy Dijkstra.)\n\n• Eager algorithms do fewer recursive calls or iterations.In a binary tree, the number of NULL nodes is always one more than the number of internal nodes. This means that a lazy traversal does twice as many recursive calls/iterations as the eager counterpart. This could make a big difference if you want to debug the code manually. For instance, in this picture, you can see that adding NULLs to the queue makes visualizing the steps more painful:\n\n• Eager algorithm can 'feel safer'.A friend commented that, with a lazy algorithm, they feel like they are missing an edge case.\n\n### My preference\n\nHere are my personal preferences for coding interviews (not those of the other authors of 'Beyond Cracking the Coding Interview'):\n\nStrong preferences:\n\n• For BFS, use eager. This one is clear cut.\n\n• For memoization DP, use lazy. It is much cleaner to code.\n\n• For Dijkstra, use lazy Dijkstra (not super lazy Dijkstra). It is what is realistic to do in an interview and probably what the interviewer expects.\n\nWeak preferences:\n\n• For binary tree traversals (iterative or recursive), use lazy. It is a bit cleaner.\n\n• For graph DFS, use eager. It is a bit more standard, and aligned with a graph BFS.\n\nIn the book, we'll definitely mention that some algorithms can be implemented in a lazy or eager way (in way less detail than here), and that you should choose the one that feels easier to you. But, we still need to pick one to show in the problem solutions. One idea is trying to be consistent throughout (e.g., doing all tree and graph traversals in an eager way). If you have an opinion on which one is better, please reach out! I'd love to hear it.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Negative Binary Search and Choir Rehearsal\n\nA curious application of binary search.\n\n## Lifecycle of a CS research paper: my knight's tour paper\n\nThe backstory and thought process behind a fun paper from my PhD.\n\n## Single-Edge Cut Problem\n\nA linear-time algorithm for a graph problem that comes up in the Wall Game.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/lazy-vs-eager?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Breaking Down Dynamic Programming",
      "content": "# Breaking Down Dynamic Programming\n\nNote: the approach in this guide later became the foundation for the dynamic programming chapter inBeyond Cracking the Coding Interview.\n\n## Introduction\n\nWhen I was a TA for \"Algorithm Design and Analysis\", the students struggled with dynamic programming. To simplify/demystify it, I tried to break it down into a logical sequence of steps, each of which should not feel too intimidating on its own. This is explained in detail here. To complement the explanations, there are links to problems onleetcode.com, in case the reader wants to practice. The code snippets are in Python, but Leetcode accepts most popular languages.\n\n## Overview: Recursive vs Iterative DP\n\nIn short, dynamic programming (DP) is a technique for problems that seem hard to solve as a whole, but become easy if we know the solution to smaller subproblems. More technically, we can use it in problems where the (value of the) solution can be expressed as an equation which is a function of the input, and is expressed in terms of itself with smaller inputs. This is called arecurrence equation. The classic example is the Fibonacci recurrence:Fib(n) = Fib(n-1) + Fib(n-2).\n\n• https://leetcode.com/problems/fibonacci-number/\n\nA recurrence equation can be translated into code:\n\nHowever, the above function has an exponential runtime. A recursive function becomes exponential when it is possible to reach the same subcall through different execution paths. In the Fibonacci case, we have the following nested calls:Fib(n) -> Fib(n-1) -> Fib(n-2), andFib(n) -> Fib(n-2). SinceFib(n-2)is called twice all the work from this call is duplicated, which in turn means that subcalls made fromFib(n-2)will start to duplicate and grow exponentially.\n\nDynamic programming is simply a workaround to this duplication issue. Instead of recomputing the solutions of the subproblems, we store them and then we recall them as needed. This guarantees that each subproblem is computed only once.\n\nThere are two main approaches for DP.\n\n### Recursive / Top-down DP\n\nWe start with the code which is a literal translation of the recurrence equation, but then we add a dictionary / hash table to store results.\n\nThere are three changes in the code above:\n\n• declaring our dictionary for storing results,memooutside the recursive function (memo comes \"memorization\" or \"memoization\", a name used in the literature).\n\n• before computing the result, we check if the solution has already been computed. This check can be done before or after the base case.\n\n• before returning, we save the result in thememotable.\n\nUsing a memoization table in this way solves the inefficiency (we will go deeper into the analysis part later).\n\n### Iterative / Bottom-up DP\n\nInstead of starting from the largest input and recursively reaching smaller subproblems, we can directly compute the subproblems from smallest to largest. This way, we already have the solutions to the subproblems when we need them. For this approach, we change the dictionary for an array/vector, and we change recursive calls for a for loop.\n\nMost problems can be solved with both recursive and iterative DP. Here are some considerations for how to choose:\n\n• Recursive DP matches the recurrence equation more directly, so it can be easier to implement.\n\n• Both have the same runtime complexity, but the recursive version will generally have larger constant factors due to all the recursive function calling and due to using a hash table instead of an array.\n\n• Iterative DP often allows for an optimization to reduce the space complexity (discussed later).\n\n## Recursive DP in 5 Steps\n\n• Choose what your subproblems are.\n\n• Find the recurrence equation.\n\n• Translate the recurrence equation into recursive code.\n\n• Add memoization.\n\n• (Optional) Reconstruct the solution.\n\nWe already saw steps 1–4 with the Fibonacci example. Now, we will walk through all the steps in more detail using a more complicated example, thelongest common subsequence problem:\n\nGiven two stringss1ands2, find the length of the longest string which is a subsequence of boths1ands2. A stringtis asubsequenceof a stringsif every char intappearsin orderins, but arenot necessarily contiguous. For example,abcis a subsequence ofaxbyz, butbais not (do not confuse subsequence with substring or subset).\n\n• https://leetcode.com/problems/longest-common-subsequence/\n\nStep 1: choose our subproblems. This varies from problem to problem, but when the input to the problem is a string, a natural way to obtain smaller problems is to look at shorter strings. Here we can use as a subproblem aprefixofs1and a prefix ofs2.\n\nSome notation: letnbe the length ofs1andmthe length ofs2. LetLCS(i,j)be the solution for the LCS problem for the prefix ofs1of lengthn(s1[0..i-1]) and the prefix ofs2of lengthm(s2[0..j-1]). Then, our goal is to findLCS(n, m).\n\nStep 2: find the recurrence equation. Now we need to come up with an expression forLCS(i,j)as a function ofLCSwith smaller indices (as well as a base case). This is the hardest step of DP, and often it is here that we realize that we chose bad subproblems in Step 1. If that happens, hopefully we will discover some hint for what our subproblems should be.\n\nIn order to derive the recurrence equation for LCS, we need the following observation: if the two strings end with the same characterc, then, to maximize the length of the subsequence, it is \"safe\" to addcto the subsequence. In contrast, if both strings end with different characters, thenat leastone of them cannot appear in the subsequence. The complication is that we do not know which one. Thus, instead of guessing, we can simply consider both options.\n\nThis observation yields the recurrence equation (excluding base case):\n\nThis step is not intuitive at first, and requires practice. After having done a few problems, one starts to recognize the typical patterns in DP. For instance, usingmaxamong a set of options of which we do not know which one is the best is easily the most common pattern in DP.\n\nStep 3. Translate the recurrence equation into recursive code. This step is a very simple programming task. Pay attention to the base case.\n\nIf we draw the few first steps of the call graph, we will see that the same subproblem is reached twice. Thus, call graph blows up, leading to an exponential runtime.\n\nStep 4. Add memo table. This step should be automatic: one does not even need to understand the previous code in order to add the memo table.\n\nThe base case corresponds to when one of the strings is empty. The LCS of an empty string with another string is clearly an empty string.\n\nIncidentally, if we flip the check on the memo table, the code becomes a bit more streamlined (fewer lines + merging the two returns). I prefer this form (it does the same):\n\nWe have eliminated the exponential blowup. In general, DP algorithms can be analyzed as follows: # of distinct subproblems times time per subproblem excluding recursive calls. For LCS, we getO(nm)*O(1)=O(nm).\n\nStep 5. Reconstruct the solution.\n\nWe used DP to compute the length of the LCS. What if we want to find the LCS itself?\nA naive way to do it would be to store the entire result of each subproblem in the memoization table instead of just its length. While this works, it is clear that it will require a lot of memory to storeO(nm)strings of lengthO(min(n,m))each. We can do better.\n\nStep 5, \"Reconstruct the solution\", is how to reuse the table that we constructed in Step 4 to find the actual solution instead of just its length. I said that this step is optional because sometimes we just need thevalueof the solution, so there is no reconstruction needed.\n\nThe good news is that we do not need to modify the code that we already wrote in Step 4. The reconstruction is a separate step that comes after. In addition, the reconstruction step is very similar (follows the same set of cases) as the step of building the memo table. In short, we use the memo table as an \"oracle\" to guide us in our choices. Based on the values in the memo table, we know which option is better, so we know how to reconstruct the solution.\n\nIn the code above, first we runLCS(n,m)to fill the memo table. Then, we use it in the reconstruction. The conditionmemo[(i-1,j)] >= memo[(i,j-1)]tells us that we can obtain a longer or equal LCS by discarding a char froms1instead of froms2.\n\nNote that there is a single recursive call in the reconstruction function, so the complexity is justO(n+m).\n\n## Iterative DP in 6 Steps\n\n• Choose what your subproblems are.\n\n• Find the recurrence equation.\n\n• Design the memo table.\n\n• Fill the memo table.\n\n• (Optional) Reconstruct the solution.\n\n• (Optional) Space optimization.\n\nThe new/different steps are highlighted. Step 3. is to design the layout of the table/matrix where we are going to store the subproblem solutions. There is no coding in this step. By \"design\", I mean making the following choices:\n\n• what are the dimensions of the table, and what does each index mean. Generally speaking, the table should have one dimension for each parameter of the recurrence equation. In the case of LCS, it will be a 2-dimensional table.\n\n• where are the base cases.\n\n• where is the cell with the final solution.\n\n• what is the ``dependence relationship'' between cells (which cells do you need in order to compute each cell).\n\n• which cells do not need to be filled (in the case of LCS, we need them all).\n\nHere is how I would lay out the table for LCS (you can find a different layout in the problems below):\n\nNext (Step 4), we fill the memo table with a nested for loop. If the layout is good, this should be easy. Before the main loop, we fill the base case entries. Then, we must make sure to iterate through the table in an order that respects the dependencies between cells. In the case of LCS, we can iterate both by rows or by columns.\n\nWe obtain the following algorithm:\n\nIn the code above, the base case entries are filled implicitly when we initialize the table with zeros everywhere.\n\nIf we need to reconstruct the solution, we can do it in the same way as for the recursive DP. The only difference is that memo is a matrix instead of dictionary.\n\n### Space optimization\n\nClearly, the space complexity of iterative DP is the size of the DP table. Often, we can do better. The idea is to only store the already-computed table entries that we will use to compute future entries. For instance, in the case of Fibonacci, we do not need to create an entire array -- keeping the last two numbers suffice. In the case of a 2-dimensional DP table, if we are filling the DP table by rows and each cell only depends on the previous row, we only need to keep the last row (and similarly if we iterated by columns). Here is the final version for LCS where we improve the space complexity fromO(nm)toO(n+m):\n\nNote: this optimization is incompatible with reconstructing the solution, because that uses the entire table as an \"oracle\".\n\n## DP Patterns\n\nHere are some typical patterns:\n\n### For Step 1. The subproblems.\n\n• If the input is a string or a list, the subproblems are usually prefixes or substrings/sublists, which can be specified as a pair of indices.\n\n• If the input is a number, the subproblems are usually smaller numbers.\n\n• Generally speaking, the number of subproblems will be linear or quadratic on the input size.\n\n### For Step 2. The recurrence equation.\n\n• Often, we usemaxorminto choose between options, or sum to aggregate subsolutions.\n\n• The number of subproblems is most often constant, but sometimes it is linear on the subproblem size. In the latter case, we use an inner loop to aggregate/choose the best solution.\n\n• Sometimes, the recurrence equation is not exactly for the original problem, but for a related but more constrained problem. See an example below, \"Longest Increasing Subsequence\".\n\n## Practice Problems\n\nHere are some practice problems showcasing the patterns mentioned above. Follow the Leetcode links for the statements and example inputs. I jump directly to the solutions. I'd recommend trying to solve the problems before checking them.\n\n• https://leetcode.com/problems/palindromic-substrings/\n\nHere, the goal is to count the number of substrings of a stringswhich are palindromic. There is a trivialO(n³)time solution without DP:\n\nWe can improve this toO(n²)with DP. The subproblems are all the substrings ofs. LetPal(i, j)be true iffs[i..j]is a palindrome. We have the following recurrence equation (excluding base cases):\n\nBased on this recurrence equation, we can design the following DP table:\n\nThis type of \"diagonal\" DP tables are very common when the subproblems are substrings/sublists. In this case, the base cases are substrings of length 1 or 2. The goal isPal(0,n-1).\n\nGiven the dependency, the table can be filled by rows (starting from the last row), by columns (starting each column from the bottom), or by diagonals (i.e., from shortest to longest substrings). In the code below, I illustrate how to fill the table by diagonals.\n\n• https://leetcode.com/problems/minimum-path-sum/\n\nHere, a subproblem can be a grid with reduced width and height. LetT[i][j]be the cheapest cost to reach cell(i,j). The goal is to findT[n-1][m-1], wherenandmare the dimensions of the grid. The base case is when eitheriorjare zero, in which case we do not have any choices for how to get there. In the general case, we have the recurrence equationT[i][j] = grid[i][j] + min(T[i-1][j], T[i][j-1]): to get to(i,j), we first need to get to either(i-1,j)or to(i,j-1). We useminto choose the best of the two. We convert this into an iterative solution:\n\n• https://leetcode.com/problems/unique-paths-ii/\n\nThis is similar to the previous problem, but we need to accumulate the solutions to the subproblems, instead of choosing between them. Problems aboutcountingsolutions can often be solved with DP.\n\n• https://leetcode.com/problems/longest-increasing-subsequence/\n\nThis problem will illustrate a new trick: if you cannot find a recurrence equation for the original problem, try to find one for a more restricted version of the problem which nevertheless you enough information to compute the original problem.\n\nHere, the input is a listLof numbers, and we need to find the length of the longest increasing subsequence (a subsequence does not need to be contiguous). Again, the subproblems correspond to prefixes of the list.\nLetLIS(i)be the solution for the prefix of lengthi(L[0..i]). The goal is to findLIS(n-1), wherenis the length ofL.\nHowever, it is not easy to give a recurrence equation forLIS(i)as a function of smaller prefixes. In particular,the following is wrong(I will let the reader think why):\n\nThus, we actually give a recurrence equation for a slightly modified type of subproblems: letLIS2(i)be the length of the LISending at index i. This constraint makes it easier to give a recurrence equation:\n\nIn short, since we know that the LIS ends atL[i], we consider all candidate predecessors, which are the numbers smaller than it, and get the best one by usingmax. Crucially, this recurrence works forLIS2(i)but not forLIS(i).\nHere is a full solution:\n\nAt the end, we do not simply returnT[n-1]becauseTis the table forLCS2, notLCS. We returnmax(T)because the LCS must endsomewhere, soLCS(n-1) = LCS2(j)for somej < n.\n\nNote that the runtime isO(n²)even though the table has linear size. This is because we take linear time per subproblem.\n\n• https://leetcode.com/problems/number-of-longest-increasing-subsequence/\n\nA harder version of the previous problem. A similar approach works. First solve the LIS problem as before, and then do a second pass to count the solutions.\n\n• https://leetcode.com/problems/shortest-common-supersequence/\n\nThis problem is similar to LCS, and it requires reconstruction.\n\nI should mention that noteveryproblem that can be solved with DP fits into the mold discussed above. Despite that, it should be a useful starting framework. Here are many more practice problems:\n\n• https://leetcode.com/tag/dynamic-programming/\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Lazy vs Eager Algorithms\n\nExploring the tradeoffs between lazy and eager implementations of common algorithms.\n\n## The Wall Game Project\n\nAn introduction to the Wall Game, my new project.\n\n## Actually Implementing Dijkstra's Algorithm\n\nA comprehensive guide to different implementations of Dijkstra's algorithm, with code.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/breaking-down-dynamic-programming?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Iterative Tree Traversals: A Practical Guide",
      "content": "# Iterative Tree Traversals: A Practical Guide\n\n## Introduction\n\nI don't know how often tree traversals come up in actual software projects, but they are popular in coding interviews and competitive programming.\nIn this article, I share an approach for implementing tree traversal algorithms iteratively that I found to be simple to remember and implement, while being flexible enough to do anything that a recursive algorithm can (I also didn't like most suggestions I saw online). The main technique is given in section\"Iterative Postorder and Inorder Traversal\", but first I give some context. I also link to practice problems onleetcode.comfor the reader to play with. I provide some solutions, but I suggest trying the problems out first. The code snippets are in C++, but leetcode accepts most languages.\n\n## What are Tree Traversals\n\nMathematically, trees are just connected acyclic graphs. However, in the context of tree traversals, we are usually working withrooted treesrepresented with a recursive structure such as the following (which is the default definition in Leetcode for binary trees). A leaf is a node with two null pointers as children:\n\nA tree traversal is an algorithm that visits every node in a tree in a specific order (and does some computation with them, depending on the problem). For binary trees specifically, there are three important orders:\n\n• Preorder:root before children. As we will see, this is the simplest to implement.\n\n• Inorder:left child, then root, then right child. This traversal is most often used onbinary search trees(BST). A BST is a rooted binary tree with the additional property that every node in the left subtree has a smaller value than the root, and every node in the right subtree has a larger value than the root. This traversal is called \"inorder\" because, when used on a BST, it will visit the nodes from smallest to largest.\n\n• Postorder:children before root. It comes up in problems where we have to aggregate information about the entire subtree rooted at each node. Classic examples are computing the size, the height, or the sum of values of the tree.\n\nBecause rooted trees are recursive data structures, algorithms on trees are most naturally expressed recursively. Here are the three traversals. I use the functionprocess(node)as a placeholder for whatever computation the problem calls for.\n\nSide-note: in C++, pointers are implicitly converted to booleans: a pointer evaluates to true if and only if it is not null. So, in the code above, \"if (!root)\" is equivalent to \"if (root == NULL)\".\n\n### Traversal problems on leetcode\n\n• https://leetcode.com/problems/binary-tree-preorder-traversal/\n\n• https://leetcode.com/problems/binary-tree-inorder-traversal/\n\n• https://leetcode.com/problems/binary-tree-postorder-traversal/\n\n## Why / When to Use an Iterative Traversal\n\nIf the recursive implementation is so simple, why bother with an iterative one? Of course, to avoid stack overflow. Most runtime engines/compilers set a limit on how many nested calls a program can make. For example, according tothis article:\n\n> Default stack size varies between 320k and 1024k depending on the version of Java and the system used. For a 64 bits Java 8 program with minimal stack usage, the maximum number of nested method calls is about 7000.\n\nDefault stack size varies between 320k and 1024k depending on the version of Java and the system used. For a 64 bits Java 8 program with minimal stack usage, the maximum number of nested method calls is about 7000.\n\nIf the height of the tree is larger than this limit, the program will crash with astack overflow error. A recursive implementation is safe to use if:\n\n• Somehow we know that the input trees will be small enough.\n\n• The tree isbalanced, which means that, for each node, the left and right subtrees have roughly the same height. In a balanced tree, the height is guaranteed to belogarithmicon the number of nodes (indeed, that is why balanced BSTs guaranteeO(log n)search time), so any tree that fits in RAM (or even disk) will require a tiny number of recursive calls.\n\nHowever, if we are not in either of the cases above, an iterative solution is safer.\n\nRecursive and iterative traversals have the same runtime complexity, so this is not a concern when choosing either (all the problems shown in this article can be solved in linear time using either).\n\nThe main approach for converting recursive implementations to iterative ones is to \"simulate\" the call stack with an actual stack where we push and pop the nodes explicitly. This works great \"out-of-the-box\" with preorder traversal.\n\nIncidentally, when implementing tree traversals we need to make an implementation choice about how to handle NULL pointers. We can be eager and filter them out before adding them to the stack, or we can be lazy and detect them once we extract them from the stack. Both are fine—what matters is to be deliberate and consistent about which approach we are using. I prefer the latter as it yields slightly shorter code, so I will use it in all the following examples. For comparison, here is the iterative preorder traversal with both approaches:\n\nNote thatthe right child is pushed to the stack before the left one. This is because we want the left child to be above in the stack so that it is processed first.\n\n### Preorder traversal practice problems\n\n• https://leetcode.com/problems/invert-binary-tree/\n\n• https://leetcode.com/problems/maximum-depth-of-binary-tree/\n\nThis problem asks to find the depth of a binary tree (follow the link for the description and examples). It requires passing information from each node to its children. We can do this by changing the stack tostack<pair<TreeNode*, int>>, so that we can pass anintto each child, as in the solution below:\n\nIn the code above, the{}notation is used to create pairs (e.g.,{root, 0}). If one is not familiar with pairs in C++, or is using a language without the equivalent, a simple alternative is to use two separate stacks, one for the nodes and one for the info.\n\nThe next two problems are similar:\n\n• https://leetcode.com/problems/minimum-depth-of-binary-tree/\n\n• https://leetcode.com/problems/path-sum/\n\n• https://leetcode.com/problems/symmetric-tree/\n\nA solution for the last one, this time using a stack with a pair of nodes:\n\n## Iterative Postorder and Inorder Traversal\n\nWhile iterative preorder traversal is straightforward, with postorder and inorder we run into a complication: we cannot simply swap the order of the lines as with the recursive implementation. In other words, the following doesnotyield a postorder traversal:\n\nThe node is still processed before its children, which is not what we want.\n\nThe workaround, once again emulating the recursive implementation, is to visit each node twice.We consider postorder traversal first. In the first visit, we only push the children onto the stack. In the second visit, we do the actual processing.\nThe simplest way to do this is to enhance the stack with a\"visit number flag\". Implementation-wise, we change the stack tostack<pair<TreeNode*, int>>so that we can pass the flag along with each node. The iterative postorder looks like this:\n\nNote the order in which the nodes are added to the stack whenvisit == 0. The parent ends up under its children, with the left child on top. Since it is the first time that the children are added to the stack, their visit-number flag is 0. For the parent, it is 1.\nFor simplicity, I also follow the convention to always immediately call pop after extracting the top element from the stack.\n\nThe same approach also works for inorder traversal (that's the point). Here is a version where we visit each node three times: one to push the left child, one to process the node, and one to push the right child.\n\nIn fact, the second and third visits can be merged together: processing the node does not modify the stack, so the two visits are followed one after the other anyway. Here is my preferred version:\n\nFor completeness, here is the version found in most of my top Google hits (seethisfor a nice explanation):\n\nWhile it is shorter, it cannot be easily converted to postorder traversal, so it is not as flexible. Also, I find it easier to follow the execution flow with the visit-number flag.\n\n### Inorder traversal practice problems\n\n• https://leetcode.com/problems/kth-smallest-element-in-a-bst/\n\nA solution (follow the link for the statement and examples):\n\n• https://leetcode.com/problems/validate-binary-search-tree/\n\nA solution:\n\n### Postorder traversal practice problems\n\n• https://leetcode.com/problems/balanced-binary-tree/\n\nThis problem asks to check if a binary tree is balanced. It requires passing information back from the children to the parent node in a postorder traversal. Passing information from the children to the parent is easy with recursion. It can be done both with return values or with parameters passed by reference. For this problem we need to pass two things: aboolindicating if the subtree is balanced, and anintindicating its height. I use a reference parameter for the latter (returning apair<bool,int>would be cleaner).\n\nPassing information from the children to the parent in an iterative implementation is more intricate. There are three general approaches:\n\n• Use a hash table mapping each node to the information.\n\nThis is the easiest way, but also the most expensive.\nWhile the asymptotic runtime is still linear, hash tables generally have significant constant factors.\n\n• Add a field to the definition of the node structure for the information needed.\n\nThen, we can read it from the parent node by traversing the children's pointers.\nIn Leetcode we cannot modify theTreeNodedata structure so, to illustrate this approach, I build a new tree first with a new struct:\n\n• Pass the information through an additional stack.\n\nThis is the most efficient, but one must be careful to keep both stacks in synch. When processing a node, that node first pops the information from its children, and then pushes its own info for its parent. Here is a solution (with eager NULL-pointer detection):\n\n• https://leetcode.com/problems/diameter-of-binary-tree/\n\nThis problem also requires passing information from the children to the parent in a postorder traversal. Here is a solution using the third approach again, but this time with lazy NULL-pointer detection. Note that we push a 0 to thedepthsstack when we extract a NULL pointer from the main stack, and during processing we always do two pops regardless of the number of non-NULL children:\n\n• https://leetcode.com/problems/binary-tree-tilt/\n\n• https://leetcode.com/problems/most-frequent-subtree-sum/\n\n• https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/\n\n## Traversals in n-ary Trees\n\nSo far, we have looked at binary trees. In an n-ary tree, each node has an arbitrary number of children.\n\nFor n-ary trees, preorder traversal is also straightforward, and inorder traversal is not defined.\n\nFor postorder traversal, we can use a visit-number flag again. Two visits suffice for each node: one to push all the children into the stack, and another to process the node itself. I do not include the code here because it is very similar to the binary tree case.\n\nConsider a more complicated setting where we need to compute something at the node after visiting each child. Let's call this \"interleaved traversal\". I useprocess(node, i)as placeholder for the computation done before visiting the i-th child. Here is the recursive implementation and the corresponding iterative one using visit-number flags.\n\n### N-ary tree practice problems\n\n• https://leetcode.com/problems/n-ary-tree-preorder-traversal/\n\n• https://leetcode.com/problems/n-ary-tree-postorder-traversal/\n\n## An Alternative Way of Passing the Visit Flag\n\nThe common framework to all our solutions has been to pass a visit-number flag along with the nodes on the stack. User \"heiswyd\" on leetcode postedherean alternative way to pass the flag implicitly: initially, it pushes each node on the stack twice. Then, it can distinguish between the first visit and the second visit by checking whether the node that has just been extracted from the stack matches the node on top of the stack. This happens only when we extract the first of the two occurrences. Post-order traversal looks like this:\n\nIt is cool, but I prefer passing the flag explicitly for clarity.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Lifecycle of a CS research paper: my knight's tour paper\n\nThe backstory and thought process behind a fun paper from my PhD.\n\n## Single-Edge Cut Problem\n\nA linear-time algorithm for a graph problem that comes up in the Wall Game.\n\n## A topology/geometry puzzle\n\nExploring the geometry of merging faces.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/iterativetreetraversal?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "In Defense of Coding Interviews",
      "content": "# In Defense of Coding Interviews\n\nThere is already a lot of discourse about everything wrong with coding interviews. Indeed, one of the first chapters inBeyond Cracking the Coding InterviewisWhat's Broken About Coding Interviews?(it's one of the sneak peek free chapters inbctci.co/free-chapters).\n\nHere, I want tocollect all the arguments for the contrary view: that there are no clear better alternatives to coding interviews at Big Tech companies.\n\nDisclaimers:\n\n• I am one of the authors ofBeyond Cracking the Coding Interview, a prep book for coding interviews. Thus, I am vested in coding interviews not going away.\n\n• I love leetcoding and specialized in DS&A for my PhD, so I haven't personally experienced thedreadthat most people feel grinding it.\n\n• I've been an interviewer at Google in the past, but I'm not currently working for Big Tech, and I don't have any inside knowledge. This is just my assessment.\n\n• This post is only about Big Tech. I don't think coding interviews are a good idea for startups.\n\n• This post contains \"Strong Opinions, Weakly Held\". I believe everything here, but I'm very receptive to pushback and opposing data.\n\n## The rationale for coding interviews\n\nI think Big Tech companies understand that being cracked at DS&A is not really necessary to be a good SWE. I don't think coding interviews are about that at all.\n\nImagine you are a Big Tech company, like Google. You receive a massive stream of applications, and you have to trim that down to a still large number of hires. Your hiring system needs to bescalable:\n\n• you need to quickly train many interviewers\n\n• you need a way to evaluate candidates that minimizes interviewer bias (notyourbias, or a specific person's bias, but all the biases of a large, heterogeneous group)\n\nSo, the first thing you do to scale--in true engineering fashion--is decoupling hiring and team matching. But that means you cannot hire for specific tech or domain experience: You don't know in what team candidates will end up, and your teams use a bunch of different languages and tech stacks (and a lot of it is internal anyway, so you definitely can't hire for that).\n\nSo, you need acompetence assessmentthat is independent of any particulars about the job, much like the role the SAT plays for college admissions. How do you do that?\n\nIf you are a Big Tech company, what you actually want is candidates who can take any complex software system (that's not part of the candidate's previous expertise) and answer hard questions about it, like what's the best way to add a feature, how to optimize it, or how it should be refactored. In other words, the competence you want to assess is general problem-solving skills, and that's what coding interviews are designed for: you are given a tough problem that you haveideallynever seen before (more on this later), and asked to showcase your thought process on how you approach it. When working as intended, I believe it gives moresignalabout your problem-solving skills and is easier to evaluate impartially than other popular interview formats, like talking about previous experience or take-home assignments. And there's an impartial way to evaluate them, by looking at the optimality of the solution.\n\nYes, there's a lot more to being a SWE than problem-solving skills--and that's why Google also does system design and behavioral interviews, but you still want to hire for this trait.\n\n## The two crucial flaws: memorization and cheating\n\nHopefully, the rationale above covered one of the most common criticisms of coding interviews: that they do not reflect the day-to-day work of an engineer. Instead, I want to focus on whatIthink are the two biggest issues with coding interviews:\n\n• Memorizing an absurd amount of leetcode problems gives you an edge.This is the classic reason why peoplehatecoding interviews with a passion. It has led to an \"arms race\" where candidates have to memorize more and more problems to improve their odds, and interviewers keep asking about more niche topics. At the extreme, coding interviews end up feeling like a lottery, and candidates find prep a soul-sucking waste of time.\n\nMemorizing an absurd amount of leetcode problems gives you an edge.This is the classic reason why peoplehatecoding interviews with a passion. It has led to an \"arms race\" where candidates have to memorize more and more problems to improve their odds, and interviewers keep asking about more niche topics. At the extreme, coding interviews end up feeling like a lottery, and candidates find prep a soul-sucking waste of time.\n\n• Cheating has become easy with AI.This is a newer issue that's becoming more prevalent due to the fact that LLMs are pretty good at leetcoding. In real time, a cheater can feed the problem statement to an LLM (without obvious tales like \"select all\"), get a solution, and even a script for what to say.\n\nCheating has become easy with AI.This is a newer issue that's becoming more prevalent due to the fact that LLMs are pretty good at leetcoding. In real time, a cheater can feed the problem statement to an LLM (without obvious tales like \"select all\"), get a solution, and even a script for what to say.\n\nFrom the company's side, Issue (1) is not much of an issue. It definitely undermines the \"problem-solving\" part of the interview if a candidate is just recalling the question, but, statistically, if they do enough rounds, it's unlikely to happen every round. Some people (not me) also argue that the memorization is even good for the companies because it rewards hard work and dedication.\n\nFor what it's worth, one thing we hoped to change about the interview prep\ndiscourse with BCtCI is that candidates should focus on improving their\nproblem-solving skills rather than memorizing. See, for instance, how weteach binary searchor how weapproach hard\nproblems. But yes,\ngrinding is still necessary.\n\nIssue (1) also means that they'll lose a big chunk of candidates who are great SWEs but won't put up with grinding leetcode or that simply don't perform well under pressure (and, from personal experience, many great developers fall in this group). This sucks from the candidate's perspective, but if you are Google, you receive an overwhelming amount of applications from qualified candidates, so you are more OK with rejecting good candidates than accepting bad ones.\n\nIssue (2), on the other hand, has the potential to completely ruin coding interviews from the company's side. I'm seeing a quick rise of stories from frustrated interviewers who interviewed or even hired cheaters who could then not do the job (ExhibitA).\n\nI expect to see some kind of systematic response to this from Big Tech, but it's not clear what as of April 2025.This articleincludes some internal comments from Google execs:\n\n> [Brian] Ong [Google’s vice president of recruiting] said candidates and Google employees have said they prefer virtual job interviews because scheduling a video call is easier than finding a time to meet in available conference rooms. The virtual interview process is about two weeks faster, he added.He said interviewers are instructed to probe candidates on their answers as a way to decipher whether they actually know what they’re talking about.“We definitely have more work to do to integrate how AI is now more prevalent in the interview process,” said Ong. He said his recruiting organization is working with Google’s software engineer steering committee to figure out how the company can refine its interviewing process.“Given we all work hybrid, I think it’s worth thinking about some fraction of the interviews being in person,” Pichai responded. “I think it’ll help both the candidates understand Google’s culture and I think it’s good for both sides.”\n\n[Brian] Ong [Google’s vice president of recruiting] said candidates and Google employees have said they prefer virtual job interviews because scheduling a video call is easier than finding a time to meet in available conference rooms. The virtual interview process is about two weeks faster, he added.\n\nHe said interviewers are instructed to probe candidates on their answers as a way to decipher whether they actually know what they’re talking about.\n\n“We definitely have more work to do to integrate how AI is now more prevalent in the interview process,” said Ong. He said his recruiting organization is working with Google’s software engineer steering committee to figure out how the company can refine its interviewing process.\n\n“Given we all work hybrid, I think it’s worth thinking about some fraction of the interviews being in person,” Pichai responded. “I think it’ll help both the candidates understand Google’s culture and I think it’s good for both sides.”\n\nI thought going back to in-person interviews would be ano-brainerfor a company like Google, but my reading of these comments is that they don't seem too bothered for now. ~shrug~\n\nDisclaimer: I haven't worked for a Big Tech company since before AI cheating\nwent viral, so I don't have internal insight into what people in charge of\nhiring are actually thinking.\n\nTwo related arguments that I don't subscribe to are (1) that leetcode-style interviews are no longer relevant because AI can solve them, and (2) that LLMs should be allowed during coding interviews because they are allowed on the job. The fact that AI can solve coding questions doesn't change that it still gives you the important signal that you want from humans: algorithmic thinking and general problem-solving skills. We just need humans to not cheat.\n\nI'll share my thoughts on how to improve coding interviews to address these issues. First, let's see why I think the alternatives are not better.\n\n## The problems with the alternatives\n\n### Take-home assignments\n\nTake-home assignments are even more subject to cheating, so that can't be the answer to cheating. Never mind LLMs, you don't even know who did the assignment. But take-home assignments have other flaws:\n\n• They create an asymmetry between company and candidate, where the company asks for a ton of work from the candidate without putting any effort in. \"Oh, we have way too many candidates we need to filter down to a shortlist? Send all of them a complex task to do over the weekend.\" I prefer a model where both company and candidate have to put in time. I'm more OK with take-home assignments as the final stage of the process.\n\n• They favor people who are unemployed and/or have a lot of free time to polish the assignment.\n\n### Previous experience\n\nI find this too subjective to give signal about problem-solving skills, and it's more about being a good \"salesperson\". I also think it's more subject to bias:people with a similar background as yours are probably more likely to have similar interests, and thus you may find their side-projects more interesting.\n\n## Trial periods\n\nThis makes sense to me in smaller companies, where you find a candidate with the perfect profile for the task at hand. It doesn't scale to Big Tech companies.\n\n### Other alternatives\n\nIf there are other alternatives that fulfill the same purpose as coding interviews but don't suffer from the same issues, I'd love to hear about them.\n\nOne idea I liked is going through a code review during the interview, but it's not clear that (1) it offers as much signal about problem-solving skills, and (2) it is easy to evaluate impartially.\n\n## How to improve coding interviews\n\nRight now, FAANG interviewers focus too much on \"Did they solve the question or not?\" That's because they don't get much training on how to interview well (if at all), and it's the most straightforward way to pass on a hire/no hire recommendation to the hiring committee. This leads to many interviewers just pasting the prompt in and mostly sitting in silence. This is the ideal scenario for cheaters.\n\n### The obvious things\n\nThere are obvious ways to improve this situation:\n\n• In-person interviews. These have other benefits, like allowing the candidate to get a better sense of the company culture.\n\n• Not using publicly available questions, and actively scanning for leaks.\n\n• Cheating detection software (privacy is a concern here -- would it be too crazy for a company to ship a laptop to the candidate just for the interview?).\n\n• Stop asking questions that require knowing some niche trick that a normal person wouldn't be able to figure out on the spot. Those reinforce a focus on memorization.\n\n### Low effort ways of countering cheating\n\nI also think that measures designed to throw LLMs off could be effective (at least in the short term) and require minimal effort, such as:\n\n• Stating the question, or part of it, instead of writing the whole thing down\n\n• Including a 'decoy' question and telling the candidate, \"Ignore that line, it is part of our anti-cheating measures.\"\n\nSeeLinkedIn discussion.\n\n### A fundamental tradeoff\n\nPerhaps the most effective way to counter both memorization and cheating is to make coding interviews more open ended and conversational. To use a chess analogy, a cheater may make a great move, but if you ask them to explain why they did it, they may not be able to.\n\nThe interviewer can use a coding question as a launching point, but then drill down on technical topics as they come up. So, e.g., if a candidate chooses to use a heap, the interviewer could go into:\n\n• What made you think of using a heap? What properties are important for this problem?\n\n• What are the tradeoffs of using a heap vs binary search trees?\n\n• How would you go about implementing a heap that supports arbitrary priorities?\n\n• Why isheapify faster than inserting one by one?\n\nIf interviewers did that, it wouldn't even be necessary to ask tricky questions. They could evenaskFibonacci.\n\nThe problem is that, the more open ended the interview is, the more difficult\nit is to evaluate candidates systematically. To start, you'd need better\ninterviewers and better interviewer training. However, it seems to me that\nthere isa fundamental tradeoff between how objective the evaluation is and\nhowgameablethe interview is by memorizing or cheating.\n\nI don't have a good solution to this--I would love to hear yours.\n\n## More good things about coding interviews\n\n### Only one thing to study\n\nAn underrated upside of leetcode interviews is that you only need to study one thing for all the big companies. I feel like if every company asked different things, interview prep time would decrease for any specific company but increase overall.\n\nIn fact, a likely outcome of the push for fewer leetcode-style interviews is an even worse compromise: coding interviews won't completely go away, so you'll still need to grind leetcode, but you'll also have to prep a bunch of specialized stuff for each company on top of that.\n\nSeeLinkedIn discussion.\n\n### They are not based on pedigree\n\nCoding interviews act as a form of standardized testing, similar to the role of SAT for college admissions in the US. And, much like the SAT allows high-school students from all backgrounds to attend top colleges, coding interviews allow candidates from all backgrounds to get at the top companies. The leetcode grind is the same for everyone.\n\nIf we kill coding interviews without a good alternative, it seems inevitable that Big Tech companies will give more weight to resume and referrals. We all agree that's a bad thing.\n\n## Final thoughts\n\nThe best question we got in ourReddit AMAfor BCtCI was whetherwe'd use coding interviews ourselves if we were in charge of hiring. You can see Gayle's, Mike's (mikemroczka.com), and my answers. We all saidnoin its current form, but yes with caveats/improvements.\n\nMy favorite answer was Mike's. He's less of a proponent of leetcode-style interviews than I am, but I think he strikes a thoughtful balance between DS&A and practical stuff:\n\n> Best question so far. Yes, I would ask DS&A questions still, but not exclusively and not difficult ones. Many startups shouldn't ask them though, because most people are bad at discerning what a reasonable question is.I would do 4-5 rounds of interviews because less than that is hard to be significant, but more than that and you're wasting too much of a candidate's time (Netflix has a whopping 8 rounds!!). For a senior engineer role, I'd do something like this.Round 1: An online DS&A assessment to filter out people that can't do the simple things (easy & very simple medium questions only, not hard)Round 2: Live interview of DS&A (simple medium, not hard. essentially just making sure you didn't cheat on the previous round by asking you to explain your answers and code something new from scratch)Round 3: System design (no need for perfect answers, but I'd ask an uncommon question to ensure it was something they hadn't memorized)Round 4: Behavioral, with a focus on cross-team impact. This would just be a simple pass/fail and just a vibe check. It might also be skipped if the prior two rounds had good signal for emotional intelligenceRound 5: Remote logging into a server and working on an actual bug that was fixed in our codebase before. There would be no time limit, but time on the server would be logged to weed people out who needed days to complete a simple task.This ends up testing a little bit of theory, practical knowledge, emotional intelligence, and the generalized SWE skillset.Full disclosure. This is my answer. Not the answer of every author. Again, I'd stress that the average startup wouldn't benefit from DS&A and shouldn't be asking them\n\nBest question so far. Yes, I would ask DS&A questions still, but not exclusively and not difficult ones. Many startups shouldn't ask them though, because most people are bad at discerning what a reasonable question is.\n\nI would do 4-5 rounds of interviews because less than that is hard to be significant, but more than that and you're wasting too much of a candidate's time (Netflix has a whopping 8 rounds!!). For a senior engineer role, I'd do something like this.\n\nRound 1: An online DS&A assessment to filter out people that can't do the simple things (easy & very simple medium questions only, not hard)\n\nRound 2: Live interview of DS&A (simple medium, not hard. essentially just making sure you didn't cheat on the previous round by asking you to explain your answers and code something new from scratch)\n\nRound 3: System design (no need for perfect answers, but I'd ask an uncommon question to ensure it was something they hadn't memorized)\n\nRound 4: Behavioral, with a focus on cross-team impact. This would just be a simple pass/fail and just a vibe check. It might also be skipped if the prior two rounds had good signal for emotional intelligence\n\nRound 5: Remote logging into a server and working on an actual bug that was fixed in our codebase before. There would be no time limit, but time on the server would be logged to weed people out who needed days to complete a simple task.\n\nThis ends up testing a little bit of theory, practical knowledge, emotional intelligence, and the generalized SWE skillset.\n\nFull disclosure. This is my answer. Not the answer of every author. Again, I'd stress that the average startup wouldn't benefit from DS&A and shouldn't be asking them\n\nWant to leave a comment? You can post under thelinkedin postor theX post.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## A topology/geometry puzzle\n\nExploring the geometry of merging faces.\n\n## Double-Edge Cut Problem\n\nAn optimal solution for a graph problem that comes up in the Wall Game.\n\n## What Vibe Coding Actually Looks Like (prompts included)\n\nThe exact prompts used to create an interactive 3D torus visualization app with vibe coding.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/in-defense-of-coding-interviews?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Get Binary Search Right Every Time, Explained Without Code",
      "content": "# Get Binary Search Right Every Time, Explained Without Code\n\nOne of the things that makes binary search tricky to implement is that you usually need to tweak the pointer manipulation logic in subtle ways based on the specifics of the problem.\n\nE.g., an implementation that works for finding a target in a sorted array when the target is present, may not work if the target is missing. Or, it may not be clear how to tweak the code to find the last occurrence of the target instead of the first one. And of course, there are plenty of less conventional applications of binary search where the input is not an array, likecatching bike thieves.\n\nInBeyond Cracking the Coding Interview, we wanted to simplify this, so we went looking for a general binary search template. Going into it, I thought we might need at least two templates, but we ended up with just one, which we called the \"transition point recipe\", and which works for every problem we tried, including the 17 problems in the binary search chapter of the book. If you find one where it doesn't work, let me know!\n\n## The transition point problem\n\nHere is the thesis of the transition point recipe:\n\nEvery binary search problem can be reduced to the 'transition point problem'.\n\nIn the 'transition point problem', you are given an array with just two values, say1and2, where all the1s come before the2s, and you need to point where it changes.\n\nE.g., in the array[1, 1, 1, 1, 1, 2, 2, 2], the last1is at index4and the first2is at index5.\n\nKnowing how to solve this specific problem is key to our recipe. The specific binary search implementation is not important, but there is an invariant we can follow that makes it quite easy: ensure that the left pointer is always at a1and the right pointer is always at a2.\n\nWe give code in the book, but remembering exact code in an interview is error prone. Instead, the four bullet points below are all Ipersonallyremember, and I feel confident that I can derive the rest easily.\n\n• Start by handling some edge cases:The array is emptyEvery value is1Every value is2\n\n• The array is empty\n\n• Every value is1\n\n• Every value is2\n\n• Initialize two pointers,leftandright, to the first and last indices, respectively.\n\n• For the main binary search loop, always maintain theinvariantthat the value atleftis1and the value atrightis2. Let this invariant guide your pointer manipulation logic, so that you don't need to memorize any code.\n\n• Stop when theleftandrightpointers are next to each other (i.e.,left + 1 == right).\n\nCombining the invariant with the stopping condition, we get that, at the end,leftwill be at the last1andrightwill be at the first2.\n\nThese bullet points rely on two ideas to make binary search easier: (1) handling edge cases upfront, and (2) letting strong invariants guide the implementation. Notice how the invariant even guides the edge cases at the beginning, as they are the necessary ones to be able to initializeleftandrightin a way that satisfies it.\n\n## The reduction\n\nOk, so now, let's take for granted that we can solve the transition point problem. How does this help us solve other binary search problems?\n\nThe idea is to come up with a (problem-specific)predicate, like< target,>= target, orx % 2 == 0, which splits the search range into two regions, the \"before\" region and the \"after\" region.\n\nThis predicate is a function that takes an element of the search range and returns a boolean, and -- as you probably saw coming -- it is key that all the elements withtruevalues come before the elements withfalsevalues (or the other way around).\n\nThen, we can use the solution to the transition point problem to find the transition point between the 'before' and 'after' regions. The only difference is that, instead of checking boolean values directly, we check the result of the predicate.\n\nYou can even wrap the predicate in a function, which we calledis_before(x)in the book, which tells you whether a given element is in the 'before' region. Then, it's really obvious that we are just solving the transition point problem every time.\n\nThe only part that requires some thinking is choosing the right transition point. For example:\n\n• if we want to find thefirstoccurrence oftargetin a sorted array, we can useis_before(x) = x < target, which means that, iftargetis present, the first occurrence is the first element in the 'after' region (so, we can check/return therightpointer at the end).\n\n• if we want to find thelastoccurrence oftargetin a sorted array, we can useis_before(x) = x <= target, which means that, iftargetis present, the last occurrence is the last element in the 'before' region (so, we can check/return theleftpointer at the end).\n\nAnd so on for other problems.\n\nYou can try the transition-point recipe on all the problems from the binary search chapter of the book online atstart.interviewing.io/beyond-ctci/part-vii-catalog/binary-search, even if you don't have the book. There, you can also find all our solutions using the recipe, in Python, JS, Java, and C++.\n\nWant to leave a comment? You can post under thelinkedin postor theX post.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Double-Edge Cut Problem\n\nAn optimal solution for a graph problem that comes up in the Wall Game.\n\n## My family during the Spanish Civil War\n\nMy grandparents' story during the Spanish Civil War.\n\n## Choosing a tech stack in 2025\n\nHow would you build a Lichess clone in 2025? My process for picking a tech stack.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/binary-search?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Lazy vs Eager Algorithms",
      "content": "# Lazy vs Eager Algorithms\n\nWarning: I have not tested any code snippet below. Please let me know if you find a bug.\n\n## Introduction\n\nMost algorithms have multiple valid implementations. For instance, in a binay tree problem, you have multiple ways of handling NULL nodes. I'm currently writingBeyond Cracking the Coding Interview(beyondctci.com), which means that my co-authors and I need to take a stance on what version of each algorithm to use. Ideally, we want to show the simplest version of each algorithm:\n\n• Easy to recall for interview,\n\n• Easy to explain to interviewers,\n\n• Easy to debug by hand,\n\n• Short, so that it is quick to code.\n\nIn the book, we don't claim that the version we show is \"the best\" - we say to use the one that works best for you. But showing one in the book is an implicit endorsement.\n\nOne particular decision that comes up again and again with recursive algorithms is choosing between thelazyversion and theeagerversion of an algorithm.\n\n• Aneagerrecursive function expects 'valid' inputs and ensures to only call the recursive function with 'valid' inputs. We can also call it aclean(call)stackalgorithm.\n\n• Alazyrecursive algorithm allows 'invalid' inputs, so it starts by validating the input. Then, it calls the recursive function without validating the inputs passed to it. We can also call it adirty stackalgorithm.\n\nWhat 'valid' means depends on the algorithm--we'll see plenty of examples. We'll also translate the concept of eager vs lazy to iterative algorithms.\n\n## Lazy vs Eager Tree Traversals\n\nAneagertree traversal eagerly validates that the children are not NULL before passing them to the recursive function. Alazytree traversal doesn't, so it needs to check if the current node is NULL before accessing it.\n\nFor instance, here is eager vs lazy preorder traversal:\n\nBoth have the same runtime and space analysis. Even the constant factors probably don't change much, so it comes down to style preference. Which one do you prefer?\n\n## Lazy vs Eager graph DFS\n\nAneagergraph DFS eagerly checks that the neighbors are not already visited before passing them to the recursive function. Alazygraph DFS doesn't, so it needs to check if the current node is already visited.\n\nFor a graph DFS, we can also do a mix between lazy and eager: we can eagerly check if nodes are already visited, and lazily mark them as visited:\n\nAgain, they all have the same analysis. Which one do you prefer?\n\n## Lazy vs Eager grid algorithms\n\nConsider the same DFS algorithm but on a grid of 0's and 1's. The 0's are walkable cells, the 1's are obstacles, and\nwalkable cells next to each other are connected. This time, we need to check that the neighbors are not out of bounds, which we can do lazily or greedily.\n\n## Lazy vs Eager Memoization DP\n\nIn alazymemoization DP (Dynamic Programming) algorithm, we call the recursive function for a subproblem without checking first if we have already computed that subproblem. In aneageralgorithm, we only call the recursive function for subproblems that we still need to compute.\n\nFor memoization DP, I thinklazyis cleaner and more conventional.\n\n## Lazy vs Eager Iterative Tree traversals\n\nConsider a level-order traversal on a binary tree. A level-order traversal is an iterative algorithm that uses a queue data structure.\n\n• Alazyversion puts children in the queue without checking if they are NULL first. We can call it adirty queuealgorithm.\n\n• Aneagerversion checks for NULL nodes and avoids putting them in the queue. We can call it aclean queuealgorithm.\n\n## Eager Graph BFS is better than lazy Graph BFS\n\nThis is the first exception where one is better than the other in terms of big O analysis. ThelazyBFS allows adding already-visited nodes to the queue, while theeagerone does not. We'll first look at the two versions, and then analyze them.\n\nIt may come as a surprise that these two arenotequivalent like all the other examples.\n\nLet's sayVis the number of nodes andEis the number of edges. To keep things simple, consider that the graph is connected, meaning thatEis at leastV-1and at mostO(V²).\n\nBoth versions takeO(E)time. The difference is in the space complexity: the eager version takesO(V)space because we never have the same node twice in the queue. The lazy version takesO(E)space because we allow the same nodes multiple times in the queue.\n\nTo see this, consider a complete graph:\n\n• When we visit start, we add A, B, C, D, E to the queue. Now the queue is:[A, B, C, D, E]\n\n• When we visit A, we add start, B, C, D, E to the queue. Now the queue is:[B, C, D, E, start, B, C, D, E]\n\n• When we visit B, we add start, A, C, D, E to the queue. Now the queue is:[C, D, E, start, B, C, D, E, start, A, C, D, E]\n\n• And so on.\n\nSo, why didn't this happen for other lazy algorithms we have seen?\n\n• For tree traversals, each tree node has a single parent that it can be reached from, so we don't need to worry about the same node appearing twice in the call stack or in the level-order traversal queue.\n\n• For graph DFS,every node in the call stackis marked visited, so if we callvisit()on a node that is already in the call stack, we'll immediately return as we'll see it is marked as visited.\n\n## Eager Dijkstra is better than Lazy Dijkstra, but harder to implement\n\nI wrote extensively about different Dijktsra implementations inthis Dijkstra blog post.\n\nDijkstra is similar to BFS, with the main difference that it uses a priority queue (PQ) instead of a queue to visit the nodes that are closer first (in terms of shortest paths).\n\nIn BFS, when a node is added to the queue, its distance from the starting node is already established and there is never a reason to add it again to the queue. In Dijkstra, when a node is added to the PQ, we might later find a shorter path while it is still in the PQ. When that happens, we can do two things:\n\n• Lazy Dijkstra: just add the node again with the new, improved distance. It will get popped before the previous occurrence because it has higher priority in the PQ. When a node with a \"stale\" distance gets popped off from the queue, we just ignore it.\n\n• Eager Dijkstra(called textbook Dijkstra in the other blog post): instead of adding the node again, find the existing occurrence of it in the PQ, and update it with the new found distance. This guarantees that the same node never appears twice in the PQ.\n\nBoth versions takeO(E*log V)time, but eager is more space efficient, analogously to eager BFS:O(V)for eager Dijkstra vsO(E)for lazy Dijkstra.\n\nHere is lazy Dijkstra:\n\nUnfortunately, eager Dijkstra is not so easy to implement in Python because we are missing thedecrease_key()operation in a heap (and Python does have a self-balancing BST data structure, which can also be used for eager Dijkstra). You can see a BST-based C++ implementation in my other blog post.\n\nThedijkstra_lazy()algorithm above is more or less standard and it has been known as \"lazy Dijkstra\" for a while. However, it is possible to make an even lazier version which has the same runtime and space analysis (but likely bigger constant factors). The idea is that instead of only adding to the PQ the neighbors for whom we find an improved distance, we can simply add all of them, and discard duplicates once we extract them from the PQ:\n\n## So, Lazy or Eager?\n\nWe could keep looking at lazy vs eager algorithms, but I'll stop here. In aggregate, these are the pros and cons that I see:\n\n### Pros of lazy algorithms\n\n• Lazy algorithms require less code.This is because you only need to validate the parameters of the recursive function once at the beginning, instead of validating what you pass to each recursive call. This is specially true in binary tree problems, where you usually have two recursive calls. It doesn't apply as much for graphs.\n\n• Lazy algorithms require less indentation.For instance, in graph problems, we don't need to do checks inside the for loop over the neighbors.\n\n• Lazy algorithms do not require special handling for the first recursive call.You don't need to worry about things like checking if the root is NULL or marking the start node as visited.\n\n• Lazy recursive functions have simpler preconditions.You can just pass anything to them, and they work.\n\n### Pros of eager algorithms\n\n• For a graph BFS, eager has a better space complexity.This is a case where eager is objectively better. (Eager Dijkstra is also better but it is not expected to be implemented in interviews. Your interviewer is probably expecting lazy Dijkstra.)\n\n• Eager algorithms do fewer recursive calls or iterations.In a binary tree, the number of NULL nodes is always one more than the number of internal nodes. This means that a lazy traversal does twice as many recursive calls/iterations as the eager counterpart. This could make a big difference if you want to debug the code manually. For instance, in this picture, you can see that adding NULLs to the queue makes visualizing the steps more painful:\n\n• Eager algorithm can 'feel safer'.A friend commented that, with a lazy algorithm, they feel like they are missing an edge case.\n\n### My preference\n\nHere are my personal preferences for coding interviews (not those of the other authors of 'Beyond Cracking the Coding Interview'):\n\nStrong preferences:\n\n• For BFS, use eager. This one is clear cut.\n\n• For memoization DP, use lazy. It is much cleaner to code.\n\n• For Dijkstra, use lazy Dijkstra (not super lazy Dijkstra). It is what is realistic to do in an interview and probably what the interviewer expects.\n\nWeak preferences:\n\n• For binary tree traversals (iterative or recursive), use lazy. It is a bit cleaner.\n\n• For graph DFS, use eager. It is a bit more standard, and aligned with a graph BFS.\n\nIn the book, we'll definitely mention that some algorithms can be implemented in a lazy or eager way (in way less detail than here), and that you should choose the one that feels easier to you. But, we still need to pick one to show in the problem solutions. One idea is trying to be consistent throughout (e.g., doing all tree and graph traversals in an eager way). If you have an opinion on which one is better, please reach out! I'd love to hear it.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Reachability Problems and DFS\n\nAn extensive list of questions that can be solved with DFS.\n\n## Why Many Greedy Algorithms Are Pickier Than They Need To Be\n\nMany greedy algorithms can be modified to make local rather than global choices while still producing the same solutions.\n\n## Wall Game DB Design\n\nDesigning the DB for the Wall Game.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/lazy-vs-eager?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Reachability Problems and DFS",
      "content": "# Reachability Problems and DFS\n\n## Introduction\n\nDepth-first search, or DFS, is a fundamental graph algorithm that can be used to solvereachabilityproblems. This post shows how to adapt the basic DFS template to solve several problems of this kind. Reachability problems are often easier in undirected graphs. Below, we specify if the algorithm works for undirected graphs, directed graphs, or both.\n\n### Prerequisites\n\nWe assume that the reader is already familiar with the concept of DFS.Hereis an excellent video introducing DFS with step-by-step animations. We also assume that the reader is familiar with the adjacency list representation of a graph, and we use big-O notation in the analysis.\n\n### Coding conventions\n\nThe algorithms below are in Python.ndenotes the number of nodes. Nodes are identified with integers in the range0..n-1. The graphGis a graph stored as an adjacency list:Gis a list ofnlists. For eachvbetween0andn-1,G[v]is the list of neighbors ofG.\n\nIf the graph is given as an edge list instead, we can initialize it as follows:\n\nIf the graph is given as an adjacency matrix, we can iterate through the rows of the adjacency matrix instead of through the adjacency lists. To iterate through the neighbors of a nodev, instead of\n\nNote that using an adjacency matrix affects the runtime analysis of DFS:O(n²)instead ofO(m).\n\n## Which nodes can be reached from node s?\n\nThis is the simplest question that can be answered with DFS. The primary data structure in DFS is a list of booleans to keep track of already visited nodes (we call itvis). If we start a DFS search from a nodes, the reachable nodes will be the ones for whichvisis true.\n\nFor this,Gcan be directed or undirected. We make use of a nested function in Python so that we do not need to passGandvisas parameters (in Python nested functions have visibility over the variables in the scope where they are defined).\n\nDFS runs inO(m)time andO(n)space, wheremis the number of edges. This is because each edge is considered twice, once from each endpoint, if the endpoints end up being visited, or zero times if the endpoints are not visited.\n\n### Iterative version\n\nThe iterative version takesO(m)space instead ofO(n)because nodes can be inserted into the stack multiple times (up to one time for each incident edge). Alternatively, we can mark the nodes as visited when we add them to the stack instead of when we remove them. This change reduces the space usage to the usualO(n). However, with this change, the algorithm is no longer DFS. It still works for answering reachability questions because the set visited nodes is the same, but the order in which they are visited is no longer consistent with a depth-first search order (it is closer to a BFS (breath-first search) order, but also not exactly a BFS order).\n\nThe difference between marking nodes when they added vs removed from the stack is discussed in detailhere. Since the recursive version is shorter and optimal in terms of space, we favor it from now on. That said, it should be easy to adapt the iterative version above to the problems below.\n\n## Can node s reach node t?\n\nWe use the same code from before, but we add early termination as soon as we seet. Now, the recursive function has a return value.\n\nAdding the early termination can make the DFS faster, but in the worst-case the time/space complexity is the same.\n\n### Practice problems\n\n• https://leetcode.com/problems/the-maze/\n\nThe hardest part on this problem is constructing the graph in the first place.\n\n## Find a path from s to t\n\nThe edges \"traversed\" in a DFS search form a tree called the \"DFS tree\". The DFS tree changes depending on where we start the search. The starting node is called the root. We can construct the DFS tree by keeping track of the predecessor of each node in the search (the root has no predecessor). If we construct the DFS tree rooted ats, we can follow the sequence of predecessors fromttosto find a path fromstotin reverse order.\n\nInstead of using the listvisto keep track of visited nodes, we know a node is unvisited if it has no predecessor yet. We indicate that a node has no predecessor with the special value-1.\n\nNote that DFS doesnotfind the shortest path formstot. For that, we can use BFS (breath-first search). It just returns any path without repeated nodes.\n\n## Is the graph connected?\n\nFor undirected graphs, this is almost the same question as the first question (\"which nodes can be reached bys?\") because of the following property:\n\nAn undirected graph is connected if and only if every node can be reached froms, wheresis any of the nodes.\n\nThus, the code is exactly the same as for the first question, with two differences: 1) we choosesto be0(could be anything), and 2) we change the last line to check if every entry invisis true.\n\nFor directed graphs, we need to take into account the direction of the edges. A directed graph isstrongly connectedif every node can reach every other node. We can use the following property:\n\nA directed graph is strongly connected if and only ifscan reach every node and every node can reachs, wheresis any of the nodes.\n\nWe already know how to use DFS to check ifscan reach every node. To check if every node can reachs, we can do a DFS starting froms,but in the reverse graph of G. The reverse graph ofGis likeGbut reversing the directions of all the edges.\n\nThe runtime is stillO(m), but the space is nowO(m)because we need to create and store the reverse graph. There are alternative algorithms (like Tarjan's algorithm) which can do this inO(n)space.\n\n## How many connected components are there?\n\nWe can use the typical DFS to answer this question for undirected graphs. We use a common pattern in DFS algorithms: an outer loop through all the nodes where we launch a search for every yet-unvisited node.\n\nThe runtime is nowO(n+m)because, ifm < n, we still spendO(n)time iterating through the loop at the end.\n\nFor directed graphs, instead of connected components, we talk aboutstrongly connected components. A strongly connected component is a maximal subset of nodes where every node can reach every other node.\n\nIf we want to find the number of strongly connected components, we can use something likeTarjan's algorithm, a DFS-based algorithm that requires some additional data structures.\n\n### Practice problems\n\n• https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/(Premium only)\n\n• https://leetcode.com/problems/number-of-islands/\n\n• https://leetcode.com/problems/friend-circles/\n\n## Which nodes are in the same connected components?\n\nThis question is more general than the previous two. We label each nodevwith a numberCC[v]so that nodes with the same number belong to the same CC. Instead of having a listCCin addition tovis, we use the CC number-1to indicate unvisited nodes. This way, we do not needvis\n\nFor directed graphs, again we need Tarjan's algorithm or an equivalent algorithm.\n\n### Practice problems\n\n• https://leetcode.com/problems/max-area-of-island/\n\n• https://leetcode.com/problems/sentence-similarity-ii/\n\nIn the second problem, nodes are given by names, not indices, so they need to be converted.\n\n## Is the graph acyclic?\n\nFor undirected graphs, this question is simple. First, we consider the problem in each CC independently. This is very common pattern in graph problems. We do this with an outer loop through all the nodes where we launch a search for every yet-unvisited node.\n\nDuring the DFS search in each CC, if we find an edge to an already visited node that is not the predecessor in the search (the node we just came from), there is a cycle. Such edges in a DFS search are calledback edges. We add one parameter to the recursive functionvisitto know the predecessor node.\n\nFor directed graphs, it is not as simple: the fact that a neighbornbris already visited during the DFS search does not mean thatnbrcan reach the current node. To check if a directed graph is acyclic, we can use the linear-timepeel-off algorithmfor finding a topological ordering. This algorithm detects if the graph is acyclic and finds a topological ordering if so, though we are only interested in the first part.\n\n### Practice problems\n\n• https://leetcode.com/problems/redundant-connection/\n\nThis problem is easier to solve using union-find, but it can be done with DFS.\n\n## Is the graph a tree?\n\nUsually, we ask this question for undirected graphs. We can use this characterization of trees:\n\nAn undirected graph is a tree if and only if it is connected and has exactlyn-1edges.\n\nWe already saw how to check if the graph is connected with DFS, and counting the number of edges is straightforward:\n\n### Practice problems\n\n• https://leetcode.com/problems/graph-valid-tree/\n\n## Is the graph bipartite?\n\nThis is exactly the same question as whether the graph can be two-colored, so see the next section.\n\n## Can the graph be two-colored?\n\nTwo-coloring a graph means assigning colors to the nodes such that no two adjacent nodes have the same color, using only two colors. Usually, we consider coloring question for undirected graphs.\n\nWe consider whether each CC can be colored independently from the others. We can color each CC using DFS. We use values0and1for the colors. The color of the start node can be anything, so we set it to0. For the remaining nodes, the color has to be different from the parent, so we only have one option.\n\nInstead of having avisarray, we use the special color-1to denote unvisited nodes.\n\nWith 3 or more colors, the problem becomesa lot harder.\n\n### Practice problems\n\n• https://leetcode.com/problems/is-graph-bipartite/\n\n## What is the distance from a node s to every other node in a tree?\n\nWe cannot use DFS to find the distance between nodes in a graph which can have cycles, because DFS is not guaranteed to follow the shortest path from the root to the other nodes. For that, BFS is more suitable (if the graph is unweighted). However, since trees are acyclic, there is a unique path between any two nodes, so DFS must use the unique path, which, by necessity, is the shortest path. Thus, we can use DFS to find distances in a tree.\n\n### Practice problems\n\n• https://leetcode.com/problems/time-needed-to-inform-all-employees/\n\n## Find a spanning tree\n\nA spanning tree of a connected, undirected graphGis a subgraph which has the same nodes asGthat is a tree.\nThe edges traversed by a DFS search on a connected graph form a spanning tree (sometimes called a DFS tree). Thus, we do DFS and add the traversed edges to the resulting tree.\n\n## Conclusions\n\nDFS has many uses. We showed how to make minor modifications to the DFS template to answer reachability and connectivity questions.\n\nAfter DFS, the next algorithm to learn would be BFS (breath-first search). Like DFS, it can answer reachability questions. On top of that, it can also answer questions about distance in undirected graphs.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Problem Solving BCtCI Style\n\nA problem walkthrough using the concepts from Beyond Cracking the Coding Interview.\n\n## Negative Binary Search and Choir Rehearsal\n\nA curious application of binary search.\n\n## Wall Game UI Design (+ Frontend Generators)\n\nThe specs of the UI for the Wall Game and renders from frontend generators.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/reachability-problems-and-dfs?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Actually Implementing Dijkstra's Algorithm",
      "content": "# Actually Implementing Dijkstra's Algorithm\n\n## Introduction\n\nDijkstra's algorithm for the shortest-path problem is one of the most important graph algorithms, so it is often covered in algorithm classes. However, going from the pseudocode to an actual implementation is made difficult by the fact that it relies on a priority queue with a \"decrease key\" operation. While most programming languages offer a priority queue data structure as part of their standard library, this operation is generally not supported (e.g., in C++, Java or Python). In this blog, we go over the different ways to implement Dijkstra's algorithm with and without this operation, and the implications of using each. All in all, we consider 5 versions of Dijkstra (names mostly made up by me):\n\n• Textbook Dijkstra: the version commonly taught in textbooks where we assume that we have a priority queue with the \"decrease key\" operation. As we said, this often does not hold true in reality.\n\n• Linear-search Dijkstra: the most naive implementation, but which is actually optimal for dense graphs.\n\n• Lazy Dijkstra: practical version which does not use the \"decrease key\" operation at all, at the cost of using some extra space.\n\n• BST Dijkstra: version which uses a self-balancing binary search tree to implement the priority queue functionality, including the \"decrease key\" operation.\n\n• Theoretical Dijkstra: version that uses a Fibonacci heap for the priority queue in order to achieve the fastest possible runtime in terms of big-O notation. This is actually impractical due to the complexity and high constant factors of the Fibonacci heap.\n\nRoughly, each of the 5 versions corresponds to a different data structure used to implement the priority queue. Throughout the post, letnbe the number of nodes andmthe number of edges. Here is summary of the resulting runtime and space complexities:\n\n• Textbook Dijkstra: indexed binary heap. Runtime:O(m*log n); space:O(n).\n\n• Linear-search Dijkstra: unordered array. Runtime:O(n²); space:O(n).\n\n• Lazy Dijkstra: binary heap. Runtime:O(m*log n); space:O(m).\n\n• BST Dijkstra: self-balancing BST. Runtime:O(m*log n); space:O(n).\n\n• Theoretical Dijkstra: Fibonacci heap. Runtime:O(m + n*log n); space:O(n).\n\nWe provide implementations in Python and C++. The initial sections are mostly background. If you are already familiar with Dijkstra's algorithm, you can skip to the code snippets.\n\n## The shortest-path problem\n\nThe input consists of a graphGand a special nodes. The edges ofGare directed and have non-negative weights. The edge weights represent the \"lengths\" of the edges. The goal is to find the distance fromsto every other node inG. The distance fromsto another node is the length of the shortest path fromsto that node, and the length of a path is the sum of the lengths of its edges. If a node is unreachable froms, then we say that the distance is infinite.\n\nMore precisely, this is known as the \"single-source shortest-path\" (SSSP) problem, because we find the distance from one node to every other node. Related problems include the \"all-pairs shortest paths\" problem and the single-source single-destination problem. Dijkstra's algorithm is a really efficient algorithm for the SSSP problem when the edges are non-negative. Dijkstra's algorithm does not work in the presence of negative edges (zero-weight edges are fine). IfGcontains negative edges, we should use the Bellman-Ford algorithm instead.\n\nThe constraint that the edges are directed is not important: ifGis undirected, we can simply replace every undirected edge{u,v}with a pair of directed edges(u,v)and(v,u)in opposite directions and with the weight of the original edge.\n\nTo simplify things, we make a couple of assumptions that do not make any actual difference:\n\n• Nodes not reachable bysplay no role in the algorithm, so we assume thatscan reach every node. This is so that, in the analysis, we can assume thatn=O(m).\n\n• We assume that the distance fromsto every node is unique. This allows us to talk about \"the\" shortest path to a node, when in general there could be many.\n\n## The graph's representation\n\nA graph is a mathematical concept. In the context of graph algorithms, we need to specify how the graph is represented as a data structure. For Dijkstra's algorithm, the most convenient representation is the adjacency list. The valuable thing about the adjacency list representation is that it allows us to iterate through the out-going edges of a node efficiently.\n\nIn the version of the adjacency list that we use, each node is identified with an index from0ton-1. The adjacency list contains one list for each node. For each nodeubetween0andn-1, the listG[u]contains one entry for each neighbor ofu. In a directed graph, if we have an edge(u,v)fromutov, we say thatvis a neighbor ofu, butuis not a neighbor ofv. Since the graph is weighted, the entry for each neighborvconsists of a pair of values,(v, l): the destination nodev, and the lengthlof the edge(u,v).\n\n## Dijkstra's algorithm idea\n\nOne of the data structures that we maintain is a listdistwheredist[u]is the best distance known foruso far. At the beginning,dist[s] = 0, and for every other nodedist[u] = infinity. These distances improve during the algorithm as we consider new paths. Our goal is to get to the point wheredistcontains the correct distance for every node.\n\nDuring the algorithm, thedistlist is only updated through an operation called \"relaxing\" an edge.\n\nIn words, relaxing an edge(u,v)means checking if going toufirst and then using the edge(u,v)is shorter than the best distance known forv. If it is shorter, then we updatedist[v]to the new, better value.\n\nDijkstra's algorithm is based on the following observations:\n\n• ifdist[u]is correctandthe shortest path fromstovends in the edge(u,v), then if we relax the edge(u,v), we will find the correct distance tov. If either of the conditions are not satisfied, relaxing(u,v)may improvedist[v], but it will not be the correct distance.\n\n• To find the correct distance tov, we need to relax all the edges in the shortest path fromstov, in order. If we do it in order, each node in the path will have the correct distance when we relax the edge to the next node, satisfying the conditions.\n\nDijkstra's algorithm is efficient because every edge is relaxed only once (unlike other algorithms like Bellman-Ford, which relaxes the edges multiple times). To relax every edge only once, we must relax the out-going edges of each node only after we have found the correct distance for that node.\n\nAt the beginning, onlyshas the correct distance, so we relax its edges. This updates the entries indistfor its neighbors. The neighbor ofsthat is closest tos, say,x, has the correct distance at this point. This is because every other path fromstoxstarts with a longer edge, and, since the graph does not have negative-weight edges, additional edges can only increase the distance. Next, sincexhas the correct distance, we can relax its out-going edges. After that, the nodeywith the 3rd smallest distance indist(aftersandx) has the correct distance because the node beforeyin the shortest path fromstoymust be eithersorx. It cannot be any other node because simply reaching any node that is notsorxis already more expensive than the distance we have found fory. We continue relaxing the out-going edges of nodes, always taking the next node with the smallest found distance. By generalizing the argument above, when we relax the out-going edges of each node, that node already has the correct distance. We finish after we have gone through all the nodes. At that point,distcontains the correct distance for every node.\n\nIn order to implement Dijkstra's algorithm, we need to decide the data structures used to find the unvisited node with the smallest distance at each iteration.\n\n## Priority queues\n\nPriority queues are data structures that are useful in many applications, including Dijkstra's algorithm.\n\nIn a normal queue, we can insert new elements and extract the oldest element. A priority queue is similar, but we can associate a priority with each element. Then, instead of extracting the oldest element, we extract the one with highest priority. Depending on the context, \"highest priority\" can mean the element with the smallest or largest priority value. In this context, we will consider that the highest priority is the element with the smallest priority value.\n\nA priority queue is anabstractdata structure. That means that it only specifies which operations it supports, but not how they are implemented. There actually exist many ways to implement a priority queue. To make matters more confusing, different priority queues implementations support different sets of operations. The only agreed part is that they must support two basic operations:\n\n• insert(e, k): insert elementewith priorityk.\n\n• extract_min(): remove and return the element with the smallest priority value.\n\nFor Dijkstra's algorithm, we can use a priority queue to maintain the nodes, usingdist[u]as the priority for a nodeu. Then, at each iteration we can extract the unvisited node with the smallest distance. However, there is a problem: when we relax an edge, the valuedist[u]may decrease. Thus, we need the priority queue to support a third operation which is not commonly supported:\n\n• change_priority(e, k): set the priority ofetok(assuming thateis in the priority queue).\n\nA related operation is removing elements that are not the most prioritary:\n\n• remove(e): removee(assuming thateis in the priority queue).\n\nIf a priority queue implements remove, we can use it to obtain the same functionality aschange-priority(e, k): we can first callremove(e)and then reinsert the element with the new key by callinginsert(e, k).\n\n## Pseudocode with a priority queue\n\nAssuming that we have a priority queue data structure that supportsinsert,extract-min, andchange-priority, Dijkstra's pseudocode would be as follows.\n\nThe priority queue contains the unvisited nodes, prioritized by distance froms. At the beginning, the priority queue contains all the nodes, and they are removed as they are visited.\n\nA common variation is to add them to the priority queue when they are reached for the first time, instead of adding all the nodes at the beginning. The only change is how the priority queue is initialized and the if-else cases at the end:\n\nIt does not change the runtime or space complexity, but there is also no downside to deferring insertions to the PQ. On average, the PQ will contains fewer elements.\n\n## Analysis of Dijkstra's algorithm\n\nUsually, we analyze the algorithmsafterimplementing them. However, in order to choose the best data structure for the priority queue, we need to analyze how much we use each type of operation.\nThus, it is convenient to define the runtime in terms of the priority queue operations, without specifying yet how they are done. LetT_ins,T_min, andT_changebe the time perinsert,extract_min, andchange_priorityoperation, respectively, on a priority queue containingnelements.\n\nThe mainwhileloop hasniterations, and the total number of iterations of the innerforloop, across allniterations, ism. This is because each edge is relaxed once.\n\nThe runtime is dominated by the priority queue operations, so it isO(n*T_ins + n*T_min + m*T_change). These operations dominate the runtime because everything else combined (like updating thedistlist) takesO(n+m)time.\n\n## Linear-search Dijkstra for dense graphs\n\nThe simplest way to simulate theextract_minfunctionality of a priority queue is to iterate through the entiredistlist to find the smallest value among the non-visited entries. If we do this, we don't need a priority queue. We call thislinear-search Dijkstra. We getT_ins = O(1),T_min = O(n), andT_change = O(1). Plugging those in, the total runtime of linear-search Dijkstra isO(n + n*n + m) = O(n²), where we simplify out themterm becausen² > min any graph. More precisely, a directed graph withnnodes has at mostn*(n-1)=O(n²)edges.\n\nA graph with \"close to\"n*(n-1)edges is called dense.Linear-search Dijkstra is actually optimal for dense graphs.This is because Dijkstra's algorithm must takeO(m)time just to relax all edges, so it cannot be faster thanO(m), and, in dense graphs that is already proportional toO(n²).\n\nHere is a Python implementation:\n\nAnd C++. We omit the includes and \"using namespace std;\".\n\n## Priority queues for sparse graphs\n\nTheO(n²)time from the implementation above is slow if the graphGis sparse, meaning that the number of edges is small relative toO(n²). Recall that the time isO(n*T_ins + n*T_min + m*T_change). Ifmis more similar tonthan ton², then we would be happy to trade a slowerchange_prioritytime for a fasterextract_mintime.\n\nThe best possible answer in terms of big-O notation is to use a priority queue implementation based on a data structure known as aFibonacci Heap. A Fibonacci heap containing at mostnelements achieves the following times:\n\n• insert:O(log n)amortized time.\n\n• extract_min:O(log n)amortized time.\n\n• change_priority:O(1)amortized time.\n\nAmortized time means that it could take more time, but, if we average out the times for that operation across the execution of an algorithm, each one takes that time on average.\n\nUsing a Fibonacci heap, we get a total time ofO(n*log n + m)for Dijkstra's algorithm. This is really fast in terms of big-O notation, but Fibonacci heaps have larger constant factors than other data structures, making them slower in practice.\n\nThe most common way to implement a priority queue is with abinary heap. It is simple and fast in practice. Binary heaps supportinsertandextract_mininO(log n)like a Fibonacci heap. However, they do not support thechange_priorityoperation.\n\nIt is possible to modify a binary heap to to support thechange_priorityoperation inO(log n)time. The result is sometimes called an \"indexed priority queue\". Using an indexed priority queue, we would get a total runtime ofO(n*log n + m*log n) = O(m*log n). This is slightly worse than with a Fibonacci heap, and faster in practice.\n\nIn any case, the priority queues provided by languages like C++, Python, and Java, do not support thechange_priorityoperation. This creates a disconnect between the pseudocode taught in classrooms and the actual code that we can write.\n\nThe goal of this post is to illustrate the options to deal with this issue. There are 3:\n\n• Textbook Dijkstra: find or implement our own indexed priority queue.\n\n• Lazy Dijkstra: we implement Dijkstra without using thechange_priorityoperation at all.\n\n• BST Dijkstra: we use a self-balancing binary search tree as the priority queue.\n\nWe will cover the latter two options. The first option is an interesting exercise in data structures (Iimplementedit once for a project), but it is more about the inner workings of binary heaps than it is about Dijkstra's algorithm.\n\nAll three options have a runtime ofO(m*log n). Note that for dense graphs, this becomesO(n² log n)time, so they are all worse than the naive linear-search Dijkstra. In terms of space, lazy Dijkstra is worse than the others, as it needsO(m)space, as opposed toO(n)for the other options.\n\n## Lazy Dijkstra\n\nWe implement Dijkstra using a priority queue that does not support the change-priority operation. We need the following change: when we find a shorter distance to a node that is already in the priority-queue, instead of using the \"change-priority\" operation, we simply use an \"insert\" operation and add a copy of the node in the priority queue with the new distance. Then, when we extract a node from the priority queue, we ignore it if it is not the first time we extract that node. We call this version of Dijkstra \"lazy Dijkstra\" because we \"postpone\" the removal of the pre-existing copy of the node.\n\nHere is a Python version. The logical structure of a binary heap is a binary tree, but, internallythe tree is represented as an arrayfor efficiency reasons. Python is a bit whack because, instead of having a priority queue module that encapsulates the implementation, we have theheapqmodule, which provides priority queue operations that can be used directly on a list representing a binary heap.heapqoffers functionsheappop(equivalent toextract_min) andheappush(equivalent toinsert). These functions receive a normal Python list as a parameter, and this list is assumed to represent a binary heap. In Python, if the priority queue contains tuples, then the first element in the tuple is the priority. Thus, in the implementation we insert tuples to the priority queue with the distance first and the node second.\n\nHere is a C++ version:\n\nAnalysis: since nodes can be added to the priority queue multiple times, in lazy Dijkstra the maximum number of elements in the priority queue increases fromO(n)toO(m). As a result, we doO(m)extract_minandinsertoperations. The total runtime isO(m*log m). This can be simplified toO(m*log n), becauselog m < log (n²) = 2 log n = O(log n). Thus, in terms of big-O notation,lazy Dijkstra is equally fast as textbook Dijkstra(Dijkstra with an indexed priority queue). The only thing that got worse is the space used by the priority queue.\n\n## BST Dijkstra\n\nSelf-balancing binary search trees, like red-black trees or AVL trees, are a type of data structure that maintains a set of elements ordered according to values associated with the elements, known as the elements' keys. They support a few operations, all inO(log n)time. For our use case, we are interested in the following ones:\n\n• Insert an element with a given key.\n\n• Find the element with the smallest/largest key.\n\n• Given a key, find if there is an element with that key, and optionally remove it.\n\nThese operations allow us to use a self-balancing BST to implement a priority queue. With the third operation, we can even implement thechange_priorityoperation, as we mentioned.\n\nPython does not actually have a self-balancing binary search tree module (why?!), so we cannot implement this version of Dijkstra either without finding or implementing our own self-balancing BST.\n\nHere is a C++ version. In C++, the set data structure is implemented as a self-balancing BST:\n\nAnalysis: in a sense, BST Dijkstra combines the best of both worlds: it has the same runtime and space complexity as textbook Dijkstra, without needing the extra space of Lazy Dijkstra, but it uses a much more ubiquitous data structure, a self-balancing BST. However, in practice, self-balancing BSTs are slower than binary heaps. This has to do with the fact that heaps can be implemented on top of an array, while BSTs use recursive tree data structures with child pointers. The array has much betterlocality of reference. For sparse graphs, I'd expect the performance of the different versions to be ordered as follows:\n\nTextbook Dijkstra > Lazy Dijkstra > BST Dijkstra > Theoretical Dijkstra > Linear-search Dijkstra\n\n## Practice problems\n\nHere are some problems on leetcode:\n\n• Network Delay Time\n\n• Find the City With the Smallest Number of Neighbors at a Threshold Distance\n\n• Reachable Nodes In Subdivided Graph\n\n• Path with Maximum Minimum Value(Premium only)\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Negative Binary Search and Choir Rehearsal\n\nA curious application of binary search.\n\n## Choosing a tech stack in 2025\n\nHow would you build a Lichess clone in 2025? My process for picking a tech stack.\n\n## Breaking Down Dynamic Programming\n\nA step-by-step guide to understanding and implementing dynamic programming algorithms with practical examples.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/implementing-dijkstra?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Heapify Analysis Without Math",
      "content": "# Heapify Analysis Without Math\n\nI'm writing about heaps for Beyond Cracking the Coding Interview (beyondctci.com), and the most technical part is the analysis ofheapify. It's easy to show that it takesO(n log n)time, wherenis the number of nodes in the heap, but it's not straightforward to show that this is not tight and the method actually takesO(n). time.\n\nEvery proof I have found online involves a summation over the levels of the heap that ends up looking something like the one inWikipedia heap page:\n\nwhich is more math than I want to put in this book (the bulk of the audience consists of people trying to land a SWE job, not math enthusiasts).\n\nBelow is the proof \"without complicated math\" I came up with that heapify takesO(n)time. If you are familiar with the classic proof, let me know if you find it easier - I might use it for the book. Also, please let me know if you've seen someone else proving it in a similar way.\n\nIf you already know what heapify is, you can jump directly to theProof.\n\n## Heap Recap\n\nHeaps are binary trees with two special properties:\n\n• They arecompletebinary trees: all the levels except the last one have the maximum number of nodes; the last level may not be full, but all the nodes are aligned to the left. (In particular, this implies that heaps have logarithmic height, which is key to the big O analysis.)\n\n• Theheap property:every node is smaller than its children (this is assuming a min-heap - it would be the opposite for a max-heap).\n\nI will focus on the heapify operation and its analysis, but if you want to learn heaps from scratch, the Algorithms with Attitude Youtube channel has agreat videoon it. He also covered theclassic linear-time prooffor heapify, if you want to compare it to mine.\n\nIn any case, I left a full Python heap implementation at the bottom of this post.\n\n## What's Heapify?\n\nHeapify (invented byRobert W. Floyd) converts a binary tree which is already complete, but may not have the heap property, into a proper heap.\n\nHeapify uses the \"bubble-down\" procedure, which starts at a node that may not satisfy the heap property, and recursively swaps it with the smallest of its two children until the heap property is restored:\n\nHeapify works by \"bubbling down\" every non-leaf (internal) node, from bottom to top:\n\nThis figure shows the heapify steps for a min-heap. The first tree is the initial state, which doesn't yet have the min-heap property. Leaves are already at the bottom, so bubbling them down has no effect. The next 3 trees show the evolution after bubbling down the two nodes at depth 1 and then the node at depth 0.\n\nIn the array-based heap implementation,heapify()looks like this:\n\nThe reason why we start bubbling down from the middle of the heap is that, in a complete tree, at least half the nodes are leaves, and we don't need to bubble those down.\n\nHere, we won't prove that itworks, only that its analysis isO(n).\n\nI'll start with a definition and a fact we'll use later:\n\nAperfectbinary tree is a complete tree where the last level is full:\n\nFact 1: In a perfect tree, the number of leaves is 1 more than the number of internal nodes.\n\nFor instance:\n\nFact 1 is true because the number of nodes at each level is a power of 2, so:\n\n• the number of leaves is a power of 2, and\n\n• the number of internal nodes is the sum of all the previous powers of 2.\n\nThe sum of the first few powers of 2 add up to one less than the next power of 2. You can see that if you line them up like this:\n\nIt's a bit likeZeno's paradox, where each power of 2 in the sum halves the remaining distance, but never quite gets to 64.\n\nWith that out of the way, back to heapify:\n\nIn the worst case, each node will get bubbled down all the way to a leaf. Thus, each node needs to move downO(log n)levels, so one might reasonably expect heapify to takeO(n log n)time. This is correct in the 'upper bound' sense, but not tight: the total time is actuallyO(n). The intuition for why that is the case is that most nodes are in the deeper levels of the tree, where they don't need to travel a lot to get to the bottom.\n\nWe'll actually prove astrongerclaim:\n\nMain Claim: If you heapify a perfect tree, the number of 'bubble-down' swaps is smaller thann, the number of nodes.\n\n• We'll assume the worst case, in which every node is bubbled down to a leaf position.\n\n• If the claim is true and heapify does<nswaps, then it takesO(n)time, since most bubble-down iterations involve a swap.\n\n• We make the claim about perfect trees (rather than complete trees in general) to keep things simple.\n\nThe proof goes like this:\n\n• When the height is 1, the claim is true because the tree has 1 node and requires 0 swaps to heapify.\n\n• Every time we add a new level,the number of nodes increases more than the number of swaps(by one, to be exact).\n\nIf we can prove (2), together with (1) it implies the Main Claim because, as we add levels, the number of swaps can never catch up to the number of nodes.\n\nTo see why (2) is true, imagine we add a new level to a perfect tree:\n\nEvery preexisting node needs to bubble down one additional level, while the new leaves do not need to do to be bubbled down. Thus, the number of swaps increases by the number of preexisting nodes.\nBut, another way of saying Fact 1 is that if you take a perfect tree and add a new level, the number of new/leaf nodes is 1 more than the number of preexisting/internal nodes.\n\nAnd that's the proof!\n\n## Appendix: The Proof in Numbers\n\nWe can compute the actual number of swaps needed, in the worst case, for concrete heights:\n\nWe can see that the number of swaps never catches up with the root, per the Main Claim.\n\nWe can also show how the number of nodes grows vs the number of swaps:\n\n## Appendix: Full heap implementation\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Single-Edge Cut Problem\n\nA linear-time algorithm for a graph problem that comes up in the Wall Game.\n\n## Breaking Down Dynamic Programming\n\nA step-by-step guide to understanding and implementing dynamic programming algorithms with practical examples.\n\n## Negative Binary Search and Choir Rehearsal\n\nA curious application of binary search.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/heapify-analysis?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Problem Solving BCtCI Style",
      "content": "# Problem Solving BCtCI Style\n\nHere's a thought: You don't want the first time you think about the question\"What should I do if I get stuck in a coding interview?\"to be when you are stuck in a coding interview.\n\nIn a way, getting stuck in a coding interview is an opportunity. The main goal of the interview is to see your problem-solving thought process, and being stuck is the ideal time to showcase it.\n\nBut you want to be prepared. It's valuable to have a plan for this exact scenario. We all dread blanking out in an interview, but having a plan makes it easy to simply focus on executing it. So, let's talk about what such a plan could look like in this blog post.\n\nInBeyond Cracking the Coding Interview, we go over all the steps in an interview, and our best tips to do well in each of them:\n\nIn this blog post, I'll zoom in on the problem-solving step, \"Design the Algorithm,\" and illustrate the thought process with a problem.\n\nAs you can see, we break it down into four steps:\n\n• Minimally sketch the naive solutionto establish a baseline.\n\n• Identify upper and lower boundsusing big O analysis to narrow down the range of possible solutions.\n\n• Look for triggers (Keywords)that point to a specific approach.\n\n• Employ boosters: problem-solving strategies that give you the \"boost\" you need when you are stuck.\n\nThese are not revolutionary ideas -- it's what good problem solvers do and think about instinctively. One of the main goals of the book, and of this blog post, is to spell out the thought process of people who are really good at this in a relatable way so that anyone can reproduce it.\n\nWe playfully call this theMIKE template(Minimally sketch brute force,Identify bounds,Keywords (triggers),Employ boosters) afterMike Mroczka, one of the authors of BCtCI.\n\nRather than expanding on these now, we'll see them in action with the following problem.\n\n## Problem Statement\n\nThe problem is based onLeetCode 3458, which appeared in a recent contest. You can go and give it a try before reading on (it's labeled as medium, but I think it's on the harder end of medium). The thought process I'll walk through here is based on how I solved it during the contest.\n\nGiven a strings, a substring ofsisspecialif any character in it does not appear outside it.\n\nFor example, ifsis\"abcba\":\n\n• \"bcb\"is a special substring because'b'and'c'do not appear insoutside\"bcb\".\n\n• \"abc\"is not a special substring because'a'appears insoutside\"abc\".\n\nGiven a stringsconsisting ofnlowercase English letters, determine the maximum number of disjointspecialsubstrings. Two substrings are disjoint if they do not overlap.\n\nConstraints:\n\n• 2 <= n <= 10^5\n\n• sconsists only of lowercase English letters.\n\n## Digesting the problem\n\nFirst, we need to digest what the problem is asking. This problem follows a common pattern: it introduces a kind of esoteric definition, \"special substring\", and then asks us to do something with it.\n\nTo make sure we understand what a special substring is, it's good to look at a few examples, starting with the provided ones. For instance, in\"abcba\", do you understand why\"a\"is not special but\"c\"is?\n\nTake some time to come up with your own examples. Rushing to solving a problem before understanding it well is a common but often costly mistake.\n\nSometimes, it helps to tackle just one part of the problem first, so we can start making progress.\n\nWe can think of an algorithm with 2 parts:\n\n• Part A: Find all the special substrings.\n\n• Part B: Find the most non-overlapping special substrings.\n\nLet's start with part A.\n\n## Part A: Find all the special substrings\n\nWe'll walk through the MIKE template.\n\n## M: Minimally sketch brute force\n\nThe key here is to not overthink it. We just want to get the ball rolling and have a baseline we can improve upon.\n\nSince we don't want to spend too much time in an interview, you could even just describe the idea in a sentence and move on. But we prefer to briefly sketch it in very high-level pseudocode. We call it 'intended English': it's written like English, but with indentation to show the code structure:\n\nInterviews often involve considering trade offs between algorithms, so it's a\ngood habit to give them names and list their time/space complexity.\n\nIn this case, the space complexity depends on how many special substrings we might find, which is not clear yet, so we'll leave it out for now.\n\nSketching the brute force solution helps us ensure we understand the problem\n(and if we are solving for the wrong thing, we give the interviewer a chance\nto let us know).\n\n## I: Identify upper and lower bounds\n\nWe can use big O analysis to narrow down the range of possible solutions. An upper bound means \"we don't have to consider any solution that takes longer than this\", and a lower bound means the opposite: \"we don't have to consider any solution that takes less time than this\". In the book, we go over two ways of establishing an upper bound and two ways of establishing a lower bound:\n\nUpper bounds:\n\n• Brute force upper bound: we just saw that we can find all special substrings inO(n^4)time, so we don't have to consider any solution that takes longer than that.\n\n• TLE (Time Limit Exceeded) upper bound: here is where we use the problem constraints to establish an upper bound. The problem says thatn <= 10^5, which usually means thatO(n^2)solutions are too slow, butO(n log n)or faster solutions are fine.\n\nLower bounds:\n\n• Output-size lower bound: thespacetaken by the output is a lower bound for the time complexity, because that's how long it takes just to write the output. In our case, the output of the overall problem is just a number, so this lower bound is trivial:O(1). Bounds are not always useful!\n\n• Task-based lower bound: some problems involve an inherent task thatanysolution must fulfill. The runtime of this task is a lower bound. In this case, we know weat leastneed to read every letter in the input, so we have a lower bound ofO(n). In other words, we can rule out solutions that takeO(log n)orO(1)time.\n\nCombining our findings, we can narrow down our search range toO(n log n)orO(n)algorithms (something likeO(n log^2 n)would also be fine, it's just less common).\n\n## K: Keywords (triggers)\n\nThere are certain properties of problems that point to a specific approach. Here are some triggers we can identify for this problem:\n\n• finding substrings->sliding windows\n\n• O(n log n)possible target complexity->sorting or heaps\n\nUnfortunately, triggers are not a guarantee, and these triggers don't seem to help for this problem:\n\n• In sliding windows, once you move past a character, you don't later go back. So, in Example 1, it would be impossible to find both\"abcba\"and\"bcb\": if you find\"abcba\"first, therightpointer would have to go back to find\"bcb\". But if you find\"bcb\"first, theleftpointer would have to go back to find\"abcba\".\n\n• Sorting doesn't seem like a good fit because the input order is important.\n\nDo you think I missed any other triggers?\n\n## E: Employ boosters\n\nSo, triggers didn't help, and brute force is still far from the target complexity. It's time to employ boosters.\n\nHere's an overview:\n\nThe boosters are roughly ordered, but we don't always have to use them in order. In fact, here's a plot twist: what we did at the beginning, splitting the problem into two parts, is the third booster:Decrease the Difficulty->Break Down the Problem.\n\n## Booster 1: Brute force optimization\n\nThe first booster is straightforward: take the brute force pseudocode we already have and try to optimize it.\n\nIn the boosters diagram, we list three ways to go about it. One of them is theData structure pattern. Many bottlenecks come from having to do some calculation inside a loop. In those situations, ask yourself,\n\n\"Do I know of any data structure which makes this type of operation faster?\"\n\nFor this problem, we can use a hash set to optimize the innermost loop:\n\nIf you have working code or pseudocode but think of an optimization or better\napproach, do NOT edit your code. Copy-paste it and work on a separate copy.\nThis way, if you don't have time to finish or realize it's wrong, you'll still\nhave the previous working version.\n\n## Booster 2: Hunting for properties\n\nWe got down toO(n^3)time, but we know we still need to bring this down to the target complexity.\n\nLet's say we don't know how to optimize the code further. Often, the breakthrough comes from uncovering some \"hidden\" observation orpropertynot explicitly mentioned in the statement. Our second booster is to go hunting for those.\n\nIn the book, we discuss a bunch of ways of doing this, but the most basic and effective one is to try to solve the problem manually with a non-trivial example. By non-trivial, we mean that is is not some weird edge case, which would not be helpful for figuring out a general algorithm.\n\nLet's actually do that: takes = \"mississippi\"andmanuallytry to find all the special substrings.\n\nDon't overthink it. Don't think about algorithms yet. Just write them down.\n\nDone? Ok,nowtry to reverse-engineer what shortcuts your brain took. This is one property you may have noticed:\n\n### Property 1\n\nProperty 1:a special substring must start at the first occurrence of a letter.\n\nYou may have noticed this property when your brain skipped over the second, third, or fourth'i's inmississippiand intuitively realized that there is no special substring starting at those. Writing down the propertyformalizesthis instinct and ropes in the interviewer.\n\nNow that we have a property, we have to find a way to use it.Property 1allows us to optimize the outer loop: it means we only have26 = O(1)possible starts to check (problems where the input consists of only lowercase letters often have optimizations like this).\n\nAs we iterate through the possible starts, we can track letters seen so far (e.g., in a hash set):\n\nWe like to write down the big O simplification (O(26 * n^2) = O(n^2)), so\nthe interviewer doesn't think we missed steps.\n\nWe haven't hit our target time complexity yet, so let's keep hunting for properties. Here is another one:\n\n### Property 2\n\nProperty 2:of all the special substrings that start at a given letter, we only care about the shortest one.\n\nOur ultimate goal is to find the most non-overlapping special substrings. If we can choose between two special substrings, one of which contains the other, it is always \"optimal\" or, at least, \"safe\" to pick the smaller one.\n\nFor instance, ifsis\"baa\", we have two choices for special substrings starting at'b':\"baa\"and\"b\". We should pick\"b\"so that the\"aa\"part can be in another disjoint special substring.\n\nAgain, when we find a property, we need to think of how to apply it.Property 2means that, for each starting pointi, we can grow a substring one letter at a time, and stop as we find the first special substring.\n\nLet's break this down a bit more: say you start at indexi.\n\n• If you find a lettercthat appears at some later point, we need to grow the substring up to that index.\n\n• If you find a lettercthat appears beforei, we can stop the search. No substring starting atican be special.\n\nFor example, imagineistarts at the first'b'in the following string:\n\nThat means we need to grow the substring at least up to the last'b'in the string:\n\nAs we grow the substring, we hit an'a', which appears beforei, and we realize that no substring starting atican be special.\n\nWe can now add this logic to our algorithm. We can start the algorithm by computing the first and last index of each letter (this is an example of thepreprocessing patternin the boosters diagram -- it's common for properties from Booster 2 to enable optimizations from Booster 1).\n\nThen, as we grow each substring, we keep track of the farthest index we need to reach. (This is actually a common pattern in sliding window algorithms, where we maintain information about the window as it 'slides', rather than computing it from scratch every time the window moves. So, the 'sliding windows' trigger wasn't completely off).\n\nWe got the time down toO(n). Since we hit the lower bound, we can be confident Part A is as good as it can be, and we can move on to Part B.\n\n## Part B: Find the most non-overlapping special substrings\n\nLet's be honest: even if in the book we reallyemphasizedeveloping your problem-solving skills by using the MIKE template and the boosters, knowing a bunch of leetcode questions DOES give you an edge in coding interviews. So, I'll tell you how I actually solved this problem in the contest. I realized that Part B is just a variation of a classic greedy problem: most non-overlapping intervals. Indeed, a substring can be seen as an interval of the string.\n\nThe \"most non-overlapping intervals\" problem is in BCtCI, so I already knew that it can be solved with a greedy algorithm that sorts the intervals by their end time and then iterates through them, picking the ones that don't overlap with the previous one (hereis a similar problem on leetcode). This algorithm fits within our target time complexity, so I didn't have to think beyond that.\n\nIf I didn't already know the solution, I would have walked through the MIKE template again for Part B.\n\n## Full implementation\n\nHere is a full implementation:\n\nYou may think that the bottleneck is the sorting, but it's not. Recall that there are only up to 26 special substrings (by Property 1). Sorting26intervals takesO(26 log 26) = O(1)time.\n\n## Conclusion\n\nI wanted to give an overview of all the high-level ideas for problem-solving in leetcode-style interviews. We could dive a lot deeper into any of those ideas, so this blog post may feel a bit rushed, but the meta-point is thatyou should have a plan for when you are stuck in an interview(and you should be following it during your practice sessions so it becomes second nature). It's not important that you use the MIKE template --yourplan should work foryou. But the ideas covered in this post should probably be part of it.\n\nIf you have any comments, let me know onlinkedinorX.\n\n### Stay in the loop\n\nI'd love to tell you when I publish a new post.\n\nGet notified when I write about DS&A or software engineering. Unsubscribe anytime if it's not your vibe.\n\n### Want to read more? Here are other posts:\n\n## Why Many Greedy Algorithms Are Pickier Than They Need To Be\n\nMany greedy algorithms can be modified to make local rather than global choices while still producing the same solutions.\n\n## Get Binary Search Right Every Time, Explained Without Code\n\nA binary search recipe that works for every problem, explained without code.\n\n## In Defense of Coding Interviews\n\nA collection of arguments in favor of coding interviews.\n\n## Nil Mamano\n\nComputer scientist, software engineer, author.",
      "source_url": "https://nilmamano.com/blog/problem-solving-bctci-style?category=dsa",
      "author": "Nil Mamano",
      "user_id": "aline123"
    },
    {
      "title": "Fullstack API Platform for Dashboards and Reporting",
      "content": "# Why Users Want Customer-Facing Analytics\n\n#### Due to low barriers to entry, abundant capital, and tens of thousands of ambitious founders, the SaaS industry has become one of the most competitive markets in the world. As a result, customers’ expectations have risen dramatically.\n\n#### October 1, 2024\n\n# Brief Overview of the Modern Data Stack\n\n#### Ok, but what actually is the Modern Data Stack?\n\n#### September 26, 2024\n\n# The Evolution of Business Intelligence and the Emergence of Embedded BI\n\n#### For many SaaS product managers, business intelligence (BI) is a familiar tool that has shaped decision-making and product development for decades. But the rise of embedded BI has introduced new possibilities and challenges, especially in the fast-evolving SaaS ecosystem. In this article, we’ll explore the history of traditional BI, its limitations, and how embedded BI emerged as a product category in the 2000s.\n\n#### July 26, 2024\n\n# Why the Modern Data Stack Doesn’t Replace Embedded Analytics\n\n#### While the modern data stack offers robust data capabilities, it also has limitations.\n\n#### July 23, 2024\n\n# Why Users Want Customer-Facing Analytics\n\n#### Due to low barriers to entry, abundant capital, and tens of thousands of ambitious founders, the SaaS industry has become one of the most competitive markets in the world. As a result, customers’ expectations have risen dramatically.\n\n#### July 19, 2024\n\n# Why SaaS Companies Offer Customer-Facing Analytics\n\n#### Just like the look & feel of analytics may differ, you’ll hear various explanations for why a specific company wants to offer customer-facing analytics\n\n#### July 12, 2024\n\n# Don’t build ChatGPT for X. Focus on where ChatGPT doesn’t solve X\n\n#### A lot of AI products are essentially ChatGPT for X, but oftentimes ChatGPT is not the ideal user experience for X. Instead of trying to make a better chatbot than OpenAI, focusing on solving X specifically will often lead to a very different UX (not a chat interface).\n\n#### July 5, 2024\n\n# What is “customer-facing analytics”?\n\n#### “Customer-facing analytics” describes any data or insights feature in your product that your end-users interact with. Customer-facing analytics are ubiquitous across all kinds of software products, whether consumer, B2B, marketplace, data app, or tech-enabled service. Some common examples of customer-facing analytics are charts & graphs, data tables, dashboards, reporting tools, or even self-service analytics.",
      "source_url": "https://quill.co/blog",
      "author": "Quill team",
      "user_id": "aline123"
    },
    {
      "title": "Shreycation | Shrey G | Substack",
      "content": "# Shreycation\n\nTime to level up your travel and points game. Tips, tricks, and hacks from a budding travel professional.",
      "source_url": "https://shreycation.substack.com",
      "author": "Shrey G",
      "user_id": "aline123"
    },
    {
      "title": "BEYOND CRACKING THE CODING INTERVIEW",
      "content": "C C i raCking the oding nterview 189 Programming Questions and solutions C Pm C raCking the areer the skills, Frameworks, and PraCtiCes to BeCome a great ProduCt manager C Pm i raCking the nterview how to land a ProduCt manager JoB in teChnology C t C raCking the eCh areer insider adviCe on landing a JoB at google, miCrosoFt, aPPle, or any toP teCh ComPany BEYOND CRACKING the",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 5,
      "page_end": 7
    },
    {
      "title": "BEYOND CRACKING THE CODING INTERVIEW",
      "content": "Copyright © 2025 by CareerCup. All rights reserved. No part of this book may be reproduced in any form by any electronic or mechanical means, including information storage and retrieval systems, without permission in writing from the author or publisher, except by a reviewer who may quote brief passages in a review. Published by CareerCup, LLC, Palo Alto, CA. Compiled Feb 15, 2025. For more information, or to enquire about bulk or university copies, contact support@careercup.com. Please report bugs or issues at beyondctci.com.",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 8,
      "page_end": 8
    },
    {
      "title": "VIII. exit() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 624",
      "content": "Acknowledgments 626 Post-Mortem Example Log 629 Reference Materials 630 My Notes & Reminders 639 Get $50 Off on Mock Interviews Practice anonymously on interviewing io with FAANG interviewers: bctci co/discount-X3A4 You can access all of our online materials and Talk with the authors, get help if you're stuck, and bonus chapters here: geek out with us on Discord bctci co bctci co/discord I",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 11,
      "page_end": 12
    },
    {
      "title": "T E C H N I C A L R E A D M E",
      "content": "This chart represents how we see the landscape of interview questions: Figure 1. Landscape of Interview Questions, for someone who prepares with BCtCI Our goal with this book is twofold: 1 Teach you the 80% most common topics and ideas used in interview problems That's what Part VII: The Catalog of Technical Topics, is all about The remaining 20% are niche topics",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 12,
      "page_end": 13
    },
    {
      "title": "PRINCIPLES AND CATALOG ▸ TECHNICAL README 169",
      "content": "2 Teach you problem-solving strategies so you can fi gure out 80% of questions on your own, even if you haven't seen the idea before This is what the problem-solving boosters (Chapter 24: Problem-Solving Boosters, pg 249) are for The remaining 20% of questions rely on tricks (ideas that are really hard to come up with on your own if you haven't seen them before) 1 Combining these two, after going through the book, you should be able to tackle all but 20% * 20% = 4% of questions, which are those based on niche topics and requiring tricks But if that happens, you've been truly unlucky",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 13,
      "page_end": 13
    },
    {
      "title": "THE PRINCIPLES AND THE CATALOG",
      "content": "Besides solving problems, we want to help you practice eff ectively and know how to navigate an interview setting This is covered in Part VI: Principles of Coding Interviews (pg 166) It includes: • Study Plan: A detailed study plan for how to practice using this book's materials • Universal Rubric: How you're evaluated by interviewers • Interview Checklist: Breaking down each step you should take in a coding interview • Big-O Analysis: In-depth coverage of the \"language\" of technical interviews • Problem-Solving Strategies: Boundary thinking, trigger thinking, and problem-solving boosters The second part is a Catalog of data structures and algorithms topics We've broken the technical topics into tiers, with Tier 1 being the highest priority • Tier 1: Essential topics from sets & maps to trees and graphs • Tier 2: Intermediate topics like heaps, sliding windows, and prefi x sums • Tier 3: Niche (online-only) topics that didn't warrant a spot in the physical book because they don’t come up that often (this is where we enter the niche 20% territory) The online-only chapters can be found at bctci co/bonus",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 13,
      "page_end": 13
    },
    {
      "title": "TOPICS, RECIPES, AND REUSABLE IDEAS",
      "content": "There are three related concepts you'll fi nd as you peruse the Catalog: topics, reusable ideas, and recipes Here's a quick defi nition to keep them straight: • Topic: A chapter from the Catalog, like Binary Search • Reusable Idea: A coding idea that can typically be used across problems (and even across topics) They are tactical tips worth remembering, such as \"pass indices, not strings in recursive code to avoid using extra space \" You'll typically fi nd them next to the fi rst problem where they are used (look for the icon) • Coding Recipe: A pseudo-code template related to a specifi c topic that can be used as a building block to solve similar problems with small tweaks Questions, comments, or bugs? Report bugs at bctci co/bugs or geek out with the authors on Discord: bctci co/discord 1 Our mantra? If you encounter something once, it’s a trick; if you encounter it repeatedly, it’s a tool 92 RETPAHC I AI interviewer, replays, and more materials for this chapter at bctci co/binary-search 92 RETPAHC I 92 RETPAHC II",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 13,
      "page_end": 14
    },
    {
      "title": "B I N A R Y S E A R C H",
      "content": "▶ Prerequisites: None When it comes to binary search, software engineers are split in half: One camp thinks it's too basic to be an interview question, and the other dreads it because they always mess up the index manipulation The fi rst group overlooks the fact that binary search has many uses beyond the basic \"fi nd a value in a sorted array \" Far from it, binary search has many non-obvious applications, which we'll cover in this chapter For the second group, we'll provide a recipe focusing on simplicity and reusability across applications—even the unconventional ones we just foreshadowed",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 14,
      "page_end": 14
    },
    {
      "title": "SOLUTION 29.1 SEARCH IN SORTED ARRAY",
      "content": "We assume most engineers are familiar with the basic premise of binary search: two pointers move inward from the ends of a sorted array, closing in on the target by checking if the midpoint is too small or too large Pop quiz! Here is an attempted solution, but it has a bug Can you spot it? 1 def BUGGED_binary_search(arr, target): # DON'T USE IN INTERVIEWS! 2 l, r = 0, len(arr) 3 while l <= r: 4 mid = (l + r) // 2 5 if mid == target: 6 return mid 7 if target > mid: 8 r = mid+1 9 else: 10 l = mid-1 11 return -1",
      "content_type": "coding_problem",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 14,
      "page_end": 15,
      "code_blocks": [
        {
          "type": "function",
          "code": "def BUGGED_binary_search(arr, target): # DON'T USE IN INTERVIEWS! 2 l, r = 0, len(arr) 3 while l <= r: 4 mid = (l + r) // 2 5 if mid == target: 6 return mid 7 if target > mid: 8 r = mid+1 9 else: 10 l = mid-1 11 return -1"
        }
      ]
    },
    {
      "title": "CHAPTER 29 ▸ BINARY SEARCH 327",
      "content": "Check the solution in the footnote 1 Regardless of what you found, the point is that it is easy to miss errors in a binary search implementation Here is one way to do it correctly: 1 def binary_search(arr, target): 2 n = len(arr) 3 if n == 0: 4 return -1 5 l, r = 0, n - 1 6 if arr[l] >= target or arr[r] < target: 7 if arr[l] == target: 8 return 0 9 return -1 10 while r - l > 1: 11 mid = (l + r) // 2 12 if arr[mid] < target: 13 l = mid 14 else: 15 r = mid Figure 1. Binary search for target 3 16 if arr[r] == target: 17 return r 18 return -1 We'll punt on breaking down this solution until we talk about our transition-point recipe (pg 330)",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 15,
      "page_end": 15,
      "code_blocks": [
        {
          "type": "function",
          "code": "def binary_search(arr, target): 2 n = len(arr) 3 if n == 0: 4 return -1 5 l, r = 0, n - 1 6 if arr[l] >= target or arr[r] < target: 7 if arr[l] == target: 8 return 0 9 return -1 10 while r - l > 1: 11 mid = (l + r) // 2 12 if arr[mid] < target: 13 l = mid 14 else: 15 r = mid Figure 1. Binary search for target 3 16 if arr[r] == target: 17 return r 18 return -1 We'll punt on breaking down this solution until we talk about our transition-point recipe (pg 330)"
        }
      ]
    },
    {
      "title": "CHAPTER 29 ▸ BINARY SEARCH 327",
      "content": "Check the solution in the footnote 1 Regardless of what you found, the point is that it is easy to miss errors in a binary search implementation Here is one way to do it correctly: 1 def binary_search(arr, target): 2 n = len(arr) 3 if n == 0: 4 return -1 5 l, r = 0, n - 1 6 if arr[l] >= target or arr[r] < target: 7 if arr[l] == target: 8 return 0 9 return -1 10 while r - l > 1: 11 mid = (l + r) // 2 12 if arr[mid] < target: 13 l = mid 14 else: 15 r = mid Figure 1. Binary search for target 3 16 if arr[r] == target: 17 return r 18 return -1 We'll punt on breaking down this solution until we talk about our transition-point recipe (pg 330)",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peak BCTCI - Sliding Windows & Binary Search.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 15,
      "page_end": 60,
      "code_blocks": [
        {
          "type": "function",
          "code": "def binary_search(arr, target): 2 n = len(arr) 3 if n == 0: 4 return -1 5 l, r = 0, n - 1 6 if arr[l] >= target or arr[r] < target: 7 if arr[l] == target: 8 return 0 9 return -1 10 while r - l > 1: 11 mid = (l + r) // 2 12 if arr[mid] < target: 13 l = mid 14 else: 15 r = mid Figure 1. Binary search for target 3 16 if arr[r] == target: 17 return r 18 return -1 We'll punt on breaking down this solution until we talk about our transition-point recipe (pg 330)"
        }
      ]
    },
    {
      "title": "BEYOND CRACKING THE CODING INTERVIEW",
      "content": "Copyright © 2025 by CareerCup. All rights reserved. No part of this book may be reproduced in any form by any electronic or mechanical means, including information storage and retrieval systems, without permission in writing from the author or publisher, except by a reviewer who may quote brief passages in a review. Published by CareerCup, LLC, Palo Alto, CA. Compiled Feb 15, 2025. For more information, or to enquire about bulk or university copies, contact support@careercup.com. Please report bugs or issues at beyondctci.com.",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 7,
      "page_end": 7
    },
    {
      "title": "I. __init__() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8",
      "content": "README . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 Hello World. Hello Reader. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 Crash & Learn: Our Failed Interviews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 9,
      "page_end": 9
    },
    {
      "title": "VIII. exit() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 624",
      "content": "Acknowledgments. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .626 Post-Mortem Example Log . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .629 Reference Materials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .630 My Notes & Reminders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .639 Get $50 Off on Mock Interviews Practice anonymously on interviewing.io with FAANG interviewers: bctci.co/discount-X3A4 You can access all of our online materials and Talk with the authors, get help if you're stuck, and bonus chapters here: geek out with us on Discord. bctci.co bctci.co/discord",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 10,
      "page_end": 11
    },
    {
      "title": "_ _ I N I T_ _ ( )",
      "content": "P A R T I Watch for these speech-bubble icons, which mean there is online content. Interview Replay: Recordings of actual mock interviews. Snippet: Material that you can copy/paste online, including email templates and code recipes. Resource: Bonus chapters, worksheets, and other material. Problems, Solutions, and AI Interviewer: You can try every problem in the book with the AI Interviewer. Solutions are online in four languages (Python, Java, JavaScript, and C++). I",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 11,
      "page_end": 13
    },
    {
      "title": "R E A D M E",
      "content": "This is a big book, and yes, it needs an instruction manual. We ask (beg?) you to read this. We'll keep it short and to the point. We also know lots of books have online materials, and they're often junk. We promise this isn't the case with ours. Before we do that, we’d like to address the relationship between this book and interviewing.io. You'll see a lot of references to it. This book is not from interviewing.io, but we do partner with them for access to lots of data, interview replays, and an AI Interviewer. Because of this relationship, we know that sometimes mentioning interviewing.io might sound promotional. We’ve tried to avoid that as much as we could. We hope—trust—that you'll forgive this in exchange for access to lots of data, resources, and tools (and the discount code). The book is roughly split into two segments: the # rst segment (Parts I–V) is the soft squishy stu$ (backed up by a lot of qualitative and quantitative data). The second segment (Parts VI and onwards) is the technical content, which has its own README (pg 168). Please read it before diving into those parts.",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 13,
      "page_end": 13
    },
    {
      "title": "__INIT__!\" ▸ README 11",
      "content": "ICONS Whenever you see an icon wrapped in a speech bubble, it means that there’s online content that goes with it, like so: Problems, Solutions, and AI Interviewer: Each problem in the book has a Python solution (without any fancy Python-speci# c tricks). We also provide Java, JavaScript, and C++ solutions online. We encourage you to try each problem with AI Interviewer and to only look at the solution if you get stuck. Interview Replay: These are recordings of actual mock interviews from interviewing.io’s collection, conducted by engineers from FAANG and other top companies. We use them to showcase real-life examples of successes and mistakes. Snippet: These are snippets that you can copy and paste. Sometimes they’re code. Sometimes they’re text that you can steal verbatim (e.g., emails to recruiters). Resource or document: These are bonus chapters, downloadable problem sets, or worksheets (e.g., an equity calculator, a calculator to help you # gure out the order in which to approach companies).",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 14,
      "page_end": 14
    },
    {
      "title": "BUGS, QUESTIONS, AND CONTACT",
      "content": "Website: beyondctci.com Bugs: bctci.co/bugs Errata: bctci.co/errata Email: beyond@gayle.com Get $50 off anonymous mock interviews on interviewing.io While this book gives you the tools and strategies to tackle tough technical questions, it is essential to put these tools into practice. With the purchase of this book, you get $50 o$ on interviewing.io mock interviews. There, you can practice anonymously with FAANG interviewers. Even if you don’t use interviewing.io, # nd a way to practice with another person; grinding problems by yourself quickly reaches the point of diminishing returns. bctci.co/discount-X3A4 I",
      "content_type": "technical_concept",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 14,
      "page_end": 15
    },
    {
      "title": "H E L LO W O R L D. H E L LO R E A D E R .",
      "content": "The only thing worse than technical interviews is not having technical interviews. Oscar Wilde(ish) Always stay gracious, best revenge is your paper. Beyoncé Knowles-Carter Cracking the Coding Interview (CtCI) has been the industry leader in teaching engineers how to get into top tech companies for over a decade. It's referenced in almost every major interview prep source, including books, podcasts, blogs, and online courses, as the source of truth on how to get into the major tech companies in our industry. And—although this was never the intention—it's even been used as a classroom textbook and a question bank for companies to draw on. So, why write another interview prep book? And why now? While CtCI remains an excellent foundation for interview preparation, the landscape of technical interviews has evolved dramatically since its publication. Online interview resources have changed how candidates practice, and the questions asked in interviews have grown both in di% culty and variety. And, as more candidates are preparing for interviews than ever before, the bar for passing has risen accordingly. But it’s not just the questions that have changed. The process of landing a job at top tech companies has grown even more competitive. The technical interview format has sparked increasing debate, and AI is reshaping how people apply for jobs, how companies screen candidates, and even how interviews are conducted. Amidst these shifts, we felt it was time to take a step back and rethink what a modern interview prep book should look like—one that complements existing resources and patches the gaps between what candidates are doing and what they need to be doing. We realized that a new edition wouldn’t cut it. It would have to be a brand new book, and this book would have to: • Focus on understanding, not memorization. We aim to teach you the computer science fundamentals and the interview skills needed to excel, regardless of your educational background. By building a deep understanding of these concepts, you’ll be prepared to tackle problems you’ve never seen before— something memorization alone can’t achieve.",
      "content_type": "book",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 15,
      "page_end": 16
    },
    {
      "title": "__INIT__!\" ▸ HELLO WORLD. HELLO READER. 13",
      "content": "• Cover important non-technical topics. CtCI only brie&y touched on what some call the “squishy” stu$—resumes, negotiation, and managing your job search. This book devotes ~150 pages to these topics because they are now critical to success. We’ll guide you through technical recruiting with practical advice, down to exactly what to say in the situations you’re likely to encounter. • Ground our advice in data. This book draws on a decade of insights from real-world interviews, including a corpus of over 100,000 interviews conducted on interviewing.io by senior engineers from FAANG+ companies. You’ll get a data-driven perspective on what technical interviews look like at top companies today. Now, to address the angry elephant in the room: technical interviews are &awed, right? Absolutely. We don't just acknowledge that; we're going to dive into a candid discussion of everything wrong with technical interviews, and what you can do about it. Despite what some have suggested, CtCI didn't invent this format—nor is BCtCI going to end it. As far as we can tell, technical interviewing isn't going anywhere. But we hope to make the process a little less daunting and a lot more transparent—by leveling the playing #eld and giving you access to what was previously insider knowledge. We hope that you’re able to put away your hatred of the format, read this book with an open mind, put in the work, and get your revenge... by nailing your interviews, fearlessly negotiating, and landing the high-paying, challenging, awesome job that you deserve. Before we get on with the real stu$, we have one request for you. Do not read this book—at least not in the traditional sense of left-to-right, top-to-bottom, page-to-page. Rather, we implore you to do this book. Use it. Interact with it. This is so important that we have a literal README on how to use it. We hope you enjoy reading doing this book, inasmuch as one can enjoy a book about interviews and job searches. We really enjoyed writing building it. I",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 16,
      "page_end": 17
    },
    {
      "title": "CRASH & LEARN: OUR FAILED INTERVIEWS",
      "content": "Everyone loves a success story, but failure is often the best teacher. We will share here our most humbling interview experiences—times we bombed, blanked, or were simply unprepared. These stories aren’t just about the mistakes we made; they’re about the lessons we learned and how those failures shaped us. Our hope is that by sharing these moments, you’ll see that even \"experts\" have stumbled, arguably in careeraltering ways. More importantly, you’ll learn that just as these interview failures don't re& ect on our skills as engineers, nor do yours. GAYLE Entering my fourth year of a # ve-year undergrad/master's program, I was fortunate to have three Microsoft internships behind me. Determined to try something new for my # nal internship, I sent countless cold emails and resumes into the void of online applications. Somehow, Google picked mine. I was thrilled. From the bits I'd heard about technical interviewing, questions could be anything from implementing an ArrayList to the heavy-ball brainteaser1. Imagine my surprise when, instead, I got a math question: \"What is 2^20?\" My answer was the always-brilliant \"Um, I don't know? Can I use a calculator?\" All I could think about was what a stupid question this was and how I de# nitely didn't know the answer. And why should I? Who cares? Just look it up if you need to know it. (Sound familiar?) What I didn't realize then was that—probably—my interviewer wasn't expecting me to just know this. Most likely, she wanted me to start from what I did know, perhaps that 210 is about 1000. From there, if I knew my exponent rules, I could solve it: 220 = 210 * 210 is about 1000 * 1000… so approximately 1 million. In her mind, it was a problem-solving question—albeit one that relied on a lot of math2. But in my mind, I didn't know the answer, and I was supposed to, and <PANIC>. All I needed to do was focus on what I could solve rather than what I knew. Still a stupid question though3. 1 Given a balance (i.e., a scale that only tells you which side is heavier) and eight balls—all the same weight other than one which is slightly heavier—# nd the heavy ball in as few measurements as possible. 2 In general, asking math-heavy questions is a no-no for interviews. However, I'll let her o$ the hook here, a little. I was a computer science major with a math minor. If I didn't know exponent rules, something had gone very wrong. 3 Why is this a bad question? Put aside the \"it's not relevant\" part. The relevant factor is: is it predictive? Approached the right way, this could be a problem solving question. However, it didn't feel like that to me—and perception matters. Additionally, even if I had approached it as a problem-solving question, there is very little \"meat\" to the question; what distinguishes between good and bad other than understanding how to break up the exponents?",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 17,
      "page_end": 18
    },
    {
      "title": "CRASH & LEARN: OUR FAILED INTERVIEWS",
      "content": "Everyone loves a success story, but failure is often the best teacher. We will share here our most humbling interview experiences—times we bombed, blanked, or were simply unprepared. These stories aren’t just about the mistakes we made; they’re about the lessons we learned and how those failures shaped us. Our hope is that by sharing these moments, you’ll see that even \"experts\" have stumbled, arguably in careeraltering ways. More importantly, you’ll learn that just as these interview failures don't re& ect on our skills as engineers, nor do yours. GAYLE Entering my fourth year of a # ve-year undergrad/master's program, I was fortunate to have three Microsoft internships behind me. Determined to try something new for my # nal internship, I sent countless cold emails and resumes into the void of online applications. Somehow, Google picked mine. I was thrilled. From the bits I'd heard about technical interviewing, questions could be anything from implementing an ArrayList to the heavy-ball brainteaser1. Imagine my surprise when, instead, I got a math question: \"What is 2^20?\" My answer was the always-brilliant \"Um, I don't know? Can I use a calculator?\" All I could think about was what a stupid question this was and how I de# nitely didn't know the answer. And why should I? Who cares? Just look it up if you need to know it. (Sound familiar?) What I didn't realize then was that—probably—my interviewer wasn't expecting me to just know this. Most likely, she wanted me to start from what I did know, perhaps that 210 is about 1000. From there, if I knew my exponent rules, I could solve it: 220 = 210 * 210 is about 1000 * 1000… so approximately 1 million. In her mind, it was a problem-solving question—albeit one that relied on a lot of math2. But in my mind, I didn't know the answer, and I was supposed to, and <PANIC>. All I needed to do was focus on what I could solve rather than what I knew. Still a stupid question though3. 1 Given a balance (i.e., a scale that only tells you which side is heavier) and eight balls—all the same weight other than one which is slightly heavier—# nd the heavy ball in as few measurements as possible. 2 In general, asking math-heavy questions is a no-no for interviews. However, I'll let her o$ the hook here, a little. I was a computer science major with a math minor. If I didn't know exponent rules, something had gone very wrong. 3 Why is this a bad question? Put aside the \"it's not relevant\" part. The relevant factor is: is it predictive? Approached the right way, this could be a problem solving question. However, it didn't feel like that to me—and perception matters. Additionally, even if I had approached it as a problem-solving question, there is very little \"meat\" to the question; what distinguishes between good and bad other than understanding how to break up the exponents?",
      "content_type": "interview_guide",
      "source_url": "file:///home/tvpower/PycharmProjects/OGTool_Aline/Books_PDF/Sneak Peek BCTCI - First 7 Chapters - What's Broken About Coding Interviews, What Recruiters Won't Tell You, How to Get In the Door, and more.pdf",
      "author": "Gayle L. McDowell, Mike Mroczka, Aline Lerner, Nil Mamano",
      "user_id": "",
      "page_start": 17,
      "page_end": 70
    }
  ]
}